(function (exports) {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

var debug$1 = createCommonjsModule(function (module, exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = ms;

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms$$1 = curr - (prevTime || curr);
    self.diff = ms$$1;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}
});

var browser$1 = createCommonjsModule(function (module, exports) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug$1;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
});

var color_countries = 'rgb(147,144,252)';
var color_disabled = 'rgb(214, 214, 214)';
var color_sup = 'green';
var color_inf = 'red';
var color_highlight = 'yellow';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var math_abs = Math.abs;
var math_round = Math.round;

function prepareTooltip(parent_svg_elem) {
  var tooltip = parent_svg_elem.append('g').attr('class', 'tooltip').style('display', 'none');

  tooltip.append('rect').attrs({ width: 50, height: 40, fill: 'white' }).style('opacity', 0.5);

  tooltip.append('text').attrs({ class: 'id_feature', x: 25, dy: '1.2em', 'font-size': '14px' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature1',
    x: 25,
    dy: '2.4em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature2',
    x: 25,
    dy: '3.5em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature3',
    x: 25,
    dy: '4.6em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature4',
    x: 25,
    dy: '5.7em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  return tooltip;
}

function unbindUI() {
  // Removes the current behavior corresponding to clicking on the left menu:
  d3.selectAll('span.filter_v').on('click', null);
  d3.selectAll('span.target_region').on('click', null);
  d3.selectAll('span.label_chk').on('click', null);

  // Remove the table:
  d3.select('.dataTable-wrapper').remove();

  // Unbind buttons on the top of the map:
  d3.select('#header_map').selectAll('img').on('click', null);

  // Remove the selection menu (or buttons) under the chart:
  d3.select('#bar_section > #menu_selection').remove();

  // Removes the current behavior corresponding to clicking on the top menu:
  d3.selectAll('.type_chart.title_menu').on('click', null);

  // Removes the current behavior corresponding to pressing the Control key:
  document.onkeyup = null;
  document.onkeydown = null;
}

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} test_value - The value to be compared to the value of "my region".
* @param {Number} ref_value - The value of my region.
* @param {Boolean} serie_inversed - Whether the serie is inversed or not in the current chart.
* @return {String} - A string containing the color to be used for this value.
*
*/
var comp = function comp(test_value, ref_value, serie_inversed) {
  if (test_value < ref_value) {
    return serie_inversed ? color_sup : color_inf;
  }
  return serie_inversed ? color_inf : color_sup;
};

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} val1 - The value to be compared to the value of "my region" for the 1st variable.
* @param {Number} val2 - The value to be compared to the value of "my region" for the 2nd variable.
* @param {Number} ref_val1 - The value of my region for he first variable.
* @param {Number} ref_val2 - The value of my region for the second variable.
* @param {Boolean} xInversed - Whether the serie is inversed on the x axis in the current chart.
* @param {Boolean} yInversed - Whether the serie is inversed on the y axis in the current chart.
* @return {String} - A string containing the color to be used for theses values.
*
*/
var comp2 = function comp2(val1, val2, ref_val1, ref_val2, xInversed, yInversed) {
  if (val1 < ref_val1 && !xInversed || val1 > ref_val1 && xInversed) {
    // val1 is inferior:
    if (val2 < ref_val2) {
      return yInversed ? 'rgb(160, 30, 160)' : color_inf;
    }
    return yInversed ? color_inf : 'rgb(160, 30, 160)';
  }
  // val1 is superior :
  if (val2 > ref_val2) {
    return !yInversed ? color_sup : 'orange';
  }
  return !yInversed ? 'orange' : color_sup;
};

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

var PropSizer = function PropSizer(fixed_value, fixed_size) {
  var _this = this;

  this.fixed_value = fixed_value;
  var sqrt = Math.sqrt;
  var abs = Math.abs;
  var PI = Math.PI;
  this.smax = fixed_size * fixed_size * PI;
  this.scale = function (val) {
    return sqrt(abs(val) * _this.smax / _this.fixed_value) / PI;
  };
  // this.get_value = size => ((size * PI) ** 2) / this.smax * this.fixed_value;
  // Use Math pow to support browser without ** operator:
  // eslint-disable-next-line no-restricted-properties
  this.get_value = function (size) {
    return Math.pow(size * PI, 2) / _this.smax * _this.fixed_value;
  };
};

var removeDuplicates = function removeDuplicates(arr) {
  var tmp = [];
  for (var i = 0, len_arr = arr.length; i < len_arr; i++) {
    if (tmp.indexOf(arr[i]) === -1) {
      tmp.push(arr[i]);
    }
  }
  return tmp;
};

var getSvgPathType = function getSvgPathType(path) {
  if (path.indexOf('M ') > -1 && path.indexOf(' L ') > -1) {
    return 2;
  }
  return 1;
};

var svgPathToCoords = function svgPathToCoords(path, type_path) {
  if (type_path === 1) {
    return path.slice(1).split('L').map(function (pt) {
      return pt.split(',').map(function (a) {
        return +a;
      });
    });
  }
  return path.slice(2).split(' L ').map(function (pt) {
    return pt.split(' ').map(function (a) {
      return +a;
    });
  });
};

function computePercentileRank(obj, field_name, result_field_name) {
  var values = obj.map(function (d) {
    return d[field_name];
  });
  var len_values = values.length;
  var getPR = function getPR(v) {
    var count = 0;
    for (var i = 0; i < len_values; i++) {
      if (values[i] <= v) {
        count += 1;
      }
    }
    return 100 * count / len_values;
  };
  for (var ix = 0; ix < len_values; ix++) {
    obj[ix][result_field_name] = getPR(values[ix]);
  }
}

var _getPR = function _getPR(v, serie) {
  var count = 0;
  for (var i = 0; i < serie.length; i++) {
    if (serie[i] <= v) {
      count += 1;
    }
  }
  return 100 * count / serie.length;
};

var createMenu = function createMenu(names, variables, study_zones, territorial_mesh) {
  // First section, regions names:
  var title_section1 = document.createElement('p');
  title_section1.className = 'title_menu';
  title_section1.innerHTML = 'Ma région';
  var section1 = document.createElement('div');
  section1.className = 'box';
  section1.style.overflow = 'auto';
  section1.style.height = '180px';
  for (var i = 0, len_i = names.length; i < len_i; i++) {
    var id = names[i].geo;
    var name = names[i].Nom;
    var entry = document.createElement('p');
    entry.innerHTML = '<span value="' + id + '" class=\'target_region square\'></span><span class="label_chk">' + name + '</span>';
    section1.appendChild(entry);
  }

  // Second section, groups of variables:
  var title_section2 = document.createElement('p');
  title_section2.className = 'title_menu';
  title_section2.innerHTML = 'Mon/mes indicateurs';
  var section2 = document.createElement('div');
  section2.className = 'box';
  section2.style.overflow = 'auto';
  section2.style.height = '170px';

  // Filter the "variables" variable to fetch the group names :
  var groups_var = removeDuplicates(variables.map(function (d) {
    return d.group;
  }));

  var _loop = function _loop(_i, _len_i) {
    var gp_name = groups_var[_i];
    var entry = document.createElement('p');
    entry.className = 'name_group_var';
    entry.innerHTML = '<span class=\'square\'></span><span>' + gp_name + '</span>';
    section2.appendChild(entry);
    var div_grp = document.createElement('div');
    div_grp.style.display = _i === 0 ? null : 'none';
    var var_names = variables.filter(function (d) {
      return d.group === gp_name;
    });
    for (var j = 0, len_j = var_names.length; j < len_j; j++) {
      var name_var = var_names[j].name;
      var code_var = var_names[j].ratio;
      var sub_entry = document.createElement('p');
      sub_entry.className = 'small';
      sub_entry.innerHTML = '<span value="' + code_var + '" class="target_variable small_square"></span><span class="label_chk">' + name_var + '</span>';
      div_grp.appendChild(sub_entry);
    }
    section2.appendChild(div_grp);
  };

  for (var _i = 0, _len_i = groups_var.length; _i < _len_i; _i++) {
    _loop(_i, _len_i);
  }

  // Third section, study zone:
  var title_section3 = document.createElement('p');
  title_section3.className = 'title_menu';
  title_section3.innerHTML = 'Mon espace d\'étude';
  var section3 = document.createElement('div');
  section3.className = 'box';
  for (var _i2 = 0, _len_i2 = study_zones.length; _i2 < _len_i2; _i2++) {
    var _entry = document.createElement('p');
    var zone = study_zones[_i2];
    _entry.innerHTML = '<span filter-value="' + zone.id + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span>';
    section3.appendChild(_entry);
  }

  // Fourth section:
  var title_section4 = document.createElement('p');
  title_section4.className = 'title_menu';
  title_section4.innerHTML = 'Maillage territorial d\'analyse';
  var section4 = document.createElement('div');
  section4.className = 'box';
  for (var _i3 = 0, _len_i3 = territorial_mesh.length; _i3 < _len_i3; _i3++) {
    var _entry2 = document.createElement('p');
    var territ_level = territorial_mesh[_i3];
    _entry2.innerHTML = '<span value="' + territ_level.id + '" class=\'square territ_level\'></span><span class="label_chk">' + territ_level.name + '</span>';
    section4.appendChild(_entry2);
  }

  // The actual menu containing these 4 sections:
  var menu = document.getElementById('menu');
  menu.id = 'menu';
  menu.style.width = '340px';
  menu.style.float = 'left';
  menu.appendChild(title_section1);
  menu.appendChild(section1);
  menu.appendChild(title_section2);
  menu.appendChild(section2);
  menu.appendChild(title_section3);
  menu.appendChild(section3);
  menu.appendChild(title_section4);
  menu.appendChild(section4);
};

function makeTopMenu() {
  var top_menu = d3.select('#menutop').styles({ 'font-family': "'Signika', sans-serif", 'font-size': '0.80em', padding: '0.3px' });
  var width_left = document.querySelector('#menu').getBoundingClientRect().width + 25 + 'px';
  var t = document.querySelector('#bar_section').getBoundingClientRect().width;
  var width_central_chart = t + 'px';
  var width_map = document.querySelector('#map_section').getBoundingClientRect().width - 35 + 'px';
  var width_type_comp = (t - 80) / 3 - 2 + 'px';
  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_left, float: 'left', margin: '0 3px' }).html('SÉLECTION');

  var type_chart = top_menu.append('div').attr('class', 'top_section').styles({ width: width_central_chart, float: 'left', margin: '0 3px', 'text-align': 'center' });

  var position = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  position.append('p').attr('class', 'title_type_comp').html('POSITION');

  position.append('span').attrs({ class: 'type_chart chart_t1', value: 'BarChart1' }).html('1 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ScatterPlot2' }).html('2 ind.');

  position.append('span').attr('class', 'type_chart chart_t3 disabled').html('+3 ind.');

  var ressemblance = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  ressemblance.append('p').attr('class', 'title_type_comp').html('RESSEMBLANCES');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t1', value: 'BubbleChart1' }).html('1 ind.');

  ressemblance.append('span').attr('class', 'type_chart chart_t2 disabled').html('+2 ind.');

  var inegalite = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  inegalite.append('p').attr('class', 'title_type_comp').html('INÉGALITÉS');

  inegalite.append('span').attr('class', 'type_chart chart_t1 disabled').html('1 ind.');

  inegalite.append('span').attr('class', 'type_chart chart_t2 disabled').html('+2 ind.');

  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_map, float: 'left', margin: '0 0 0 20px' }).html('QUELLES REGIONS ?');
}

function makeHeaderMapSection() {
  var header_map_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_map').style('margin', '0 0 0 10px');

  header_map_section.insert('img').attrs({
    class: 'map_button active',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  });
}

function makeHeaderChart() {
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').attr('id', 'header_chart').style('margin-bottom', '0').style('clear', 'both');

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/edit-table-insert-row-above.svg',
    id: 'img_table'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    if (document.querySelector('.dataTable-wrapper').style.display) {
      document.querySelector('#svg_map').style.display = 'none';
      document.querySelector('#svg_legend').style.display = 'none';
      document.querySelector('#header_map').style.display = 'none';
      document.querySelector('#header_table').style.display = null;
      document.querySelector('.dataTable-wrapper').style.display = null;
      this.style.filter = 'invert(75%)';
    } else {
      document.querySelector('#svg_map').style.display = null;
      document.querySelector('#svg_legend').style.display = null;
      document.querySelector('#header_map').style.display = null;
      document.querySelector('#header_table').style.display = 'none';
      document.querySelector('.dataTable-wrapper').style.display = 'none';
      this.style.filter = null;
    }
  });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/printer.svg',
    id: 'img_printer'
  }).styles({ margin: '3px', float: 'right' });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/gtk-info.svg',
    id: 'img_info'
  }).styles({ margin: '3px', float: 'right' });
}

var svg_map = d3.select('svg#svg_map');
var margin_map = { top: 0, right: 0, bottom: 0, left: 0 };
var width_map = +svg_map.attr('width') - margin_map.left - margin_map.right;
var height_map = +svg_map.attr('height') - margin_map.top - margin_map.bottom;

var styles = {
  template: { id: 'template', fill: 'rgb(247, 252, 254)', 'fill-opacity': 1 },
  countries: { id: 'countries', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes: { id: 'seaboxes', fill: '#e0faff', 'fill-opacity': 1, stroke: 'black', 'stroke-width': 0.2 },
  remote: { id: 'remote', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes2: { id: 'seaboxes2', fill: 'none', stroke: 'black', 'stroke-width': 0.8 },
  nuts1: { id: 'nuts1', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' }
};

var projection = void 0;
var path = void 0;

function get_bbox_layer_path(name) {
  var bbox_layer = [[Infinity, Infinity], [-Infinity, -Infinity]];
  svg_map.select('#' + name).selectAll('path').each(function (d) {
    var bbox_path = path.bounds(d.geometry);
    bbox_layer[0][0] = bbox_path[0][0] < bbox_layer[0][0] ? bbox_path[0][0] : bbox_layer[0][0];
    bbox_layer[0][1] = bbox_path[0][1] < bbox_layer[0][1] ? bbox_path[0][1] : bbox_layer[0][1];
    bbox_layer[1][0] = bbox_path[1][0] > bbox_layer[1][0] ? bbox_path[1][0] : bbox_layer[1][0];
    bbox_layer[1][1] = bbox_path[1][1] > bbox_layer[1][1] ? bbox_path[1][1] : bbox_layer[1][1];
  });
  return bbox_layer;
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('template');
  var s = 1 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map);
  var t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function map_zoomed() {
  var transform = d3.event.transform;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style('stroke-width', function () {
    return styles[this.id]['stroke-width'] / transform.k + 'px';
  });

  layers.selectAll('g').transition(t).attr('transform', transform);

  svg_map.select('.brush_map').transition(t).attr('transform', transform);
}

var MapSelect = function () {
  function MapSelect(nuts1, countries, remote, template, seaboxes) {
    classCallCheck(this, MapSelect);

    projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], template).reflectY(true);

    path = d3.geoPath().projection(projection);
    var layers = svg_map.append('g').attr('id', 'layers');

    this.zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

    svg_map.call(this.zoom_map);

    layers.append('g').attrs(styles.template).selectAll('path').data(template.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.countries).attr('id', 'countries').selectAll('path').data(countries.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.remote).selectAll('path').data(remote.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes2).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    this.target_layer = layers.append('g').attrs(styles.nuts1);
    this.target_layer.selectAll('path').data(nuts1.features).enter().append('path').attr('fill', function (d) {
      return d.properties[app.current_config.id_field_geom] !== app.current_config.my_region ? color_countries : color_highlight;
    }).attr('d', path);
    app.type_path = getSvgPathType(this.target_layer.select('path').node().getAttribute('d'));
    fitLayer();
    prepareTooltip(svg_map);
    this.bindTooltip();
  }

  createClass(MapSelect, [{
    key: 'resetColors',
    value: function resetColors$$1(current_ids) {
      var id_field_geom = app.current_config.id_field_geom;
      this.target_layer.selectAll('path').attr('fill', function (d) {
        return current_ids.indexOf(d.properties[id_field_geom]) > -1 ? app.colors[d.properties[id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'bindTooltip',
    value: function bindTooltip() {
      this.target_layer.selectAll('path').on('mouseover', function () {
        svg_map.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_map.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_map.select('.tooltip');
        tooltip.select('text.id_feature').text('' + d.properties[app.current_config.id_field_geom]);
        var _ix = void 0,
            nb_val = void 0;
        for (_ix = 0, nb_val = Math.min(app.current_config.ratio.length, 5); _ix < nb_val; _ix++) {
          tooltip.select('text.value_feature' + (_ix + 1)).text(app.current_config.ratio_pretty_name[_ix] + ': ' + math_round(d.properties[app.current_config.ratio[_ix]] * 10) / 10);
        }
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 - _ix * 12] + ')');
      });
    }
  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      svg_map.transition().duration(250).call(this.zoom_map.transform, d3.zoomIdentity);
    }
  }, {
    key: 'resetHeaderButton',
    value: function resetHeaderButton() {
      document.getElementById('img_rect_selec').classList.add('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
    }
  }, {
    key: 'updateLegend',
    value: function updateLegend() {
      d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + app.current_config.my_region_pretty_name);
    }
  }, {
    key: 'removeRectBrush',
    value: function removeRectBrush() {
      svg_map.select('.brush_map').call(this.brush_map.move, null);
    }
  }, {
    key: 'callBrush',
    value: function callBrush(selection) {
      svg_map.select('.brush_map').call(this.brush_map.move, selection);
    }
  }, {
    key: 'bindBrush',
    value: function bindBrush(chart) {
      this.resetHeaderButton();
      this.brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
        chart.handle_brush_map(d3.event);
      });
      svg_map.append('g').attr('class', 'brush_map').call(this.brush_map);
    }
  }, {
    key: 'unbindBrush',
    value: function unbindBrush() {
      this.brush_map = null;
      svg_map.select('.brush_map').remove();
    }
  }]);
  return MapSelect;
}();

function makeSourceSection() {
  var text_zone = d3.select('#svg_legend').append('text').attrs({ y: 32.5, 'text-anchor': 'end' }).style('font-size', '11px').style('font-family', '\'Signika\', sans-serif');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Niveau régional : NUTS 1 (version 2016)');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Origine des données : Eurostat, 2016');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Limite administrative: UMS RIATE, CC-BY-SA');
}

function makeMapLegend() {
  var legend_elems = [{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres régions du filtre de comparaison' }, { color: color_sup, text: 'Rang plus élevé que ma région' }, { color: color_inf, text: 'Rang moins élevé que ma région' }];

  var rect_size = 14;
  var spacing = 4;
  var lgd_height = rect_size + spacing;
  var offset = lgd_height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').append('g').attr('transform', 'translate(50, 40)').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * lgd_height - offset;
    return 'translate(' + [tx, ty] + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attrs({ x: rect_size + spacing, y: rect_size - spacing }).text(function (d) {
    return d.text;
  });
}

var vanillaDataTables = createCommonjsModule(function (module, exports) {
/*!
 *
 * Vanilla-DataTables
 * Copyright (c) 2015-2017 Karl Saunders (http://mobius.ovh)
 * Licensed under MIT (http://www.opensource.org/licenses/mit-license.php)
 *
 * Version: 1.5.0
 *
 */
(function (root, factory) {
    var plugin = "DataTable";

    if (typeof undefined === "function" && undefined.amd) {
        undefined([], factory(plugin));
    } else {
        module.exports = factory(plugin);
    }
})(commonjsGlobal, function (plugin) {
    "use strict";
    var win = window,
        doc = document,
        body = doc.body;

    /**
     * Default configuration
     * @typ {Object}
     */
    var defaultConfig = {
        perPage: 10,
        perPageSelect: [5, 10, 15, 20, 25],

        sortable: true,
        searchable: true,

        // Pagination
        nextPrev: true,
        firstLast: false,
        prevText: "&lsaquo;",
        nextText: "&rsaquo;",
        firstText: "&laquo;",
        lastText: "&raquo;",
        ellipsisText: "&hellip;",
        ascText: "▴",
        descText: "▾",
        truncatePager: true,
        pagerDelta: 2,

        fixedColumns: true,
        fixedHeight: false,

        header: true,
        footer: false,

        // Customise the display text
        labels: {
            placeholder: "Search...", // The search input placeholder
            perPage: "{select} entries per page", // per-page dropdown label
            noRows: "No entries found", // Message shown when there are no search results
            info: "Showing {start} to {end} of {rows} entries" //
        },

        // Customise the layout
        layout: {
            top: "{select}{search}",
            bottom: "{info}{pager}"
        }
    };

    /**
     * Check is item is object
     * @return {Boolean}
     */
    var isObject = function (val) {
        return Object.prototype.toString.call(val) === "[object Object]";
    };

    /**
     * Check is item is array
     * @return {Boolean}
     */
    var isArray = function (val) {
        return Array.isArray(val);
    };

    /**
     * Check for valid JSON string
     * @param  {String}   str
     * @return {Boolean|Array|Object}
     */
    var isJson = function (str) {
        var t = !1;
        try {
            t = JSON.parse(str);
        } catch (e) {
            return !1;
        }
        return !(null === t || (!isArray(t) && !isObject(t))) && t;
    };

    /**
     * Merge objects (reccursive)
     * @param  {Object} r
     * @param  {Object} t
     * @return {Object}
     */
    var extend = function (src, props) {
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var val = props[prop];
                if (val && isObject(val)) {
                    src[prop] = src[prop] || {};
                    extend(src[prop], val);
                } else {
                    src[prop] = val;
                }
            }
        }
        return src;
    };

    /**
     * Iterator helper
     * @param  {(Array|Object)}   arr     Any object, array or array-like collection.
     * @param  {Function}         fn      Callback
     * @param  {Object}           scope   Change the value of this
     * @return {Void}
     */
    var each = function (arr, fn, scope) {
        var n;
        if (isObject(arr)) {
            for (n in arr) {
                if (Object.prototype.hasOwnProperty.call(arr, n)) {
                    fn.call(scope, arr[n], n);
                }
            }
        } else {
            for (n = 0; n < arr.length; n++) {
                fn.call(scope, arr[n], n);
            }
        }
    };

    /**
     * Add event listener to target
     * @param  {Object} el
     * @param  {String} e
     * @param  {Function} fn
     */
    var on = function (el, e, fn) {
        el.addEventListener(e, fn, false);
    };

    /**
     * Create DOM element node
     * @param  {String}   a nodeName
     * @param  {Object}   b properties and attributes
     * @return {Object}
     */
    var createElement = function (a, b) {
        var d = doc.createElement(a);
        if (b && "object" == typeof b) {
            var e;
            for (e in b) {
                if ("html" === e) {
                    d.innerHTML = b[e];
                } else {
                    d.setAttribute(e, b[e]);
                }
            }
        }
        return d;
    };

    var flush = function (el, ie) {
        if (el instanceof NodeList) {
            each(el, function (e) {
                flush(e, ie);
            });
        } else {
            if (ie) {
                while (el.hasChildNodes()) {
                    el.removeChild(el.firstChild);
                }
            } else {
                el.innerHTML = "";
            }
        }
    };

    /**
     * Create button helper
     * @param  {String}   c
     * @param  {Number}   p
     * @param  {String}   t
     * @return {Object}
     */
    var button = function (c, p, t) {
        return createElement("li", {
            class: c,
            html: '<a href="#" data-page="' + p + '">' + t + "</a>"
        });
    };

    /**
     * classList shim
     * @type {Object}
     */
    var classList = {
        add: function (s, a) {
            if (s.classList) {
                s.classList.add(a);
            } else {
                if (!classList.contains(s, a)) {
                    s.className = s.className.trim() + " " + a;
                }
            }
        },
        remove: function (s, a) {
            if (s.classList) {
                s.classList.remove(a);
            } else {
                if (classList.contains(s, a)) {
                    s.className = s.className.replace(
                        new RegExp("(^|\\s)" + a.split(" ").join("|") + "(\\s|$)", "gi"),
                        " "
                    );
                }
            }
        },
        contains: function (s, a) {
            if (s)
                return s.classList ?
                    s.classList.contains(a) :
                    !!s.className &&
                    !!s.className.match(new RegExp("(\\s|^)" + a + "(\\s|$)"));
        }
    };

    /**
     * Bubble sort algorithm
     */
    var sortItems = function (a, b) {
        var c, d;
        if (1 === b) {
            c = 0;
            d = a.length;
        } else {
            if (b === -1) {
                c = a.length - 1;
                d = -1;
            }
        }
        for (var e = !0; e;) {
            e = !1;
            for (var f = c; f != d; f += b) {
                if (a[f + b] && a[f].value > a[f + b].value) {
                    var g = a[f],
                        h = a[f + b],
                        i = g;
                    a[f] = h;
                    a[f + b] = i;
                    e = !0;
                }
            }
        }
        return a;
    };

    /**
     * Pager truncation algorithm
     */
    var truncate = function (a, b, c, d, ellipsis) {
        d = d || 2;
        var j,
            e = 2 * d,
            f = b - d,
            g = b + d,
            h = [],
            i = [];
        if (b < 4 - d + e) {
            g = 3 + e;
        } else if (b > c - (3 - d + e)) {
            f = c - (2 + e);
        }
        for (var k = 1; k <= c; k++) {
            if (1 == k || k == c || (k >= f && k <= g)) {
                var l = a[k - 1];
                classList.remove(l, "active");
                h.push(l);
            }
        }
        each(h, function (c) {
            var d = c.children[0].getAttribute("data-page");
            if (j) {
                var e = j.children[0].getAttribute("data-page");
                if (d - e == 2) i.push(a[e]);
                else if (d - e != 1) {
                    var f = createElement("li", {
                        class: "ellipsis",
                        html: '<a href="#">' + ellipsis + "</a>"
                    });
                    i.push(f);
                }
            }
            i.push(c);
            j = c;
        });

        return i;
    };

    /**
     * Parse data to HTML table
     */
    var dataToTable = function (data) {
        var thead = false,
            tbody = false;

        data = data || this.options.data;

        if (data.headings) {
            thead = createElement("thead");
            var tr = createElement("tr");
            each(data.headings, function (col) {
                var td = createElement("th", {
                    html: col
                });
                tr.appendChild(td);
            });

            thead.appendChild(tr);
        }

        if (data.data) {
            tbody = createElement("tbody");
            each(data.data, function (rows) {
                if (data.headings) {
                    if (data.headings.length !== rows.length) {
                        throw new Error(
                            "The number of rows do not match the number of headings."
                        );
                    }
                }
                var tr = createElement("tr");
                each(rows, function (value) {
                    var td = createElement("td", {
                        html: value
                    });
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
        }

        if (thead) {
            if (this.table.tHead !== null) {
                this.table.removeChild(this.table.tHead);
            }
            this.table.appendChild(thead);
        }

        if (tbody) {
            if (this.table.tBodies.length) {
                this.table.removeChild(this.table.tBodies[0]);
            }
            this.table.appendChild(tbody);
        }
    };

    /**
     * Use moment.js to parse cell contents for sorting
     * @param  {String} content     The datetime string to parse
     * @param  {String} format      The format for moment to use
     * @return {String|Boolean}     Datatime string or false
     */
    var parseDate = function (content, format) {
        var date = false;

        // moment() throws a fit if the string isn't a valid datetime string
        // so we need to supply the format to the constructor (https://momentjs.com/docs/#/parsing/string-format/)

        // Converting to YYYYMMDD ensures we can accurately sort the column numerically

        if (format) {
            switch (format) {
            case "ISO_8601":
                date = moment(content, moment.ISO_8601).format("YYYYMMDD");
                break;
            case "RFC_2822":
                date = moment(content, "ddd, MM MMM YYYY HH:mm:ss ZZ").format("YYYYMMDD");
                break;
            case "MYSQL":
                date = moment(content, "YYYY-MM-DD hh:mm:ss").format("YYYYMMDD");
                break;
            case "UNIX":
                date = moment(content).unix();
                break;
                // User defined format using the data-format attribute or columns[n].format option
            default:
                date = moment(content, format).format("YYYYMMDD");
                break;
            }
        }

        return date;
    };

    /**
     * Columns API
     * @param {Object} instance DataTable instance
     * @param {Mixed} columns  Column index or array of column indexes
     */
    var Columns = function (dt) {
        this.dt = dt;
        return this;
    };

    /**
     * Swap two columns
     * @return {Void}
     */
    Columns.prototype.swap = function (columns) {
        if (columns.length && columns.length === 2) {
            var cols = [];

            // Get the current column indexes
            each(this.dt.headings, function (h, i) {
                cols.push(i);
            });

            var x = columns[0];
            var y = columns[1];
            var b = cols[y];
            cols[y] = cols[x];
            cols[x] = b;

            this.order(cols);
        }
    };

    /**
     * Reorder the columns
     * @return {Array} columns  Array of ordered column indexes
     */
    Columns.prototype.order = function (columns) {

        var a, b, c, d, h, s, cell,
            temp = [
                [],
                [],
                [],
                []
            ],
            dt = this.dt;

        // Order the headings
        each(columns, function (column, x) {
            h = dt.headings[column];
            s = h.getAttribute("data-sortable") !== "false";
            a = h.cloneNode(true);
            a.originalCellIndex = x;
            a.sortable = s;

            temp[0].push(a);

            if (dt.hiddenColumns.indexOf(column) < 0) {
                b = h.cloneNode(true);
                b.originalCellIndex = x;
                b.sortable = s;

                temp[1].push(b);
            }
        });

        // Order the row cells
        each(dt.data, function (row, i) {
            c = row.cloneNode();
            d = row.cloneNode();

            c.dataIndex = d.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                c.searchIndex = d.searchIndex = row.searchIndex;
            }

            // Append the cell to the fragment in the correct order
            each(columns, function (column, x) {
                cell = row.cells[column].cloneNode(true);
                cell.data = row.cells[column].data;
                c.appendChild(cell);

                if (dt.hiddenColumns.indexOf(column) < 0) {
                    cell = row.cells[column].cloneNode(true);
                    cell.data = row.cells[column].data;
                    d.appendChild(cell);
                }
            });

            temp[2].push(c);
            temp[3].push(d);
        });

        dt.headings = temp[0];
        dt.activeHeadings = temp[1];

        dt.data = temp[2];
        dt.activeRows = temp[3];

        // Update
        dt.update();
    };

    /**
     * Hide columns
     * @return {Void}
     */
    Columns.prototype.hide = function (columns) {
        if (columns.length) {
            var dt = this.dt;

            each(columns, function (column) {
                if (dt.hiddenColumns.indexOf(column) < 0) {
                    dt.hiddenColumns.push(column);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Show columns
     * @return {Void}
     */
    Columns.prototype.show = function (columns) {
        if (columns.length) {
            var index, dt = this.dt;

            each(columns, function (column) {
                index = dt.hiddenColumns.indexOf(column);
                if (index > -1) {
                    dt.hiddenColumns.splice(index, 1);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Check column(s) visibility
     * @return {Boolean}
     */
    Columns.prototype.visible = function (columns) {
        var cols, dt = this.dt;

        columns = columns || dt.headings.map(function (th) {
            return th.originalCellIndex;
        });

        if (!isNaN(columns)) {
            cols = dt.hiddenColumns.indexOf(columns) < 0;
        } else if (isArray(columns)) {
            cols = [];
            each(columns, function (column) {
                cols.push(dt.hiddenColumns.indexOf(column) < 0);
            });
        }

        return cols;
    };

    /**
     * Add a new column
     * @param {Object} data
     */
    Columns.prototype.add = function (data) {
        var that = this,
            td, th = document.createElement("th");

        if (!this.dt.headings.length) {
            this.dt.insert({
                headings: [data.heading],
                data: data.data.map(function (i) {
                    return [i];
                })
            });
            this.rebuild();
            return;
        }

        if (!this.dt.hiddenHeader) {
            if (data.heading.nodeName) {
                th.appendChild(data.heading);
            } else {
                th.innerHTML = data.heading;
            }
        } else {
            th.innerHTML = "";
        }

        this.dt.headings.push(th);

        each(this.dt.data, function (row, i) {
            if (data.data[i]) {
                td = document.createElement("td");

                if (data.data[i].nodeName) {
                    td.appendChild(data.data[i]);
                } else {
                    td.innerHTML = data.data[i];
                }

                td.data = td.innerHTML;

                if (data.render) {
                    td.innerHTML = data.render.call(that, td.data, td, row);
                }

                row.appendChild(td);
            }
        });

        if (data.type) {
            th.setAttribute("data-type", data.type);
        }
        if (data.format) {
            th.setAttribute("data-format", data.format);
        }

        if (data.hasOwnProperty("sortable")) {
            th.sortable = data.sortable;
            th.setAttribute("data-sortable", data.sortable === true ? "true" : "false");
        }

        this.rebuild();

        this.dt.renderHeader();
    };

    /**
     * Remove column(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Columns.prototype.remove = function (select) {
        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (column) {
                this.remove(column);
            }, this);
        } else {
            this.dt.headings.splice(select, 1);

            each(this.dt.data, function (row) {
                row.removeChild(row.cells[select]);
            });
        }

        this.rebuild();
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    Columns.prototype.sort = function (column, direction, init) {

        var dt = this.dt;

        // Check column is present
        if (dt.hasHeadings && (column < 1 || column > dt.activeHeadings.length)) {
            return false;
        }

        dt.sorting = true;

        // Convert to zero-indexed
        column = column - 1;

        var dir,
            rows = dt.data,
            alpha = [],
            numeric = [],
            a = 0,
            n = 0,
            th = dt.activeHeadings[column];

        column = th.originalCellIndex;

        each(rows, function (tr) {
            var cell = tr.cells[column];
            var content = cell.data;
            var num = content.replace(/(\$|\,|\s|%)/g, "");

            // Check for date format and moment.js
            if (th.getAttribute("data-type") === "date" && win.moment) {
                var format = false,
                    formatted = th.hasAttribute("data-format");

                if (formatted) {
                    format = th.getAttribute("data-format");
                }

                num = parseDate(content, format);
            }

            if (parseFloat(num) == num) {
                numeric[n++] = {
                    value: Number(num),
                    row: tr
                };
            } else {
                alpha[a++] = {
                    value: content,
                    row: tr
                };
            }
        });

        /* Sort according to direction (ascending or descending) */
        var top, btm;
        if (classList.contains(th, "asc") || direction == "asc") {
            top = sortItems(alpha, -1);
            btm = sortItems(numeric, -1);
            dir = "descending";
            classList.remove(th, "asc");
            classList.add(th, "desc");
        } else {
            top = sortItems(numeric, 1);
            btm = sortItems(alpha, 1);
            dir = "ascending";
            classList.remove(th, "desc");
            classList.add(th, "asc");
        }

        /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */
        if (dt.lastTh && th != dt.lastTh) {
            classList.remove(dt.lastTh, "desc");
            classList.remove(dt.lastTh, "asc");
        }

        dt.lastTh = th;

        /* Reorder the table */
        rows = top.concat(btm);

        dt.data = [];
        var indexes = [];

        each(rows, function (v, i) {
            dt.data.push(v.row);

            if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {
                indexes.push(i);
            }
        }, dt);

        dt.searchData = indexes;

        this.rebuild();

        dt.update();

        if (!init) {
            dt.emit("datatable.sort", column, dir);
        }
    };

    /**
     * Rebuild the columns
     * @return {Void}
     */
    Columns.prototype.rebuild = function () {
        var a, b, c, d, dt = this.dt,
            temp = [];

        dt.activeRows = [];
        dt.activeHeadings = [];

        each(dt.headings, function (th, i) {
            th.originalCellIndex = i;
            th.sortable = th.getAttribute("data-sortable") !== "false";
            if (dt.hiddenColumns.indexOf(i) < 0) {
                dt.activeHeadings.push(th);
            }
        }, this);

        // Loop over the rows and reorder the cells
        each(dt.data, function (row, i) {
            a = row.cloneNode();
            b = row.cloneNode();

            a.dataIndex = b.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                a.searchIndex = b.searchIndex = row.searchIndex;
            }

            // Append the cell to the fragment in the correct order
            each(row.cells, function (cell) {
                c = cell.cloneNode(true);
                c.data = cell.data;
                a.appendChild(c);

                if (dt.hiddenColumns.indexOf(cell.cellIndex) < 0) {
                    d = cell.cloneNode(true);
                    d.data = cell.data;
                    b.appendChild(d);
                }
            });

            // Append the fragment with the ordered cells
            temp.push(a);
            dt.activeRows.push(b);
        });

        dt.data = temp;

        dt.update();
    };

    /**
     * Rows API
     * @param {Object} instance DataTable instance
     * @param {Array} rows
     */
    var Rows = function (dt, rows) {
        this.dt = dt;
        this.rows = rows;

        return this;
    };

    /**
     * Build a new row
     * @param  {Array} row
     * @return {HTMLElement}
     */
    Rows.prototype.build = function (row) {
        var td, tr = createElement("tr");

        var headings = this.dt.headings;

        if (!headings.length) {
            headings = row.map(function () {
                return "";
            });
        }

        each(headings, function (h, i) {
            td = createElement("td");

            // Fixes #29
            if (!row[i] && !row[i].length) {
                row[i] = "";
            }

            td.innerHTML = row[i];

            td.data = row[i];

            tr.appendChild(td);
        });

        return tr;
    };

    Rows.prototype.render = function (row) {
        return row;
    };

    /**
     * Add new row
     * @param {Array} select
     */
    Rows.prototype.add = function (data) {

        if (isArray(data)) {
            var dt = this.dt;
            // Check for multiple rows
            if (isArray(data[0])) {
                each(data, function (row, i) {
                    dt.data.push(this.build(row));
                }, this);
            } else {
                dt.data.push(this.build(data));
            }

            this.update();

            dt.columns().rebuild();
        }
    };

    /**
     * Remove row(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Rows.prototype.remove = function (select) {

        var dt = this.dt;

        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (row, i) {
                dt.data.splice(row, 1);
            });
        } else {
            dt.data.splice(select, 1);
        }

        this.update();
        dt.columns().rebuild();
    };

    /**
     * Update row indexes
     * @return {Void}
     */
    Rows.prototype.update = function () {
        each(this.dt.data, function (row, i) {
            row.dataIndex = i;
        });
    };

    ////////////////////
    //    MAIN LIB    //
    ////////////////////

    var DataTable = function (table, options) {
        this.initialized = false;

        // user options
        this.options = extend(defaultConfig, options);

        if (typeof table === "string") {
            var selector = table;
            table = document.querySelector(table);

            if (!table) {
                throw new Error("The element '" + selector + "' can not be found.");
            }
        }

        if (table.tagName.toLowerCase() !== "table") {
            throw new Error("The selected element is not a table.");
        }

        this.initialLayout = table.innerHTML;
        this.initialSortable = this.options.sortable;

        // Disable manual sorting if no header is present (#4)
        if (!this.options.header) {
            this.options.sortable = false;
        }

        if (table.tHead === null) {
            if (!this.options.data ||
                (this.options.data && !this.options.data.headings)
            ) {
                this.options.sortable = false;
            }
        }

        if (table.tBodies.length && !table.tBodies[0].rows.length) {
            if (this.options.data) {
                if (!this.options.data.data) {
                    throw new Error(
                        "You seem to be using the data option, but you've not defined any rows."
                    );
                }
            }
        }

        this.table = table;

        this.init();
    };

    var proto = DataTable.prototype;

    /**
     * Initialize the instance
     * @param  {Object} options
     * @return {Void}
     */
    proto.init = function (options) {
        if (this.initialized || classList.contains(this.table, "dataTable-table")) {
            return false;
        }

        var that = this;

        this.options = extend(this.options, options || {});

        // IE detection
        this.isIE = !!/(msie|trident)/i.test(navigator.userAgent);

        this.currentPage = 1;
        this.onFirstPage = true;

        this.hiddenColumns = [];
        this.columnRenderers = [];
        this.selectedColumns = [];

        this.render();

        setTimeout(function () {
            that.emit("datatable.init");
            that.initialized = true;
        }, 10);
    };

    /**
     * Render the instance
     * @param  {String} type
     * @return {Void}
     */
    proto.render = function (type) {
        if (type) {
            switch (type) {
            case "page":
                this.renderPage();
                break;
            case "pager":
                this.renderPager();
                break;
            case "header":
                this.renderHeader();
                break;
            }

            return false;
        }

        var that = this,
            o = that.options,
            template = "";

        // Convert data to HTML
        if (o.data) {
            dataToTable.call(that);
        }

        if (o.ajax) {
            var ajax = o.ajax;
            var xhr = new XMLHttpRequest();

            var xhrProgress = function (e) {
                that.emit("datatable.ajax.progress", e, xhr);
            };

            var xhrLoad = function (e) {
                if (xhr.readyState === 4) {
                    that.emit("datatable.ajax.loaded", e, xhr);

                    if (xhr.status === 200) {
                        var obj = {};
                        obj.data = ajax.load ? ajax.load.call(that, xhr) : xhr.responseText;

                        obj.type = "json";

                        if (ajax.content && ajax.content.type) {
                            obj.type = ajax.content.type;

                            obj = extend(obj, ajax.content);
                        }

                        that.import(obj);

                        that.setColumns(true);

                        that.emit("datatable.ajax.success", e, xhr);
                    } else {
                        that.emit("datatable.ajax.error", e, xhr);
                    }
                }
            };

            var xhrFailed = function (e) {
                that.emit("datatable.ajax.error", e, xhr);
            };

            var xhrCancelled = function (e) {
                that.emit("datatable.ajax.abort", e, xhr);
            };

            on(xhr, "progress", xhrProgress);
            on(xhr, "load", xhrLoad);
            on(xhr, "error", xhrFailed);
            on(xhr, "abort", xhrCancelled);

            that.emit("datatable.ajax.loading", xhr);

            xhr.open("GET", typeof ajax === "string" ? o.ajax : o.ajax.url);
            xhr.send();
        }

        // Store references
        that.body = that.table.tBodies[0];
        that.head = that.table.tHead;
        that.foot = that.table.tFoot;

        if (!that.body) {
            that.body = createElement("tbody");

            that.table.appendChild(that.body);
        }

        that.hasRows = that.body.rows.length > 0;

        // Make a tHead if there isn't one (fixes #8)
        if (!that.head) {
            var h = createElement("thead");
            var t = createElement("tr");

            if (that.hasRows) {
                each(that.body.rows[0].cells, function () {
                    t.appendChild(createElement("th"));
                });

                h.appendChild(t);
            }

            that.head = h;

            that.table.insertBefore(that.head, that.body);

            that.hiddenHeader = !o.ajax;
        }

        that.headings = [];
        that.hasHeadings = that.head.rows.length > 0;

        if (that.hasHeadings) {
            that.header = that.head.rows[0];
            that.headings = [].slice.call(that.header.cells);
        }

        // Header
        if (!o.header) {
            if (that.head) {
                that.table.removeChild(that.table.tHead);
            }
        }

        // Footer
        if (o.footer) {
            if (that.head && !that.foot) {
                that.foot = createElement("tfoot", {
                    html: that.head.innerHTML
                });
                that.table.appendChild(that.foot);
            }
        } else {
            if (that.foot) {
                that.table.removeChild(that.table.tFoot);
            }
        }

        // Build
        that.wrapper = createElement("div", {
            class: "dataTable-wrapper dataTable-loading"
        });

        // Template for custom layouts
        template += "<div class='dataTable-top'>";
        template += o.layout.top;
        template += "</div>";
        template += "<div class='dataTable-container'></div>";
        template += "<div class='dataTable-bottom'>";
        template += o.layout.bottom;
        template += "</div>";

        // Info placement
        template = template.replace("{info}", "<div class='dataTable-info'></div>");

        // Per Page Select
        if (o.perPageSelect) {
            var wrap = "<div class='dataTable-dropdown'><label>";
            wrap += o.labels.perPage;
            wrap += "</label></div>";

            // Create the select
            var select = createElement("select", {
                class: "dataTable-selector"
            });

            // Create the options
            each(o.perPageSelect, function (val) {
                var selected = val === o.perPage;
                var option = new Option(val, val, selected, selected);
                select.add(option);
            });

            // Custom label
            wrap = wrap.replace("{select}", select.outerHTML);

            // Selector placement
            template = template.replace("{select}", wrap);
        } else {
            template = template.replace("{select}", "");
        }

        // Searchable
        if (o.searchable) {
            var form =
                "<div class='dataTable-search'><input class='dataTable-input' placeholder='" +
                o.labels.placeholder +
                "' type='text'></div>";

            // Search input placement
            template = template.replace("{search}", form);
        } else {
            template = template.replace("{search}", "");
        }

        if (that.hasHeadings) {
            // Sortable
            this.render("header");
        }

        // Add table class
        classList.add(that.table, "dataTable-table");

        // Paginator
        var w = createElement("div", {
            class: "dataTable-pagination"
        });
        var paginator = createElement("ul");
        w.appendChild(paginator);

        // Pager(s) placement
        template = template.replace(/\{pager\}/g, w.outerHTML);

        that.wrapper.innerHTML = template;

        that.container = that.wrapper.querySelector(".dataTable-container");

        that.pagers = that.wrapper.querySelectorAll(".dataTable-pagination");

        that.label = that.wrapper.querySelector(".dataTable-info");

        // Insert in to DOM tree
        that.table.parentNode.replaceChild(that.wrapper, that.table);
        that.container.appendChild(that.table);

        // Store the table dimensions
        that.rect = that.table.getBoundingClientRect();

        // Convert rows to array for processing
        that.data = [].slice.call(that.body.rows);
        that.activeRows = that.data.slice();
        that.activeHeadings = that.headings.slice();

        // Update
        that.update();

        if (!o.ajax) {
            that.setColumns();
        }

        // Fix height
        this.fixHeight();

        // Fix columns
        that.fixColumns();

        // Class names
        if (!o.header) {
            classList.add(that.wrapper, "no-header");
        }

        if (!o.footer) {
            classList.add(that.wrapper, "no-footer");
        }

        if (o.sortable) {
            classList.add(that.wrapper, "sortable");
        }

        if (o.searchable) {
            classList.add(that.wrapper, "searchable");
        }

        if (o.fixedHeight) {
            classList.add(that.wrapper, "fixed-height");
        }

        if (o.fixedColumns) {
            classList.add(that.wrapper, "fixed-columns");
        }

        that.bindEvents();
    };

    /**
     * Render the page
     * @return {Void}
     */
    proto.renderPage = function () {
        if (this.hasRows && this.totalPages) {
            if (this.currentPage > this.totalPages) {
                this.currentPage = 1;
            }

            // Use a fragment to limit touching the DOM
            var index = this.currentPage - 1,
                frag = doc.createDocumentFragment();

            if (this.hasHeadings) {
                flush(this.header, this.isIE);

                each(this.activeHeadings, function (th) {
                    this.header.appendChild(th);
                }, this);
            }

            each(this.pages[index], function (row) {
                frag.appendChild(this.rows().render(row));
            }, this);

            this.clear(frag);

            this.onFirstPage = this.currentPage === 1;
            this.onLastPage = this.currentPage === this.lastPage;
        } else {
            this.clear();
        }

        // Update the info
        var current = 0,
            f = 0,
            t = 0,
            items;

        if (this.totalPages) {
            current = this.currentPage - 1;
            f = current * this.options.perPage;
            t = f + this.pages[current].length;
            f = f + 1;
            items = !!this.searching ? this.searchData.length : this.data.length;
        }

        if (this.label && this.options.labels.info.length) {
            // CUSTOM LABELS
            var string = this.options.labels.info
                .replace("{start}", f)
                .replace("{end}", t)
                .replace("{page}", this.currentPage)
                .replace("{pages}", this.totalPages)
                .replace("{rows}", items);

            this.label.innerHTML = items ? string : "";
        }

        if (this.currentPage == 1) {
            this.fixHeight();
        }
    };

    /**
     * Render the pager(s)
     * @return {Void}
     */
    proto.renderPager = function () {
        flush(this.pagers, this.isIE);

        if (this.totalPages > 1) {
            var c = "pager",
                frag = doc.createDocumentFragment(),
                prev = this.onFirstPage ? 1 : this.currentPage - 1,
                next = this.onlastPage ? this.totalPages : this.currentPage + 1;

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, 1, this.options.firstText));
            }

            // prev button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, prev, this.options.prevText));
            }

            var pager = this.links;

            // truncate the links
            if (this.options.truncatePager) {
                pager = truncate(
                    this.links,
                    this.currentPage,
                    this.pages.length,
                    this.options.pagerDelta,
                    this.options.ellipsisText
                );
            }

            // active page link
            classList.add(this.links[this.currentPage - 1], "active");

            // append the links
            each(pager, function (p) {
                classList.remove(p, "active");
                frag.appendChild(p);
            });

            classList.add(this.links[this.currentPage - 1], "active");

            // next button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, next, this.options.nextText));
            }

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, this.totalPages, this.options.lastText));
            }

            // We may have more than one pager
            each(this.pagers, function (pager) {
                pager.appendChild(frag.cloneNode(true));
            });
        }
    };

    /**
     * Render the header
     * @return {Void}
     */
    proto.renderHeader = function () {
        var that = this;

        that.labels = [];

        if (that.headings && that.headings.length) {
            each(that.headings, function (th, i) {

                that.labels[i] = th.textContent;

                if (classList.contains(th.firstElementChild, "dataTable-sorter")) {
                    th.innerHTML = th.firstElementChild.innerHTML;
                }

                th.sortable = th.getAttribute("data-sortable") !== "false";

                th.originalCellIndex = i;
                if (that.options.sortable && th.sortable) {
                    var link = createElement("a", {
                        href: "#",
                        class: "dataTable-sorter",
                        html: th.innerHTML
                    });

                    th.innerHTML = "";
                    th.setAttribute("data-sortable", "");
                    th.appendChild(link);
                }
            });
        }

        that.fixColumns();
    };

    /**
     * Bind event listeners
     * @return {[type]} [description]
     */
    proto.bindEvents = function () {
        var that = this,
            o = that.options;

        // Per page selector
        if (o.perPageSelect) {
            var selector = that.wrapper.querySelector(".dataTable-selector");
            if (selector) {
                // Change per page
                on(selector, "change", function (e) {
                    o.perPage = parseInt(this.value, 10);
                    that.update();

                    that.fixHeight();

                    that.emit("datatable.perpage", o.perPage);
                });
            }
        }

        // Search input
        if (o.searchable) {
            that.input = that.wrapper.querySelector(".dataTable-input");
            if (that.input) {
                on(that.input, "keyup", function (e) {
                    that.search(this.value);
                });
            }
        }

        // Pager(s) / sorting
        on(that.wrapper, "click", function (e) {
            var t = e.target;
            if (t.nodeName.toLowerCase() === "a") {
                if (t.hasAttribute("data-page")) {
                    that.page(t.getAttribute("data-page"));
                    e.preventDefault();
                } else if (
                    o.sortable &&
                    classList.contains(t, "dataTable-sorter") &&
                    t.parentNode.getAttribute("data-sortable") != "false"
                ) {
                    that.columns().sort(that.activeHeadings.indexOf(t.parentNode) + 1);
                    e.preventDefault();
                }
            }
        });
    };

    /**
     * Set up columns
     * @return {[type]} [description]
     */
    proto.setColumns = function (ajax) {

        var that = this;

        if (!ajax) {
            each(that.data, function (row) {
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });
        }

        // Check for the columns option
        if (that.options.columns && that.headings.length) {

            each(that.options.columns, function (data) {

                // convert single column selection to array
                if (!isArray(data.select)) {
                    data.select = [data.select];
                }

                if (data.hasOwnProperty("render") && typeof data.render === "function") {
                    that.selectedColumns = that.selectedColumns.concat(data.select);

                    that.columnRenderers.push({
                        columns: data.select,
                        renderer: data.render
                    });
                }

                // Add the data attributes to the th elements
                each(data.select, function (column) {
                    var th = that.headings[column];
                    if (data.type) {
                        th.setAttribute("data-type", data.type);
                    }
                    if (data.format) {
                        th.setAttribute("data-format", data.format);
                    }
                    if (data.hasOwnProperty("sortable")) {
                        th.setAttribute("data-sortable", data.sortable);
                    }

                    if (data.hasOwnProperty("hidden")) {
                        if (data.hidden !== false) {
                            that.columns(column).hide();
                        }
                    }

                    if (data.hasOwnProperty("sort") && data.select.length === 1) {
                        that.columns().sort(data.select[0] + 1, data.sort, true);
                    }
                });
            });
        }

        if (that.hasRows) {
            each(that.data, function (row, i) {
                row.dataIndex = i;
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });

            if (that.selectedColumns.length) {
                each(that.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (that.selectedColumns.indexOf(i) > -1) {
                            each(that.columnRenderers, function (o) {
                                if (o.columns.indexOf(i) > -1) {
                                    cell.innerHTML = o.renderer.call(that, cell.data, cell, row);
                                }
                            });
                        }
                    });
                });
            }

            that.columns().rebuild();
        }

        that.render("header");
    };

    /**
     * Destroy the instance
     * @return {void}
     */
    proto.destroy = function () {
        this.table.innerHTML = this.initialLayout;

        // Remove the className
        classList.remove(this.table, "dataTable-table");

        // Remove the containers
        this.wrapper.parentNode.replaceChild(this.table, this.wrapper);

        this.initialized = false;
    };

    /**
     * Update the instance
     * @return {Void}
     */
    proto.update = function () {
        this.paginate(this);
        this.render("page");

        this.links = [];

        var i = this.pages.length;
        while (i--) {
            var num = i + 1;
            this.links[i] = button(i === 0 ? "active" : "", num, num);
        }

        this.sorting = false;

        this.render("pager");

        this.rows().update();

        this.emit("datatable.update");
    };

    /**
     * Sort rows into pages
     * @return {Number}
     */
    proto.paginate = function () {
        var perPage = this.options.perPage,
            rows = this.activeRows;

        if (this.searching) {
            rows = [];

            each(this.searchData, function (index) {
                rows.push(this.activeRows[index]);
            }, this);
        }

        // Check for hidden columns
        this.pages = rows
            .map(function (tr, i) {
                return i % perPage === 0 ? rows.slice(i, i + perPage) : null;
            })
            .filter(function (page) {
                return page;
            });

        this.totalPages = this.lastPage = this.pages.length;

        return this.totalPages;
    };

    /**
     * Fix column widths
     * @return {Void}
     */
    proto.fixColumns = function () {

        if (this.options.fixedColumns && this.activeHeadings && this.activeHeadings.length) {

            var cells,
                hd = false;

            this.columnWidths = [];

            // If we have headings we need only set the widths on them
            // otherwise we need a temp header and the widths need applying to all cells
            if (this.table.tHead) {
                // Reset widths
                each(this.activeHeadings, function (cell) {
                    cell.style.width = "";
                }, this);

                each(this.activeHeadings, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    cell.style.width = w + "%";
                    this.columnWidths[i] = ow;
                }, this);
            } else {
                cells = [];

                // Make temperary headings
                hd = createElement("thead");
                var r = createElement("tr");
                var c = this.table.tBodies[0].rows[0].cells;
                each(c, function () {
                    var th = createElement("th");
                    r.appendChild(th);
                    cells.push(th);
                });

                hd.appendChild(r);
                this.table.insertBefore(hd, this.body);

                var widths = [];
                each(cells, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    widths.push(w);
                    this.columnWidths[i] = ow;
                }, this);

                each(this.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (this.columns(cell.cellIndex).visible())
                            cell.style.width = widths[i] + "%";
                    }, this);
                }, this);

                // Discard the temp header
                this.table.removeChild(hd);
            }
        }
    };

    /**
     * Fix the container height;
     * @return {Void}
     */
    proto.fixHeight = function () {
        if (this.options.fixedHeight) {
            this.container.style.height = null;
            this.rect = this.container.getBoundingClientRect();
            this.container.style.height = this.rect.height + "px";
        }
    };

    /**
     * Perform a search of the data set
     * @param  {string} query
     * @return {void}
     */
    proto.search = function (query) {
        if (!this.hasRows) return false;

        var that = this;

        query = query.toLowerCase();

        this.currentPage = 1;
        this.searching = true;
        this.searchData = [];

        if (!query.length) {
            this.searching = false;
            this.update();
            this.emit("datatable.search", query, this.searchData);
            classList.remove(this.wrapper, "search-results");
            return false;
        }

        this.clear();

        each(this.data, function (row, idx) {
            var inArray = this.searchData.indexOf(row) > -1;

            // https://github.com/Mobius1/Vanilla-DataTables/issues/12
            var doesQueryMatch = query.split(" ").reduce(function (bool, word) {
                var includes = false;

                for (var x = 0; x < row.cells.length; x++) {
                    if (
                        row.cells[x].textContent.toLowerCase().indexOf(word) > -1 &&
                        that.columns(row.cells[x].cellIndex).visible()
                    ) {
                        includes = true;
                        break;
                    }
                }

                return bool && includes;
            }, true);

            if (doesQueryMatch && !inArray) {
                row.searchIndex = idx;
                this.searchData.push(idx);
            } else {
                row.searchIndex = null;
            }
        }, this);

        classList.add(this.wrapper, "search-results");

        if (!that.searchData.length) {
            classList.remove(that.wrapper, "search-results");

            that.setMessage(that.options.labels.noRows);
        } else {
            that.update();
        }

        this.emit("datatable.search", query, this.searchData);
    };

    /**
     * Change page
     * @param  {int} page
     * @return {void}
     */
    proto.page = function (page) {
        // We don't want to load the current page again.
        if (page == this.currentPage) {
            return false;
        }

        if (!isNaN(page)) {
            this.currentPage = parseInt(page, 10);
        }

        if (page > this.pages.length || page < 0) {
            return false;
        }

        this.render("page");
        this.render("pager");

        this.emit("datatable.page", page);
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    proto.sortColumn = function (column, direction) {
        // Use columns API until sortColumn method is removed
        this.columns().sort(column, direction);
    };

    /**
     * Add new row data
     * @param {object} data
     */
    proto.insert = function (data) {

        var that = this,
            rows = [];
        if (isObject(data)) {
            if (data.headings) {
                if (!that.hasHeadings && !that.hasRows) {
                    var tr = createElement("tr"),
                        th;
                    each(data.headings, function (heading) {
                        th = createElement("th", {
                            html: heading
                        });

                        tr.appendChild(th);
                    });
                    that.head.appendChild(tr);

                    that.header = tr;
                    that.headings = [].slice.call(tr.cells);
                    that.hasHeadings = true;

                    // Re-enable sorting if it was disabled due
                    // to missing header
                    that.options.sortable = that.initialSortable;

                    // Allow sorting on new header
                    that.render("header");
                }
            }

            if (data.data && isArray(data.data)) {
                rows = data.data;
            }
        } else if (isArray(data)) {
            each(data, function (row) {
                var r = [];
                each(row, function (cell, heading) {

                    var index = that.labels.indexOf(heading);

                    if (index > -1) {
                        r[index] = cell;
                    }
                });
                rows.push(r);
            });
        }

        if (rows.length) {
            that.rows().add(rows);

            that.hasRows = true;
        }

        that.update();

        that.fixColumns();
    };

    /**
     * Refresh the instance
     * @return {void}
     */
    proto.refresh = function () {
        if (this.options.searchable) {
            this.input.value = "";
            this.searching = false;
        }
        this.currentPage = 1;
        this.onFirstPage = true;
        this.update();

        this.emit("datatable.refresh");
    };

    /**
     * Truncate the table
     * @param  {mixes} html - HTML string or HTMLElement
     * @return {void}
     */
    proto.clear = function (html) {
        if (this.body) {
            flush(this.body, this.isIE);
        }

        var parent = this.body;
        if (!this.body) {
            parent = this.table;
        }

        if (html) {
            if (typeof html === "string") {
                var frag = doc.createDocumentFragment();
                frag.innerHTML = html;
            }

            parent.appendChild(html);
        }
    };

    /**
     * Export table to various formats (csv, txt or sql)
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.export = function (options) {
        if (!this.hasHeadings && !this.hasRows) return false;

        var headers = this.activeHeadings,
            rows = [],
            arr = [],
            i,
            x,
            str,
            link;

        var defaults = {
            download: true,
            skipColumn: [],

            // csv
            lineDelimiter: "\n",
            columnDelimiter: ",",

            // sql
            tableName: "myTable",

            // json
            replacer: null,
            space: 4
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        var o = extend(defaults, options);

        if (o.type) {
            if (o.type === "txt" || o.type === "csv") {
                // Include headings
                rows[0] = this.header;
            }

            // Selection or whole table
            if (o.selection) {
                // Page number
                if (!isNaN(o.selection)) {
                    rows = rows.concat(this.pages[o.selection - 1]);
                } else if (isArray(o.selection)) {
                    // Array of page numbers
                    for (i = 0; i < o.selection.length; i++) {
                        rows = rows.concat(this.pages[o.selection[i] - 1]);
                    }
                }
            } else {
                rows = rows.concat(this.activeRows);
            }

            // Only proceed if we have data
            if (rows.length) {
                if (o.type === "txt" || o.type === "csv") {
                    str = "";

                    for (i = 0; i < rows.length; i++) {
                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += rows[i].cells[x].textContent + o.columnDelimiter;
                            }
                        }
                        // Remove trailing column delimiter
                        str = str.trim().substring(0, str.length - 1);

                        // Apply line delimiter
                        str += o.lineDelimiter;
                    }

                    // Remove trailing line delimiter
                    str = str.trim().substring(0, str.length - 1);

                    if (o.download) {
                        str = "data:text/csv;charset=utf-8," + str;
                    }
                } else if (o.type === "sql") {
                    // Begin INSERT statement
                    str = "INSERT INTO `" + o.tableName + "` (";

                    // Convert table headings to column names
                    for (i = 0; i < headers.length; i++) {
                        // Check for column skip and column visibility
                        if (
                            o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                            this.columns(headers[i].originalCellIndex).visible()
                        ) {
                            str += "`" + headers[i].textContent + "`,";
                        }
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Begin VALUES
                    str += ") VALUES ";

                    // Iterate rows and convert cell data to column values
                    for (i = 0; i < rows.length; i++) {
                        str += "(";

                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += '"' + rows[i].cells[x].textContent + '",';
                            }
                        }

                        // Remove trailing comma
                        str = str.trim().substring(0, str.length - 1);

                        // end VALUES
                        str += "),";
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Add trailing colon
                    str += ";";

                    if (o.download) {
                        str = "data:application/sql;charset=utf-8," + str;
                    }
                } else if (o.type === "json") {
                    // Iterate rows
                    for (x = 0; x < rows.length; x++) {
                        arr[x] = arr[x] || {};
                        // Iterate columns
                        for (i = 0; i < headers.length; i++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                                this.columns(headers[i].originalCellIndex).visible()
                            ) {
                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent;
                            }
                        }
                    }

                    // Convert the array of objects to JSON string
                    str = JSON.stringify(arr, o.replacer, o.space);

                    if (o.download) {
                        str = "data:application/json;charset=utf-8," + str;
                    }
                }

                // Download
                if (o.download) {
                    // Filename
                    o.filename = o.filename || "datatable_export";
                    o.filename += "." + o.type;

                    str = encodeURI(str);

                    // Create a link to trigger the download
                    link = document.createElement("a");
                    link.href = str;
                    link.download = o.filename;

                    // Append the link
                    body.appendChild(link);

                    // Trigger the download
                    link.click();

                    // Remove the link
                    body.removeChild(link);
                }

                return str;
            }
        }

        return false;
    };

    /**
     * Import data to the table
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.import = function (options) {
        var obj = false;
        var defaults = {
            // csv
            lineDelimiter: "\n",
            columnDelimiter: ","
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        options = extend(defaults, options);

        if (options.data.length || isObject(options.data)) {
            // Import CSV
            if (options.type === "csv") {
                obj = {
                    data: []
                };

                // Split the string into rows
                var rows = options.data.split(options.lineDelimiter);

                if (rows.length) {

                    if (options.headings) {
                        obj.headings = rows[0].split(options.columnDelimiter);

                        rows.shift();
                    }

                    each(rows, function (row, i) {
                        obj.data[i] = [];

                        // Split the rows into values
                        var values = row.split(options.columnDelimiter);

                        if (values.length) {
                            each(values, function (value) {
                                obj.data[i].push(value);
                            });
                        }
                    });
                }
            } else if (options.type === "json") {
                var json = isJson(options.data);

                // Valid JSON string
                if (json) {
                    obj = {
                        headings: [],
                        data: []
                    };

                    each(json, function (data, i) {
                        obj.data[i] = [];
                        each(data, function (value, column) {
                            if (obj.headings.indexOf(column) < 0) {
                                obj.headings.push(column);
                            }

                            obj.data[i].push(value);
                        });
                    });
                } else {
                    console.warn("That's not valid JSON!");
                }
            }

            if (isObject(options.data)) {
                obj = options.data;
            }

            if (obj) {
                // Add the rows
                this.insert(obj);
            }
        }

        return false;
    };
    /**
     * Print the table
     * @return {void}
     */
    proto.print = function () {
        var headings = this.activeHeadings;
        var rows = this.activeRows;
        var table = createElement("table");
        var thead = createElement("thead");
        var tbody = createElement("tbody");

        var tr = createElement("tr");
        each(headings, function (th) {
            tr.appendChild(
                createElement("th", {
                    html: th.textContent
                })
            );
        });

        thead.appendChild(tr);

        each(rows, function (row) {
            var tr = createElement("tr");
            each(row.cells, function (cell) {
                tr.appendChild(
                    createElement("td", {
                        html: cell.textContent
                    })
                );
            });
            tbody.appendChild(tr);
        });

        table.appendChild(thead);
        table.appendChild(tbody);

        // Open new window
        var w = win.open();

        // Append the table to the body
        w.document.body.appendChild(table);

        // Print
        w.print();
    };

    /**
     * Show a message in the table
     * @param {string} message
     */
    proto.setMessage = function (message) {
        var colspan = 1;

        if (this.hasRows) {
            colspan = this.data[0].cells.length;
        }

        this.clear(
            createElement("tr", {
                html: '<td class="dataTables-empty" colspan="' +
                    colspan +
                    '">' +
                    message +
                    "</td>"
            })
        );
    };

    /**
     * Columns API access
     * @return {Object} new Columns instance
     */
    proto.columns = function (columns) {
        return new Columns(this, columns);
    };

    /**
     * Rows API access
     * @return {Object} new Rows instance
     */
    proto.rows = function (rows) {
        return new Rows(this, rows);
    };

    /**
     * Add custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.on = function (event, callback) {
        this.events = this.events || {};
        this.events[event] = this.events[event] || [];
        this.events[event].push(callback);
    };

    /**
     * Remove custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.off = function (event, callback) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        this.events[event].splice(this.events[event].indexOf(callback), 1);
    };

    /**
     * Fire custom event
     * @param  {String} event
     * @return {Void}
     */
    proto.emit = function (event) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        for (var i = 0; i < this.events[event].length; i++) {
            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
        }
    };

    return DataTable;
});
});

function createTableDOM(data, opts, config) {
  var num = config.num,
      denum = config.denum,
      ratio = config.ratio,
      my_region = config.my_region;

  var options = opts || {};
  options.id = options.id || 'myTable';
  var doc = document;
  var nb_features = data.length;
  var column_names = Object.getOwnPropertyNames(data[0]);
  var nb_columns = column_names.length;
  var myTable = doc.createElement('table');
  var headers = doc.createElement('thead');
  var body = doc.createElement('tbody');
  var headers_row = doc.createElement('tr');
  for (var i = 0; i < nb_columns; i++) {
    var cell = doc.createElement('th');
    var col_name = column_names[i];
    if (num.indexOf(col_name) > -1) {
      cell.innerHTML = 'Num<br><span class="small">' + col_name;
    } else if (denum.indexOf(col_name) > -1) {
      cell.innerHTML = 'Denum<br><span class="small">' + col_name;
    } else if (ratio.indexOf(col_name) > -1) {
      cell.innerHTML = 'Ratio<br><span class="small">' + col_name;
    } else if (col_name === 'rang') {
      cell.innerHTML = 'Rang ';
    } else {
      cell.innerHTML = col_name;
    }
    headers_row.appendChild(cell);
  }
  headers.appendChild(headers_row);
  myTable.appendChild(headers);
  for (var _i = 0; _i < nb_features; _i++) {
    var row = doc.createElement('tr');
    row.id = 'row_' + data[_i].id;
    if (data[_i].id === my_region) {
      row.className = color_highlight;
    }
    for (var j = 0; j < nb_columns; j++) {
      var _cell = doc.createElement('td');
      var _col_name = column_names[j];
      if (num.indexOf(_col_name) > -1 || denum.indexOf(_col_name) > -1 || ratio.indexOf(_col_name) > -1) {
        _cell.innerHTML = Math.round(data[_i][_col_name] * 100) / 10;
      } else {
        _cell.innerHTML = data[_i][_col_name];
      }
      row.appendChild(_cell);
    }
    body.appendChild(row);
  }
  myTable.appendChild(body);
  myTable.setAttribute('id', options.id);
  return myTable;
}

function makeTable(data_no_empty, config) {
  d3.select('.dataTable-wrapper').remove();
  var table = createTableDOM(data_no_empty, undefined, config);
  document.querySelector('#map_section').appendChild(table);
  var dataTable = new vanillaDataTables('#myTable');
  var t = document.querySelector('.dataTable-wrapper');
  t.style.marginTop = '20px';
  t.style.display = 'none';
  t.style.fontSize = '0.7em';
  t.querySelector('.dataTable-top').remove();
  Array.prototype.slice.call(t.querySelectorAll('span.small')).forEach(function (el) {
    el.onclick = function () {
      el.parentElement.click();
    }; // eslint-disable-line no-param-reassign
  });
}

/* eslint-disable no-param-reassign */

/**
* Attach the full_dataset Array to the app Object and create a dictionnary
* allowing to obtain territorial units name from their Id.
*
* @param {Array} full_dataset - The dataset as an Array of Object
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {void}
*
*/
function prepare_dataset(full_dataset, app$$1) {
  app$$1.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name for easier lookup:
  app$$1.feature_names = {};
  full_dataset.forEach(function (elem) {
    app$$1.feature_names[elem.geo] = elem.Nom;
  });
}

/**
* Attach the full_dataset Array to the app Object and create a dictionnary
* allowing to obtain territorial units name from their Id.
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {Array} - The filtered data, containing only the requested variables
*   for the feature of the current study zone,
*    without features containing empty ratios.
*
*/
function filterLevelVar(app$$1, filter_id) {
  // Fetch the name(s) of the ratio (and associated num and denum variable),
  // the name of the targeted region and the current level :
  var _app$current_config = app$$1.current_config,
      num = _app$current_config.num,
      denum = _app$current_config.denum,
      ratio = _app$current_config.ratio,
      current_level = _app$current_config.current_level,
      id_field = _app$current_config.id_field,
      filter_key = _app$current_config.filter_key,
      name_field = _app$current_config.name_field,
      my_region = _app$current_config.my_region;


  var all_variables = ratio.concat(num).concat(denum);

  // Prepare the data:
  var temp = void 0;
  if (filter_id) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && filter_id.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.filter(function (ft) {
      return ft[id_field] === my_region;
    })[0][filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      name: ft[name_field]
    };
    for (var i = 0, len_i = all_variables.length; i < len_i; i++) {
      props_feature[all_variables[i]] = +ft[all_variables[i]];
    }
    return props_feature;
  });

  // // Filter data for empty values :
  // const filtered_data = temp.filter(
  //   ft => ratio.map(v => !!ft[v]).every(v => v === true));

  //
  app$$1.current_data = temp;
}

function prepareVariablesInfo(metadata_indicateurs) {
  return metadata_indicateurs.filter(function (ft) {
    return ft['Type statistique'] === 'Ratio';
  }).map(function (ft) {
    return {
      ratio: ft['id'],
      num: ft['id1'] + '_' + ft['Année'],
      denum: ft['id2'] + '_' + ft['Année'],
      name: ft['Nom'] + ' (' + ft['Année'] + ')',
      group: ft['Thème']
    };
  });
}

/**
* Set and apply a new filter (ie. restrict the study zone) on the dataset to be used.
*
* @param {String} filter_type - The name of the filter to use.
* @return {void}
*
*/
function applyFilter(app$$1, filter_type) {
  if (filter_type === 'filter_FR') {
    app$$1.current_config.filter_key = 'PAYS';
    filterLevelVar(app$$1);
  } else if (filter_type === 'no_filter') {
    app$$1.current_config.filter_key = undefined;
    filterLevelVar(app$$1);
  } else {
    app$$1.current_config.filter_key = 'type_test';
    filterLevelVar(app$$1);
  }

  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

// TODO : Doc
function changeRegion(app$$1, id_region) {
  app$$1.current_config.my_region = id_region;
  app$$1.current_config.my_region_pretty_name = app$$1.feature_names[app$$1.current_config.my_region];
  if (app$$1.current_config.filter_key !== undefined) {
    filterLevelVar(app$$1);
  }
  console.log(app$$1);
  // Reset the color to use on the chart/map:
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

function addVariable(app$$1, code_ratio) {
  var variable_info = exports.variables.filter(function (d) {
    return d.ratio === code_ratio;
  })[0];
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num.push(variable_info.num);
  app$$1.current_config.denum.push(variable_info.denum);
  app$$1.current_config.ratio.push(variable_info.ratio);
  app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  filterLevelVar(app$$1);
}

function removeVariable(app$$1, code_ratio) {
  var ix = app$$1.current_config.ratio.indexOf(code_ratio);
  app$$1.current_config.num.splice(ix, 1);
  app$$1.current_config.denum.splice(ix, 1);
  app$$1.current_config.ratio.splice(ix, 1);
  app$$1.current_config.ratio_pretty_name.splice(ix, 1);
  filterLevelVar(app$$1);
}

function resetVariables(app$$1, codes_ratio) {
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num = [];
  app$$1.current_config.denum = [];
  app$$1.current_config.ratio = [];
  app$$1.current_config.ratio_pretty_name = [];

  var _loop = function _loop(i, len) {
    var code_ratio = codes_ratio[i];
    var variable_info = exports.variables.filter(function (d) {
      return d.ratio === code_ratio;
    })[0];
    app$$1.current_config.num.push(variable_info.num);
    app$$1.current_config.denum.push(variable_info.denum);
    app$$1.current_config.ratio.push(variable_info.ratio);
    app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  };

  for (var i = 0, len = codes_ratio.length; i < len; i++) {
    _loop(i, len);
  }
  filterLevelVar(app$$1);
}

// TODO:


function calcPopCompletudeSubset(app$$1, vars) {
  var _app$current_config3 = app$$1.current_config,
      current_level = _app$current_config3.current_level,
      id_field = _app$current_config3.id_field,
      filter_key = _app$current_config3.filter_key,
      my_region = _app$current_config3.my_region,
      pop_field = _app$current_config3.pop_field;

  // Compute the total population stock of the data (within the "study zone" if any):

  var temp = void 0;
  if (filter_key) {
    var my_category = app$$1.full_dataset.filter(function (ft) {
      return ft[id_field] === my_region;
    })[0][filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  var total_pop = 0;
  for (var i = 0, len = temp.length; i < len; i++) {
    total_pop += isNaN(+temp[i][pop_field]) ? 0 : +temp[i][pop_field];
  }
  // Compute the population stock of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      pop: +ft[pop_field]
    };
    for (var _i = 0, len_i = vars.length; _i < len_i; _i++) {
      props_feature[vars[_i]] = +ft[vars[_i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var subset_pop = 0;
  for (var _i2 = 0, _len = temp.length; _i2 < _len; _i2++) {
    subset_pop += isNaN(temp[_i2].pop) ? 0 : temp[_i2].pop;
  }
  // Return the ratio of population values ("complétude") within
  // the study zone selected by the user:
  return Math.round(subset_pop / total_pop * 1000) / 10;
}
/* eslint-enable no-param-reassign */

var svg_bar = d3.select('svg#svg_bar');
var margin = { top: 10, right: 20, bottom: 100, left: 40 };
var margin2 = { top: 430, right: 20, bottom: 15, left: 40 };
var width = +svg_bar.attr('width') - margin.left - margin.right;
var height = +svg_bar.attr('height') - margin.top - margin.bottom;
var height2 = +svg_bar.attr('height') - margin2.top - margin2.bottom;

var nbFt = void 0;
var current_range_brush = [0, 0];
var current_range = [0, 0];
var displayed = void 0;

function getMeanRank(mean_value, ratio_to_use) {
  var mean_rank = app.current_data.map(function (d, i) {
    return [d[ratio_to_use], math_abs(mean_value - d[ratio_to_use]), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

var BarChart1 = function () {
  function BarChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BarChart1);

    this.brushed = function () {
      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return; // ignore brush-by-zoom
      if (!_this.x) {
        console.log('a');return;
      }
      var s = d3.event.selection || _this.x2.range();
      current_range = [math_round(s[0] / (width / nbFt)), math_round(s[1] / (width / nbFt))];
      _this.x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      svg_bar.select('.zoom').call(_this.zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
      _this.update();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(_this.brush_top.move, null);
      _this.brushed_top();
    };

    this.brushed_top = function () {
      if (!_this._focus) {
        console.log('b');return;
      }
      if (!_this.map_elem) {
        console.log('c');return;
      }
      var d3_event = d3.event;
      var ratio_to_use = _this.ratio_to_use;
      var ref_value = _this.ref_value;
      if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
        _this.map_elem.removeRectBrush();
        var s = d3_event.selection;
        current_range_brush = [current_range[0] + math_round(s[0] / (width / displayed)) - 1, current_range[0] + math_round(s[1] / (width / displayed))];
        _this.x.domain(_this.data.slice(current_range_brush[0] + 1, current_range_brush[1]).map(function (ft) {
          return ft.id;
        }));
        app.colors = {};
        _this._focus.selectAll('.bar').style('fill', function (d, i) {
          if (d.id === app.current_config.my_region) {
            app.colors[d.id] = color_highlight;
            return color_highlight;
          } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
            var color = comp(d[ratio_to_use], ref_value, _this.serie_inversed);
            app.colors[d.id] = color;
            return color;
          }
          return color_countries;
        });
        _this.updateMapRegio();
      } else {
        if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
          _this.map_elem.removeRectBrush();
          app.colors = {};
          app.colors[app.current_config.my_region] = color_highlight;
          _this.updateMapRegio();
        }
        _this._focus.selectAll('.bar').style('fill', function (d) {
          return app.colors[d.id] || color_countries;
        });
      }
    };
    app.current_config.nb_var = 1;
    var x = d3.scaleBand().range([0, width]).padding(0.1),
        x2 = d3.scaleBand().range([0, width]).padding(0.1),
        y = d3.scaleLinear().range([height, 0]),
        y2 = d3.scaleLinear().range([height2, 0]);

    var xAxis = d3.axisBottom(x);
    var xAxis2 = d3.axisBottom(x2);
    var yAxis = d3.axisLeft(y);

    this.x = x;
    this.x2 = x2;
    this.y = y;
    this.y2 = y2;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.xAxis2 = xAxis2;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var ratio_to_use = available_ratios[0];
    this.ratio_to_use = ratio_to_use;

    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    });
    this.data.sort(function (a, b) {
      return a[ratio_to_use] - b[ratio_to_use];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.current_ranks = this.data.map(function (d, i) {
      return i + 1;
    });
    nbFt = this.data.length;
    this.mean_value = d3.mean(this.data.map(function (d) {
      return d[ratio_to_use];
    }));
    this.ref_value = this.data.filter(function (ft) {
      return ft.id === app.current_config.my_region;
    })[0][ratio_to_use];
    svg_bar.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width, height: height });

    var focus = svg_bar.append('g').attrs({
      class: 'focus',
      transform: 'translate(' + margin.left + ', ' + margin.top + ')'
    });

    var context = svg_bar.append('g').attrs({
      class: 'context',
      transform: 'translate(' + margin2.left + ', ' + margin2.top + ')'
    });

    this._focus = focus;
    this.context = context;

    x.domain(this.current_ids);
    y.domain([d3.min(this.data, function (d) {
      return d[ratio_to_use];
    }) - 2, d3.max(this.data, function (d) {
      return d[ratio_to_use];
    })]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    var brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on('brush end', this.brushed);

    var brush_top = d3.brushX().extent([[0, 0], [width, height]]).on('brush end', this.brushed_top);

    var zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
    // .on("zoom", zoomed);
    this.brush_top = brush_top;
    this.brush_bottom = brush_bottom;
    this.zoom = zoom;

    focus.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height + ')' }).call(xAxis);

    focus.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    focus.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = focus.append('g');

    var groupe_line_mean = focus.append('g').attr('class', 'mean');
    groupe_line_mean.append('text').attrs({ x: 60, y: y(this.mean_value) + 20 }).styles({
      display: 'none',
      fill: 'red',
      'fill-opacity': '0.8',
      'font-family': '\'Signika\', sans-serif'
    }).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);

    groupe_line_mean.append('line').attrs({
      x1: 0,
      x2: width,
      y1: y(this.mean_value),
      y2: y(this.mean_value),
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px',
      class: 'mean_line'
    }).style('stroke', 'red');

    groupe_line_mean.append('line').attrs({ x1: 0, x2: width, y1: y(this.mean_value), y2: y(this.mean_value), 'stroke-width': '14px', class: 'transp_mean_line' }).style('stroke', 'transparent').on('mouseover', function () {
      groupe_line_mean.select('text').style('display', 'initial');
    }).on('mouseout', function () {
      groupe_line_mean.select('text').style('display', 'none');
    });

    this.updateMiniBars();

    context.append('g').attr('class', 'brush_bottom').call(brush_bottom).call(brush_bottom.move, x.range());

    focus.append('g').attr('class', 'brush_top').call(brush_top).call(brush_top.move, null);

    this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

    this.completude = svg_bar.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    svg_bar.append('image').attrs({
      x: width + margin.left + 5,
      y: 385,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_blue.png',
      id: 'img_reverse'
    }).on('click', function () {
      // this.data = app.current_data.slice();
      if (!_this.serie_inversed) {
        _this.data.sort(function (a, b) {
          return b[_this.ratio_to_use] - a[_this.ratio_to_use];
        });
      } else {
        _this.data.sort(function (a, b) {
          return a[_this.ratio_to_use] - b[_this.ratio_to_use];
        });
      }
      _this.serie_inversed = !_this.serie_inversed;
      x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      x2.domain(_this.data.map(function (ft) {
        return ft.id;
      }));
      // svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity
      //     .scale(width / (current_range[1] - current_range[0]))
      //     .translate(-current_range[0], 0));
      _this.update();
      // this.updateMiniBars();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(brush_top.move, null);
      _this.map_elem.removeRectBrush();
      svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
    });

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar);

    // Deactivate the brush rect selection on the map + on the chart
    // when he user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', 'none');
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', null);
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Create the menu under the chart allowing to use some useful selections
    // (above or below the mean value and above or below my_region)
    var menu_selection = d3.select('#bar_section').append('div').attr('id', 'menu_selection').styles({ padding: '0 10px 10px 10px', 'text-align': 'center' });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('< à la moyenne').on('click', function () {
      return _this.selectBelowMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('> à la moyenne').on('click', function () {
      return _this.selectAboveMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('< à ma région').on('click', function () {
      return _this.selectBelowMyRegion();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('> à ma région').on('click', function () {
      return _this.selectAboveMyRegion();
    });
  }

  createClass(BarChart1, [{
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      displayed = 0;
      var ratio_to_use = this.ratio_to_use;
      var self = this;
      var bar = this.g_bar.selectAll('.bar').data(this.data);

      bar.attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      }).style('display', function (d) {
        var to_display = _this2.x(d.id) != null;
        if (to_display) {
          displayed += 1;
          return 'initial';
        }
        return 'none';
      }).on('mouseover', function () {
        svg_bar.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar.select('.tooltip');
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('' + math_round(d[self.ratio_to_use] * 10) / 10);
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });

      bar.enter().insert('rect', '.mean').attrs(function (d) {
        return {
          class: 'bar',
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      });

      bar.exit().remove();

      this._focus.select('.axis--y').call(this.yAxis);

      var axis_x = this._focus.select('.axis--x').attr('font-size', function () {
        return displayed > 75 ? 6 : 10;
      }).call(this.xAxis);
      axis_x.selectAll('text').attrs(function () {
        if (displayed > 100) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else if (displayed > 20) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else {
          return { dx: '0', dy: '0.71em', transform: null };
        }
      }).style('text-anchor', function () {
        return displayed > 20 ? 'end' : 'middle';
      });

      this.updateMiniBars();
    }
  }, {
    key: 'updateMiniBars',
    value: function updateMiniBars() {
      var _this3 = this;

      var ratio_to_use = this.ratio_to_use;
      var mini_bars = this.context.selectAll('.bar').data(this.data);

      mini_bars.attrs(function (d) {
        return {
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });

      mini_bars.enter().insert('rect').attrs(function (d) {
        return {
          class: 'bar',
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });
      mini_bars.exit().remove();
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      } else {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      } else {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this5 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [mean_rank, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      } else {
        current_range_brush = [0, mean_rank + 1];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this6 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      app.colors = {};
      if (!this.serie_inversed) {
        current_range_brush = [0, mean_rank];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      } else {
        current_range_brush = [mean_rank + 1, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var _this7 = this;

      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      var self = this;
      svg_bar.select('.brush_top').call(self.brush_top.move, null);

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      // const transform = svg_map.node().__zoom;
      // topleft[0] = (topleft[0] - transform.x) / transform.k;
      // topleft[1] = (topleft[1] - transform.y) / transform.k;
      // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
      // bottomright[1] = (bottomright[1] - transform.y) / transform.k;
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, ref_value, this.serie_inversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self._focus.selectAll('.bar').style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      });
      var ids = Object.keys(app.colors);
      var ranks = ids.map(function (d) {
        return _this7.current_ids.indexOf(d.id) > -1;
      }).map(function (d) {
        return _this7.current_ranks[d];
      });
      if (ranks.length > 1) {
        var c1 = ranks[0] - 1;
        var c2 = ranks[ranks.length - 1];
        if (c1 < current_range[0] || c2 > current_range[1]) {
          current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
          svg_bar.select('.brush_bottom').call(self.brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
        }
      } else {
        current_range = [0, this.data.length];
        svg_bar.select('.brush_bottom').call(self.brush_bottom.move, self.x.range());
      }
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        app.colors[id] = undefined;
        d3.select(parent).attr('fill', color_countries);
      } else {
        var color = comp(d.properties[this.ratio_to_use], this.ref_value, this.serie_inversed);
        app.colors[id] = color;
        d3.select(parent).attr('fill', color);
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value = this.data.filter(function (ft) {
          return ft.id === app.current_config.my_region;
        })[0][this.ratio_to_use];
        this.update();
        this.updateContext(0, this.data.length);
        this.updateMapRegio();
        svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x.range());
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
      }
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var y = this.y;
      var ratio_to_use = this.ratio_to_use;
      var grp_mean = this._focus.select('.mean');
      this.mean_value = d3.mean(this.data.map(function (d) {
        return d[ratio_to_use];
      }));
      grp_mean.select('text').attr('y', y(this.mean_value) + 20).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);
      grp_mean.select('.mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
      grp_mean.select('.transp_mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var ratio_to_use = this.ratio_to_use;
      this.data = app.current_data.filter(function (ft) {
        return !!ft[ratio_to_use];
      });

      if (this.serie_inversed) {
        this.data.sort(function (a, b) {
          return b[ratio_to_use] - a[ratio_to_use];
        });
      } else {
        this.data.sort(function (a, b) {
          return a[ratio_to_use] - b[ratio_to_use];
        });
      }
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      nbFt = this.data.length;
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.x.domain(this.current_ids);
      var min_serie = d3.min(this.data, function (d) {
        return d[ratio_to_use];
      });
      var max_serie = d3.max(this.data, function (d) {
        return d[ratio_to_use];
      });
      var offset_y = (max_serie - min_serie) / 20;
      this.y.domain([min_serie - offset_y, max_serie]);
      this.x2.domain(this.x.domain());
      this.y2.domain(this.y.domain());
      this.updateMeanValue();
      this.update();
      this.updateContext(0, this.data.length);

      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.map_elem.removeRectBrush();
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this._focus.remove();
      this.context.remove();
      this.selec_var.remove();
      this.map_elem.unbindBrush();
      this.map_elem = null;
      svg_bar.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }]);
  return BarChart1;
}();

var svg_bar$1 = d3.select('#svg_bar');
var margin$1 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$1 = +svg_bar$1.attr('width') - margin$1.left - margin$1.right;
var height$1 = +svg_bar$1.attr('height') - margin$1.top - margin$1.bottom;

var BubbleChart1 = function () {
  function BubbleChart1(ref_data) {
    classCallCheck(this, BubbleChart1);

    app.current_config.nb_var = 1;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var available_nums = app.current_config.num;
    var ratio_to_use = available_ratios[0];
    var stock_to_use = available_nums[0];
    this.ratio_to_use = ratio_to_use;
    this.stock_to_use = stock_to_use;
    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    }).slice().sort(function (a, b) {
      return b[stock_to_use] - a[stock_to_use];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.highlight_selection = [];
    var draw_group = svg_bar$1.append('g').attr('transform', 'translate(' + margin$1.left + ', ' + margin$1.top + ')');
    draw_group.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height$1 / 2 + ')' });
    this.draw_group = draw_group;

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$1);

    // Compute the "complétude" value for this ratio:
    this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

    // Create the "complétude" text:
    this.completude = svg_bar$1.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var selection_close = d3.select(svg_bar$1.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-100px', 'margin-left': '30px', position: 'relative' }).append('p');

    selection_close.append('span').property('value', 'close').attrs({ value: 'close', class: 'type_selection square checked' });
    selection_close.append('span').attrs({ class: 'label_chk' }).html('Les');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).property('value', 5);
    selection_close.append('span').attrs({ class: 'label_chk' }).html('régions les plus proches');
    this.my_region_value = this.data.filter(function (d) {
      return d.id === app.current_config.my_region;
    }).map(function (d) {
      return d[ratio_to_use];
    })[0];
    this.bindMenu();
    this.applySelection(5, 'close');

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };
  }

  createClass(BubbleChart1, [{
    key: 'applySelection',
    value: function applySelection(nb) {
      var type_selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'close';

      app.colors = {};
      if (nb > 0) {
        var my_region_value = this.my_region_value;
        var ratio_to_use = this.ratio_to_use;

        this.highlight_selection = this.data.map(function (d) {
          return {
            dist: math_abs(d[ratio_to_use] - my_region_value),
            ratio: d[ratio_to_use],
            id: d.id };
        });
        if (type_selection === 'close') {
          this.highlight_selection.sort(function (a, b) {
            return a.dist - b.dist;
          });
          this.highlight_selection = this.highlight_selection.slice(1, nb + 1);
        } else if (type_selection === 'distant') {
          this.highlight_selection.sort(function (a, b) {
            return b.dist - a.dist;
          });
          this.highlight_selection = this.highlight_selection.slice(0, nb);
        }
        this.highlight_selection.forEach(function (elem) {
          app.colors[elem.id] = elem.ratio < my_region_value ? color_inf : color_sup;
        });
      } else {
        this.highlight_selection = [];
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'update',
    value: function update() {
      var self = this;
      var data = self.data;
      var highlight_selection = self.highlight_selection;
      var my_region_value = self.my_region_value;
      var ratio_to_use = self.ratio_to_use;
      var stock_to_use = self.stock_to_use;

      var _min = void 0;
      var _max = void 0;
      if (highlight_selection.length > 0) {
        var dist_min = my_region_value - d3.min(highlight_selection, function (d) {
          return d.ratio;
        });
        var dist_max = d3.max(highlight_selection, function (d) {
          return d.ratio;
        }) - my_region_value;
        var dist_axis = Math.max(dist_min, dist_max);
        var margin_min_max = math_round(dist_axis) / 8;
        _min = my_region_value - dist_axis - margin_min_max;
        _max = my_region_value + dist_axis + margin_min_max;
      } else {
        var _dist_min = my_region_value - d3.min(data, function (d) {
          return d[ratio_to_use];
        });
        var _dist_max = d3.max(data, function (d) {
          return d[ratio_to_use];
        }) - my_region_value;
        var _dist_axis = Math.max(_dist_min, _dist_max);
        var _margin_min_max = math_round(_dist_axis) / 8;
        _min = my_region_value - _dist_axis - _margin_min_max;
        _max = my_region_value + _dist_axis + _margin_min_max;
      }

      var prop_sizer = new PropSizer(d3.max(data, function (d) {
        return d[stock_to_use];
      }), 30);
      var xScale = d3.scaleLinear().domain([_min, _max]).range([0, width$1]);

      this.draw_group.select('g.axis--x').transition().duration(225).call(d3.axisBottom(xScale));

      var bubbles = this.draw_group.selectAll('.bubble').data(data, function (d) {
        return d.id;
      });

      bubbles.transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries
        };
      });

      bubbles.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries
        };
      }).transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          class: 'bubble',
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      });

      bubbles.exit().transition().duration(225).remove();

      this.draw_group.selectAll('.bubble').on('mouseover', function () {
        svg_bar$1.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar$1.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar$1.select('.tooltip');
        var _ratio_to_use = self.ratio_to_use;
        var _stock_to_use = self.stock_to_use;
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('Ratio: ' + Math.round(d[_ratio_to_use] * 10) / 10);
        tooltip.select('text.value_feature2').text('Stock: ' + Math.round(d[_stock_to_use] * 10) / 10);
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      var rect = new Rect(topleft, bottomright);
      var ratio_to_use = this.ratio_to_use;
      app.colors = {};
      self.highlight_selection = [];
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, self.my_region_value, this.serie_inversed);
            app.colors[id] = color;
            self.highlight_selection.push({
              id: id,
              ratio: value,
              dist: math_abs(value - self.my_region_value)
            });
            return color;
          }
        }
        return color_countries;
      });
      self.update();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:
        var id_to_remove = this.highlight_selection.map(function (ft, i) {
          return ft.id === id ? i : null;
        }).filter(function (ft) {
          return ft;
        });
        this.highlight_selection.splice(id_to_remove, 1);
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value = d.properties[this.ratio_to_use];
        var color = comp(value, this.my_region_value, this.serie_inversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
        this.highlight_selection.push({
          id: id,
          ratio: value,
          dist: math_abs(value - this.my_region_value)
        });
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
        this.my_region_value = this.data.filter(function (d) {
          return d.id === app.current_config.my_region;
        })[0][this.ratio_to_use];
        this.applySelection(this.highlight_selection.length, 'close');
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this2 = this;

      this.map_elem.removeRectBrush();
      this.map_elem.updateLegend();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this2.ratio_to_use];
      }).slice().sort(function (a, b) {
        return b[_this2.stock_to_use] - a[_this2.stock_to_use];
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      this.my_region_value = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.ratio_to_use];
      var temp = this.highlight_selection.length;
      this.highlight_selection = [];
      this.applySelection(temp, 'close');
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.stock_to_use = exports.variables.filter(function (d) {
        return d.ratio === code_variable;
      })[0].num;
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        self.map_elem.removeRectBrush();
        var type = this.parentElement.querySelector('.type_selection').value;
        var value = +this.value;
        if (!(value > -1)) {
          this.value = 5;
          value = 5;
        }
        self.applySelection(value, type);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrush();
      this.map_elem = null;
      this.selec_var.remove();
      svg_bar$1.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      d3.select('#menu_selection').select('.nb_select').dispatch('change');
    }
  }]);
  return BubbleChart1;
}();

var contextMenu = function () {
  function contextMenu(items) {
    classCallCheck(this, contextMenu);

    if (items) {
      this.setItems(items);
    } else {
      this.items = [];
    }
  }

  createClass(contextMenu, [{
    key: 'addItem',
    value: function addItem(item) {
      this.items.push({
        name: item.name,
        action: item.action
      });
    }
  }, {
    key: 'removeItem',
    value: function removeItem(name) {
      for (var i = this.items.length - 1; i > 0; i--) {
        if (this.items[i].name === name) {
          this.items.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: 'setItems',
    value: function setItems(items) {
      this.items = [];
      for (var i = 0, nb_items = items.length; i < nb_items; i++) {
        if (items[i].name && items[i].action) {
          this.addItem(items[i]);
        }
      }
    }
  }, {
    key: 'showMenu',
    value: function showMenu(event, parent, items, position) {
      var _this = this;

      if (event.preventDefault) event.preventDefault();
      if (event.stopPropagation) event.stopPropagation();
      if (this.DOMobj) {
        this.hideMenu();
        return;
      }
      if (items) {
        this.setItems(items);
      }

      this.initMenu(parent);
      if (!position) {
        this.DOMobj.style.top = event.clientY + document.body.scrollTop + 'px';
        this.DOMobj.style.left = event.clientX + 'px';
      } else {
        this.DOMobj.style.top = position[1] + 'px';
        this.DOMobj.style.left = position[0] + 'px';
      }
      this.displayed = true;
      setTimeout(function () {
        document.addEventListener('click', function () {
          return _this.hideMenu();
        });
      }, 150);
    }
  }, {
    key: 'hideMenu',
    value: function hideMenu() {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      this.displayed = false;
      document.removeEventListener('click', this.hideMenu);
    }
  }, {
    key: 'initMenu',
    value: function initMenu(parent) {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      var self = this;
      var menu = document.createElement('div');
      var list = document.createElement('ul');
      menu.className = 'context-menu';
      menu.appendChild(list);
      for (var i = 0, nb_item = this.items.length; i < nb_item; i++) {
        var item = document.createElement('li');
        item.setAttribute('data-index', i);
        item.innerHTML = '<span class="context-menu-item-name">' + this.items[i].name + '</span>';
        list.appendChild(item);
        item.onclick = function () {
          var ix = this.getAttribute('data-index');
          self.items[ix].action();
        };
      }
      this.DOMobj = menu;
      parent.appendChild(menu);
    }
  }]);
  return contextMenu;
}();

var svg_bar$2 = d3.select('#svg_bar');
var margin$2 = { top: 20, right: 20, bottom: 40, left: 40 };

var width$2 = +svg_bar$2.attr('width') - margin$2.left - margin$2.right;
var height$2 = +svg_bar$2.attr('height') - margin$2.top - margin$2.bottom;

/** Class representing a scatterplot */
var ScatterPlot2 = function () {
  /**
   * Create a the scatterplot on the `svg_bar` svg element previously defined
   * @param {Array} ref_data - A reference to the subset of the dataset to be used
   * to create the scatterplot (should contain at least two field flagged as ratio
   * in the `app.current_config.ratio` Object.
   */
  function ScatterPlot2(ref_data) {
    var _this = this;

    classCallCheck(this, ScatterPlot2);

    this.brushed = function () {
      if (d3.event && !d3.event.selection) {
        if (d3.event.type === 'end' && d3.event.sourceEvent.type === 'mouseup') {
          _this.map_elem.removeRectBrush();
        }
        app.colors = {};
        app.colors[app.current_config.my_region] = color_highlight;
        _this.update();
        _this.updateMapRegio();
        return;
      }

      resetColors();
      var self = _this;

      var _d3$event$selection = slicedToArray(d3.event.selection, 2),
          topleft = _d3$event$selection[0],
          bottomright = _d3$event$selection[1];

      var range_x = [_this.x.invert(topleft[0]), _this.x.invert(bottomright[0])];
      var range_y = [_this.y.invert(bottomright[1]), _this.y.invert(topleft[1])];
      var t1 = _this.rank_variable1;
      var t2 = _this.rank_variable2;
      _this.data.filter(function (ft) {
        return ft[t1] > range_x[0] && ft[t1] < range_x[1] && ft[t2] > range_y[0] && ft[t2] < range_y[1];
      }).forEach(function (ft) {
        app.colors[ft.id] = comp2(ft[_this.variable1], ft[_this.variable2], self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
      });
      app.colors[app.current_config.my_region] = color_highlight;
      _this.update();
      _this.updateMapRegio();
      _this.map_elem.removeRectBrush();
    };
    app.current_config.nb_var = 2;
    var self = this;
    this.variable1 = app.current_config.ratio[0];
    this.variable2 = app.current_config.ratio[1];
    this.rank_variable1 = 'pr_' + this.variable1;
    this.rank_variable2 = 'pr_' + this.variable2;
    this.pretty_name1 = app.current_config.ratio_pretty_name[0];
    this.pretty_name2 = app.current_config.ratio_pretty_name[1];
    this.data = ref_data.filter(function (ft) {
      return !!ft[_this.variable1] && !!ft[_this.variable2];
    }).map(function (d) {
      var res = { id: d.id };
      res[_this.variable1] = d[_this.variable1];
      res[_this.variable2] = d[_this.variable2];
      return res;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors(this.current_ids);
    this.nbFt = this.data.length;
    computePercentileRank(this.data, this.variable1, this.rank_variable1);
    computePercentileRank(this.data, this.variable2, this.rank_variable2);

    this.x = d3.scaleLinear().range([0, width$2]).nice();
    this.y = d3.scaleLinear().range([height$2, 0]).nice();
    this.xAxis = d3.axisBottom(this.x).ticks(12);
    this.yAxis = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);
    this.xAxis2 = d3.axisBottom(this.x).ticks(12);
    this.yAxis2 = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);

    this.brush = d3.brush().extent([[0, 0], [width$2, height$2]]).on("brush end", this.brushed);

    this.xInversed = false;
    this.yInversed = false;
    this.ref_value1 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable1];
    this.ref_value2 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable2];

    this.plot = svg_bar$2.append('g').attr('transform', 'translate(' + [margin$2.left, margin$2.top] + ')');

    this.plot.append('defs').append('svg:clipPath').attr('id', 'clip').append('svg:rect').attrs({
      width: width$2,
      height: height$2,
      x: 0,
      y: 0
    });

    this.scatter = this.plot.append('g').attr('id', 'scatterplot').attr('clip-path', 'url(#clip)');

    this.x.domain(d3.extent(this.data, function (d) {
      return d[_this.rank_variable1];
    })).nice();
    this.y.domain(d3.extent(this.data, function (d) {
      return d[_this.rank_variable2];
    })).nice();
    this.mean_variable1 = _getPR(d3.mean(this.data.map(function (d) {
      return d[_this.variable1];
    })), this.data.map(function (d) {
      return d[_this.variable1];
    }));
    this.mean_variable2 = _getPR(d3.mean(this.data.map(function (d) {
      return d[_this.variable2];
    })), this.data.map(function (d) {
      return d[_this.variable2];
    }));

    this.makeGrid();

    var groupe_line_mean = this.plot.append('g').attr('clip-path', 'url(#clip)').attr('class', 'mean');
    groupe_line_mean.append('line').attr('clip-path', 'url(#clip)').attrs({
      id: 'mean_x',
      x1: this.x(this.mean_variable1),
      x2: this.x(this.mean_variable1),
      y1: 0,
      y2: width$2,
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).style('stroke', 'red');
    groupe_line_mean.append('line').style('stroke', 'red').attrs({
      id: 'mean_y',
      x1: 0,
      x2: width$2,
      y1: this.y(this.mean_variable2),
      y2: this.y(this.mean_variable2),
      'clip-path': 'url(#clip)',
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    });

    this.plot.append('g').attrs({
      class: 'x axis', id: 'axis--x', transform: 'translate(0, ' + height$2 + ')'
    }).call(this.xAxis);

    this.plot.append('g').attrs({ class: 'y axis', id: 'axis--y', opacity: 0.9 }).call(this.yAxis);

    this.prepareTitleAxis();

    svg_bar$2.append('image').attrs({
      x: margin$2.left + width$2 / 2 - 20 - svg_bar$2.select('#title-axis-x').node().getBoundingClientRect().width / 2,
      y: margin$2.top + height$2 + margin$2.bottom / 2 - 2.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_blue.png',
      id: 'img_reverse_x'
    }).on('click', function () {
      _this.xInversed = !_this.xInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        self.data[i][self.rank_variable1] = 100 - self.data[i][self.rank_variable1];
      }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    svg_bar$2.append('image').attrs({
      x: margin$2.left / 2 - 20,
      y: margin$2.top + height$2 / 2 + svg_bar$2.select('#title-axis-y').node().getBoundingClientRect().height / 2 + 5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_blue.png',
      id: 'img_reverse_y'
    }).on('click', function () {
      _this.yInversed = !_this.yInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        _this.data[i][_this.rank_variable2] = 100 - _this.data[i][_this.rank_variable2];
      }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$2);

    // Compute the "complétude" value for this ratio:
    this.completude_value = calcPopCompletudeSubset(app, [this.variable1, this.variable2]);

    // Create the "complétude" text:
    this.completude = svg_bar$2.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    this.plot.append("g").attr("class", "brush").call(this.brush);

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };
    // this.update();
  }

  /**
   * Create the underlying grey grid
   */


  createClass(ScatterPlot2, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#scatterplot').attrs({
        class: 'grid grid-x', transform: 'translate(0, ' + height$2 + ')'
      }).call(this.xAxis2.tickSize(-height$2).tickFormat(''));
      this.plot.insert('g', '#scatterplot').attr('class', 'grid grid-y').call(this.yAxis2.tickSize(-width$2).tickFormat(''));
      this.plot.selectAll('.grid').selectAll('line').attr('stroke', 'lightgray');
    }

    /**
     * Create the title of the X and Y axis with the associated context menu
     * displayed when they are clicked and allowing to select an other variable
     * for this axis.
     */

  }, {
    key: 'prepareTitleAxis',
    value: function prepareTitleAxis() {
      var _this2 = this;

      var self = this;
      this.menuX = new contextMenu();
      this.menuY = new contextMenu();
      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableY(elem);
          }
        };
      });

      svg_bar$2.append('text').attrs({
        id: 'title-axis-x',
        x: margin$2.left + width$2 / 2,
        y: margin$2.top + height$2 + margin$2.bottom / 2 + 10
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable1).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuY.displayed) {
          self.menuY.hideMenu();
        }
        self.menuX.showMenu(d3.event, document.body, self.itemsX, [bbox.left - 20, bbox.top + 20]);
      });

      svg_bar$2.append('text').attrs({
        id: 'title-axis-y',
        x: margin$2.left / 2,
        y: margin$2.top + height$2 / 2 - 10,
        transform: 'rotate(-90, ' + margin$2.left / 2 + ', ' + (margin$2.top + height$2 / 2) + ')'
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable2).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuX.displayed) {
          self.menuX.hideMenu();
        }
        self.menuY.showMenu(d3.event, document.body, self.itemsY, [bbox.left, bbox.bottom + 10]);
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var self = this;
      var data = self.data;
      var rank_variable1 = this.rank_variable1;
      var rank_variable2 = this.rank_variable2;
      var x = this.x;
      var y = this.y;
      var default_color = 'gray';
      var dots = this.scatter.selectAll('.dot').data(data, function (d) {
        return d.id;
      });

      dots.transition().duration(225).attrs(function (d) {
        return {
          r: 5,
          cx: x(d[rank_variable1]),
          cy: y(d[rank_variable2])
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      });

      dots.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      }).transition().duration(225).attrs(function (d) {
        return {
          r: 5,
          cx: x(d[rank_variable1]),
          cy: y(d[rank_variable2]),
          class: 'dot'
        };
      });

      dots.exit().transition().duration(225).remove();

      dots.on('mouseover', function () {
        svg_bar$2.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar$2.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar$2.select('.tooltip');
        var _var1 = self.variable1;
        var _var2 = self.variable2;
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('Variable 1 : ' + Math.round(d[_var1] * 10) / 10);
        tooltip.select('text.value_feature2').text('Variable 2 : ' + Math.round(d[_var2] * 10) / 10);
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.variable1, this.variable2]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this3 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this3.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      svg_bar$2.select('.brush').call(this.brush.move, null);
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value1 = d.properties[self.variable1];
            var value2 = d.properties[self.variable2];
            var color = comp2(value1, value2, self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self.update();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value1 = d.properties[this.variable1];
        var value2 = d.properties[this.variable2];
        var color = comp2(value1, value2, this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
      }
      this.update();
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var _this4 = this;

      this.mean_variable1 = _getPR(d3.mean(this.data.map(function (d) {
        return d[_this4.variable1];
      })), this.data.map(function (d) {
        return d[_this4.variable1];
      }));
      this.mean_variable2 = _getPR(d3.mean(this.data.map(function (d) {
        return d[_this4.variable2];
      })), this.data.map(function (d) {
        return d[_this4.variable2];
      }));
      var grp_mean = this.plot.select('g.mean');
      grp_mean.select('#mean_x').transition().duration(225).attrs({
        x1: this.x(this.mean_variable1),
        x2: this.x(this.mean_variable1)
      });
      grp_mean.select('#mean_y').transition().duration(225).attrs({
        y1: this.y(this.mean_variable2),
        y2: this.y(this.mean_variable2)
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value1 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable1];
        this.ref_value2 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable2];
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
        this.map_elem.resetColors(this.current_ids);
        this.update();
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this5 = this;

      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this5.variable1] && !!ft[_this5.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this5.variable1] = d[_this5.variable1];
        res[_this5.variable2] = d[_this5.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);

      this.xInversed = false;
      this.yInversed = false;
      var tmp_my_region = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0];
      this.ref_value1 = tmp_my_region[this.variable1];
      this.ref_value2 = tmp_my_region[this.variable2];

      this.x.domain(d3.extent(this.data, function (d) {
        return d[_this5.rank_variable1];
      })).nice();
      this.y.domain(d3.extent(this.data, function (d) {
        return d[_this5.rank_variable2];
      })).nice();
      this.map_elem.removeRectBrush();
      this.updateItemsCtxMenu();
      this.updateMeanValue();
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'changeVariableX',
    value: function changeVariableX(code_variable) {
      var _this6 = this;

      this.variable1 = code_variable;
      this.rank_variable1 = 'pr_' + this.variable1;
      this.pretty_name1 = exports.variables.find(function (ft) {
        return ft.ratio === code_variable;
      }).name;
      svg_bar$2.select('#title-axis-x').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this6.variable1] && !!ft[_this6.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this6.variable1] = d[_this6.variable1];
        res[_this6.variable2] = d[_this6.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value1 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable1];
      this.x.domain(d3.extent(this.data, function (d) {
        return d[_this6.rank_variable1];
      })).nice();
      // this.y.domain(d3.extent(this.data, d => d[this.rank_variable2])).nice();
      this.updateMeanValue();
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'changeVariableY',
    value: function changeVariableY(code_variable) {
      var _this7 = this;

      this.variable2 = code_variable;
      this.rank_variable2 = 'pr_' + this.variable2;
      this.pretty_name2 = exports.variables.find(function (ft) {
        return ft.ratio === code_variable;
      }).name;
      svg_bar$2.select('#title-axis-y').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this7.variable1] && !!ft[_this7.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this7.variable1] = d[_this7.variable1];
        res[_this7.variable2] = d[_this7.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value2 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable2];
      // this.x.domain(d3.extent(this.data, d => d[this.rank_variable1])).nice();
      this.y.domain(d3.extent(this.data, function (d) {
        return d[_this7.rank_variable2];
      })).nice();
      this.updateMeanValue();
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'updateItemsCtxMenu',
    value: function updateItemsCtxMenu() {
      var _this8 = this;

      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this8.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this8.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this8.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this8.changeVariableY(elem);
          }
        };
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this9 = this;

      this.itemsX.push({
        name: code_variable,
        action: function action() {
          return _this9.changeVariableX(code_variable);
        }
      });
      this.itemsY.push({
        name: code_variable,
        action: function action() {
          return _this9.changeVariableY(code_variable);
        }
      });
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this10 = this;

      // Remove the variable from the X and Y list of items:
      for (var i = this.itemsX.length - 1; i > -1; i--) {
        if (this.itemsX[i].name === code_variable) {
          this.itemsX.splice(i, 1);
          break;
        }
      }
      for (var _i = this.itemsY.length - 1; _i > -1; _i--) {
        if (this.itemsY[_i].name === code_variable) {
          this.itemsY.splice(_i, 1);
          break;
        }
      }

      // If the variable to remove was currently used for drawing this chart,
      // set a new variable for this axis and redraw the chart:
      if (code_variable === this.variable1) {
        var new_var_x = this.itemsX.filter(function (ft) {
          return ft.name !== _this10.variable2;
        })[0].name;
        this.changeVariableX(new_var_x);
      } else if (code_variable === this.variable2) {
        var new_var_y = this.itemsY.filter(function (ft) {
          return ft.name !== _this10.variable1;
        })[0].name;
        this.changeVariableY(new_var_y);
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrush();
      this.map_elem = null;
      svg_bar$2.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.updateMapRegio();
      this.update();
    }
  }]);
  return ScatterPlot2;
}();

browser$1('app:log');

exports.variables = void 0; /* = [
                               { ratio: 'PC_CHOM_1524_2015', num: 'CHOM_1524_2015', denum: 'ACT_1524_2015', name: 'Taux de chomage des jeunes (2015)', group: 'Pauvreté / Exclusion sociale' },
                               { ratio: 'PC_CHOM_1574_2015', num: 'CHOM_1574_2015', denum: 'ACT_1574_2015', name: 'Taux de chomage (2015)', group: 'Pauvreté / Exclusion sociale' },
                               { ratio: 'PC_CHOM_LONG_2016', num: 'CHOM_LONG_2016', denum: 'ACT_LONG_2016', name: 'Taux de chômage de longue durée (2016)', group: 'Pauvreté / Exclusion sociale' },
                               { ratio: 'PC_REV_2014', num: 'REV_2014', denum: 'MEN_2014', name: 'Revenu des ménages (2014)', group: 'Pauvreté / Exclusion sociale' },
                               { ratio: 'PC_BREV_HAB_2011', num: 'BREV_2011', denum: 'POP_BREV_2011', name: 'Productions innovantes (2011)', group: 'Activité / Innovation' },
                               { ratio: 'PC_RD_EMP_2013', num: 'RD_EMP_2013', denum: 'POP_RD_EMP_2013', name: 'Part de l\'emploi en R&D (2013)', group: 'Activité / Innovation' },
                               { ratio: 'PC_PIB_HAB_2014', num: 'PC_PIB_HAB_2014', denum: 'POP_PIB_2014', name: 'PIB par habitant (euros)(2014)', group: 'Activité / Innovation' },
                               { ratio: 'PC_ARTIF_AREA_2015', num: 'ARTIF_AREA_2015', denum: 'LC_AREA_2015', name: 'Part des surfaces artificialisées (2015)', group: 'Environnement / Transition écologique' },
                               ];*/

var study_zones = [{ id: 'no_filter', name: 'UE28' }, { id: 'filter_FR', name: 'Filtre national (France)' }, { id: 'filter_param2', name: 'Espace de comparaison n°2' }];

var territorial_mesh = [{ id: 'NUTS1', name: 'NUTS1' }, { id: 'NUTS12stat', name: 'NUTS1/2 (statistique)' }];

var app = {
  // A mapping id -> color, containing the color to use for each
  // feature not using the default color or the disabled color
  colors: {},
  // The filtered dataset (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) selected on the left menu:
  current_data: [],
  // The full dataset provided (containing all the features at any level in one table)
  // Row without data are expected to be empty or to contain the "NA" string.
  full_dataset: [],
  // The ids of the current feature in use (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) used in the current chart; filtered
  // to not contain feature with empty ratio values within the ratios in use).
  current_ids: []
};

function setDefaultConfig() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  // }, level = 'NUTS1') {
  app.current_config = {
    // The name of the field of the dataset containing the ID of each feature:
    id_field: 'geo',
    // The name of the field of the dataset containing the name of each feature:
    name_field: 'Nom',
    // The name of the field of the dataset containing the population of each feature:
    pop_field: 'POP_AGE_T_2016',
    // The name of the field of the geojson layer containing the ID of each feature
    // (these values should match with the values of the "id_field" in the
    // tabular dataset)
    id_field_geom: 'NUTS1_2016',
    num: ['CHOM_1574_2016'],
    denum: ['ACT_1574_2016'],
    ratio: [variable],
    ratio_pretty_name: ['Taux de chômage (15-74 ans) (2016)'],
    // The level currently in use:
    current_level: 1,
    // The ID of the region currently in use:
    my_region: code,
    // The name of the region currently in use:
    my_region_pretty_name: app.feature_names[code],
    // How many ratio on the current chart:
    nb_var: 1
  };
  app.colors[app.current_config.my_region] = color_highlight;
}

function setDefaultConfigMenu() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NUTS1';

  document.querySelector('.target_region.square[value="' + code + '"]').classList.add('checked');
  document.querySelector('.target_variable.small_square[value="' + variable + '"]').classList.add('checked');
  document.querySelector('.filter_v.square[filter-value="no_filter"]').classList.add('checked');
  document.querySelector('.territ_level.square[value="' + level + '"]').classList.add('checked');
}

function resetColors() {
  app.colors = {};
  // for (let i = 0, len_i = current_ids.length; i < len_i; i++) {
  //   app.colors[current_ids[i]] = color_countries;
  // }
  app.colors[app.current_config.my_region] = color_highlight;
}

/**
* Create handlers for user event on the left menu and on the map for charts only
* allowing to use 1 variable.
*
* @param {Object} chart - The chart object.
* @param {Object} map_elem - The map object.
* @return {void}
*
*/
function bindUI_chart(chart, map_elem) {
  // User change the study zone:
  d3.selectAll('span.filter_v').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      applyFilter(app, filter_type);
      makeTable(app.current_data, app.current_config);
      chart.changeStudyZone();
      chart.updateCompletude();
    }
  });

  // User change the targeted region:
  d3.selectAll('span.target_region').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      var id_region = this.getAttribute('value');
      changeRegion(app, id_region);
      // Update the availables ratio on the left menu
      // (this may change the current selected ratio(s) as some variables are
      // not available for some features) and fetch the number of selected
      // variables after that:
      var new_nb_var = updateAvailablesRatios(id_region);
      if (new_nb_var >= app.current_config.nb_var) {
        chart.updateChangeRegion();
      } else {
        // If there fewer selected variables than requested by the current chart,
        // redraw the first (default) kind of chart:
        d3.select('span.chart_t1[value="BarChart1"]').dispatch('click');
      }
    }
  });

  // User click on the name of a group of variables
  // to expand or collapse its content:
  d3.selectAll('.name_group_var').on('click', function () {
    var group_var = this.nextSibling;
    if (group_var.style.display === 'none') {
      group_var.style.display = null;
    } else {
      group_var.style.display = 'none';
    }
  });

  // User click to add/remove a variable from the comparison:
  d3.selectAll('span.target_variable').on('click', function () {
    if (this.classList.contains('disabled')) return;
    var nb_var = void 0;
    if (!this.classList.contains('checked')) {
      this.classList.add('checked');
      var code_variable = this.getAttribute('value');
      var name_variable = exports.variables.find(function (d) {
        return d.ratio === code_variable;
      }).name;
      addVariable(app, code_variable);
      makeTable(app.current_data, app.current_config);
      chart.addVariable(code_variable, name_variable);
      nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
        return !!elem.classList.contains('checked');
      }).length;
    } else {
      // We don't want to let the user remove the variable if
      // it's the only one selected or if the currently displayed
      // chart need a minimum number of variables:
      nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
        return !!elem.classList.contains('checked');
      }).length;
      if (nb_var < app.current_config.nb_var) {
        return;
      }
      var _code_variable = this.getAttribute('value');
      this.classList.remove('checked');
      removeVariable(app, _code_variable);
      chart.removeVariable(_code_variable);
      makeTable(app.current_data, app.current_config);
      nb_var -= 1;
    }
    if (nb_var === 1) {
      // Allow all kind of vizu with 1 variable:
      d3.selectAll('.chart_t1').attr('class', 'type_chart chart_t1');
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2 disabled');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    } else if (nb_var === 2) {
      // Allow all kind of vizu with 2 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    } else if (nb_var > 2) {
      // Allow all kind of vizu with 3 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3');
    }
  });

  // Dispatch a click event on the associated checkbox when the text is clicked:
  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section > #header_map');

  header_map_section.select('#img_rect_selec').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      svg_map.select('.brush_map').style('display', null);
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_zoom').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(map_elem.zoom_map);
      svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
      svg_map.select('.brush_map').style('display', 'none');
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_select').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
      svg_map.select('.brush_map').style('display', 'none');
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    }
  });

  var header_table_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_table').styles({ display: 'none', margin: 'auto', 'text-align': 'right' });

  header_table_section.append('span').attr('class', 'button_blue').html('CSV').on('click', function () {
    var content = ['id,Numérateur,Dénominateur,Ratio,Rang\r\n', app.current_data.map(function (d) {
      return [d.id, d.num, d.denum, d.ratio, d.rang].join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'table.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
  });
  bindTopButtons(chart, map_elem);
}

/**
* Function to handle click on the top menu, in order to choose
* the kind of availables representation
*
*
*
*/
function bindTopButtons(chart, map_elem) {
  d3.selectAll('.type_chart').on('click', function () {
    if (this.classList.contains('disabled')) return;
    chart.remove();
    chart = null; // eslint-disable-line no-param-reassign
    unbindUI();
    map_elem.resetZoom();
    app.colors = {};
    var value = this.getAttribute('value');
    if (value === 'BarChart1') {
      console.log('BarChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BarChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    } else if (value === 'BubbleChart1') {
      console.log('BubbleChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BubbleChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ScatterPlot2') {
      console.log('ScatterPlot2');
      makeTable(app.current_data, app.current_config);
      chart = new ScatterPlot2(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    } else if (value === 'RadarChart3') {
      console.log('RadarChart3');
      makeTable(app.current_data, app.current_config);
      chart = new ScatterPlot2(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    }
  });
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA.csv').defer(d3.json, 'data/cget-nuts1-3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/remote3035.geojson').defer(d3.json, 'data/template3035.geojson').defer(d3.json, 'data/sea_boxes.geojson').defer(d3.csv, 'data/indicateurs_meta.csv').awaitAll(function (error, results) {
    if (error) throw error;

    var _results = slicedToArray(results, 7),
        full_dataset = _results[0],
        nuts1 = _results[1],
        countries = _results[2],
        remote = _results[3],
        template = _results[4],
        seaboxes = _results[5],
        metadata_indicateurs = _results[6];

    exports.variables = prepareVariablesInfo(metadata_indicateurs);
    console.log(exports.variables);
    prepare_dataset(full_dataset, app);
    setDefaultConfig('FRB', 'RT_CHOM_1574', 'NUTS1');
    var features_menu = full_dataset.filter(function (ft) {
      return ft.geo.indexOf('FR') > -1 && +ft.level === app.current_config.current_level;
    });
    createMenu(features_menu, exports.variables, study_zones, territorial_mesh);
    makeTopMenu();
    makeHeaderChart();
    setDefaultConfigMenu('FRB', 'RT_CHOM_1574', 'NUTS1');
    filterLevelVar(app);
    console.log(app);
    var map_elem = new MapSelect(nuts1, countries, remote, template, seaboxes);
    var chart = new BarChart1(app.current_data);
    makeTable(app.current_data, app.current_config);
    makeHeaderMapSection();
    makeSourceSection();
    makeMapLegend();
    bindUI_chart(chart, map_elem);
    map_elem.bindBrush(chart);
    chart.bindMap(map_elem);
  });
}

/**
* Function to select the first variable on the left menu
* (triggered after changing region, if no more variable was selected)
*
* @return {void}
*/
function selectFirstAvailableVar() {
  var menu = document.querySelector('#menu');
  var v = menu.querySelectorAll('.target_variable');
  for (var i = 0; i < v.length; i++) {
    if (!v[i].classList.contains('disabled')) {
      v[i].classList.add('checked');
      return v[i].getAttribute('value');
    }
  }
}

/**
* Function to update the availables ratios in the left menu (after changing region)
* If a selected variable is not available anymore it will be deselected.
* If there selected variable (all the previously selected variables are unavailable for this region)
* the first variable on the menu will be selected.
* If the new number of selected feature is inferior to the number of variables on the current
* chart, a new chart (suitable for only 1 variable) will be selected.
*
*
* @param {String} my_region - The ID of the newly selected region.
* @return {Number} - The new number of selected ratios.
*
*/
function updateAvailablesRatios(my_region) {
  var data_my_feature = app.full_dataset.filter(function (ft) {
    return ft[app.current_config.id_field] === my_region;
  })[0];
  var menu = document.querySelector('#menu');
  var lines = menu.querySelectorAll('.target_variable');
  for (var i = 0, nb_lines = lines.length; i < nb_lines; i++) {
    var code_variable = lines[i].getAttribute('value');
    if (data_my_feature[code_variable] !== undefined && data_my_feature[code_variable] !== 'NA') {
      lines[i].classList.remove('disabled');
      lines[i].nextSibling.classList.remove('disabled');
    } else {
      lines[i].classList.remove('checked');
      lines[i].classList.add('disabled');
      lines[i].nextSibling.classList.add('disabled');
    }
  }
  var new_var = menu.querySelectorAll('.target_variable.checked');
  if (new_var.length !== app.current_config.ratio.length) {
    var new_var_names = void 0;
    if (new_var.length === 0) {
      var name = selectFirstAvailableVar();
      new_var_names = [name];
    } else {
      new_var_names = Array.prototype.slice.call(new_var).map(function (elem) {
        return elem.getAttribute('value');
      });
    }
    resetVariables(app, new_var_names);
  }
  return new_var.length;
}

loadData();

exports.app = app;
exports.resetColors = resetColors;
exports.bindTopButtons = bindTopButtons;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy9tcy9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvZGVidWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2Jyb3dzZXIuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL29wdGlvbnMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2hlbHBlcnMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL21lbnVsZWZ0LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9tZW51dG9wLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9tYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvdmFuaWxsYS1kYXRhdGFibGVzL3NyYy92YW5pbGxhLWRhdGFUYWJsZXMuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL3RhYmxlLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9wcmVwYXJlX2RhdGEuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2NoYXJ0cy9iYXJDaGFydF8xdi5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvY2hhcnRzL2J1YmJsZUNoYXJ0XzF2LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jb250ZXh0TWVudS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvY2hhcnRzL3NjYXR0ZXJQbG90XzJ2LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEhlbHBlcnMuXG4gKi9cblxudmFyIHMgPSAxMDAwO1xudmFyIG0gPSBzICogNjA7XG52YXIgaCA9IG0gKiA2MDtcbnZhciBkID0gaCAqIDI0O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc05hTih2YWwpID09PSBmYWxzZSkge1xuICAgIHJldHVybiBvcHRpb25zLmxvbmcgPyBmbXRMb25nKHZhbCkgOiBmbXRTaG9ydCh2YWwpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcbiAgICAndmFsIGlzIG5vdCBhIG5vbi1lbXB0eSBzdHJpbmcgb3IgYSB2YWxpZCBudW1iZXIuIHZhbD0nICtcbiAgICAgIEpTT04uc3RyaW5naWZ5KHZhbClcbiAgKTtcbn07XG5cbi8qKlxuICogUGFyc2UgdGhlIGdpdmVuIGBzdHJgIGFuZCByZXR1cm4gbWlsbGlzZWNvbmRzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlKHN0cikge1xuICBzdHIgPSBTdHJpbmcoc3RyKTtcbiAgaWYgKHN0ci5sZW5ndGggPiAxMDApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG1hdGNoID0gL14oKD86XFxkKyk/XFwuP1xcZCspICoobWlsbGlzZWNvbmRzP3xtc2Vjcz98bXN8c2Vjb25kcz98c2Vjcz98c3xtaW51dGVzP3xtaW5zP3xtfGhvdXJzP3xocnM/fGh8ZGF5cz98ZHx5ZWFycz98eXJzP3x5KT8kL2kuZXhlYyhcbiAgICBzdHJcbiAgKTtcbiAgaWYgKCFtYXRjaCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbiA9IHBhcnNlRmxvYXQobWF0Y2hbMV0pO1xuICB2YXIgdHlwZSA9IChtYXRjaFsyXSB8fCAnbXMnKS50b0xvd2VyQ2FzZSgpO1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICd5ZWFycyc6XG4gICAgY2FzZSAneWVhcic6XG4gICAgY2FzZSAneXJzJzpcbiAgICBjYXNlICd5cic6XG4gICAgY2FzZSAneSc6XG4gICAgICByZXR1cm4gbiAqIHk7XG4gICAgY2FzZSAnZGF5cyc6XG4gICAgY2FzZSAnZGF5JzpcbiAgICBjYXNlICdkJzpcbiAgICAgIHJldHVybiBuICogZDtcbiAgICBjYXNlICdob3Vycyc6XG4gICAgY2FzZSAnaG91cic6XG4gICAgY2FzZSAnaHJzJzpcbiAgICBjYXNlICdocic6XG4gICAgY2FzZSAnaCc6XG4gICAgICByZXR1cm4gbiAqIGg7XG4gICAgY2FzZSAnbWludXRlcyc6XG4gICAgY2FzZSAnbWludXRlJzpcbiAgICBjYXNlICdtaW5zJzpcbiAgICBjYXNlICdtaW4nOlxuICAgIGNhc2UgJ20nOlxuICAgICAgcmV0dXJuIG4gKiBtO1xuICAgIGNhc2UgJ3NlY29uZHMnOlxuICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgY2FzZSAnc2Vjcyc6XG4gICAgY2FzZSAnc2VjJzpcbiAgICBjYXNlICdzJzpcbiAgICAgIHJldHVybiBuICogcztcbiAgICBjYXNlICdtaWxsaXNlY29uZHMnOlxuICAgIGNhc2UgJ21pbGxpc2Vjb25kJzpcbiAgICBjYXNlICdtc2Vjcyc6XG4gICAgY2FzZSAnbXNlYyc6XG4gICAgY2FzZSAnbXMnOlxuICAgICAgcmV0dXJuIG47XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTaG9ydCBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRTaG9ydChtcykge1xuICBpZiAobXMgPj0gZCkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gZCkgKyAnZCc7XG4gIH1cbiAgaWYgKG1zID49IGgpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGgpICsgJ2gnO1xuICB9XG4gIGlmIChtcyA+PSBtKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBtKSArICdtJztcbiAgfVxuICBpZiAobXMgPj0gcykge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gcykgKyAncyc7XG4gIH1cbiAgcmV0dXJuIG1zICsgJ21zJztcbn1cblxuLyoqXG4gKiBMb25nIGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdExvbmcobXMpIHtcbiAgcmV0dXJuIHBsdXJhbChtcywgZCwgJ2RheScpIHx8XG4gICAgcGx1cmFsKG1zLCBoLCAnaG91cicpIHx8XG4gICAgcGx1cmFsKG1zLCBtLCAnbWludXRlJykgfHxcbiAgICBwbHVyYWwobXMsIHMsICdzZWNvbmQnKSB8fFxuICAgIG1zICsgJyBtcyc7XG59XG5cbi8qKlxuICogUGx1cmFsaXphdGlvbiBoZWxwZXIuXG4gKi9cblxuZnVuY3Rpb24gcGx1cmFsKG1zLCBuLCBuYW1lKSB7XG4gIGlmIChtcyA8IG4pIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKG1zIDwgbiAqIDEuNSkge1xuICAgIHJldHVybiBNYXRoLmZsb29yKG1zIC8gbikgKyAnICcgKyBuYW1lO1xuICB9XG4gIHJldHVybiBNYXRoLmNlaWwobXMgLyBuKSArICcgJyArIG5hbWUgKyAncyc7XG59XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqXG4gKiBFeHBvc2UgYGRlYnVnKClgIGFzIHRoZSBtb2R1bGUuXG4gKi9cblxuZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gY3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Z1snZGVmYXVsdCddID0gY3JlYXRlRGVidWc7XG5leHBvcnRzLmNvZXJjZSA9IGNvZXJjZTtcbmV4cG9ydHMuZGlzYWJsZSA9IGRpc2FibGU7XG5leHBvcnRzLmVuYWJsZSA9IGVuYWJsZTtcbmV4cG9ydHMuZW5hYmxlZCA9IGVuYWJsZWQ7XG5leHBvcnRzLmh1bWFuaXplID0gcmVxdWlyZSgnbXMnKTtcblxuLyoqXG4gKiBUaGUgY3VycmVudGx5IGFjdGl2ZSBkZWJ1ZyBtb2RlIG5hbWVzLCBhbmQgbmFtZXMgdG8gc2tpcC5cbiAqL1xuXG5leHBvcnRzLm5hbWVzID0gW107XG5leHBvcnRzLnNraXBzID0gW107XG5cbi8qKlxuICogTWFwIG9mIHNwZWNpYWwgXCIlblwiIGhhbmRsaW5nIGZ1bmN0aW9ucywgZm9yIHRoZSBkZWJ1ZyBcImZvcm1hdFwiIGFyZ3VtZW50LlxuICpcbiAqIFZhbGlkIGtleSBuYW1lcyBhcmUgYSBzaW5nbGUsIGxvd2VyIG9yIHVwcGVyLWNhc2UgbGV0dGVyLCBpLmUuIFwiblwiIGFuZCBcIk5cIi5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdHRlcnMgPSB7fTtcblxuLyoqXG4gKiBQcmV2aW91cyBsb2cgdGltZXN0YW1wLlxuICovXG5cbnZhciBwcmV2VGltZTtcblxuLyoqXG4gKiBTZWxlY3QgYSBjb2xvci5cbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VcbiAqIEByZXR1cm4ge051bWJlcn1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHNlbGVjdENvbG9yKG5hbWVzcGFjZSkge1xuICB2YXIgaGFzaCA9IDAsIGk7XG5cbiAgZm9yIChpIGluIG5hbWVzcGFjZSkge1xuICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBuYW1lc3BhY2UuY2hhckNvZGVBdChpKTtcbiAgICBoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuICB9XG5cbiAgcmV0dXJuIGV4cG9ydHMuY29sb3JzW01hdGguYWJzKGhhc2gpICUgZXhwb3J0cy5jb2xvcnMubGVuZ3RoXTtcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBkZWJ1Z2dlciB3aXRoIHRoZSBnaXZlbiBgbmFtZXNwYWNlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlXG4gKiBAcmV0dXJuIHtGdW5jdGlvbn1cbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gY3JlYXRlRGVidWcobmFtZXNwYWNlKSB7XG5cbiAgZnVuY3Rpb24gZGVidWcoKSB7XG4gICAgLy8gZGlzYWJsZWQ/XG4gICAgaWYgKCFkZWJ1Zy5lbmFibGVkKSByZXR1cm47XG5cbiAgICB2YXIgc2VsZiA9IGRlYnVnO1xuXG4gICAgLy8gc2V0IGBkaWZmYCB0aW1lc3RhbXBcbiAgICB2YXIgY3VyciA9ICtuZXcgRGF0ZSgpO1xuICAgIHZhciBtcyA9IGN1cnIgLSAocHJldlRpbWUgfHwgY3Vycik7XG4gICAgc2VsZi5kaWZmID0gbXM7XG4gICAgc2VsZi5wcmV2ID0gcHJldlRpbWU7XG4gICAgc2VsZi5jdXJyID0gY3VycjtcbiAgICBwcmV2VGltZSA9IGN1cnI7XG5cbiAgICAvLyB0dXJuIHRoZSBgYXJndW1lbnRzYCBpbnRvIGEgcHJvcGVyIEFycmF5XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldO1xuICAgIH1cblxuICAgIGFyZ3NbMF0gPSBleHBvcnRzLmNvZXJjZShhcmdzWzBdKTtcblxuICAgIGlmICgnc3RyaW5nJyAhPT0gdHlwZW9mIGFyZ3NbMF0pIHtcbiAgICAgIC8vIGFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG4gICAgICBhcmdzLnVuc2hpZnQoJyVPJyk7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIGFyZ3NbMF0gPSBhcmdzWzBdLnJlcGxhY2UoLyUoW2EtekEtWiVdKS9nLCBmdW5jdGlvbihtYXRjaCwgZm9ybWF0KSB7XG4gICAgICAvLyBpZiB3ZSBlbmNvdW50ZXIgYW4gZXNjYXBlZCAlIHRoZW4gZG9uJ3QgaW5jcmVhc2UgdGhlIGFycmF5IGluZGV4XG4gICAgICBpZiAobWF0Y2ggPT09ICclJScpIHJldHVybiBtYXRjaDtcbiAgICAgIGluZGV4Kys7XG4gICAgICB2YXIgZm9ybWF0dGVyID0gZXhwb3J0cy5mb3JtYXR0ZXJzW2Zvcm1hdF07XG4gICAgICBpZiAoJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGZvcm1hdHRlcikge1xuICAgICAgICB2YXIgdmFsID0gYXJnc1tpbmRleF07XG4gICAgICAgIG1hdGNoID0gZm9ybWF0dGVyLmNhbGwoc2VsZiwgdmFsKTtcblxuICAgICAgICAvLyBub3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG4gICAgICAgIGFyZ3Muc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgaW5kZXgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtYXRjaDtcbiAgICB9KTtcblxuICAgIC8vIGFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG4gICAgZXhwb3J0cy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cbiAgICB2YXIgbG9nRm4gPSBkZWJ1Zy5sb2cgfHwgZXhwb3J0cy5sb2cgfHwgY29uc29sZS5sb2cuYmluZChjb25zb2xlKTtcbiAgICBsb2dGbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgfVxuXG4gIGRlYnVnLm5hbWVzcGFjZSA9IG5hbWVzcGFjZTtcbiAgZGVidWcuZW5hYmxlZCA9IGV4cG9ydHMuZW5hYmxlZChuYW1lc3BhY2UpO1xuICBkZWJ1Zy51c2VDb2xvcnMgPSBleHBvcnRzLnVzZUNvbG9ycygpO1xuICBkZWJ1Zy5jb2xvciA9IHNlbGVjdENvbG9yKG5hbWVzcGFjZSk7XG5cbiAgLy8gZW52LXNwZWNpZmljIGluaXRpYWxpemF0aW9uIGxvZ2ljIGZvciBkZWJ1ZyBpbnN0YW5jZXNcbiAgaWYgKCdmdW5jdGlvbicgPT09IHR5cGVvZiBleHBvcnRzLmluaXQpIHtcbiAgICBleHBvcnRzLmluaXQoZGVidWcpO1xuICB9XG5cbiAgcmV0dXJuIGRlYnVnO1xufVxuXG4vKipcbiAqIEVuYWJsZXMgYSBkZWJ1ZyBtb2RlIGJ5IG5hbWVzcGFjZXMuIFRoaXMgY2FuIGluY2x1ZGUgbW9kZXNcbiAqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZXNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gZW5hYmxlKG5hbWVzcGFjZXMpIHtcbiAgZXhwb3J0cy5zYXZlKG5hbWVzcGFjZXMpO1xuXG4gIGV4cG9ydHMubmFtZXMgPSBbXTtcbiAgZXhwb3J0cy5za2lwcyA9IFtdO1xuXG4gIHZhciBzcGxpdCA9ICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycgPyBuYW1lc3BhY2VzIDogJycpLnNwbGl0KC9bXFxzLF0rLyk7XG4gIHZhciBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIGlmICghc3BsaXRbaV0pIGNvbnRpbnVlOyAvLyBpZ25vcmUgZW1wdHkgc3RyaW5nc1xuICAgIG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuICAgIGlmIChuYW1lc3BhY2VzWzBdID09PSAnLScpIHtcbiAgICAgIGV4cG9ydHMuc2tpcHMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMuc3Vic3RyKDEpICsgJyQnKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4cG9ydHMubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gIGV4cG9ydHMuZW5hYmxlKCcnKTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEByZXR1cm4ge0Jvb2xlYW59XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbmZ1bmN0aW9uIGVuYWJsZWQobmFtZSkge1xuICB2YXIgaSwgbGVuO1xuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLnNraXBzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMuc2tpcHNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBmb3IgKGkgPSAwLCBsZW4gPSBleHBvcnRzLm5hbWVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgaWYgKGV4cG9ydHMubmFtZXNbaV0udGVzdChuYW1lKSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBDb2VyY2UgYHZhbGAuXG4gKlxuICogQHBhcmFtIHtNaXhlZH0gdmFsXG4gKiBAcmV0dXJuIHtNaXhlZH1cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGNvZXJjZSh2YWwpIHtcbiAgaWYgKHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gdmFsLnN0YWNrIHx8IHZhbC5tZXNzYWdlO1xuICByZXR1cm4gdmFsO1xufVxuIiwiLyoqXG4gKiBUaGlzIGlzIHRoZSB3ZWIgYnJvd3NlciBpbXBsZW1lbnRhdGlvbiBvZiBgZGVidWcoKWAuXG4gKlxuICogRXhwb3NlIGBkZWJ1ZygpYCBhcyB0aGUgbW9kdWxlLlxuICovXG5cbmV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZGVidWcnKTtcbmV4cG9ydHMubG9nID0gbG9nO1xuZXhwb3J0cy5mb3JtYXRBcmdzID0gZm9ybWF0QXJncztcbmV4cG9ydHMuc2F2ZSA9IHNhdmU7XG5leHBvcnRzLmxvYWQgPSBsb2FkO1xuZXhwb3J0cy51c2VDb2xvcnMgPSB1c2VDb2xvcnM7XG5leHBvcnRzLnN0b3JhZ2UgPSAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lXG4gICAgICAgICAgICAgICAmJiAndW5kZWZpbmVkJyAhPSB0eXBlb2YgY2hyb21lLnN0b3JhZ2VcbiAgICAgICAgICAgICAgICAgID8gY2hyb21lLnN0b3JhZ2UubG9jYWxcbiAgICAgICAgICAgICAgICAgIDogbG9jYWxzdG9yYWdlKCk7XG5cbi8qKlxuICogQ29sb3JzLlxuICovXG5cbmV4cG9ydHMuY29sb3JzID0gW1xuICAnbGlnaHRzZWFncmVlbicsXG4gICdmb3Jlc3RncmVlbicsXG4gICdnb2xkZW5yb2QnLFxuICAnZG9kZ2VyYmx1ZScsXG4gICdkYXJrb3JjaGlkJyxcbiAgJ2NyaW1zb24nXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbmZ1bmN0aW9uIHVzZUNvbG9ycygpIHtcbiAgLy8gTkI6IEluIGFuIEVsZWN0cm9uIHByZWxvYWQgc2NyaXB0LCBkb2N1bWVudCB3aWxsIGJlIGRlZmluZWQgYnV0IG5vdCBmdWxseVxuICAvLyBpbml0aWFsaXplZC4gU2luY2Ugd2Uga25vdyB3ZSdyZSBpbiBDaHJvbWUsIHdlJ2xsIGp1c3QgZGV0ZWN0IHRoaXMgY2FzZVxuICAvLyBleHBsaWNpdGx5XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cucHJvY2VzcyAmJiB3aW5kb3cucHJvY2Vzcy50eXBlID09PSAncmVuZGVyZXInKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvLyBpcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuICAvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuICByZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcbiAgICAvLyBpcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcbiAgICAvLyBpcyBmaXJlZm94ID49IHYzMT9cbiAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcbiAgICAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcbiAgICAvLyBkb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG4gICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZXhwb3J0cy5mb3JtYXR0ZXJzLmogPSBmdW5jdGlvbih2KSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHYpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gJ1tVbmV4cGVjdGVkSlNPTlBhcnNlRXJyb3JdOiAnICsgZXJyLm1lc3NhZ2U7XG4gIH1cbn07XG5cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcbiAgdmFyIHVzZUNvbG9ycyA9IHRoaXMudXNlQ29sb3JzO1xuXG4gIGFyZ3NbMF0gPSAodXNlQ29sb3JzID8gJyVjJyA6ICcnKVxuICAgICsgdGhpcy5uYW1lc3BhY2VcbiAgICArICh1c2VDb2xvcnMgPyAnICVjJyA6ICcgJylcbiAgICArIGFyZ3NbMF1cbiAgICArICh1c2VDb2xvcnMgPyAnJWMgJyA6ICcgJylcbiAgICArICcrJyArIGV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuICBpZiAoIXVzZUNvbG9ycykgcmV0dXJuO1xuXG4gIHZhciBjID0gJ2NvbG9yOiAnICsgdGhpcy5jb2xvcjtcbiAgYXJncy5zcGxpY2UoMSwgMCwgYywgJ2NvbG9yOiBpbmhlcml0JylcblxuICAvLyB0aGUgZmluYWwgXCIlY1wiIGlzIHNvbWV3aGF0IHRyaWNreSwgYmVjYXVzZSB0aGVyZSBjb3VsZCBiZSBvdGhlclxuICAvLyBhcmd1bWVudHMgcGFzc2VkIGVpdGhlciBiZWZvcmUgb3IgYWZ0ZXIgdGhlICVjLCBzbyB3ZSBuZWVkIHRvXG4gIC8vIGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgaW5kZXggdG8gaW5zZXJ0IHRoZSBDU1MgaW50b1xuICB2YXIgaW5kZXggPSAwO1xuICB2YXIgbGFzdEMgPSAwO1xuICBhcmdzWzBdLnJlcGxhY2UoLyVbYS16QS1aJV0vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICBpZiAoJyUlJyA9PT0gbWF0Y2gpIHJldHVybjtcbiAgICBpbmRleCsrO1xuICAgIGlmICgnJWMnID09PSBtYXRjaCkge1xuICAgICAgLy8gd2Ugb25seSBhcmUgaW50ZXJlc3RlZCBpbiB0aGUgKmxhc3QqICVjXG4gICAgICAvLyAodGhlIHVzZXIgbWF5IGhhdmUgcHJvdmlkZWQgdGhlaXIgb3duKVxuICAgICAgbGFzdEMgPSBpbmRleDtcbiAgICB9XG4gIH0pO1xuXG4gIGFyZ3Muc3BsaWNlKGxhc3RDLCAwLCBjKTtcbn1cblxuLyoqXG4gKiBJbnZva2VzIGBjb25zb2xlLmxvZygpYCB3aGVuIGF2YWlsYWJsZS5cbiAqIE5vLW9wIHdoZW4gYGNvbnNvbGUubG9nYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBsb2coKSB7XG4gIC8vIHRoaXMgaGFja2VyeSBpcyByZXF1aXJlZCBmb3IgSUU4LzksIHdoZXJlXG4gIC8vIHRoZSBgY29uc29sZS5sb2dgIGZ1bmN0aW9uIGRvZXNuJ3QgaGF2ZSAnYXBwbHknXG4gIHJldHVybiAnb2JqZWN0JyA9PT0gdHlwZW9mIGNvbnNvbGVcbiAgICAmJiBjb25zb2xlLmxvZ1xuICAgICYmIEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseS5jYWxsKGNvbnNvbGUubG9nLCBjb25zb2xlLCBhcmd1bWVudHMpO1xufVxuXG4vKipcbiAqIFNhdmUgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lc3BhY2VzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBzYXZlKG5hbWVzcGFjZXMpIHtcbiAgdHJ5IHtcbiAgICBpZiAobnVsbCA9PSBuYW1lc3BhY2VzKSB7XG4gICAgICBleHBvcnRzLnN0b3JhZ2UucmVtb3ZlSXRlbSgnZGVidWcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXhwb3J0cy5zdG9yYWdlLmRlYnVnID0gbmFtZXNwYWNlcztcbiAgICB9XG4gIH0gY2F0Y2goZSkge31cbn1cblxuLyoqXG4gKiBMb2FkIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcmV0dXJuIHtTdHJpbmd9IHJldHVybnMgdGhlIHByZXZpb3VzbHkgcGVyc2lzdGVkIGRlYnVnIG1vZGVzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2FkKCkge1xuICB2YXIgcjtcbiAgdHJ5IHtcbiAgICByID0gZXhwb3J0cy5zdG9yYWdlLmRlYnVnO1xuICB9IGNhdGNoKGUpIHt9XG5cbiAgLy8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuICBpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcbiAgICByID0gcHJvY2Vzcy5lbnYuREVCVUc7XG4gIH1cblxuICByZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBFbmFibGUgbmFtZXNwYWNlcyBsaXN0ZWQgaW4gYGxvY2FsU3RvcmFnZS5kZWJ1Z2AgaW5pdGlhbGx5LlxuICovXG5cbmV4cG9ydHMuZW5hYmxlKGxvYWQoKSk7XG5cbi8qKlxuICogTG9jYWxzdG9yYWdlIGF0dGVtcHRzIHRvIHJldHVybiB0aGUgbG9jYWxzdG9yYWdlLlxuICpcbiAqIFRoaXMgaXMgbmVjZXNzYXJ5IGJlY2F1c2Ugc2FmYXJpIHRocm93c1xuICogd2hlbiBhIHVzZXIgZGlzYWJsZXMgY29va2llcy9sb2NhbHN0b3JhZ2VcbiAqIGFuZCB5b3UgYXR0ZW1wdCB0byBhY2Nlc3MgaXQuXG4gKlxuICogQHJldHVybiB7TG9jYWxTdG9yYWdlfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gbG9jYWxzdG9yYWdlKCkge1xuICB0cnkge1xuICAgIHJldHVybiB3aW5kb3cubG9jYWxTdG9yYWdlO1xuICB9IGNhdGNoIChlKSB7fVxufVxuIiwiZXhwb3J0IGNvbnN0IGNvbG9yX2NvdW50cmllcyA9ICdyZ2IoMTQ3LDE0NCwyNTIpJztcbmV4cG9ydCBjb25zdCBjb2xvcl9kaXNhYmxlZCA9ICdyZ2IoMjE0LCAyMTQsIDIxNCknO1xuZXhwb3J0IGNvbnN0IGNvbG9yX3N1cCA9ICdncmVlbic7XG5leHBvcnQgY29uc3QgY29sb3JfaW5mID0gJ3JlZCc7XG5leHBvcnQgY29uc3QgY29sb3JfaGlnaGxpZ2h0ID0gJ3llbGxvdyc7XG4iLCJpbXBvcnQgeyBjb2xvcl9pbmYsIGNvbG9yX3N1cCB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbmNvbnN0IG1hdGhfYWJzID0gTWF0aC5hYnM7XG5jb25zdCBtYXRoX3JvdW5kID0gTWF0aC5yb3VuZDtcblxuZnVuY3Rpb24gcHJlcGFyZVRvb2x0aXAocGFyZW50X3N2Z19lbGVtKSB7XG4gIGNvbnN0IHRvb2x0aXAgPSBwYXJlbnRfc3ZnX2VsZW0uYXBwZW5kKCdnJylcbiAgICAuYXR0cignY2xhc3MnLCAndG9vbHRpcCcpXG4gICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcblxuICB0b29sdGlwLmFwcGVuZCgncmVjdCcpXG4gICAgLmF0dHJzKHsgd2lkdGg6IDUwLCBoZWlnaHQ6IDQwLCBmaWxsOiAnd2hpdGUnIH0pXG4gICAgLnN0eWxlKCdvcGFjaXR5JywgMC41KTtcblxuICB0b29sdGlwLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHJzKHsgY2xhc3M6ICdpZF9mZWF0dXJlJywgeDogMjUsIGR5OiAnMS4yZW0nLCAnZm9udC1zaXplJzogJzE0cHgnIH0pXG4gICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcblxuICB0b29sdGlwLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHJzKHtcbiAgICAgIGNsYXNzOiAndmFsdWVfZmVhdHVyZTEnLFxuICAgICAgeDogMjUsXG4gICAgICBkeTogJzIuNGVtJyxcbiAgICAgICdmb250LXNpemUnOiAnMTRweCcsXG4gICAgICAnZm9udC13ZWlnaHQnOiAnYm9sZCcgfSlcbiAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpO1xuXG4gIHRvb2x0aXAuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cnMoe1xuICAgICAgY2xhc3M6ICd2YWx1ZV9mZWF0dXJlMicsXG4gICAgICB4OiAyNSxcbiAgICAgIGR5OiAnMy41ZW0nLFxuICAgICAgJ2ZvbnQtc2l6ZSc6ICcxNHB4JyxcbiAgICAgICdmb250LXdlaWdodCc6ICdib2xkJyB9KVxuICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7XG5cbiAgdG9vbHRpcC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRycyh7XG4gICAgICBjbGFzczogJ3ZhbHVlX2ZlYXR1cmUzJyxcbiAgICAgIHg6IDI1LFxuICAgICAgZHk6ICc0LjZlbScsXG4gICAgICAnZm9udC1zaXplJzogJzE0cHgnLFxuICAgICAgJ2ZvbnQtd2VpZ2h0JzogJ2JvbGQnIH0pXG4gICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcblxuICB0b29sdGlwLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHJzKHtcbiAgICAgIGNsYXNzOiAndmFsdWVfZmVhdHVyZTQnLFxuICAgICAgeDogMjUsXG4gICAgICBkeTogJzUuN2VtJyxcbiAgICAgICdmb250LXNpemUnOiAnMTRweCcsXG4gICAgICAnZm9udC13ZWlnaHQnOiAnYm9sZCcgfSlcbiAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpO1xuXG4gIHJldHVybiB0b29sdGlwO1xufVxuXG5mdW5jdGlvbiB1bmJpbmRVSSgpIHtcbiAgLy8gUmVtb3ZlcyB0aGUgY3VycmVudCBiZWhhdmlvciBjb3JyZXNwb25kaW5nIHRvIGNsaWNraW5nIG9uIHRoZSBsZWZ0IG1lbnU6XG4gIGQzLnNlbGVjdEFsbCgnc3Bhbi5maWx0ZXJfdicpXG4gICAgLm9uKCdjbGljaycsIG51bGwpO1xuICBkMy5zZWxlY3RBbGwoJ3NwYW4udGFyZ2V0X3JlZ2lvbicpXG4gICAgLm9uKCdjbGljaycsIG51bGwpO1xuICBkMy5zZWxlY3RBbGwoJ3NwYW4ubGFiZWxfY2hrJylcbiAgICAub24oJ2NsaWNrJywgbnVsbCk7XG5cbiAgLy8gUmVtb3ZlIHRoZSB0YWJsZTpcbiAgZDMuc2VsZWN0KCcuZGF0YVRhYmxlLXdyYXBwZXInKS5yZW1vdmUoKTtcblxuICAvLyBVbmJpbmQgYnV0dG9ucyBvbiB0aGUgdG9wIG9mIHRoZSBtYXA6XG4gIGQzLnNlbGVjdCgnI2hlYWRlcl9tYXAnKVxuICAgIC5zZWxlY3RBbGwoJ2ltZycpXG4gICAgLm9uKCdjbGljaycsIG51bGwpO1xuXG4gIC8vIFJlbW92ZSB0aGUgc2VsZWN0aW9uIG1lbnUgKG9yIGJ1dHRvbnMpIHVuZGVyIHRoZSBjaGFydDpcbiAgZDMuc2VsZWN0KCcjYmFyX3NlY3Rpb24gPiAjbWVudV9zZWxlY3Rpb24nKS5yZW1vdmUoKTtcblxuICAvLyBSZW1vdmVzIHRoZSBjdXJyZW50IGJlaGF2aW9yIGNvcnJlc3BvbmRpbmcgdG8gY2xpY2tpbmcgb24gdGhlIHRvcCBtZW51OlxuICBkMy5zZWxlY3RBbGwoJy50eXBlX2NoYXJ0LnRpdGxlX21lbnUnKS5vbignY2xpY2snLCBudWxsKTtcblxuICAvLyBSZW1vdmVzIHRoZSBjdXJyZW50IGJlaGF2aW9yIGNvcnJlc3BvbmRpbmcgdG8gcHJlc3NpbmcgdGhlIENvbnRyb2wga2V5OlxuICBkb2N1bWVudC5vbmtleXVwID0gbnVsbDtcbiAgZG9jdW1lbnQub25rZXlkb3duID0gbnVsbDtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIGNvbXBhcmUgdGhlIHZhbHVlIG9mIGEgZmVhdHVyZSB0byB0aGUgcmVmZXJlbmNlIHZhbHVlIChpLmUuIHRoZSB2YWx1ZSBvZiBcIm15IHJlZ2lvblwiKVxuKiBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBjb2xvciAoc2VyaWUgbWF5IGJlIGludmVyc2VkKVxuKlxuKiBAcGFyYW0ge051bWJlcn0gdGVzdF92YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBjb21wYXJlZCB0byB0aGUgdmFsdWUgb2YgXCJteSByZWdpb25cIi5cbiogQHBhcmFtIHtOdW1iZXJ9IHJlZl92YWx1ZSAtIFRoZSB2YWx1ZSBvZiBteSByZWdpb24uXG4qIEBwYXJhbSB7Qm9vbGVhbn0gc2VyaWVfaW52ZXJzZWQgLSBXaGV0aGVyIHRoZSBzZXJpZSBpcyBpbnZlcnNlZCBvciBub3QgaW4gdGhlIGN1cnJlbnQgY2hhcnQuXG4qIEByZXR1cm4ge1N0cmluZ30gLSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBjb2xvciB0byBiZSB1c2VkIGZvciB0aGlzIHZhbHVlLlxuKlxuKi9cbmNvbnN0IGNvbXAgPSAodGVzdF92YWx1ZSwgcmVmX3ZhbHVlLCBzZXJpZV9pbnZlcnNlZCkgPT4ge1xuICBpZiAodGVzdF92YWx1ZSA8IHJlZl92YWx1ZSkge1xuICAgIHJldHVybiBzZXJpZV9pbnZlcnNlZCA/IGNvbG9yX3N1cCA6IGNvbG9yX2luZjtcbiAgfVxuICByZXR1cm4gc2VyaWVfaW52ZXJzZWQgPyBjb2xvcl9pbmYgOiBjb2xvcl9zdXA7XG59O1xuXG5cbi8qKlxuKiBGdW5jdGlvbiB0byBjb21wYXJlIHRoZSB2YWx1ZSBvZiBhIGZlYXR1cmUgdG8gdGhlIHJlZmVyZW5jZSB2YWx1ZSAoaS5lLiB0aGUgdmFsdWUgb2YgXCJteSByZWdpb25cIilcbiogYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgY29sb3IgKHNlcmllIG1heSBiZSBpbnZlcnNlZClcbipcbiogQHBhcmFtIHtOdW1iZXJ9IHZhbDEgLSBUaGUgdmFsdWUgdG8gYmUgY29tcGFyZWQgdG8gdGhlIHZhbHVlIG9mIFwibXkgcmVnaW9uXCIgZm9yIHRoZSAxc3QgdmFyaWFibGUuXG4qIEBwYXJhbSB7TnVtYmVyfSB2YWwyIC0gVGhlIHZhbHVlIHRvIGJlIGNvbXBhcmVkIHRvIHRoZSB2YWx1ZSBvZiBcIm15IHJlZ2lvblwiIGZvciB0aGUgMm5kIHZhcmlhYmxlLlxuKiBAcGFyYW0ge051bWJlcn0gcmVmX3ZhbDEgLSBUaGUgdmFsdWUgb2YgbXkgcmVnaW9uIGZvciBoZSBmaXJzdCB2YXJpYWJsZS5cbiogQHBhcmFtIHtOdW1iZXJ9IHJlZl92YWwyIC0gVGhlIHZhbHVlIG9mIG15IHJlZ2lvbiBmb3IgdGhlIHNlY29uZCB2YXJpYWJsZS5cbiogQHBhcmFtIHtCb29sZWFufSB4SW52ZXJzZWQgLSBXaGV0aGVyIHRoZSBzZXJpZSBpcyBpbnZlcnNlZCBvbiB0aGUgeCBheGlzIGluIHRoZSBjdXJyZW50IGNoYXJ0LlxuKiBAcGFyYW0ge0Jvb2xlYW59IHlJbnZlcnNlZCAtIFdoZXRoZXIgdGhlIHNlcmllIGlzIGludmVyc2VkIG9uIHRoZSB5IGF4aXMgaW4gdGhlIGN1cnJlbnQgY2hhcnQuXG4qIEByZXR1cm4ge1N0cmluZ30gLSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBjb2xvciB0byBiZSB1c2VkIGZvciB0aGVzZXMgdmFsdWVzLlxuKlxuKi9cbmNvbnN0IGNvbXAyID0gKHZhbDEsIHZhbDIsIHJlZl92YWwxLCByZWZfdmFsMiwgeEludmVyc2VkLCB5SW52ZXJzZWQpID0+IHtcbiAgaWYgKCh2YWwxIDwgcmVmX3ZhbDEgJiYgIXhJbnZlcnNlZCkgfHwgKHZhbDEgPiByZWZfdmFsMSAmJiB4SW52ZXJzZWQpKSB7IC8vIHZhbDEgaXMgaW5mZXJpb3I6XG4gICAgaWYgKHZhbDIgPCByZWZfdmFsMikge1xuICAgICAgcmV0dXJuIHlJbnZlcnNlZCA/ICdyZ2IoMTYwLCAzMCwgMTYwKScgOiBjb2xvcl9pbmY7XG4gICAgfVxuICAgIHJldHVybiB5SW52ZXJzZWQgPyBjb2xvcl9pbmYgOiAncmdiKDE2MCwgMzAsIDE2MCknO1xuICB9XG4gIC8vIHZhbDEgaXMgc3VwZXJpb3IgOlxuICBpZiAodmFsMiA+IHJlZl92YWwyKSB7XG4gICAgcmV0dXJuICF5SW52ZXJzZWQgPyBjb2xvcl9zdXAgOiAnb3JhbmdlJztcbiAgfVxuICByZXR1cm4gIXlJbnZlcnNlZCA/ICdvcmFuZ2UnIDogY29sb3Jfc3VwO1xufTtcblxuY2xhc3MgUmVjdCB7XG4gIGNvbnN0cnVjdG9yKHRvcGxlZnQsIGJvdHRvbXJpZ2h0KSB7XG4gICAgdGhpcy54bWluID0gdG9wbGVmdFswXTtcbiAgICB0aGlzLnhtYXggPSBib3R0b21yaWdodFswXTtcbiAgICB0aGlzLnltaW4gPSB0b3BsZWZ0WzFdO1xuICAgIHRoaXMueW1heCA9IGJvdHRvbXJpZ2h0WzFdO1xuICB9XG5cbiAgY29udGFpbnMocHQpIHtcbiAgICBpZiAocHRbMF0gPj0gdGhpcy54bWluICYmIHB0WzBdIDw9IHRoaXMueG1heFxuICAgICAgICAmJiBwdFsxXSA+PSB0aGlzLnltaW4gJiYgcHRbMV0gPD0gdGhpcy55bWF4KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IFByb3BTaXplciA9IGZ1bmN0aW9uIFByb3BTaXplcihmaXhlZF92YWx1ZSwgZml4ZWRfc2l6ZSkge1xuICB0aGlzLmZpeGVkX3ZhbHVlID0gZml4ZWRfdmFsdWU7XG4gIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQ7XG4gIGNvbnN0IGFicyA9IE1hdGguYWJzO1xuICBjb25zdCBQSSA9IE1hdGguUEk7XG4gIHRoaXMuc21heCA9IGZpeGVkX3NpemUgKiBmaXhlZF9zaXplICogUEk7XG4gIHRoaXMuc2NhbGUgPSB2YWwgPT4gc3FydChhYnModmFsKSAqIHRoaXMuc21heCAvIHRoaXMuZml4ZWRfdmFsdWUpIC8gUEk7XG4gIC8vIHRoaXMuZ2V0X3ZhbHVlID0gc2l6ZSA9PiAoKHNpemUgKiBQSSkgKiogMikgLyB0aGlzLnNtYXggKiB0aGlzLmZpeGVkX3ZhbHVlO1xuICAvLyBVc2UgTWF0aCBwb3cgdG8gc3VwcG9ydCBicm93c2VyIHdpdGhvdXQgKiogb3BlcmF0b3I6XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgdGhpcy5nZXRfdmFsdWUgPSBzaXplID0+IE1hdGgucG93KHNpemUgKiBQSSwgMikgLyB0aGlzLnNtYXggKiB0aGlzLmZpeGVkX3ZhbHVlO1xufTtcblxuY29uc3QgcmVtb3ZlRHVwbGljYXRlcyA9IGZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXMoYXJyKSB7XG4gIGNvbnN0IHRtcCA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbGVuX2FyciA9IGFyci5sZW5ndGg7IGkgPCBsZW5fYXJyOyBpKyspIHtcbiAgICBpZiAodG1wLmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHtcbiAgICAgIHRtcC5wdXNoKGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0bXA7XG59O1xuXG5jb25zdCBnZXRTdmdQYXRoVHlwZSA9IChwYXRoKSA9PiB7XG4gIGlmIChwYXRoLmluZGV4T2YoJ00gJykgPiAtMSAmJiBwYXRoLmluZGV4T2YoJyBMICcpID4gLTEpIHtcbiAgICByZXR1cm4gMjtcbiAgfVxuICByZXR1cm4gMTtcbn07XG5cbmNvbnN0IHN2Z1BhdGhUb0Nvb3JkcyA9IChwYXRoLCB0eXBlX3BhdGgpID0+IHtcbiAgaWYgKHR5cGVfcGF0aCA9PT0gMSkge1xuICAgIHJldHVybiBwYXRoLnNsaWNlKDEpLnNwbGl0KCdMJykubWFwKHB0ID0+IHB0LnNwbGl0KCcsJykubWFwKGEgPT4gK2EpKTtcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZSgyKS5zcGxpdCgnIEwgJykubWFwKHB0ID0+IHB0LnNwbGl0KCcgJykubWFwKGEgPT4gK2EpKTtcbn07XG5cbmZ1bmN0aW9uIGNvbXB1dGVQZXJjZW50aWxlUmFuayhvYmosIGZpZWxkX25hbWUsIHJlc3VsdF9maWVsZF9uYW1lKSB7XG4gIGNvbnN0IHZhbHVlcyA9IG9iai5tYXAoZCA9PiBkW2ZpZWxkX25hbWVdKTtcbiAgY29uc3QgbGVuX3ZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG4gIGNvbnN0IGdldFBSID0gKHYpID0+IHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuX3ZhbHVlczsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzW2ldIDw9IHYpIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDEwMCAqIGNvdW50IC8gbGVuX3ZhbHVlcztcbiAgfTtcbiAgZm9yIChsZXQgaXggPSAwOyBpeCA8IGxlbl92YWx1ZXM7IGl4KyspIHtcbiAgICBvYmpbaXhdW3Jlc3VsdF9maWVsZF9uYW1lXSA9IGdldFBSKHZhbHVlc1tpeF0pO1xuICB9XG59XG5cbmNvbnN0IF9nZXRQUiA9ICh2LCBzZXJpZSkgPT4ge1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHNlcmllW2ldIDw9IHYpIHtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAxMDAgKiBjb3VudCAvIHNlcmllLmxlbmd0aDtcbn07XG5cbmV4cG9ydCB7XG4gIGNvbXAsXG4gIGNvbXAyLFxuICBtYXRoX2FicyxcbiAgbWF0aF9yb3VuZCxcbiAgUmVjdCxcbiAgUHJvcFNpemVyLFxuICB1bmJpbmRVSSxcbiAgcHJlcGFyZVRvb2x0aXAsXG4gIHJlbW92ZUR1cGxpY2F0ZXMsXG4gIGdldFN2Z1BhdGhUeXBlLFxuICBzdmdQYXRoVG9Db29yZHMsXG4gIGNvbXB1dGVQZXJjZW50aWxlUmFuayxcbiAgX2dldFBSLFxufTtcbiIsImltcG9ydCB7IHJlbW92ZUR1cGxpY2F0ZXMgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBjcmVhdGVNZW51ID0gZnVuY3Rpb24gY3JlYXRlTWVudShuYW1lcywgdmFyaWFibGVzLCBzdHVkeV96b25lcywgdGVycml0b3JpYWxfbWVzaCkge1xuICAvLyBGaXJzdCBzZWN0aW9uLCByZWdpb25zIG5hbWVzOlxuICBjb25zdCB0aXRsZV9zZWN0aW9uMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgdGl0bGVfc2VjdGlvbjEuY2xhc3NOYW1lID0gJ3RpdGxlX21lbnUnO1xuICB0aXRsZV9zZWN0aW9uMS5pbm5lckhUTUwgPSAnTWEgcsOpZ2lvbic7XG4gIGNvbnN0IHNlY3Rpb24xID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNlY3Rpb24xLmNsYXNzTmFtZSA9ICdib3gnO1xuICBzZWN0aW9uMS5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgc2VjdGlvbjEuc3R5bGUuaGVpZ2h0ID0gJzE4MHB4JztcbiAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gbmFtZXMubGVuZ3RoOyBpIDwgbGVuX2k7IGkrKykge1xuICAgIGNvbnN0IGlkID0gbmFtZXNbaV0uZ2VvO1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lc1tpXS5Ob207XG4gICAgY29uc3QgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgZW50cnkuaW5uZXJIVE1MID0gYDxzcGFuIHZhbHVlPVwiJHtpZH1cIiBjbGFzcz0ndGFyZ2V0X3JlZ2lvbiBzcXVhcmUnPjwvc3Bhbj48c3BhbiBjbGFzcz1cImxhYmVsX2Noa1wiPiR7bmFtZX08L3NwYW4+YDtcbiAgICBzZWN0aW9uMS5hcHBlbmRDaGlsZChlbnRyeSk7XG4gIH1cblxuICAvLyBTZWNvbmQgc2VjdGlvbiwgZ3JvdXBzIG9mIHZhcmlhYmxlczpcbiAgY29uc3QgdGl0bGVfc2VjdGlvbjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIHRpdGxlX3NlY3Rpb24yLmNsYXNzTmFtZSA9ICd0aXRsZV9tZW51JztcbiAgdGl0bGVfc2VjdGlvbjIuaW5uZXJIVE1MID0gJ01vbi9tZXMgaW5kaWNhdGV1cnMnO1xuICBjb25zdCBzZWN0aW9uMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZWN0aW9uMi5jbGFzc05hbWUgPSAnYm94JztcbiAgc2VjdGlvbjIuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XG4gIHNlY3Rpb24yLnN0eWxlLmhlaWdodCA9ICcxNzBweCc7XG5cbiAgLy8gRmlsdGVyIHRoZSBcInZhcmlhYmxlc1wiIHZhcmlhYmxlIHRvIGZldGNoIHRoZSBncm91cCBuYW1lcyA6XG4gIGNvbnN0IGdyb3Vwc192YXIgPSByZW1vdmVEdXBsaWNhdGVzKHZhcmlhYmxlcy5tYXAoZCA9PiBkLmdyb3VwKSk7XG5cbiAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gZ3JvdXBzX3Zhci5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gICAgY29uc3QgZ3BfbmFtZSA9IGdyb3Vwc192YXJbaV07XG4gICAgY29uc3QgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgZW50cnkuY2xhc3NOYW1lID0gJ25hbWVfZ3JvdXBfdmFyJztcbiAgICBlbnRyeS5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9J3NxdWFyZSc+PC9zcGFuPjxzcGFuPiR7Z3BfbmFtZX08L3NwYW4+YDtcbiAgICBzZWN0aW9uMi5hcHBlbmRDaGlsZChlbnRyeSk7XG4gICAgY29uc3QgZGl2X2dycCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIGRpdl9ncnAuc3R5bGUuZGlzcGxheSA9IGkgPT09IDAgPyBudWxsIDogJ25vbmUnO1xuICAgIGNvbnN0IHZhcl9uYW1lcyA9IHZhcmlhYmxlcy5maWx0ZXIoZCA9PiBkLmdyb3VwID09PSBncF9uYW1lKTtcbiAgICBmb3IgKGxldCBqID0gMCwgbGVuX2ogPSB2YXJfbmFtZXMubGVuZ3RoOyBqIDwgbGVuX2o7IGorKykge1xuICAgICAgY29uc3QgbmFtZV92YXIgPSB2YXJfbmFtZXNbal0ubmFtZTtcbiAgICAgIGNvbnN0IGNvZGVfdmFyID0gdmFyX25hbWVzW2pdLnJhdGlvO1xuICAgICAgY29uc3Qgc3ViX2VudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgc3ViX2VudHJ5LmNsYXNzTmFtZSA9ICdzbWFsbCc7XG4gICAgICBzdWJfZW50cnkuaW5uZXJIVE1MID0gYDxzcGFuIHZhbHVlPVwiJHtjb2RlX3Zhcn1cIiBjbGFzcz1cInRhcmdldF92YXJpYWJsZSBzbWFsbF9zcXVhcmVcIj48L3NwYW4+PHNwYW4gY2xhc3M9XCJsYWJlbF9jaGtcIj4ke25hbWVfdmFyfTwvc3Bhbj5gO1xuICAgICAgZGl2X2dycC5hcHBlbmRDaGlsZChzdWJfZW50cnkpO1xuICAgIH1cbiAgICBzZWN0aW9uMi5hcHBlbmRDaGlsZChkaXZfZ3JwKTtcbiAgfVxuXG4gIC8vIFRoaXJkIHNlY3Rpb24sIHN0dWR5IHpvbmU6XG4gIGNvbnN0IHRpdGxlX3NlY3Rpb24zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICB0aXRsZV9zZWN0aW9uMy5jbGFzc05hbWUgPSAndGl0bGVfbWVudSc7XG4gIHRpdGxlX3NlY3Rpb24zLmlubmVySFRNTCA9ICdNb24gZXNwYWNlIGRcXCfDqXR1ZGUnO1xuICBjb25zdCBzZWN0aW9uMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZWN0aW9uMy5jbGFzc05hbWUgPSAnYm94JztcbiAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gc3R1ZHlfem9uZXMubGVuZ3RoOyBpIDwgbGVuX2k7IGkrKykge1xuICAgIGNvbnN0IGVudHJ5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnN0IHpvbmUgPSBzdHVkeV96b25lc1tpXTtcbiAgICBlbnRyeS5pbm5lckhUTUwgPSBgPHNwYW4gZmlsdGVyLXZhbHVlPVwiJHt6b25lLmlkfVwiIGNsYXNzPSdmaWx0ZXJfdiBzcXVhcmUnPjwvc3Bhbj48c3BhbiBjbGFzcz1cImxhYmVsX2Noa1wiPiR7em9uZS5uYW1lfTwvc3Bhbj5gO1xuICAgIHNlY3Rpb24zLmFwcGVuZENoaWxkKGVudHJ5KTtcbiAgfVxuXG4gIC8vIEZvdXJ0aCBzZWN0aW9uOlxuICBjb25zdCB0aXRsZV9zZWN0aW9uNCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgdGl0bGVfc2VjdGlvbjQuY2xhc3NOYW1lID0gJ3RpdGxlX21lbnUnO1xuICB0aXRsZV9zZWN0aW9uNC5pbm5lckhUTUwgPSAnTWFpbGxhZ2UgdGVycml0b3JpYWwgZFxcJ2FuYWx5c2UnO1xuICBjb25zdCBzZWN0aW9uNCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZWN0aW9uNC5jbGFzc05hbWUgPSAnYm94JztcbiAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gdGVycml0b3JpYWxfbWVzaC5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gICAgY29uc3QgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3QgdGVycml0X2xldmVsID0gdGVycml0b3JpYWxfbWVzaFtpXTtcbiAgICBlbnRyeS5pbm5lckhUTUwgPSBgPHNwYW4gdmFsdWU9XCIke3RlcnJpdF9sZXZlbC5pZH1cIiBjbGFzcz0nc3F1YXJlIHRlcnJpdF9sZXZlbCc+PC9zcGFuPjxzcGFuIGNsYXNzPVwibGFiZWxfY2hrXCI+JHt0ZXJyaXRfbGV2ZWwubmFtZX08L3NwYW4+YDtcbiAgICBzZWN0aW9uNC5hcHBlbmRDaGlsZChlbnRyeSk7XG4gIH1cblxuICAvLyBUaGUgYWN0dWFsIG1lbnUgY29udGFpbmluZyB0aGVzZSA0IHNlY3Rpb25zOlxuICBjb25zdCBtZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lbnUnKTtcbiAgbWVudS5pZCA9ICdtZW51JztcbiAgbWVudS5zdHlsZS53aWR0aCA9ICczNDBweCc7XG4gIG1lbnUuc3R5bGUuZmxvYXQgPSAnbGVmdCc7XG4gIG1lbnUuYXBwZW5kQ2hpbGQodGl0bGVfc2VjdGlvbjEpO1xuICBtZW51LmFwcGVuZENoaWxkKHNlY3Rpb24xKTtcbiAgbWVudS5hcHBlbmRDaGlsZCh0aXRsZV9zZWN0aW9uMik7XG4gIG1lbnUuYXBwZW5kQ2hpbGQoc2VjdGlvbjIpO1xuICBtZW51LmFwcGVuZENoaWxkKHRpdGxlX3NlY3Rpb24zKTtcbiAgbWVudS5hcHBlbmRDaGlsZChzZWN0aW9uMyk7XG4gIG1lbnUuYXBwZW5kQ2hpbGQodGl0bGVfc2VjdGlvbjQpO1xuICBtZW51LmFwcGVuZENoaWxkKHNlY3Rpb240KTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZU1lbnUgfTtcbiIsImltcG9ydCB7IGFwcCB9IGZyb20gJy4vLi4vbWFpbic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VUb3BNZW51KCkge1xuICBjb25zdCB0b3BfbWVudSA9IGQzLnNlbGVjdCgnI21lbnV0b3AnKVxuICAgIC5zdHlsZXMoeyAnZm9udC1mYW1pbHknOiBcIidTaWduaWthJywgc2Fucy1zZXJpZlwiLCAnZm9udC1zaXplJzogJzAuODBlbScsIHBhZGRpbmc6ICcwLjNweCcgfSk7XG4gIGNvbnN0IHdpZHRoX2xlZnQgPSBgJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudScpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgMjV9cHhgO1xuICBjb25zdCB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Jhcl9zZWN0aW9uJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIGNvbnN0IHdpZHRoX2NlbnRyYWxfY2hhcnQgPSBgJHt0fXB4YDtcbiAgY29uc3Qgd2lkdGhfbWFwID0gYCR7ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21hcF9zZWN0aW9uJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSAzNX1weGA7XG4gIGNvbnN0IHdpZHRoX3R5cGVfY29tcCA9IGAkeyh0IC0gODApIC8gMyAtIDJ9cHhgO1xuICB0b3BfbWVudVxuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmF0dHJzKHsgY2xhc3M6ICd0aXRsZV9zZWN0aW9uJyB9KVxuICAgIC5zdHlsZXMoeyB3aWR0aDogd2lkdGhfbGVmdCwgZmxvYXQ6ICdsZWZ0JywgbWFyZ2luOiAnMCAzcHgnIH0pXG4gICAgLmh0bWwoJ1PDiUxFQ1RJT04nKTtcblxuICBjb25zdCB0eXBlX2NoYXJ0ID0gdG9wX21lbnVcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5hdHRyKCdjbGFzcycsICd0b3Bfc2VjdGlvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF9jZW50cmFsX2NoYXJ0LCBmbG9hdDogJ2xlZnQnLCBtYXJnaW46ICcwIDNweCcsICd0ZXh0LWFsaWduJzogJ2NlbnRlcicgfSk7XG5cbiAgY29uc3QgcG9zaXRpb24gPSB0eXBlX2NoYXJ0XG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jb21wYXJhaXNvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF90eXBlX2NvbXAgfSk7XG5cbiAgcG9zaXRpb24uYXBwZW5kKCdwJylcbiAgICAuYXR0cignY2xhc3MnLCAndGl0bGVfdHlwZV9jb21wJylcbiAgICAuaHRtbCgnUE9TSVRJT04nKTtcblxuICBwb3NpdGlvbi5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndHlwZV9jaGFydCBjaGFydF90MScsIHZhbHVlOiAnQmFyQ2hhcnQxJyB9KVxuICAgIC5odG1sKCcxIGluZC4nKTtcblxuICBwb3NpdGlvbi5hcHBlbmQoJ3NwYW4nKVxuICAuYXR0cnMoeyBjbGFzczogJ3R5cGVfY2hhcnQgY2hhcnRfdDIgZGlzYWJsZWQnLCB2YWx1ZTogJ1NjYXR0ZXJQbG90MicgfSlcbiAgICAuaHRtbCgnMiBpbmQuJyk7XG5cbiAgcG9zaXRpb24uYXBwZW5kKCdzcGFuJylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MyBkaXNhYmxlZCcpXG4gICAgLmh0bWwoJyszIGluZC4nKTtcblxuICBjb25zdCByZXNzZW1ibGFuY2UgPSB0eXBlX2NoYXJ0XG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jb21wYXJhaXNvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF90eXBlX2NvbXAgfSk7XG5cbiAgcmVzc2VtYmxhbmNlLmFwcGVuZCgncCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3RpdGxlX3R5cGVfY29tcCcpXG4gICAgLmh0bWwoJ1JFU1NFTUJMQU5DRVMnKTtcblxuICByZXNzZW1ibGFuY2UuYXBwZW5kKCdzcGFuJylcbiAgICAuYXR0cnMoeyBjbGFzczogJ3R5cGVfY2hhcnQgY2hhcnRfdDEnLCB2YWx1ZTogJ0J1YmJsZUNoYXJ0MScgfSlcbiAgICAuaHRtbCgnMSBpbmQuJyk7XG5cbiAgcmVzc2VtYmxhbmNlLmFwcGVuZCgnc3BhbicpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDIgZGlzYWJsZWQnKVxuICAgIC5odG1sKCcrMiBpbmQuJyk7XG5cbiAgY29uc3QgaW5lZ2FsaXRlID0gdHlwZV9jaGFydFxuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY29tcGFyYWlzb24nKVxuICAgIC5zdHlsZXMoeyB3aWR0aDogd2lkdGhfdHlwZV9jb21wIH0pO1xuXG4gIGluZWdhbGl0ZS5hcHBlbmQoJ3AnKVxuICAgIC5hdHRyKCdjbGFzcycsICd0aXRsZV90eXBlX2NvbXAnKVxuICAgIC5odG1sKCdJTsOJR0FMSVTDiVMnKTtcblxuICBpbmVnYWxpdGUuYXBwZW5kKCdzcGFuJylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MSBkaXNhYmxlZCcpXG4gICAgLmh0bWwoJzEgaW5kLicpO1xuXG4gIGluZWdhbGl0ZS5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRyKCdjbGFzcycsICd0eXBlX2NoYXJ0IGNoYXJ0X3QyIGRpc2FibGVkJylcbiAgICAuaHRtbCgnKzIgaW5kLicpO1xuXG4gIHRvcF9tZW51XG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cnMoeyBjbGFzczogJ3RpdGxlX3NlY3Rpb24nIH0pXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF9tYXAsIGZsb2F0OiAnbGVmdCcsIG1hcmdpbjogJzAgMCAwIDIwcHgnIH0pXG4gICAgLmh0bWwoJ1FVRUxMRVMgUkVHSU9OUyA/Jyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSGVhZGVyTWFwU2VjdGlvbigpIHtcbiAgY29uc3QgaGVhZGVyX21hcF9zZWN0aW9uID0gZDMuc2VsZWN0KCcjbWFwX3NlY3Rpb24nKVxuICAgIC5pbnNlcnQoJ3AnLCAnc3ZnJylcbiAgICAuYXR0cignaWQnLCAnaGVhZGVyX21hcCcpXG4gICAgLnN0eWxlKCdtYXJnaW4nLCAnMCAwIDAgMTBweCcpO1xuXG4gIGhlYWRlcl9tYXBfc2VjdGlvbi5pbnNlcnQoJ2ltZycpXG4gICAgLmF0dHJzKHtcbiAgICAgIGNsYXNzOiAnbWFwX2J1dHRvbiBhY3RpdmUnLFxuICAgICAgd2lkdGg6IDIwLFxuICAgICAgaGVpZ2h0OiAyMCxcbiAgICAgIHNyYzogJ2ltZy9naW1wLXRvb2wtcmVjdC1zZWxlY3QucG5nJyxcbiAgICAgIGlkOiAnaW1nX3JlY3Rfc2VsZWMnLFxuICAgIH0pO1xuXG4gIGhlYWRlcl9tYXBfc2VjdGlvbi5pbnNlcnQoJ2ltZycpXG4gICAgLmF0dHJzKHtcbiAgICAgIGNsYXNzOiAnbWFwX2J1dHRvbicsXG4gICAgICB3aWR0aDogMjAsXG4gICAgICBoZWlnaHQ6IDIwLFxuICAgICAgc3JjOiAnaW1nL2dpbXAtdG9vbC16b29tLnBuZycsXG4gICAgICBpZDogJ2ltZ19tYXBfem9vbScsXG4gICAgfSk7XG5cbiAgaGVhZGVyX21hcF9zZWN0aW9uLmluc2VydCgnaW1nJylcbiAgICAuYXR0cnMoe1xuICAgICAgY2xhc3M6ICdtYXBfYnV0dG9uJyxcbiAgICAgIHdpZHRoOiAyMCxcbiAgICAgIGhlaWdodDogMjAsXG4gICAgICBzcmM6ICdpbWcvZ2ltcC1jdXJzb3IucG5nJyxcbiAgICAgIGlkOiAnaW1nX21hcF9zZWxlY3QnLFxuICAgIH0pO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlSGVhZGVyQ2hhcnQoKSB7XG4gIGNvbnN0IGhlYWRlcl9iYXJfc2VjdGlvbiA9IGQzLnNlbGVjdCgnI2Jhcl9zZWN0aW9uJylcbiAgICAuaW5zZXJ0KCdwJywgJ3N2ZycpXG4gICAgLmF0dHIoJ2lkJywgJ2hlYWRlcl9jaGFydCcpXG4gICAgLnN0eWxlKCdtYXJnaW4tYm90dG9tJywgJzAnKVxuICAgIC5zdHlsZSgnY2xlYXInLCAnYm90aCcpO1xuXG4gIGhlYWRlcl9iYXJfc2VjdGlvbi5pbnNlcnQoJ2ltZycpXG4gICAgLmF0dHJzKHtcbiAgICAgIHdpZHRoOiAyNCxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBzcmM6ICdpbWcvZWRpdC10YWJsZS1pbnNlcnQtcm93LWFib3ZlLnN2ZycsXG4gICAgICBpZDogJ2ltZ190YWJsZScsXG4gICAgfSlcbiAgICAuc3R5bGVzKHsgbWFyZ2luOiAnM3B4JywgZmxvYXQ6ICdyaWdodCcgfSlcbiAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRhVGFibGUtd3JhcHBlcicpLnN0eWxlLmRpc3BsYXkpIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N2Z19tYXAnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3ZnX2xlZ2VuZCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNoZWFkZXJfbWFwJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlYWRlcl90YWJsZScpLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGF0YVRhYmxlLXdyYXBwZXInKS5zdHlsZS5kaXNwbGF5ID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdHlsZS5maWx0ZXIgPSAnaW52ZXJ0KDc1JSknO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N2Z19tYXAnKS5zdHlsZS5kaXNwbGF5ID0gbnVsbDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3N2Z19sZWdlbmQnKS5zdHlsZS5kaXNwbGF5ID0gbnVsbDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlYWRlcl9tYXAnKS5zdHlsZS5kaXNwbGF5ID0gbnVsbDtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlYWRlcl90YWJsZScpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRhVGFibGUtd3JhcHBlcicpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIHRoaXMuc3R5bGUuZmlsdGVyID0gbnVsbDtcbiAgICAgIH1cbiAgICB9KTtcblxuICBoZWFkZXJfYmFyX3NlY3Rpb24uaW5zZXJ0KCdpbWcnKVxuICAgIC5hdHRycyh7XG4gICAgICB3aWR0aDogMjQsXG4gICAgICBoZWlnaHQ6IDI0LFxuICAgICAgc3JjOiAnaW1nL3ByaW50ZXIuc3ZnJyxcbiAgICAgIGlkOiAnaW1nX3ByaW50ZXInLFxuICAgIH0pXG4gICAgLnN0eWxlcyh7IG1hcmdpbjogJzNweCcsIGZsb2F0OiAncmlnaHQnIH0pO1xuXG4gIGhlYWRlcl9iYXJfc2VjdGlvbi5pbnNlcnQoJ2ltZycpXG4gICAgLmF0dHJzKHtcbiAgICAgIHdpZHRoOiAyNCxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBzcmM6ICdpbWcvZ3RrLWluZm8uc3ZnJyxcbiAgICAgIGlkOiAnaW1nX2luZm8nLFxuICAgIH0pXG4gICAgLnN0eWxlcyh7IG1hcmdpbjogJzNweCcsIGZsb2F0OiAncmlnaHQnIH0pO1xufVxuIiwiaW1wb3J0IHsgYXBwIH0gZnJvbSAnLi8uLi9tYWluJztcbmltcG9ydCB7IGNvbG9yX2Rpc2FibGVkLCBjb2xvcl9jb3VudHJpZXMsIGNvbG9yX3N1cCwgY29sb3JfaW5mLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgbWF0aF9yb3VuZCwgcHJlcGFyZVRvb2x0aXAsIGdldFN2Z1BhdGhUeXBlIH0gZnJvbSAnLi9oZWxwZXJzJztcblxuY29uc3Qgc3ZnX21hcCA9IGQzLnNlbGVjdCgnc3ZnI3N2Z19tYXAnKSxcbiAgbWFyZ2luX21hcCA9IHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwIH0sXG4gIHdpZHRoX21hcCA9ICtzdmdfbWFwLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW5fbWFwLmxlZnQgLSBtYXJnaW5fbWFwLnJpZ2h0LFxuICBoZWlnaHRfbWFwID0gK3N2Z19tYXAuYXR0cignaGVpZ2h0JykgLSBtYXJnaW5fbWFwLnRvcCAtIG1hcmdpbl9tYXAuYm90dG9tO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHRlbXBsYXRlOiB7IGlkOiAndGVtcGxhdGUnLCBmaWxsOiAncmdiKDI0NywgMjUyLCAyNTQpJywgJ2ZpbGwtb3BhY2l0eSc6IDEgfSxcbiAgY291bnRyaWVzOiB7IGlkOiAnY291bnRyaWVzJywgZmlsbDogJ3JnYigyMTQsIDIxNCwgMjE0KScsICdmaWxsLW9wYWNpdHknOiAxLCAnc3Ryb2tlLXdpZHRoJzogMC41LCBzdHJva2U6ICcjZmZmZmZmJyB9LFxuICBzZWFib3hlczogeyBpZDogJ3NlYWJveGVzJywgZmlsbDogJyNlMGZhZmYnLCAnZmlsbC1vcGFjaXR5JzogMSwgc3Ryb2tlOiAnYmxhY2snLCAnc3Ryb2tlLXdpZHRoJzogMC4yIH0sXG4gIHJlbW90ZTogeyBpZDogJ3JlbW90ZScsIGZpbGw6ICdyZ2IoMjE0LCAyMTQsIDIxNCknLCAnZmlsbC1vcGFjaXR5JzogMSwgJ3N0cm9rZS13aWR0aCc6IDAuNSwgc3Ryb2tlOiAnI2ZmZmZmZicgfSxcbiAgc2VhYm94ZXMyOiB7IGlkOiAnc2VhYm94ZXMyJywgZmlsbDogJ25vbmUnLCBzdHJva2U6ICdibGFjaycsICdzdHJva2Utd2lkdGgnOiAwLjggfSxcbiAgbnV0czE6IHsgaWQ6ICdudXRzMScsICdmaWxsLW9wYWNpdHknOiAxLCAnc3Ryb2tlLXdpZHRoJzogMC41LCBzdHJva2U6ICcjZmZmZmZmJyB9LFxufTtcblxubGV0IHByb2plY3Rpb247XG5sZXQgcGF0aDtcblxuZnVuY3Rpb24gZ2V0X2Jib3hfbGF5ZXJfcGF0aChuYW1lKSB7XG4gIGNvbnN0IGJib3hfbGF5ZXIgPSBbW0luZmluaXR5LCBJbmZpbml0eV0sIFstSW5maW5pdHksIC1JbmZpbml0eV1dO1xuICBzdmdfbWFwLnNlbGVjdChgIyR7bmFtZX1gKVxuICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgIC5lYWNoKChkKSA9PiB7XG4gICAgICBjb25zdCBiYm94X3BhdGggPSBwYXRoLmJvdW5kcyhkLmdlb21ldHJ5KTtcbiAgICAgIGJib3hfbGF5ZXJbMF1bMF0gPSBiYm94X3BhdGhbMF1bMF0gPCBiYm94X2xheWVyWzBdWzBdID8gYmJveF9wYXRoWzBdWzBdIDogYmJveF9sYXllclswXVswXTtcbiAgICAgIGJib3hfbGF5ZXJbMF1bMV0gPSBiYm94X3BhdGhbMF1bMV0gPCBiYm94X2xheWVyWzBdWzFdID8gYmJveF9wYXRoWzBdWzFdIDogYmJveF9sYXllclswXVsxXTtcbiAgICAgIGJib3hfbGF5ZXJbMV1bMF0gPSBiYm94X3BhdGhbMV1bMF0gPiBiYm94X2xheWVyWzFdWzBdID8gYmJveF9wYXRoWzFdWzBdIDogYmJveF9sYXllclsxXVswXTtcbiAgICAgIGJib3hfbGF5ZXJbMV1bMV0gPSBiYm94X3BhdGhbMV1bMV0gPiBiYm94X2xheWVyWzFdWzFdID8gYmJveF9wYXRoWzFdWzFdIDogYmJveF9sYXllclsxXVsxXTtcbiAgICB9KTtcbiAgcmV0dXJuIGJib3hfbGF5ZXI7XG59XG5cbmZ1bmN0aW9uIGZpdExheWVyKCkge1xuICBwcm9qZWN0aW9uLnNjYWxlKDEpLnRyYW5zbGF0ZShbMCwgMF0pO1xuICBjb25zdCBiID0gZ2V0X2Jib3hfbGF5ZXJfcGF0aCgndGVtcGxhdGUnKTtcbiAgY29uc3QgcyA9IDEgLyBNYXRoLm1heCgoYlsxXVswXSAtIGJbMF1bMF0pIC8gd2lkdGhfbWFwLCAoYlsxXVsxXSAtIGJbMF1bMV0pIC8gaGVpZ2h0X21hcCk7XG4gIGNvbnN0IHQgPSBbKHdpZHRoX21hcCAtIHMgKiAoYlsxXVswXSArIGJbMF1bMF0pKSAvIDIsIChoZWlnaHRfbWFwIC0gcyAqIChiWzFdWzFdICsgYlswXVsxXSkpIC8gMl07XG4gIHByb2plY3Rpb24uc2NhbGUocykudHJhbnNsYXRlKHQpO1xuICBzdmdfbWFwLnNlbGVjdEFsbCgncGF0aCcpLmF0dHIoJ2QnLCBwYXRoKTtcbn1cblxuZnVuY3Rpb24gbWFwX3pvb21lZCgpIHtcbiAgY29uc3QgdHJhbnNmb3JtID0gZDMuZXZlbnQudHJhbnNmb3JtO1xuICBpZiAodHJhbnNmb3JtLmsgPT09IDEpIHtcbiAgICB0cmFuc2Zvcm0ueCA9IDA7XG4gICAgdHJhbnNmb3JtLnkgPSAwO1xuICB9XG4gIGNvbnN0IGxheWVycyA9IHN2Z19tYXAuc2VsZWN0KCcjbGF5ZXJzJyk7XG4gIGNvbnN0IHQgPSBsYXllcnNcbiAgICAuc2VsZWN0QWxsKCdnJylcbiAgICAudHJhbnNpdGlvbigpXG4gICAgLmR1cmF0aW9uKDIyNSk7XG5cbiAgbGF5ZXJzLnNlbGVjdEFsbCgnZycpXG4gICAgLnRyYW5zaXRpb24odClcbiAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBgJHtzdHlsZXNbdGhpcy5pZF1bJ3N0cm9rZS13aWR0aCddIC8gdHJhbnNmb3JtLmt9cHhgO1xuICAgIH0pO1xuXG4gIGxheWVycy5zZWxlY3RBbGwoJ2cnKVxuICAgIC50cmFuc2l0aW9uKHQpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSk7XG5cbiAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKVxuICAgIC50cmFuc2l0aW9uKHQpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsIHRyYW5zZm9ybSk7XG59XG5cbmNsYXNzIE1hcFNlbGVjdCB7XG4gIGNvbnN0cnVjdG9yKG51dHMxLCBjb3VudHJpZXMsIHJlbW90ZSwgdGVtcGxhdGUsIHNlYWJveGVzKSB7XG4gICAgcHJvamVjdGlvbiA9IGQzLmdlb0lkZW50aXR5KClcbiAgICAgIC5maXRFeHRlbnQoW1swLCAwXSwgW3dpZHRoX21hcCwgaGVpZ2h0X21hcF1dLCB0ZW1wbGF0ZSlcbiAgICAgIC5yZWZsZWN0WSh0cnVlKTtcblxuICAgIHBhdGggPSBkMy5nZW9QYXRoKCkucHJvamVjdGlvbihwcm9qZWN0aW9uKTtcbiAgICBjb25zdCBsYXllcnMgPSBzdmdfbWFwLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCAnbGF5ZXJzJyk7XG5cbiAgICB0aGlzLnpvb21fbWFwID0gZDMuem9vbSgpXG4gICAgICAuc2NhbGVFeHRlbnQoWzEsIDVdKVxuICAgICAgLnRyYW5zbGF0ZUV4dGVudChbWzAsIDBdLCBbd2lkdGhfbWFwLCBoZWlnaHRfbWFwXV0pXG4gICAgICAub24oJ3pvb20nLCBtYXBfem9vbWVkKTtcblxuICAgIHN2Z19tYXAuY2FsbCh0aGlzLnpvb21fbWFwKTtcblxuICAgIGxheWVycy5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHN0eWxlcy50ZW1wbGF0ZSlcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmRhdGEodGVtcGxhdGUuZmVhdHVyZXMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cnMoeyBkOiBwYXRoIH0pO1xuXG4gICAgbGF5ZXJzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoc3R5bGVzLmNvdW50cmllcylcbiAgICAgIC5hdHRyKCdpZCcsICdjb3VudHJpZXMnKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShjb3VudHJpZXMuZmVhdHVyZXMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cnMoeyBkOiBwYXRoIH0pO1xuXG4gICAgbGF5ZXJzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoc3R5bGVzLnNlYWJveGVzKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShzZWFib3hlcy5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRycyh7IGQ6IHBhdGggfSk7XG5cbiAgICBsYXllcnMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyhzdHlsZXMucmVtb3RlKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShyZW1vdGUuZmVhdHVyZXMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cnMoeyBkOiBwYXRoIH0pO1xuXG4gICAgbGF5ZXJzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoc3R5bGVzLnNlYWJveGVzMilcbiAgICAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmRhdGEoc2VhYm94ZXMuZmVhdHVyZXMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cnMoeyBkOiBwYXRoIH0pO1xuXG4gICAgdGhpcy50YXJnZXRfbGF5ZXIgPSBsYXllcnMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyhzdHlsZXMubnV0czEpO1xuICAgIHRoaXMudGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShudXRzMS5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiAoZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXSAhPT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA/IGNvbG9yX2NvdW50cmllcyA6IGNvbG9yX2hpZ2hsaWdodCkpXG4gICAgICAuYXR0cignZCcsIHBhdGgpO1xuICAgIGFwcC50eXBlX3BhdGggPSBnZXRTdmdQYXRoVHlwZSh0aGlzLnRhcmdldF9sYXllci5zZWxlY3QoJ3BhdGgnKS5ub2RlKCkuZ2V0QXR0cmlidXRlKCdkJykpO1xuICAgIGZpdExheWVyKCk7XG4gICAgcHJlcGFyZVRvb2x0aXAoc3ZnX21hcCk7XG4gICAgdGhpcy5iaW5kVG9vbHRpcCgpO1xuICB9XG5cbiAgcmVzZXRDb2xvcnMoY3VycmVudF9pZHMpIHtcbiAgICBjb25zdCBpZF9maWVsZF9nZW9tID0gYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb207XG4gICAgdGhpcy50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiAoY3VycmVudF9pZHMuaW5kZXhPZihkLnByb3BlcnRpZXNbaWRfZmllbGRfZ2VvbV0pID4gLTFcbiAgICAgICAgPyAoYXBwLmNvbG9yc1tkLnByb3BlcnRpZXNbaWRfZmllbGRfZ2VvbV1dIHx8IGNvbG9yX2NvdW50cmllcylcbiAgICAgICAgOiBjb2xvcl9kaXNhYmxlZCkpO1xuICB9XG5cbiAgYmluZFRvb2x0aXAoKSB7XG4gICAgdGhpcy50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLnRvb2x0aXAnKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcudG9vbHRpcCcpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSBzdmdfbWFwLnNlbGVjdCgnLnRvb2x0aXAnKTtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gICAgICAgICAgLnRleHQoYCR7ZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXX1gKTtcbiAgICAgICAgbGV0IF9peCwgbmJfdmFsO1xuICAgICAgICBmb3IgKF9peCA9IDAsIG5iX3ZhbCA9IE1hdGgubWluKGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5sZW5ndGgsIDUpOyBfaXggPCBuYl92YWw7IF9peCsrKSB7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoYHRleHQudmFsdWVfZmVhdHVyZSR7X2l4ICsgMX1gKVxuICAgICAgICAgICAgLnRleHQoYCR7YXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lW19peF19OiAke21hdGhfcm91bmQoZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5yYXRpb1tfaXhdXSAqIDEwKSAvIDEwfWApO1xuICAgICAgICB9XG4gICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1tkMy5tb3VzZSh0aGlzKVswXSAtIDUsIGQzLm1vdXNlKHRoaXMpWzFdIC0gNDUgLSBfaXggKiAxMl19KWApO1xuICAgICAgfSk7XG4gIH1cblxuICByZXNldFpvb20oKSB7XG4gICAgc3ZnX21hcC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbigyNTApXG4gICAgICAuY2FsbCh0aGlzLnpvb21fbWFwLnRyYW5zZm9ybSwgZDMuem9vbUlkZW50aXR5KTtcbiAgfVxuXG4gIHJlc2V0SGVhZGVyQnV0dG9uKCkge1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfcmVjdF9zZWxlYycpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfbWFwX3pvb20nKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX21hcF9zZWxlY3QnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgfVxuXG4gIHVwZGF0ZUxlZ2VuZCgpIHtcbiAgICBkMy5zZWxlY3QoJyNzdmdfbGVnZW5kID4gZyA+IC5sZWdlbmQgPiB0ZXh0JylcbiAgICAgIC50ZXh0KGBNYSByw6lnaW9uIDogJHthcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uX3ByZXR0eV9uYW1lfWApO1xuICB9XG5cbiAgcmVtb3ZlUmVjdEJydXNoKCkge1xuICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJykuY2FsbCh0aGlzLmJydXNoX21hcC5tb3ZlLCBudWxsKTtcbiAgfVxuXG4gIGNhbGxCcnVzaChzZWxlY3Rpb24pIHtcbiAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpLmNhbGwodGhpcy5icnVzaF9tYXAubW92ZSwgc2VsZWN0aW9uKTtcbiAgfVxuXG4gIGJpbmRCcnVzaChjaGFydCkge1xuICAgIHRoaXMucmVzZXRIZWFkZXJCdXR0b24oKTtcbiAgICB0aGlzLmJydXNoX21hcCA9IGQzLmJydXNoKClcbiAgICAgIC5leHRlbnQoW1swLCAwXSwgW3dpZHRoX21hcCwgaGVpZ2h0X21hcF1dKVxuICAgICAgLm9uKCdzdGFydCBicnVzaCcsICgpID0+IHtcbiAgICAgICAgY2hhcnQuaGFuZGxlX2JydXNoX21hcChkMy5ldmVudCk7XG4gICAgICB9KTtcbiAgICBzdmdfbWFwLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYnJ1c2hfbWFwJylcbiAgICAgIC5jYWxsKHRoaXMuYnJ1c2hfbWFwKTtcbiAgfVxuXG4gIHVuYmluZEJydXNoKCkge1xuICAgIHRoaXMuYnJ1c2hfbWFwID0gbnVsbDtcbiAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpXG4gICAgICAucmVtb3ZlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVNvdXJjZVNlY3Rpb24oKSB7XG4gIGNvbnN0IHRleHRfem9uZSA9IGQzLnNlbGVjdCgnI3N2Z19sZWdlbmQnKVxuICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRycyh7IHk6IDMyLjUsICd0ZXh0LWFuY2hvcic6ICdlbmQnIH0pXG4gICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTFweCcpXG4gICAgLnN0eWxlKCdmb250LWZhbWlseScsICdcXCdTaWduaWthXFwnLCBzYW5zLXNlcmlmJyk7XG4gIHRleHRfem9uZS5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cnMoeyB4OiA0NzAsIGR5OiAxMiB9KVxuICAgIC50ZXh0KCdOaXZlYXUgcsOpZ2lvbmFsIDogTlVUUyAxICh2ZXJzaW9uIDIwMTYpJyk7XG4gIHRleHRfem9uZS5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cnMoeyB4OiA0NzAsIGR5OiAxMiB9KVxuICAgIC50ZXh0KCdPcmlnaW5lIGRlcyBkb25uw6llcyA6IEV1cm9zdGF0LCAyMDE2Jyk7XG4gIHRleHRfem9uZS5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cnMoeyB4OiA0NzAsIGR5OiAxMiB9KVxuICAgIC50ZXh0KCdMaW1pdGUgYWRtaW5pc3RyYXRpdmU6IFVNUyBSSUFURSwgQ0MtQlktU0EnKTtcbn1cblxuZnVuY3Rpb24gbWFrZU1hcExlZ2VuZCgpIHtcbiAgY29uc3QgbGVnZW5kX2VsZW1zID0gW1xuICAgIHsgY29sb3I6IGNvbG9yX2hpZ2hsaWdodCwgdGV4dDogYE1hIHLDqWdpb24gOiAke2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25fcHJldHR5X25hbWV9YCB9LFxuICAgIHsgY29sb3I6IGNvbG9yX2NvdW50cmllcywgdGV4dDogJ0F1dHJlcyByw6lnaW9ucyBkdSBmaWx0cmUgZGUgY29tcGFyYWlzb24nIH0sXG4gICAgeyBjb2xvcjogY29sb3Jfc3VwLCB0ZXh0OiAnUmFuZyBwbHVzIMOpbGV2w6kgcXVlIG1hIHLDqWdpb24nIH0sXG4gICAgeyBjb2xvcjogY29sb3JfaW5mLCB0ZXh0OiAnUmFuZyBtb2lucyDDqWxldsOpIHF1ZSBtYSByw6lnaW9uJyB9LFxuICBdO1xuXG4gIGNvbnN0IHJlY3Rfc2l6ZSA9IDE0O1xuICBjb25zdCBzcGFjaW5nID0gNDtcbiAgY29uc3QgbGdkX2hlaWdodCA9IHJlY3Rfc2l6ZSArIHNwYWNpbmc7XG4gIGNvbnN0IG9mZnNldCA9IGxnZF9oZWlnaHQgKiBsZWdlbmRfZWxlbXMubGVuZ3RoIC8gMjtcblxuICBjb25zdCBncnBfbGdkID0gZDMuc2VsZWN0KCcjc3ZnX2xlZ2VuZCcpXG4gICAgLmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoNTAsIDQwKScpXG4gICAgLnN0eWxlcyh7ICdmb250LXNpemUnOiAnMTFweCcsICdmb250LWZhbWlseSc6ICdcXCdTaWduaWthXFwnLCBzYW5zLXNlcmlmJyB9KTtcblxuICBjb25zdCBsZWdlbmRzID0gZ3JwX2xnZC5zZWxlY3RBbGwoJy5sZWdlbmQnKVxuICAgIC5kYXRhKGxlZ2VuZF9lbGVtcylcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCwgaSkgPT4ge1xuICAgICAgY29uc3QgdHggPSAtMiAqIHJlY3Rfc2l6ZTtcbiAgICAgIGNvbnN0IHR5ID0gaSAqIGxnZF9oZWlnaHQgLSBvZmZzZXQ7XG4gICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke1t0eCwgdHldfSlgO1xuICAgIH0pO1xuXG4gIGxlZ2VuZHMuYXBwZW5kKCdyZWN0JylcbiAgICAuYXR0cnMoeyB3aWR0aDogcmVjdF9zaXplLCBoZWlnaHQ6IHJlY3Rfc2l6ZSB9KVxuICAgIC5zdHlsZXMoZCA9PiAoeyBmaWxsOiBkLmNvbG9yLCBzdHJva2U6IGQuY29sb3IgfSkpO1xuXG4gIGxlZ2VuZHMuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cnMoeyB4OiByZWN0X3NpemUgKyBzcGFjaW5nLCB5OiByZWN0X3NpemUgLSBzcGFjaW5nIH0pXG4gICAgLnRleHQoZCA9PiBkLnRleHQpO1xufVxuXG5leHBvcnQge1xuICBNYXBTZWxlY3QsXG4gIG1ha2VTb3VyY2VTZWN0aW9uLFxuICBtYWtlTWFwTGVnZW5kLFxuICBzdmdfbWFwLFxufTtcbiIsIi8qIVxyXG4gKlxyXG4gKiBWYW5pbGxhLURhdGFUYWJsZXNcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LTIwMTcgS2FybCBTYXVuZGVycyAoaHR0cDovL21vYml1cy5vdmgpXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXHJcbiAqXHJcbiAqIFZlcnNpb246IDEuNS4wXHJcbiAqXHJcbiAqL1xyXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcclxuICAgIHZhciBwbHVnaW4gPSBcIkRhdGFUYWJsZVwiO1xyXG5cclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeShwbHVnaW4pKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocGx1Z2luKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcm9vdFtwbHVnaW5dID0gZmFjdG9yeShwbHVnaW4pO1xyXG4gICAgfVxyXG59KSh0aGlzLCBmdW5jdGlvbiAocGx1Z2luKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciB3aW4gPSB3aW5kb3csXHJcbiAgICAgICAgZG9jID0gZG9jdW1lbnQsXHJcbiAgICAgICAgYm9keSA9IGRvYy5ib2R5O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAdHlwIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBkZWZhdWx0Q29uZmlnID0ge1xyXG4gICAgICAgIHBlclBhZ2U6IDEwLFxyXG4gICAgICAgIHBlclBhZ2VTZWxlY3Q6IFs1LCAxMCwgMTUsIDIwLCAyNV0sXHJcblxyXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxyXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFBhZ2luYXRpb25cclxuICAgICAgICBuZXh0UHJldjogdHJ1ZSxcclxuICAgICAgICBmaXJzdExhc3Q6IGZhbHNlLFxyXG4gICAgICAgIHByZXZUZXh0OiBcIiZsc2FxdW87XCIsXHJcbiAgICAgICAgbmV4dFRleHQ6IFwiJnJzYXF1bztcIixcclxuICAgICAgICBmaXJzdFRleHQ6IFwiJmxhcXVvO1wiLFxyXG4gICAgICAgIGxhc3RUZXh0OiBcIiZyYXF1bztcIixcclxuICAgICAgICBlbGxpcHNpc1RleHQ6IFwiJmhlbGxpcDtcIixcclxuICAgICAgICBhc2NUZXh0OiBcIuKWtFwiLFxyXG4gICAgICAgIGRlc2NUZXh0OiBcIuKWvlwiLFxyXG4gICAgICAgIHRydW5jYXRlUGFnZXI6IHRydWUsXHJcbiAgICAgICAgcGFnZXJEZWx0YTogMixcclxuXHJcbiAgICAgICAgZml4ZWRDb2x1bW5zOiB0cnVlLFxyXG4gICAgICAgIGZpeGVkSGVpZ2h0OiBmYWxzZSxcclxuXHJcbiAgICAgICAgaGVhZGVyOiB0cnVlLFxyXG4gICAgICAgIGZvb3RlcjogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIEN1c3RvbWlzZSB0aGUgZGlzcGxheSB0ZXh0XHJcbiAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiLCAvLyBUaGUgc2VhcmNoIGlucHV0IHBsYWNlaG9sZGVyXHJcbiAgICAgICAgICAgIHBlclBhZ2U6IFwie3NlbGVjdH0gZW50cmllcyBwZXIgcGFnZVwiLCAvLyBwZXItcGFnZSBkcm9wZG93biBsYWJlbFxyXG4gICAgICAgICAgICBub1Jvd3M6IFwiTm8gZW50cmllcyBmb3VuZFwiLCAvLyBNZXNzYWdlIHNob3duIHdoZW4gdGhlcmUgYXJlIG5vIHNlYXJjaCByZXN1bHRzXHJcbiAgICAgICAgICAgIGluZm86IFwiU2hvd2luZyB7c3RhcnR9IHRvIHtlbmR9IG9mIHtyb3dzfSBlbnRyaWVzXCIgLy9cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDdXN0b21pc2UgdGhlIGxheW91dFxyXG4gICAgICAgIGxheW91dDoge1xyXG4gICAgICAgICAgICB0b3A6IFwie3NlbGVjdH17c2VhcmNofVwiLFxyXG4gICAgICAgICAgICBib3R0b206IFwie2luZm99e3BhZ2VyfVwiXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlzIGl0ZW0gaXMgb2JqZWN0XHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICB2YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSBcIltvYmplY3QgT2JqZWN0XVwiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlzIGl0ZW0gaXMgYXJyYXlcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHZhciBpc0FycmF5ID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgZm9yIHZhbGlkIEpTT04gc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc3RyXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufEFycmF5fE9iamVjdH1cclxuICAgICAqL1xyXG4gICAgdmFyIGlzSnNvbiA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgICAgICB2YXIgdCA9ICExO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHQgPSBKU09OLnBhcnNlKHN0cik7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhKG51bGwgPT09IHQgfHwgKCFpc0FycmF5KHQpICYmICFpc09iamVjdCh0KSkpICYmIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVyZ2Ugb2JqZWN0cyAocmVjY3Vyc2l2ZSlcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gclxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSB0XHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBleHRlbmQgPSBmdW5jdGlvbiAoc3JjLCBwcm9wcykge1xyXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcHJvcHNbcHJvcF07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsICYmIGlzT2JqZWN0KHZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcmNbcHJvcF0gPSBzcmNbcHJvcF0gfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHNyY1twcm9wXSwgdmFsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3JjW3Byb3BdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzcmM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0b3IgaGVscGVyXHJcbiAgICAgKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KX0gICBhcnIgICAgIEFueSBvYmplY3QsIGFycmF5IG9yIGFycmF5LWxpa2UgY29sbGVjdGlvbi5cclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICAgIGZuICAgICAgQ2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgIHNjb3BlICAgQ2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGlzXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICB2YXIgZWFjaCA9IGZ1bmN0aW9uIChhcnIsIGZuLCBzY29wZSkge1xyXG4gICAgICAgIHZhciBuO1xyXG4gICAgICAgIGlmIChpc09iamVjdChhcnIpKSB7XHJcbiAgICAgICAgICAgIGZvciAobiBpbiBhcnIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJyLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUsIGFycltuXSwgbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgYXJyLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlLCBhcnJbbl0sIG4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBldmVudCBsaXN0ZW5lciB0byB0YXJnZXRcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZWxcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZVxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZuXHJcbiAgICAgKi9cclxuICAgIHZhciBvbiA9IGZ1bmN0aW9uIChlbCwgZSwgZm4pIHtcclxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGUsIGZuLCBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIERPTSBlbGVtZW50IG5vZGVcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBhIG5vZGVOYW1lXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgYiBwcm9wZXJ0aWVzIGFuZCBhdHRyaWJ1dGVzXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgZCA9IGRvYy5jcmVhdGVFbGVtZW50KGEpO1xyXG4gICAgICAgIGlmIChiICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGIpIHtcclxuICAgICAgICAgICAgdmFyIGU7XHJcbiAgICAgICAgICAgIGZvciAoZSBpbiBiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXCJodG1sXCIgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkLmlubmVySFRNTCA9IGJbZV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGQuc2V0QXR0cmlidXRlKGUsIGJbZV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoZWwsIGllKSB7XHJcbiAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcclxuICAgICAgICAgICAgZWFjaChlbCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGZsdXNoKGUsIGllKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGllKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZWwuaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBidXR0b24gaGVscGVyXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgY1xyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgIHBcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICB0XHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBidXR0b24gPSBmdW5jdGlvbiAoYywgcCwgdCkge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFwibGlcIiwge1xyXG4gICAgICAgICAgICBjbGFzczogYyxcclxuICAgICAgICAgICAgaHRtbDogJzxhIGhyZWY9XCIjXCIgZGF0YS1wYWdlPVwiJyArIHAgKyAnXCI+JyArIHQgKyBcIjwvYT5cIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNsYXNzTGlzdCBzaGltXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgY2xhc3NMaXN0ID0ge1xyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKHMsIGEpIHtcclxuICAgICAgICAgICAgaWYgKHMuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBzLmNsYXNzTGlzdC5hZGQoYSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsYXNzTGlzdC5jb250YWlucyhzLCBhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMuY2xhc3NOYW1lID0gcy5jbGFzc05hbWUudHJpbSgpICsgXCIgXCIgKyBhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChzLCBhKSB7XHJcbiAgICAgICAgICAgIGlmIChzLmNsYXNzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgcy5jbGFzc0xpc3QucmVtb3ZlKGEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTGlzdC5jb250YWlucyhzLCBhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMuY2xhc3NOYW1lID0gcy5jbGFzc05hbWUucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgYS5zcGxpdChcIiBcIikuam9pbihcInxcIikgKyBcIihcXFxcc3wkKVwiLCBcImdpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBcIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiAocywgYSkge1xyXG4gICAgICAgICAgICBpZiAocylcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLmNsYXNzTGlzdCA/XHJcbiAgICAgICAgICAgICAgICAgICAgcy5jbGFzc0xpc3QuY29udGFpbnMoYSkgOlxyXG4gICAgICAgICAgICAgICAgICAgICEhcy5jbGFzc05hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAhIXMuY2xhc3NOYW1lLm1hdGNoKG5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIiArIGEgKyBcIihcXFxcc3wkKVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ1YmJsZSBzb3J0IGFsZ29yaXRobVxyXG4gICAgICovXHJcbiAgICB2YXIgc29ydEl0ZW1zID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgYywgZDtcclxuICAgICAgICBpZiAoMSA9PT0gYikge1xyXG4gICAgICAgICAgICBjID0gMDtcclxuICAgICAgICAgICAgZCA9IGEubGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChiID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgYyA9IGEubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGQgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBlID0gITA7IGU7KSB7XHJcbiAgICAgICAgICAgIGUgPSAhMTtcclxuICAgICAgICAgICAgZm9yICh2YXIgZiA9IGM7IGYgIT0gZDsgZiArPSBiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYVtmICsgYl0gJiYgYVtmXS52YWx1ZSA+IGFbZiArIGJdLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBhW2ZdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gYVtmICsgYl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBnO1xyXG4gICAgICAgICAgICAgICAgICAgIGFbZl0gPSBoO1xyXG4gICAgICAgICAgICAgICAgICAgIGFbZiArIGJdID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBlID0gITA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFnZXIgdHJ1bmNhdGlvbiBhbGdvcml0aG1cclxuICAgICAqL1xyXG4gICAgdmFyIHRydW5jYXRlID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIGVsbGlwc2lzKSB7XHJcbiAgICAgICAgZCA9IGQgfHwgMjtcclxuICAgICAgICB2YXIgaixcclxuICAgICAgICAgICAgZSA9IDIgKiBkLFxyXG4gICAgICAgICAgICBmID0gYiAtIGQsXHJcbiAgICAgICAgICAgIGcgPSBiICsgZCxcclxuICAgICAgICAgICAgaCA9IFtdLFxyXG4gICAgICAgICAgICBpID0gW107XHJcbiAgICAgICAgaWYgKGIgPCA0IC0gZCArIGUpIHtcclxuICAgICAgICAgICAgZyA9IDMgKyBlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYiA+IGMgLSAoMyAtIGQgKyBlKSkge1xyXG4gICAgICAgICAgICBmID0gYyAtICgyICsgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGsgPSAxOyBrIDw9IGM7IGsrKykge1xyXG4gICAgICAgICAgICBpZiAoMSA9PSBrIHx8IGsgPT0gYyB8fCAoayA+PSBmICYmIGsgPD0gZykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsID0gYVtrIC0gMV07XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGwsIFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgaC5wdXNoKGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVhY2goaCwgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBjLmNoaWxkcmVuWzBdLmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiKTtcclxuICAgICAgICAgICAgaWYgKGopIHtcclxuICAgICAgICAgICAgICAgIHZhciBlID0gai5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAtIGUgPT0gMikgaS5wdXNoKGFbZV0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZCAtIGUgIT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gY3JlYXRlRWxlbWVudChcImxpXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiZWxsaXBzaXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogJzxhIGhyZWY9XCIjXCI+JyArIGVsbGlwc2lzICsgXCI8L2E+XCJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaS5wdXNoKGMpO1xyXG4gICAgICAgICAgICBqID0gYztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgZGF0YSB0byBIVE1MIHRhYmxlXHJcbiAgICAgKi9cclxuICAgIHZhciBkYXRhVG9UYWJsZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIHRoZWFkID0gZmFsc2UsXHJcbiAgICAgICAgICAgIHRib2R5ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMub3B0aW9ucy5kYXRhO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5oZWFkaW5ncykge1xyXG4gICAgICAgICAgICB0aGVhZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICAgICAgdmFyIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICBlYWNoKGRhdGEuaGVhZGluZ3MsIGZ1bmN0aW9uIChjb2wpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogY29sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGVhZC5hcHBlbmRDaGlsZCh0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGF0YS5kYXRhKSB7XHJcbiAgICAgICAgICAgIHRib2R5ID0gY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG4gICAgICAgICAgICBlYWNoKGRhdGEuZGF0YSwgZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmhlYWRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGluZ3MubGVuZ3RoICE9PSByb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlRoZSBudW1iZXIgb2Ygcm93cyBkbyBub3QgbWF0Y2ggdGhlIG51bWJlciBvZiBoZWFkaW5ncy5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgICAgICAgICAgIGVhY2gocm93cywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRkID0gY3JlYXRlRWxlbWVudChcInRkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhlYWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFibGUudEhlYWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGUucmVtb3ZlQ2hpbGQodGhpcy50YWJsZS50SGVhZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy50YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGJvZHkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFibGUudEJvZGllcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGUucmVtb3ZlQ2hpbGQodGhpcy50YWJsZS50Qm9kaWVzWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRhYmxlLmFwcGVuZENoaWxkKHRib2R5KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXNlIG1vbWVudC5qcyB0byBwYXJzZSBjZWxsIGNvbnRlbnRzIGZvciBzb3J0aW5nXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGNvbnRlbnQgICAgIFRoZSBkYXRldGltZSBzdHJpbmcgdG8gcGFyc2VcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZm9ybWF0ICAgICAgVGhlIGZvcm1hdCBmb3IgbW9tZW50IHRvIHVzZVxyXG4gICAgICogQHJldHVybiB7U3RyaW5nfEJvb2xlYW59ICAgICBEYXRhdGltZSBzdHJpbmcgb3IgZmFsc2VcclxuICAgICAqL1xyXG4gICAgdmFyIHBhcnNlRGF0ZSA9IGZ1bmN0aW9uIChjb250ZW50LCBmb3JtYXQpIHtcclxuICAgICAgICB2YXIgZGF0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAvLyBtb21lbnQoKSB0aHJvd3MgYSBmaXQgaWYgdGhlIHN0cmluZyBpc24ndCBhIHZhbGlkIGRhdGV0aW1lIHN0cmluZ1xyXG4gICAgICAgIC8vIHNvIHdlIG5lZWQgdG8gc3VwcGx5IHRoZSBmb3JtYXQgdG8gdGhlIGNvbnN0cnVjdG9yIChodHRwczovL21vbWVudGpzLmNvbS9kb2NzLyMvcGFyc2luZy9zdHJpbmctZm9ybWF0LylcclxuXHJcbiAgICAgICAgLy8gQ29udmVydGluZyB0byBZWVlZTU1ERCBlbnN1cmVzIHdlIGNhbiBhY2N1cmF0ZWx5IHNvcnQgdGhlIGNvbHVtbiBudW1lcmljYWxseVxyXG5cclxuICAgICAgICBpZiAoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJJU09fODYwMVwiOlxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZW50LCBtb21lbnQuSVNPXzg2MDEpLmZvcm1hdChcIllZWVlNTUREXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJSRkNfMjgyMlwiOlxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZW50LCBcImRkZCwgTU0gTU1NIFlZWVkgSEg6bW06c3MgWlpcIikuZm9ybWF0KFwiWVlZWU1NRERcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIk1ZU1FMXCI6XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gbW9tZW50KGNvbnRlbnQsIFwiWVlZWS1NTS1ERCBoaDptbTpzc1wiKS5mb3JtYXQoXCJZWVlZTU1ERFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiVU5JWFwiOlxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZW50KS51bml4KCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIC8vIFVzZXIgZGVmaW5lZCBmb3JtYXQgdXNpbmcgdGhlIGRhdGEtZm9ybWF0IGF0dHJpYnV0ZSBvciBjb2x1bW5zW25dLmZvcm1hdCBvcHRpb25cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoY29udGVudCwgZm9ybWF0KS5mb3JtYXQoXCJZWVlZTU1ERFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2x1bW5zIEFQSVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlIERhdGFUYWJsZSBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHtNaXhlZH0gY29sdW1ucyAgQ29sdW1uIGluZGV4IG9yIGFycmF5IG9mIGNvbHVtbiBpbmRleGVzXHJcbiAgICAgKi9cclxuICAgIHZhciBDb2x1bW5zID0gZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgdGhpcy5kdCA9IGR0O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN3YXAgdHdvIGNvbHVtbnNcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIENvbHVtbnMucHJvdG90eXBlLnN3YXAgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCAmJiBjb2x1bW5zLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICB2YXIgY29scyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IGNvbHVtbiBpbmRleGVzXHJcbiAgICAgICAgICAgIGVhY2godGhpcy5kdC5oZWFkaW5ncywgZnVuY3Rpb24gKGgsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbHMucHVzaChpKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2YXIgeCA9IGNvbHVtbnNbMF07XHJcbiAgICAgICAgICAgIHZhciB5ID0gY29sdW1uc1sxXTtcclxuICAgICAgICAgICAgdmFyIGIgPSBjb2xzW3ldO1xyXG4gICAgICAgICAgICBjb2xzW3ldID0gY29sc1t4XTtcclxuICAgICAgICAgICAgY29sc1t4XSA9IGI7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9yZGVyKGNvbHMpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW9yZGVyIHRoZSBjb2x1bW5zXHJcbiAgICAgKiBAcmV0dXJuIHtBcnJheX0gY29sdW1ucyAgQXJyYXkgb2Ygb3JkZXJlZCBjb2x1bW4gaW5kZXhlc1xyXG4gICAgICovXHJcbiAgICBDb2x1bW5zLnByb3RvdHlwZS5vcmRlciA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcblxyXG4gICAgICAgIHZhciBhLCBiLCBjLCBkLCBoLCBzLCBjZWxsLFxyXG4gICAgICAgICAgICB0ZW1wID0gW1xyXG4gICAgICAgICAgICAgICAgW10sXHJcbiAgICAgICAgICAgICAgICBbXSxcclxuICAgICAgICAgICAgICAgIFtdLFxyXG4gICAgICAgICAgICAgICAgW11cclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgZHQgPSB0aGlzLmR0O1xyXG5cclxuICAgICAgICAvLyBPcmRlciB0aGUgaGVhZGluZ3NcclxuICAgICAgICBlYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4sIHgpIHtcclxuICAgICAgICAgICAgaCA9IGR0LmhlYWRpbmdzW2NvbHVtbl07XHJcbiAgICAgICAgICAgIHMgPSBoLmdldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIikgIT09IFwiZmFsc2VcIjtcclxuICAgICAgICAgICAgYSA9IGguY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICBhLm9yaWdpbmFsQ2VsbEluZGV4ID0geDtcclxuICAgICAgICAgICAgYS5zb3J0YWJsZSA9IHM7XHJcblxyXG4gICAgICAgICAgICB0ZW1wWzBdLnB1c2goYSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZHQuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNvbHVtbikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBiID0gaC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBiLm9yaWdpbmFsQ2VsbEluZGV4ID0geDtcclxuICAgICAgICAgICAgICAgIGIuc29ydGFibGUgPSBzO1xyXG5cclxuICAgICAgICAgICAgICAgIHRlbXBbMV0ucHVzaChiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBPcmRlciB0aGUgcm93IGNlbGxzXHJcbiAgICAgICAgZWFjaChkdC5kYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgIGMgPSByb3cuY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICAgIGQgPSByb3cuY2xvbmVOb2RlKCk7XHJcblxyXG4gICAgICAgICAgICBjLmRhdGFJbmRleCA9IGQuZGF0YUluZGV4ID0gaTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuc2VhcmNoSW5kZXggIT09IG51bGwgJiYgcm93LnNlYXJjaEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGMuc2VhcmNoSW5kZXggPSBkLnNlYXJjaEluZGV4ID0gcm93LnNlYXJjaEluZGV4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIGNlbGwgdG8gdGhlIGZyYWdtZW50IGluIHRoZSBjb3JyZWN0IG9yZGVyXHJcbiAgICAgICAgICAgIGVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbiwgeCkge1xyXG4gICAgICAgICAgICAgICAgY2VsbCA9IHJvdy5jZWxsc1tjb2x1bW5dLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNlbGwuZGF0YSA9IHJvdy5jZWxsc1tjb2x1bW5dLmRhdGE7XHJcbiAgICAgICAgICAgICAgICBjLmFwcGVuZENoaWxkKGNlbGwpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1uKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsID0gcm93LmNlbGxzW2NvbHVtbl0uY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuZGF0YSA9IHJvdy5jZWxsc1tjb2x1bW5dLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgZC5hcHBlbmRDaGlsZChjZWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0ZW1wWzJdLnB1c2goYyk7XHJcbiAgICAgICAgICAgIHRlbXBbM10ucHVzaChkKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZHQuaGVhZGluZ3MgPSB0ZW1wWzBdO1xyXG4gICAgICAgIGR0LmFjdGl2ZUhlYWRpbmdzID0gdGVtcFsxXTtcclxuXHJcbiAgICAgICAgZHQuZGF0YSA9IHRlbXBbMl07XHJcbiAgICAgICAgZHQuYWN0aXZlUm93cyA9IHRlbXBbM107XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZVxyXG4gICAgICAgIGR0LnVwZGF0ZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEhpZGUgY29sdW1uc1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcbiAgICAgICAgaWYgKGNvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHZhciBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgICAgICBlYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1uKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkdC5oaWRkZW5Db2x1bW5zLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvdyBjb2x1bW5zXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBDb2x1bW5zLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKGNvbHVtbnMpIHtcclxuICAgICAgICBpZiAoY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGluZGV4LCBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgICAgICBlYWNoKGNvbHVtbnMsIGZ1bmN0aW9uIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gZHQuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0LmhpZGRlbkNvbHVtbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgY29sdW1uKHMpIHZpc2liaWxpdHlcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIENvbHVtbnMucHJvdG90eXBlLnZpc2libGUgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICAgIHZhciBjb2xzLCBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgIGNvbHVtbnMgPSBjb2x1bW5zIHx8IGR0LmhlYWRpbmdzLm1hcChmdW5jdGlvbiAodGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoLm9yaWdpbmFsQ2VsbEluZGV4O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKGNvbHVtbnMpKSB7XHJcbiAgICAgICAgICAgIGNvbHMgPSBkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1ucykgPCAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShjb2x1bW5zKSkge1xyXG4gICAgICAgICAgICBjb2xzID0gW107XHJcbiAgICAgICAgICAgIGVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgY29scy5wdXNoKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW4pIDwgMCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGNvbHM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGEgbmV3IGNvbHVtblxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXHJcbiAgICAgICAgICAgIHRkLCB0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmR0LmhlYWRpbmdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmR0Lmluc2VydCh7XHJcbiAgICAgICAgICAgICAgICBoZWFkaW5nczogW2RhdGEuaGVhZGluZ10sXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEubWFwKGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtpXTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmR0LmhpZGRlbkhlYWRlcikge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5oZWFkaW5nLm5vZGVOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aC5hcHBlbmRDaGlsZChkYXRhLmhlYWRpbmcpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gZGF0YS5oZWFkaW5nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZHQuaGVhZGluZ3MucHVzaCh0aCk7XHJcblxyXG4gICAgICAgIGVhY2godGhpcy5kdC5kYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmRhdGFbaV0pIHtcclxuICAgICAgICAgICAgICAgIHRkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRkXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhdGFbaV0ubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZC5hcHBlbmRDaGlsZChkYXRhLmRhdGFbaV0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSBkYXRhLmRhdGFbaV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGQuZGF0YSA9IHRkLmlubmVySFRNTDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5yZW5kZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSBkYXRhLnJlbmRlci5jYWxsKHRoYXQsIHRkLmRhdGEsIHRkLCByb3cpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJvdy5hcHBlbmRDaGlsZCh0ZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGRhdGEudHlwZSkge1xyXG4gICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIiwgZGF0YS50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGRhdGEuZm9ybWF0KSB7XHJcbiAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtZm9ybWF0XCIsIGRhdGEuZm9ybWF0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KFwic29ydGFibGVcIikpIHtcclxuICAgICAgICAgICAgdGguc29ydGFibGUgPSBkYXRhLnNvcnRhYmxlO1xyXG4gICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIsIGRhdGEuc29ydGFibGUgPT09IHRydWUgPyBcInRydWVcIiA6IFwiZmFsc2VcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5kdC5yZW5kZXJIZWFkZXIoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgY29sdW1uKHMpXHJcbiAgICAgKiBAcGFyYW0gIHtBcnJheXxOdW1iZXJ9IHNlbGVjdFxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHNlbGVjdCkge1xyXG4gICAgICAgIGlmIChpc0FycmF5KHNlbGVjdCkpIHtcclxuICAgICAgICAgICAgLy8gUmVtb3ZlIGluIHJldmVyc2Ugb3RoZXJ3aXNlIHRoZSBpbmRleGVzIHdpbGwgYmUgaW5jb3JyZWN0XHJcbiAgICAgICAgICAgIHNlbGVjdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYiAtIGE7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgZWFjaChzZWxlY3QsIGZ1bmN0aW9uIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKGNvbHVtbik7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHQuaGVhZGluZ3Muc3BsaWNlKHNlbGVjdCwgMSk7XHJcblxyXG4gICAgICAgICAgICBlYWNoKHRoaXMuZHQuZGF0YSwgZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgcm93LnJlbW92ZUNoaWxkKHJvdy5jZWxsc1tzZWxlY3RdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlYnVpbGQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0IGJ5IGNvbHVtblxyXG4gICAgICogQHBhcmFtICB7aW50fSBjb2x1bW4gLSBUaGUgY29sdW1uIG5vLlxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBkaXJlY3Rpb24gLSBhc2Mgb3IgZGVzY1xyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUuc29ydCA9IGZ1bmN0aW9uIChjb2x1bW4sIGRpcmVjdGlvbiwgaW5pdCkge1xyXG5cclxuICAgICAgICB2YXIgZHQgPSB0aGlzLmR0O1xyXG5cclxuICAgICAgICAvLyBDaGVjayBjb2x1bW4gaXMgcHJlc2VudFxyXG4gICAgICAgIGlmIChkdC5oYXNIZWFkaW5ncyAmJiAoY29sdW1uIDwgMSB8fCBjb2x1bW4gPiBkdC5hY3RpdmVIZWFkaW5ncy5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGR0LnNvcnRpbmcgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHRvIHplcm8taW5kZXhlZFxyXG4gICAgICAgIGNvbHVtbiA9IGNvbHVtbiAtIDE7XHJcblxyXG4gICAgICAgIHZhciBkaXIsXHJcbiAgICAgICAgICAgIHJvd3MgPSBkdC5kYXRhLFxyXG4gICAgICAgICAgICBhbHBoYSA9IFtdLFxyXG4gICAgICAgICAgICBudW1lcmljID0gW10sXHJcbiAgICAgICAgICAgIGEgPSAwLFxyXG4gICAgICAgICAgICBuID0gMCxcclxuICAgICAgICAgICAgdGggPSBkdC5hY3RpdmVIZWFkaW5nc1tjb2x1bW5dO1xyXG5cclxuICAgICAgICBjb2x1bW4gPSB0aC5vcmlnaW5hbENlbGxJbmRleDtcclxuXHJcbiAgICAgICAgZWFjaChyb3dzLCBmdW5jdGlvbiAodHIpIHtcclxuICAgICAgICAgICAgdmFyIGNlbGwgPSB0ci5jZWxsc1tjb2x1bW5dO1xyXG4gICAgICAgICAgICB2YXIgY29udGVudCA9IGNlbGwuZGF0YTtcclxuICAgICAgICAgICAgdmFyIG51bSA9IGNvbnRlbnQucmVwbGFjZSgvKFxcJHxcXCx8XFxzfCUpL2csIFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGRhdGUgZm9ybWF0IGFuZCBtb21lbnQuanNcclxuICAgICAgICAgICAgaWYgKHRoLmdldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiKSA9PT0gXCJkYXRlXCIgJiYgd2luLm1vbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdCA9IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZCA9IHRoLmhhc0F0dHJpYnV0ZShcImRhdGEtZm9ybWF0XCIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChmb3JtYXR0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSB0aC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWZvcm1hdFwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBudW0gPSBwYXJzZURhdGUoY29udGVudCwgZm9ybWF0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBhcnNlRmxvYXQobnVtKSA9PSBudW0pIHtcclxuICAgICAgICAgICAgICAgIG51bWVyaWNbbisrXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogTnVtYmVyKG51bSksXHJcbiAgICAgICAgICAgICAgICAgICAgcm93OiB0clxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFscGhhW2ErK10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGNvbnRlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcm93OiB0clxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvKiBTb3J0IGFjY29yZGluZyB0byBkaXJlY3Rpb24gKGFzY2VuZGluZyBvciBkZXNjZW5kaW5nKSAqL1xyXG4gICAgICAgIHZhciB0b3AsIGJ0bTtcclxuICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKHRoLCBcImFzY1wiKSB8fCBkaXJlY3Rpb24gPT0gXCJhc2NcIikge1xyXG4gICAgICAgICAgICB0b3AgPSBzb3J0SXRlbXMoYWxwaGEsIC0xKTtcclxuICAgICAgICAgICAgYnRtID0gc29ydEl0ZW1zKG51bWVyaWMsIC0xKTtcclxuICAgICAgICAgICAgZGlyID0gXCJkZXNjZW5kaW5nXCI7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUodGgsIFwiYXNjXCIpO1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoLCBcImRlc2NcIik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdG9wID0gc29ydEl0ZW1zKG51bWVyaWMsIDEpO1xyXG4gICAgICAgICAgICBidG0gPSBzb3J0SXRlbXMoYWxwaGEsIDEpO1xyXG4gICAgICAgICAgICBkaXIgPSBcImFzY2VuZGluZ1wiO1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoLCBcImRlc2NcIik7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGgsIFwiYXNjXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyogQ2xlYXIgYXNjL2Rlc2MgY2xhc3MgbmFtZXMgZnJvbSB0aGUgbGFzdCBzb3J0ZWQgY29sdW1uJ3MgdGggaWYgaXQgaXNuJ3QgdGhlIHNhbWUgYXMgdGhlIG9uZSB0aGF0IHdhcyBqdXN0IGNsaWNrZWQgKi9cclxuICAgICAgICBpZiAoZHQubGFzdFRoICYmIHRoICE9IGR0Lmxhc3RUaCkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGR0Lmxhc3RUaCwgXCJkZXNjXCIpO1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGR0Lmxhc3RUaCwgXCJhc2NcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBkdC5sYXN0VGggPSB0aDtcclxuXHJcbiAgICAgICAgLyogUmVvcmRlciB0aGUgdGFibGUgKi9cclxuICAgICAgICByb3dzID0gdG9wLmNvbmNhdChidG0pO1xyXG5cclxuICAgICAgICBkdC5kYXRhID0gW107XHJcbiAgICAgICAgdmFyIGluZGV4ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgZWFjaChyb3dzLCBmdW5jdGlvbiAodiwgaSkge1xyXG4gICAgICAgICAgICBkdC5kYXRhLnB1c2godi5yb3cpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHYucm93LnNlYXJjaEluZGV4ICE9PSBudWxsICYmIHYucm93LnNlYXJjaEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4ZXMucHVzaChpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGR0KTtcclxuXHJcbiAgICAgICAgZHQuc2VhcmNoRGF0YSA9IGluZGV4ZXM7XHJcblxyXG4gICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG5cclxuICAgICAgICBkdC51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKCFpbml0KSB7XHJcbiAgICAgICAgICAgIGR0LmVtaXQoXCJkYXRhdGFibGUuc29ydFwiLCBjb2x1bW4sIGRpcik7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlYnVpbGQgdGhlIGNvbHVtbnNcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIENvbHVtbnMucHJvdG90eXBlLnJlYnVpbGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGEsIGIsIGMsIGQsIGR0ID0gdGhpcy5kdCxcclxuICAgICAgICAgICAgdGVtcCA9IFtdO1xyXG5cclxuICAgICAgICBkdC5hY3RpdmVSb3dzID0gW107XHJcbiAgICAgICAgZHQuYWN0aXZlSGVhZGluZ3MgPSBbXTtcclxuXHJcbiAgICAgICAgZWFjaChkdC5oZWFkaW5ncywgZnVuY3Rpb24gKHRoLCBpKSB7XHJcbiAgICAgICAgICAgIHRoLm9yaWdpbmFsQ2VsbEluZGV4ID0gaTtcclxuICAgICAgICAgICAgdGguc29ydGFibGUgPSB0aC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIpICE9PSBcImZhbHNlXCI7XHJcbiAgICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoaSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBkdC5hY3RpdmVIZWFkaW5ncy5wdXNoKHRoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAvLyBMb29wIG92ZXIgdGhlIHJvd3MgYW5kIHJlb3JkZXIgdGhlIGNlbGxzXHJcbiAgICAgICAgZWFjaChkdC5kYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgIGEgPSByb3cuY2xvbmVOb2RlKCk7XHJcbiAgICAgICAgICAgIGIgPSByb3cuY2xvbmVOb2RlKCk7XHJcblxyXG4gICAgICAgICAgICBhLmRhdGFJbmRleCA9IGIuZGF0YUluZGV4ID0gaTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyb3cuc2VhcmNoSW5kZXggIT09IG51bGwgJiYgcm93LnNlYXJjaEluZGV4ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGEuc2VhcmNoSW5kZXggPSBiLnNlYXJjaEluZGV4ID0gcm93LnNlYXJjaEluZGV4O1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIGNlbGwgdG8gdGhlIGZyYWdtZW50IGluIHRoZSBjb3JyZWN0IG9yZGVyXHJcbiAgICAgICAgICAgIGVhY2gocm93LmNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG4gICAgICAgICAgICAgICAgYyA9IGNlbGwuY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgYy5kYXRhID0gY2VsbC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgYS5hcHBlbmRDaGlsZChjKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZHQuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNlbGwuY2VsbEluZGV4KSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBkID0gY2VsbC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZC5kYXRhID0gY2VsbC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgICAgIGIuYXBwZW5kQ2hpbGQoZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBmcmFnbWVudCB3aXRoIHRoZSBvcmRlcmVkIGNlbGxzXHJcbiAgICAgICAgICAgIHRlbXAucHVzaChhKTtcclxuICAgICAgICAgICAgZHQuYWN0aXZlUm93cy5wdXNoKGIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkdC5kYXRhID0gdGVtcDtcclxuXHJcbiAgICAgICAgZHQudXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUm93cyBBUElcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnN0YW5jZSBEYXRhVGFibGUgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHJvd3NcclxuICAgICAqL1xyXG4gICAgdmFyIFJvd3MgPSBmdW5jdGlvbiAoZHQsIHJvd3MpIHtcclxuICAgICAgICB0aGlzLmR0ID0gZHQ7XHJcbiAgICAgICAgdGhpcy5yb3dzID0gcm93cztcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQnVpbGQgYSBuZXcgcm93XHJcbiAgICAgKiBAcGFyYW0gIHtBcnJheX0gcm93XHJcbiAgICAgKiBAcmV0dXJuIHtIVE1MRWxlbWVudH1cclxuICAgICAqL1xyXG4gICAgUm93cy5wcm90b3R5cGUuYnVpbGQgPSBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgdmFyIHRkLCB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuXHJcbiAgICAgICAgdmFyIGhlYWRpbmdzID0gdGhpcy5kdC5oZWFkaW5ncztcclxuXHJcbiAgICAgICAgaWYgKCFoZWFkaW5ncy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaGVhZGluZ3MgPSByb3cubWFwKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVhY2goaGVhZGluZ3MsIGZ1bmN0aW9uIChoLCBpKSB7XHJcbiAgICAgICAgICAgIHRkID0gY3JlYXRlRWxlbWVudChcInRkXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gRml4ZXMgIzI5XHJcbiAgICAgICAgICAgIGlmICghcm93W2ldICYmICFyb3dbaV0ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByb3dbaV0gPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSByb3dbaV07XHJcblxyXG4gICAgICAgICAgICB0ZC5kYXRhID0gcm93W2ldO1xyXG5cclxuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gdHI7XHJcbiAgICB9O1xyXG5cclxuICAgIFJvd3MucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICByZXR1cm4gcm93O1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBuZXcgcm93XHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBzZWxlY3RcclxuICAgICAqL1xyXG4gICAgUm93cy5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcbiAgICAgICAgaWYgKGlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICAgICAgdmFyIGR0ID0gdGhpcy5kdDtcclxuICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIG11bHRpcGxlIHJvd3NcclxuICAgICAgICAgICAgaWYgKGlzQXJyYXkoZGF0YVswXSkpIHtcclxuICAgICAgICAgICAgICAgIGVhY2goZGF0YSwgZnVuY3Rpb24gKHJvdywgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0LmRhdGEucHVzaCh0aGlzLmJ1aWxkKHJvdykpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkdC5kYXRhLnB1c2godGhpcy5idWlsZChkYXRhKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBkdC5jb2x1bW5zKCkucmVidWlsZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgcm93KHMpXHJcbiAgICAgKiBAcGFyYW0gIHtBcnJheXxOdW1iZXJ9IHNlbGVjdFxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgUm93cy5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHNlbGVjdCkge1xyXG5cclxuICAgICAgICB2YXIgZHQgPSB0aGlzLmR0O1xyXG5cclxuICAgICAgICBpZiAoaXNBcnJheShzZWxlY3QpKSB7XHJcbiAgICAgICAgICAgIC8vIFJlbW92ZSBpbiByZXZlcnNlIG90aGVyd2lzZSB0aGUgaW5kZXhlcyB3aWxsIGJlIGluY29ycmVjdFxyXG4gICAgICAgICAgICBzZWxlY3Quc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGIgLSBhO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGVhY2goc2VsZWN0LCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgICBkdC5kYXRhLnNwbGljZShyb3csIDEpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBkdC5kYXRhLnNwbGljZShzZWxlY3QsIDEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICBkdC5jb2x1bW5zKCkucmVidWlsZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSByb3cgaW5kZXhlc1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgUm93cy5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGVhY2godGhpcy5kdC5kYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgIHJvdy5kYXRhSW5kZXggPSBpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gICAgTUFJTiBMSUIgICAgLy9cclxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgdmFyIERhdGFUYWJsZSA9IGZ1bmN0aW9uICh0YWJsZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gdXNlciBvcHRpb25zXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKGRlZmF1bHRDb25maWcsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIHRhYmxlID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHRhYmxlO1xyXG4gICAgICAgICAgICB0YWJsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFibGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIGVsZW1lbnQgJ1wiICsgc2VsZWN0b3IgKyBcIicgY2FuIG5vdCBiZSBmb3VuZC5cIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWJsZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwidGFibGVcIikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc2VsZWN0ZWQgZWxlbWVudCBpcyBub3QgYSB0YWJsZS5cIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmluaXRpYWxMYXlvdXQgPSB0YWJsZS5pbm5lckhUTUw7XHJcbiAgICAgICAgdGhpcy5pbml0aWFsU29ydGFibGUgPSB0aGlzLm9wdGlvbnMuc29ydGFibGU7XHJcblxyXG4gICAgICAgIC8vIERpc2FibGUgbWFudWFsIHNvcnRpbmcgaWYgbm8gaGVhZGVyIGlzIHByZXNlbnQgKCM0KVxyXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLmhlYWRlcikge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuc29ydGFibGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YWJsZS50SGVhZCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kYXRhIHx8XHJcbiAgICAgICAgICAgICAgICAodGhpcy5vcHRpb25zLmRhdGEgJiYgIXRoaXMub3B0aW9ucy5kYXRhLmhlYWRpbmdzKVxyXG4gICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5zb3J0YWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFibGUudEJvZGllcy5sZW5ndGggJiYgIXRhYmxlLnRCb2RpZXNbMF0ucm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5kYXRhLmRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiWW91IHNlZW0gdG8gYmUgdXNpbmcgdGhlIGRhdGEgb3B0aW9uLCBidXQgeW91J3ZlIG5vdCBkZWZpbmVkIGFueSByb3dzLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy50YWJsZSA9IHRhYmxlO1xyXG5cclxuICAgICAgICB0aGlzLmluaXQoKTtcclxuICAgIH07XHJcblxyXG4gICAgdmFyIHByb3RvID0gRGF0YVRhYmxlLnByb3RvdHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemUgdGhlIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmluaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIGlmICh0aGlzLmluaXRpYWxpemVkIHx8IGNsYXNzTGlzdC5jb250YWlucyh0aGlzLnRhYmxlLCBcImRhdGFUYWJsZS10YWJsZVwiKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZCh0aGlzLm9wdGlvbnMsIG9wdGlvbnMgfHwge30pO1xyXG5cclxuICAgICAgICAvLyBJRSBkZXRlY3Rpb25cclxuICAgICAgICB0aGlzLmlzSUUgPSAhIS8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgIHRoaXMub25GaXJzdFBhZ2UgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmhpZGRlbkNvbHVtbnMgPSBbXTtcclxuICAgICAgICB0aGlzLmNvbHVtblJlbmRlcmVycyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRDb2x1bW5zID0gW107XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcblxyXG4gICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuaW5pdFwiKTtcclxuICAgICAgICAgICAgdGhhdC5pbml0aWFsaXplZCA9IHRydWU7XHJcbiAgICAgICAgfSwgMTApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciB0aGUgaW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICBpZiAodHlwZSkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSBcInBhZ2VcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGFnZSgpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJwYWdlclwiOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJQYWdlcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJoZWFkZXJcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVySGVhZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxyXG4gICAgICAgICAgICBvID0gdGhhdC5vcHRpb25zLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IFwiXCI7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgZGF0YSB0byBIVE1MXHJcbiAgICAgICAgaWYgKG8uZGF0YSkge1xyXG4gICAgICAgICAgICBkYXRhVG9UYWJsZS5jYWxsKHRoYXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG8uYWpheCkge1xyXG4gICAgICAgICAgICB2YXIgYWpheCA9IG8uYWpheDtcclxuICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHhoclByb2dyZXNzID0gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuZW1pdChcImRhdGF0YWJsZS5hamF4LnByb2dyZXNzXCIsIGUsIHhocik7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgeGhyTG9hZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5sb2FkZWRcIiwgZSwgeGhyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JqID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhID0gYWpheC5sb2FkID8gYWpheC5sb2FkLmNhbGwodGhhdCwgeGhyKSA6IHhoci5yZXNwb25zZVRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9IFwianNvblwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFqYXguY29udGVudCAmJiBhamF4LmNvbnRlbnQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPSBhamF4LmNvbnRlbnQudHlwZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmogPSBleHRlbmQob2JqLCBhamF4LmNvbnRlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmltcG9ydChvYmopO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5zZXRDb2x1bW5zKHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLmFqYXguc3VjY2Vzc1wiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZW1pdChcImRhdGF0YWJsZS5hamF4LmVycm9yXCIsIGUsIHhocik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHhockZhaWxlZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5lcnJvclwiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHhockNhbmNlbGxlZCA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5hYm9ydFwiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgb24oeGhyLCBcInByb2dyZXNzXCIsIHhoclByb2dyZXNzKTtcclxuICAgICAgICAgICAgb24oeGhyLCBcImxvYWRcIiwgeGhyTG9hZCk7XHJcbiAgICAgICAgICAgIG9uKHhociwgXCJlcnJvclwiLCB4aHJGYWlsZWQpO1xyXG4gICAgICAgICAgICBvbih4aHIsIFwiYWJvcnRcIiwgeGhyQ2FuY2VsbGVkKTtcclxuXHJcbiAgICAgICAgICAgIHRoYXQuZW1pdChcImRhdGF0YWJsZS5hamF4LmxvYWRpbmdcIiwgeGhyKTtcclxuXHJcbiAgICAgICAgICAgIHhoci5vcGVuKFwiR0VUXCIsIHR5cGVvZiBhamF4ID09PSBcInN0cmluZ1wiID8gby5hamF4IDogby5hamF4LnVybCk7XHJcbiAgICAgICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTdG9yZSByZWZlcmVuY2VzXHJcbiAgICAgICAgdGhhdC5ib2R5ID0gdGhhdC50YWJsZS50Qm9kaWVzWzBdO1xyXG4gICAgICAgIHRoYXQuaGVhZCA9IHRoYXQudGFibGUudEhlYWQ7XHJcbiAgICAgICAgdGhhdC5mb290ID0gdGhhdC50YWJsZS50Rm9vdDtcclxuXHJcbiAgICAgICAgaWYgKCF0aGF0LmJvZHkpIHtcclxuICAgICAgICAgICAgdGhhdC5ib2R5ID0gY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG5cclxuICAgICAgICAgICAgdGhhdC50YWJsZS5hcHBlbmRDaGlsZCh0aGF0LmJvZHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC5oYXNSb3dzID0gdGhhdC5ib2R5LnJvd3MubGVuZ3RoID4gMDtcclxuXHJcbiAgICAgICAgLy8gTWFrZSBhIHRIZWFkIGlmIHRoZXJlIGlzbid0IG9uZSAoZml4ZXMgIzgpXHJcbiAgICAgICAgaWYgKCF0aGF0LmhlYWQpIHtcclxuICAgICAgICAgICAgdmFyIGggPSBjcmVhdGVFbGVtZW50KFwidGhlYWRcIik7XHJcbiAgICAgICAgICAgIHZhciB0ID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoYXQuaGFzUm93cykge1xyXG4gICAgICAgICAgICAgICAgZWFjaCh0aGF0LmJvZHkucm93c1swXS5jZWxscywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuYXBwZW5kQ2hpbGQoY3JlYXRlRWxlbWVudChcInRoXCIpKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGguYXBwZW5kQ2hpbGQodCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoYXQuaGVhZCA9IGg7XHJcblxyXG4gICAgICAgICAgICB0aGF0LnRhYmxlLmluc2VydEJlZm9yZSh0aGF0LmhlYWQsIHRoYXQuYm9keSk7XHJcblxyXG4gICAgICAgICAgICB0aGF0LmhpZGRlbkhlYWRlciA9ICFvLmFqYXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGF0LmhlYWRpbmdzID0gW107XHJcbiAgICAgICAgdGhhdC5oYXNIZWFkaW5ncyA9IHRoYXQuaGVhZC5yb3dzLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgICAgIGlmICh0aGF0Lmhhc0hlYWRpbmdzKSB7XHJcbiAgICAgICAgICAgIHRoYXQuaGVhZGVyID0gdGhhdC5oZWFkLnJvd3NbMF07XHJcbiAgICAgICAgICAgIHRoYXQuaGVhZGluZ3MgPSBbXS5zbGljZS5jYWxsKHRoYXQuaGVhZGVyLmNlbGxzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEhlYWRlclxyXG4gICAgICAgIGlmICghby5oZWFkZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoYXQuaGVhZCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC50YWJsZS5yZW1vdmVDaGlsZCh0aGF0LnRhYmxlLnRIZWFkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gRm9vdGVyXHJcbiAgICAgICAgaWYgKG8uZm9vdGVyKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGF0LmhlYWQgJiYgIXRoYXQuZm9vdCkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5mb290ID0gY3JlYXRlRWxlbWVudChcInRmb290XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sOiB0aGF0LmhlYWQuaW5uZXJIVE1MXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoYXQudGFibGUuYXBwZW5kQ2hpbGQodGhhdC5mb290KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGF0LmZvb3QpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQudGFibGUucmVtb3ZlQ2hpbGQodGhhdC50YWJsZS50Rm9vdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEJ1aWxkXHJcbiAgICAgICAgdGhhdC53cmFwcGVyID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImRhdGFUYWJsZS13cmFwcGVyIGRhdGFUYWJsZS1sb2FkaW5nXCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gVGVtcGxhdGUgZm9yIGN1c3RvbSBsYXlvdXRzXHJcbiAgICAgICAgdGVtcGxhdGUgKz0gXCI8ZGl2IGNsYXNzPSdkYXRhVGFibGUtdG9wJz5cIjtcclxuICAgICAgICB0ZW1wbGF0ZSArPSBvLmxheW91dC50b3A7XHJcbiAgICAgICAgdGVtcGxhdGUgKz0gXCI8L2Rpdj5cIjtcclxuICAgICAgICB0ZW1wbGF0ZSArPSBcIjxkaXYgY2xhc3M9J2RhdGFUYWJsZS1jb250YWluZXInPjwvZGl2PlwiO1xyXG4gICAgICAgIHRlbXBsYXRlICs9IFwiPGRpdiBjbGFzcz0nZGF0YVRhYmxlLWJvdHRvbSc+XCI7XHJcbiAgICAgICAgdGVtcGxhdGUgKz0gby5sYXlvdXQuYm90dG9tO1xyXG4gICAgICAgIHRlbXBsYXRlICs9IFwiPC9kaXY+XCI7XHJcblxyXG4gICAgICAgIC8vIEluZm8gcGxhY2VtZW50XHJcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKFwie2luZm99XCIsIFwiPGRpdiBjbGFzcz0nZGF0YVRhYmxlLWluZm8nPjwvZGl2PlwiKTtcclxuXHJcbiAgICAgICAgLy8gUGVyIFBhZ2UgU2VsZWN0XHJcbiAgICAgICAgaWYgKG8ucGVyUGFnZVNlbGVjdCkge1xyXG4gICAgICAgICAgICB2YXIgd3JhcCA9IFwiPGRpdiBjbGFzcz0nZGF0YVRhYmxlLWRyb3Bkb3duJz48bGFiZWw+XCI7XHJcbiAgICAgICAgICAgIHdyYXAgKz0gby5sYWJlbHMucGVyUGFnZTtcclxuICAgICAgICAgICAgd3JhcCArPSBcIjwvbGFiZWw+PC9kaXY+XCI7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIHNlbGVjdFxyXG4gICAgICAgICAgICB2YXIgc2VsZWN0ID0gY3JlYXRlRWxlbWVudChcInNlbGVjdFwiLCB7XHJcbiAgICAgICAgICAgICAgICBjbGFzczogXCJkYXRhVGFibGUtc2VsZWN0b3JcIlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0aGUgb3B0aW9uc1xyXG4gICAgICAgICAgICBlYWNoKG8ucGVyUGFnZVNlbGVjdCwgZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gdmFsID09PSBvLnBlclBhZ2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3B0aW9uID0gbmV3IE9wdGlvbih2YWwsIHZhbCwgc2VsZWN0ZWQsIHNlbGVjdGVkKTtcclxuICAgICAgICAgICAgICAgIHNlbGVjdC5hZGQob3B0aW9uKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDdXN0b20gbGFiZWxcclxuICAgICAgICAgICAgd3JhcCA9IHdyYXAucmVwbGFjZShcIntzZWxlY3R9XCIsIHNlbGVjdC5vdXRlckhUTUwpO1xyXG5cclxuICAgICAgICAgICAgLy8gU2VsZWN0b3IgcGxhY2VtZW50XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntzZWxlY3R9XCIsIHdyYXApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntzZWxlY3R9XCIsIFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU2VhcmNoYWJsZVxyXG4gICAgICAgIGlmIChvLnNlYXJjaGFibGUpIHtcclxuICAgICAgICAgICAgdmFyIGZvcm0gPVxyXG4gICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdkYXRhVGFibGUtc2VhcmNoJz48aW5wdXQgY2xhc3M9J2RhdGFUYWJsZS1pbnB1dCcgcGxhY2Vob2xkZXI9J1wiICtcclxuICAgICAgICAgICAgICAgIG8ubGFiZWxzLnBsYWNlaG9sZGVyICtcclxuICAgICAgICAgICAgICAgIFwiJyB0eXBlPSd0ZXh0Jz48L2Rpdj5cIjtcclxuXHJcbiAgICAgICAgICAgIC8vIFNlYXJjaCBpbnB1dCBwbGFjZW1lbnRcclxuICAgICAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKFwie3NlYXJjaH1cIiwgZm9ybSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKFwie3NlYXJjaH1cIiwgXCJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhhdC5oYXNIZWFkaW5ncykge1xyXG4gICAgICAgICAgICAvLyBTb3J0YWJsZVxyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcihcImhlYWRlclwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEFkZCB0YWJsZSBjbGFzc1xyXG4gICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC50YWJsZSwgXCJkYXRhVGFibGUtdGFibGVcIik7XHJcblxyXG4gICAgICAgIC8vIFBhZ2luYXRvclxyXG4gICAgICAgIHZhciB3ID0gY3JlYXRlRWxlbWVudChcImRpdlwiLCB7XHJcbiAgICAgICAgICAgIGNsYXNzOiBcImRhdGFUYWJsZS1wYWdpbmF0aW9uXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICB2YXIgcGFnaW5hdG9yID0gY3JlYXRlRWxlbWVudChcInVsXCIpO1xyXG4gICAgICAgIHcuYXBwZW5kQ2hpbGQocGFnaW5hdG9yKTtcclxuXHJcbiAgICAgICAgLy8gUGFnZXIocykgcGxhY2VtZW50XHJcbiAgICAgICAgdGVtcGxhdGUgPSB0ZW1wbGF0ZS5yZXBsYWNlKC9cXHtwYWdlclxcfS9nLCB3Lm91dGVySFRNTCk7XHJcblxyXG4gICAgICAgIHRoYXQud3JhcHBlci5pbm5lckhUTUwgPSB0ZW1wbGF0ZTtcclxuXHJcbiAgICAgICAgdGhhdC5jb250YWluZXIgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5kYXRhVGFibGUtY29udGFpbmVyXCIpO1xyXG5cclxuICAgICAgICB0aGF0LnBhZ2VycyA9IHRoYXQud3JhcHBlci5xdWVyeVNlbGVjdG9yQWxsKFwiLmRhdGFUYWJsZS1wYWdpbmF0aW9uXCIpO1xyXG5cclxuICAgICAgICB0aGF0LmxhYmVsID0gdGhhdC53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuZGF0YVRhYmxlLWluZm9cIik7XHJcblxyXG4gICAgICAgIC8vIEluc2VydCBpbiB0byBET00gdHJlZVxyXG4gICAgICAgIHRoYXQudGFibGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodGhhdC53cmFwcGVyLCB0aGF0LnRhYmxlKTtcclxuICAgICAgICB0aGF0LmNvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGF0LnRhYmxlKTtcclxuXHJcbiAgICAgICAgLy8gU3RvcmUgdGhlIHRhYmxlIGRpbWVuc2lvbnNcclxuICAgICAgICB0aGF0LnJlY3QgPSB0aGF0LnRhYmxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IHJvd3MgdG8gYXJyYXkgZm9yIHByb2Nlc3NpbmdcclxuICAgICAgICB0aGF0LmRhdGEgPSBbXS5zbGljZS5jYWxsKHRoYXQuYm9keS5yb3dzKTtcclxuICAgICAgICB0aGF0LmFjdGl2ZVJvd3MgPSB0aGF0LmRhdGEuc2xpY2UoKTtcclxuICAgICAgICB0aGF0LmFjdGl2ZUhlYWRpbmdzID0gdGhhdC5oZWFkaW5ncy5zbGljZSgpO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGVcclxuICAgICAgICB0aGF0LnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBpZiAoIW8uYWpheCkge1xyXG4gICAgICAgICAgICB0aGF0LnNldENvbHVtbnMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZpeCBoZWlnaHRcclxuICAgICAgICB0aGlzLmZpeEhlaWdodCgpO1xyXG5cclxuICAgICAgICAvLyBGaXggY29sdW1uc1xyXG4gICAgICAgIHRoYXQuZml4Q29sdW1ucygpO1xyXG5cclxuICAgICAgICAvLyBDbGFzcyBuYW1lc1xyXG4gICAgICAgIGlmICghby5oZWFkZXIpIHtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LndyYXBwZXIsIFwibm8taGVhZGVyXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFvLmZvb3Rlcikge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQud3JhcHBlciwgXCJuby1mb290ZXJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoby5zb3J0YWJsZSkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQud3JhcHBlciwgXCJzb3J0YWJsZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvLnNlYXJjaGFibGUpIHtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LndyYXBwZXIsIFwic2VhcmNoYWJsZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvLmZpeGVkSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC53cmFwcGVyLCBcImZpeGVkLWhlaWdodFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvLmZpeGVkQ29sdW1ucykge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQud3JhcHBlciwgXCJmaXhlZC1jb2x1bW5zXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC5iaW5kRXZlbnRzKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIHRoZSBwYWdlXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5yZW5kZXJQYWdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmhhc1Jvd3MgJiYgdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlID4gdGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVXNlIGEgZnJhZ21lbnQgdG8gbGltaXQgdG91Y2hpbmcgdGhlIERPTVxyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmN1cnJlbnRQYWdlIC0gMSxcclxuICAgICAgICAgICAgICAgIGZyYWcgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzSGVhZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgIGZsdXNoKHRoaXMuaGVhZGVyLCB0aGlzLmlzSUUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5hY3RpdmVIZWFkaW5ncywgZnVuY3Rpb24gKHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXIuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVhY2godGhpcy5wYWdlc1tpbmRleF0sIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQodGhpcy5yb3dzKCkucmVuZGVyKHJvdykpO1xyXG4gICAgICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIoZnJhZyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLm9uRmlyc3RQYWdlID0gdGhpcy5jdXJyZW50UGFnZSA9PT0gMTtcclxuICAgICAgICAgICAgdGhpcy5vbkxhc3RQYWdlID0gdGhpcy5jdXJyZW50UGFnZSA9PT0gdGhpcy5sYXN0UGFnZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGUgdGhlIGluZm9cclxuICAgICAgICB2YXIgY3VycmVudCA9IDAsXHJcbiAgICAgICAgICAgIGYgPSAwLFxyXG4gICAgICAgICAgICB0ID0gMCxcclxuICAgICAgICAgICAgaXRlbXM7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsUGFnZXMpIHtcclxuICAgICAgICAgICAgY3VycmVudCA9IHRoaXMuY3VycmVudFBhZ2UgLSAxO1xyXG4gICAgICAgICAgICBmID0gY3VycmVudCAqIHRoaXMub3B0aW9ucy5wZXJQYWdlO1xyXG4gICAgICAgICAgICB0ID0gZiArIHRoaXMucGFnZXNbY3VycmVudF0ubGVuZ3RoO1xyXG4gICAgICAgICAgICBmID0gZiArIDE7XHJcbiAgICAgICAgICAgIGl0ZW1zID0gISF0aGlzLnNlYXJjaGluZyA/IHRoaXMuc2VhcmNoRGF0YS5sZW5ndGggOiB0aGlzLmRhdGEubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMubGFiZWwgJiYgdGhpcy5vcHRpb25zLmxhYmVscy5pbmZvLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyBDVVNUT00gTEFCRUxTXHJcbiAgICAgICAgICAgIHZhciBzdHJpbmcgPSB0aGlzLm9wdGlvbnMubGFiZWxzLmluZm9cclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwie3N0YXJ0fVwiLCBmKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ7ZW5kfVwiLCB0KVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ7cGFnZX1cIiwgdGhpcy5jdXJyZW50UGFnZSlcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwie3BhZ2VzfVwiLCB0aGlzLnRvdGFsUGFnZXMpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIntyb3dzfVwiLCBpdGVtcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmxhYmVsLmlubmVySFRNTCA9IGl0ZW1zID8gc3RyaW5nIDogXCJcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRQYWdlID09IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5maXhIZWlnaHQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIHRoZSBwYWdlcihzKVxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVuZGVyUGFnZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZmx1c2godGhpcy5wYWdlcnMsIHRoaXMuaXNJRSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnRvdGFsUGFnZXMgPiAxKSB7XHJcbiAgICAgICAgICAgIHZhciBjID0gXCJwYWdlclwiLFxyXG4gICAgICAgICAgICAgICAgZnJhZyA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXHJcbiAgICAgICAgICAgICAgICBwcmV2ID0gdGhpcy5vbkZpcnN0UGFnZSA/IDEgOiB0aGlzLmN1cnJlbnRQYWdlIC0gMSxcclxuICAgICAgICAgICAgICAgIG5leHQgPSB0aGlzLm9ubGFzdFBhZ2UgPyB0aGlzLnRvdGFsUGFnZXMgOiB0aGlzLmN1cnJlbnRQYWdlICsgMTtcclxuXHJcbiAgICAgICAgICAgIC8vIGZpcnN0IGJ1dHRvblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpcnN0TGFzdCkge1xyXG4gICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChidXR0b24oYywgMSwgdGhpcy5vcHRpb25zLmZpcnN0VGV4dCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwcmV2IGJ1dHRvblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5leHRQcmV2KSB7XHJcbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1dHRvbihjLCBwcmV2LCB0aGlzLm9wdGlvbnMucHJldlRleHQpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmFyIHBhZ2VyID0gdGhpcy5saW5rcztcclxuXHJcbiAgICAgICAgICAgIC8vIHRydW5jYXRlIHRoZSBsaW5rc1xyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRydW5jYXRlUGFnZXIpIHtcclxuICAgICAgICAgICAgICAgIHBhZ2VyID0gdHJ1bmNhdGUoXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5rcyxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5wYWdlckRlbHRhLFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5lbGxpcHNpc1RleHRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFjdGl2ZSBwYWdlIGxpbmtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGlzLmxpbmtzW3RoaXMuY3VycmVudFBhZ2UgLSAxXSwgXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgICAvLyBhcHBlbmQgdGhlIGxpbmtzXHJcbiAgICAgICAgICAgIGVhY2gocGFnZXIsIGZ1bmN0aW9uIChwKSB7XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHAsIFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChwKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoaXMubGlua3NbdGhpcy5jdXJyZW50UGFnZSAtIDFdLCBcImFjdGl2ZVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG5leHQgYnV0dG9uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMubmV4dFByZXYpIHtcclxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoYnV0dG9uKGMsIG5leHQsIHRoaXMub3B0aW9ucy5uZXh0VGV4dCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBmaXJzdCBidXR0b25cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maXJzdExhc3QpIHtcclxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoYnV0dG9uKGMsIHRoaXMudG90YWxQYWdlcywgdGhpcy5vcHRpb25zLmxhc3RUZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFdlIG1heSBoYXZlIG1vcmUgdGhhbiBvbmUgcGFnZXJcclxuICAgICAgICAgICAgZWFjaCh0aGlzLnBhZ2VycywgZnVuY3Rpb24gKHBhZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICBwYWdlci5hcHBlbmRDaGlsZChmcmFnLmNsb25lTm9kZSh0cnVlKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgdGhlIGhlYWRlclxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVuZGVySGVhZGVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgdGhhdC5sYWJlbHMgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKHRoYXQuaGVhZGluZ3MgJiYgdGhhdC5oZWFkaW5ncy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZWFjaCh0aGF0LmhlYWRpbmdzLCBmdW5jdGlvbiAodGgsIGkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGF0LmxhYmVsc1tpXSA9IHRoLnRleHRDb250ZW50O1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnModGguZmlyc3RFbGVtZW50Q2hpbGQsIFwiZGF0YVRhYmxlLXNvcnRlclwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoLmlubmVySFRNTCA9IHRoLmZpcnN0RWxlbWVudENoaWxkLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aC5zb3J0YWJsZSA9IHRoLmdldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIikgIT09IFwiZmFsc2VcIjtcclxuXHJcbiAgICAgICAgICAgICAgICB0aC5vcmlnaW5hbENlbGxJbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhhdC5vcHRpb25zLnNvcnRhYmxlICYmIHRoLnNvcnRhYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmsgPSBjcmVhdGVFbGVtZW50KFwiYVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhyZWY6IFwiI1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJkYXRhVGFibGUtc29ydGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IHRoLmlubmVySFRNTFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGguYXBwZW5kQ2hpbGQobGluayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC5maXhDb2x1bW5zKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQmluZCBldmVudCBsaXN0ZW5lcnNcclxuICAgICAqIEByZXR1cm4ge1t0eXBlXX0gW2Rlc2NyaXB0aW9uXVxyXG4gICAgICovXHJcbiAgICBwcm90by5iaW5kRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcclxuICAgICAgICAgICAgbyA9IHRoYXQub3B0aW9ucztcclxuXHJcbiAgICAgICAgLy8gUGVyIHBhZ2Ugc2VsZWN0b3JcclxuICAgICAgICBpZiAoby5wZXJQYWdlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHRoYXQud3JhcHBlci5xdWVyeVNlbGVjdG9yKFwiLmRhdGFUYWJsZS1zZWxlY3RvclwiKTtcclxuICAgICAgICAgICAgaWYgKHNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBDaGFuZ2UgcGVyIHBhZ2VcclxuICAgICAgICAgICAgICAgIG9uKHNlbGVjdG9yLCBcImNoYW5nZVwiLCBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8ucGVyUGFnZSA9IHBhcnNlSW50KHRoaXMudmFsdWUsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmZpeEhlaWdodCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUucGVycGFnZVwiLCBvLnBlclBhZ2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNlYXJjaCBpbnB1dFxyXG4gICAgICAgIGlmIChvLnNlYXJjaGFibGUpIHtcclxuICAgICAgICAgICAgdGhhdC5pbnB1dCA9IHRoYXQud3JhcHBlci5xdWVyeVNlbGVjdG9yKFwiLmRhdGFUYWJsZS1pbnB1dFwiKTtcclxuICAgICAgICAgICAgaWYgKHRoYXQuaW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIG9uKHRoYXQuaW5wdXQsIFwia2V5dXBcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlYXJjaCh0aGlzLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBQYWdlcihzKSAvIHNvcnRpbmdcclxuICAgICAgICBvbih0aGF0LndyYXBwZXIsIFwiY2xpY2tcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgdmFyIHQgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgaWYgKHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJhXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0Lmhhc0F0dHJpYnV0ZShcImRhdGEtcGFnZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucGFnZSh0LmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgICAgICBvLnNvcnRhYmxlICYmXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NMaXN0LmNvbnRhaW5zKHQsIFwiZGF0YVRhYmxlLXNvcnRlclwiKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHQucGFyZW50Tm9kZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIpICE9IFwiZmFsc2VcIlxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5zKCkuc29ydCh0aGF0LmFjdGl2ZUhlYWRpbmdzLmluZGV4T2YodC5wYXJlbnROb2RlKSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB1cCBjb2x1bW5zXHJcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc2V0Q29sdW1ucyA9IGZ1bmN0aW9uIChhamF4KSB7XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgaWYgKCFhamF4KSB7XHJcbiAgICAgICAgICAgIGVhY2godGhhdC5kYXRhLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKHJvdy5jZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLmRhdGEgPSBjZWxsLmlubmVySFRNTDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGZvciB0aGUgY29sdW1ucyBvcHRpb25cclxuICAgICAgICBpZiAodGhhdC5vcHRpb25zLmNvbHVtbnMgJiYgdGhhdC5oZWFkaW5ncy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgIGVhY2godGhhdC5vcHRpb25zLmNvbHVtbnMsIGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY29udmVydCBzaW5nbGUgY29sdW1uIHNlbGVjdGlvbiB0byBhcnJheVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpc0FycmF5KGRhdGEuc2VsZWN0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGEuc2VsZWN0ID0gW2RhdGEuc2VsZWN0XTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShcInJlbmRlclwiKSAmJiB0eXBlb2YgZGF0YS5yZW5kZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuc2VsZWN0ZWRDb2x1bW5zID0gdGhhdC5zZWxlY3RlZENvbHVtbnMuY29uY2F0KGRhdGEuc2VsZWN0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5SZW5kZXJlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM6IGRhdGEuc2VsZWN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlcjogZGF0YS5yZW5kZXJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBBZGQgdGhlIGRhdGEgYXR0cmlidXRlcyB0byB0aGUgdGggZWxlbWVudHNcclxuICAgICAgICAgICAgICAgIGVhY2goZGF0YS5zZWxlY3QsIGZ1bmN0aW9uIChjb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGggPSB0aGF0LmhlYWRpbmdzW2NvbHVtbl07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXR5cGVcIiwgZGF0YS50eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZm9ybWF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtZm9ybWF0XCIsIGRhdGEuZm9ybWF0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJzb3J0YWJsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIsIGRhdGEuc29ydGFibGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJoaWRkZW5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGlkZGVuICE9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5zKGNvbHVtbikuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShcInNvcnRcIikgJiYgZGF0YS5zZWxlY3QubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY29sdW1ucygpLnNvcnQoZGF0YS5zZWxlY3RbMF0gKyAxLCBkYXRhLnNvcnQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGF0Lmhhc1Jvd3MpIHtcclxuICAgICAgICAgICAgZWFjaCh0aGF0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgICAgICAgIHJvdy5kYXRhSW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5kYXRhID0gY2VsbC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhhdC5zZWxlY3RlZENvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBlYWNoKHRoYXQuZGF0YSwgZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2gocm93LmNlbGxzLCBmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhhdC5zZWxlY3RlZENvbHVtbnMuaW5kZXhPZihpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoKHRoYXQuY29sdW1uUmVuZGVyZXJzLCBmdW5jdGlvbiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvLmNvbHVtbnMuaW5kZXhPZihpKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuaW5uZXJIVE1MID0gby5yZW5kZXJlci5jYWxsKHRoYXQsIGNlbGwuZGF0YSwgY2VsbCwgcm93KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoYXQuY29sdW1ucygpLnJlYnVpbGQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoYXQucmVuZGVyKFwiaGVhZGVyXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIERlc3Ryb3kgdGhlIGluc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMudGFibGUuaW5uZXJIVE1MID0gdGhpcy5pbml0aWFsTGF5b3V0O1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgdGhlIGNsYXNzTmFtZVxyXG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUodGhpcy50YWJsZSwgXCJkYXRhVGFibGUtdGFibGVcIik7XHJcblxyXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgY29udGFpbmVyc1xyXG4gICAgICAgIHRoaXMud3JhcHBlci5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZCh0aGlzLnRhYmxlLCB0aGlzLndyYXBwZXIpO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBpbnN0YW5jZVxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8udXBkYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucGFnaW5hdGUodGhpcyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoXCJwYWdlXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmxpbmtzID0gW107XHJcblxyXG4gICAgICAgIHZhciBpID0gdGhpcy5wYWdlcy5sZW5ndGg7XHJcbiAgICAgICAgd2hpbGUgKGktLSkge1xyXG4gICAgICAgICAgICB2YXIgbnVtID0gaSArIDE7XHJcbiAgICAgICAgICAgIHRoaXMubGlua3NbaV0gPSBidXR0b24oaSA9PT0gMCA/IFwiYWN0aXZlXCIgOiBcIlwiLCBudW0sIG51bSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNvcnRpbmcgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXIoXCJwYWdlclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5yb3dzKCkudXBkYXRlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS51cGRhdGVcIik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU29ydCByb3dzIGludG8gcGFnZXNcclxuICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucGFnaW5hdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBlclBhZ2UgPSB0aGlzLm9wdGlvbnMucGVyUGFnZSxcclxuICAgICAgICAgICAgcm93cyA9IHRoaXMuYWN0aXZlUm93cztcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2VhcmNoaW5nKSB7XHJcbiAgICAgICAgICAgIHJvd3MgPSBbXTtcclxuXHJcbiAgICAgICAgICAgIGVhY2godGhpcy5zZWFyY2hEYXRhLCBmdW5jdGlvbiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgIHJvd3MucHVzaCh0aGlzLmFjdGl2ZVJvd3NbaW5kZXhdKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgaGlkZGVuIGNvbHVtbnNcclxuICAgICAgICB0aGlzLnBhZ2VzID0gcm93c1xyXG4gICAgICAgICAgICAubWFwKGZ1bmN0aW9uICh0ciwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgJSBwZXJQYWdlID09PSAwID8gcm93cy5zbGljZShpLCBpICsgcGVyUGFnZSkgOiBudWxsO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChwYWdlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMudG90YWxQYWdlcyA9IHRoaXMubGFzdFBhZ2UgPSB0aGlzLnBhZ2VzLmxlbmd0aDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudG90YWxQYWdlcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXggY29sdW1uIHdpZHRoc1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZml4Q29sdW1ucyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maXhlZENvbHVtbnMgJiYgdGhpcy5hY3RpdmVIZWFkaW5ncyAmJiB0aGlzLmFjdGl2ZUhlYWRpbmdzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGNlbGxzLFxyXG4gICAgICAgICAgICAgICAgaGQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1uV2lkdGhzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBJZiB3ZSBoYXZlIGhlYWRpbmdzIHdlIG5lZWQgb25seSBzZXQgdGhlIHdpZHRocyBvbiB0aGVtXHJcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSB3ZSBuZWVkIGEgdGVtcCBoZWFkZXIgYW5kIHRoZSB3aWR0aHMgbmVlZCBhcHBseWluZyB0byBhbGwgY2VsbHNcclxuICAgICAgICAgICAgaWYgKHRoaXMudGFibGUudEhlYWQpIHtcclxuICAgICAgICAgICAgICAgIC8vIFJlc2V0IHdpZHRoc1xyXG4gICAgICAgICAgICAgICAgZWFjaCh0aGlzLmFjdGl2ZUhlYWRpbmdzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUud2lkdGggPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWFjaCh0aGlzLmFjdGl2ZUhlYWRpbmdzLCBmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvdyA9IGNlbGwub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBvdyAvIHRoaXMucmVjdC53aWR0aCAqIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLndpZHRoID0gdyArIFwiJVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uV2lkdGhzW2ldID0gb3c7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNlbGxzID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gTWFrZSB0ZW1wZXJhcnkgaGVhZGluZ3NcclxuICAgICAgICAgICAgICAgIGhkID0gY3JlYXRlRWxlbWVudChcInRoZWFkXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBjcmVhdGVFbGVtZW50KFwidHJcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IHRoaXMudGFibGUudEJvZGllc1swXS5yb3dzWzBdLmNlbGxzO1xyXG4gICAgICAgICAgICAgICAgZWFjaChjLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoID0gY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHIuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzLnB1c2godGgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaGQuYXBwZW5kQ2hpbGQocik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLmluc2VydEJlZm9yZShoZCwgdGhpcy5ib2R5KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgd2lkdGhzID0gW107XHJcbiAgICAgICAgICAgICAgICBlYWNoKGNlbGxzLCBmdW5jdGlvbiAoY2VsbCwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvdyA9IGNlbGwub2Zmc2V0V2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHcgPSBvdyAvIHRoaXMucmVjdC53aWR0aCAqIDEwMDtcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aHMucHVzaCh3KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbldpZHRoc1tpXSA9IG93O1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZWFjaCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBlYWNoKHJvdy5jZWxscywgZnVuY3Rpb24gKGNlbGwsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1ucyhjZWxsLmNlbGxJbmRleCkudmlzaWJsZSgpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IHdpZHRoc1tpXSArIFwiJVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gRGlzY2FyZCB0aGUgdGVtcCBoZWFkZXJcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGUucmVtb3ZlQ2hpbGQoaGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpeCB0aGUgY29udGFpbmVyIGhlaWdodDtcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmZpeEhlaWdodCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmZpeGVkSGVpZ2h0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLnN0eWxlLmhlaWdodCA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMucmVjdCA9IHRoaXMuY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSB0aGlzLnJlY3QuaGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQZXJmb3JtIGEgc2VhcmNoIG9mIHRoZSBkYXRhIHNldFxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBxdWVyeVxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc2VhcmNoID0gZnVuY3Rpb24gKHF1ZXJ5KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc1Jvd3MpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICBxdWVyeSA9IHF1ZXJ5LnRvTG93ZXJDYXNlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgIHRoaXMuc2VhcmNoaW5nID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnNlYXJjaERhdGEgPSBbXTtcclxuXHJcbiAgICAgICAgaWYgKCFxdWVyeS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5lbWl0KFwiZGF0YXRhYmxlLnNlYXJjaFwiLCBxdWVyeSwgdGhpcy5zZWFyY2hEYXRhKTtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSh0aGlzLndyYXBwZXIsIFwic2VhcmNoLXJlc3VsdHNcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2xlYXIoKTtcclxuXHJcbiAgICAgICAgZWFjaCh0aGlzLmRhdGEsIGZ1bmN0aW9uIChyb3csIGlkeCkge1xyXG4gICAgICAgICAgICB2YXIgaW5BcnJheSA9IHRoaXMuc2VhcmNoRGF0YS5pbmRleE9mKHJvdykgPiAtMTtcclxuXHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2JpdXMxL1ZhbmlsbGEtRGF0YVRhYmxlcy9pc3N1ZXMvMTJcclxuICAgICAgICAgICAgdmFyIGRvZXNRdWVyeU1hdGNoID0gcXVlcnkuc3BsaXQoXCIgXCIpLnJlZHVjZShmdW5jdGlvbiAoYm9vbCwgd29yZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluY2x1ZGVzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCByb3cuY2VsbHMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5jZWxsc1t4XS50ZXh0Q29udGVudC50b0xvd2VyQ2FzZSgpLmluZGV4T2Yod29yZCkgPiAtMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNvbHVtbnMocm93LmNlbGxzW3hdLmNlbGxJbmRleCkudmlzaWJsZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY2x1ZGVzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBib29sICYmIGluY2x1ZGVzO1xyXG4gICAgICAgICAgICB9LCB0cnVlKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkb2VzUXVlcnlNYXRjaCAmJiAhaW5BcnJheSkge1xyXG4gICAgICAgICAgICAgICAgcm93LnNlYXJjaEluZGV4ID0gaWR4O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWFyY2hEYXRhLnB1c2goaWR4KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJvdy5zZWFyY2hJbmRleCA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKTtcclxuXHJcbiAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGlzLndyYXBwZXIsIFwic2VhcmNoLXJlc3VsdHNcIik7XHJcblxyXG4gICAgICAgIGlmICghdGhhdC5zZWFyY2hEYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoYXQud3JhcHBlciwgXCJzZWFyY2gtcmVzdWx0c1wiKTtcclxuXHJcbiAgICAgICAgICAgIHRoYXQuc2V0TWVzc2FnZSh0aGF0Lm9wdGlvbnMubGFiZWxzLm5vUm93cyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhhdC51cGRhdGUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS5zZWFyY2hcIiwgcXVlcnksIHRoaXMuc2VhcmNoRGF0YSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hhbmdlIHBhZ2VcclxuICAgICAqIEBwYXJhbSAge2ludH0gcGFnZVxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucGFnZSA9IGZ1bmN0aW9uIChwYWdlKSB7XHJcbiAgICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBsb2FkIHRoZSBjdXJyZW50IHBhZ2UgYWdhaW4uXHJcbiAgICAgICAgaWYgKHBhZ2UgPT0gdGhpcy5jdXJyZW50UGFnZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKHBhZ2UpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBwYXJzZUludChwYWdlLCAxMCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocGFnZSA+IHRoaXMucGFnZXMubGVuZ3RoIHx8IHBhZ2UgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyKFwicGFnZVwiKTtcclxuICAgICAgICB0aGlzLnJlbmRlcihcInBhZ2VyXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQoXCJkYXRhdGFibGUucGFnZVwiLCBwYWdlKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTb3J0IGJ5IGNvbHVtblxyXG4gICAgICogQHBhcmFtICB7aW50fSBjb2x1bW4gLSBUaGUgY29sdW1uIG5vLlxyXG4gICAgICogQHBhcmFtICB7c3RyaW5nfSBkaXJlY3Rpb24gLSBhc2Mgb3IgZGVzY1xyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc29ydENvbHVtbiA9IGZ1bmN0aW9uIChjb2x1bW4sIGRpcmVjdGlvbikge1xyXG4gICAgICAgIC8vIFVzZSBjb2x1bW5zIEFQSSB1bnRpbCBzb3J0Q29sdW1uIG1ldGhvZCBpcyByZW1vdmVkXHJcbiAgICAgICAgdGhpcy5jb2x1bW5zKCkuc29ydChjb2x1bW4sIGRpcmVjdGlvbik7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIG5ldyByb3cgZGF0YVxyXG4gICAgICogQHBhcmFtIHtvYmplY3R9IGRhdGFcclxuICAgICAqL1xyXG4gICAgcHJvdG8uaW5zZXJ0ID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuXHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzLFxyXG4gICAgICAgICAgICByb3dzID0gW107XHJcbiAgICAgICAgaWYgKGlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmhlYWRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoYXQuaGFzSGVhZGluZ3MgJiYgIXRoYXQuaGFzUm93cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChkYXRhLmhlYWRpbmdzLCBmdW5jdGlvbiAoaGVhZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBoZWFkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQodGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZC5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGVyID0gdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5oZWFkaW5ncyA9IFtdLnNsaWNlLmNhbGwodHIuY2VsbHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGFzSGVhZGluZ3MgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZS1lbmFibGUgc29ydGluZyBpZiBpdCB3YXMgZGlzYWJsZWQgZHVlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdG8gbWlzc2luZyBoZWFkZXJcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm9wdGlvbnMuc29ydGFibGUgPSB0aGF0LmluaXRpYWxTb3J0YWJsZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxsb3cgc29ydGluZyBvbiBuZXcgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5yZW5kZXIoXCJoZWFkZXJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkYXRhLmRhdGEgJiYgaXNBcnJheShkYXRhLmRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICByb3dzID0gZGF0YS5kYXRhO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGRhdGEpKSB7XHJcbiAgICAgICAgICAgIGVhY2goZGF0YSwgZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGVhY2gocm93LCBmdW5jdGlvbiAoY2VsbCwgaGVhZGluZykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGF0LmxhYmVscy5pbmRleE9mKGhlYWRpbmcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByW2luZGV4XSA9IGNlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByb3dzLnB1c2gocik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoYXQucm93cygpLmFkZChyb3dzKTtcclxuXHJcbiAgICAgICAgICAgIHRoYXQuaGFzUm93cyA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGF0LnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGF0LmZpeENvbHVtbnMoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWZyZXNoIHRoZSBpbnN0YW5jZVxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVmcmVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNlYXJjaGFibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAxO1xyXG4gICAgICAgIHRoaXMub25GaXJzdFBhZ2UgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS5yZWZyZXNoXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRydW5jYXRlIHRoZSB0YWJsZVxyXG4gICAgICogQHBhcmFtICB7bWl4ZXN9IGh0bWwgLSBIVE1MIHN0cmluZyBvciBIVE1MRWxlbWVudFxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uY2xlYXIgPSBmdW5jdGlvbiAoaHRtbCkge1xyXG4gICAgICAgIGlmICh0aGlzLmJvZHkpIHtcclxuICAgICAgICAgICAgZmx1c2godGhpcy5ib2R5LCB0aGlzLmlzSUUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHBhcmVudCA9IHRoaXMuYm9keTtcclxuICAgICAgICBpZiAoIXRoaXMuYm9keSkge1xyXG4gICAgICAgICAgICBwYXJlbnQgPSB0aGlzLnRhYmxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGh0bWwpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBodG1sID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZnJhZyA9IGRvYy5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBmcmFnLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHBhcmVudC5hcHBlbmRDaGlsZChodG1sKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXhwb3J0IHRhYmxlIHRvIHZhcmlvdXMgZm9ybWF0cyAoY3N2LCB0eHQgb3Igc3FsKVxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIFVzZXIgb3B0aW9uc1xyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZXhwb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaGFzSGVhZGluZ3MgJiYgIXRoaXMuaGFzUm93cykgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGVycyA9IHRoaXMuYWN0aXZlSGVhZGluZ3MsXHJcbiAgICAgICAgICAgIHJvd3MgPSBbXSxcclxuICAgICAgICAgICAgYXJyID0gW10sXHJcbiAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgIHgsXHJcbiAgICAgICAgICAgIHN0cixcclxuICAgICAgICAgICAgbGluaztcclxuXHJcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICBkb3dubG9hZDogdHJ1ZSxcclxuICAgICAgICAgICAgc2tpcENvbHVtbjogW10sXHJcblxyXG4gICAgICAgICAgICAvLyBjc3ZcclxuICAgICAgICAgICAgbGluZURlbGltaXRlcjogXCJcXG5cIixcclxuICAgICAgICAgICAgY29sdW1uRGVsaW1pdGVyOiBcIixcIixcclxuXHJcbiAgICAgICAgICAgIC8vIHNxbFxyXG4gICAgICAgICAgICB0YWJsZU5hbWU6IFwibXlUYWJsZVwiLFxyXG5cclxuICAgICAgICAgICAgLy8ganNvblxyXG4gICAgICAgICAgICByZXBsYWNlcjogbnVsbCxcclxuICAgICAgICAgICAgc3BhY2U6IDRcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgdGhlIG9wdGlvbnMgb2JqZWN0XHJcbiAgICAgICAgaWYgKCFpc09iamVjdChvcHRpb25zKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbyA9IGV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmIChvLnR5cGUpIHtcclxuICAgICAgICAgICAgaWYgKG8udHlwZSA9PT0gXCJ0eHRcIiB8fCBvLnR5cGUgPT09IFwiY3N2XCIpIHtcclxuICAgICAgICAgICAgICAgIC8vIEluY2x1ZGUgaGVhZGluZ3NcclxuICAgICAgICAgICAgICAgIHJvd3NbMF0gPSB0aGlzLmhlYWRlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gU2VsZWN0aW9uIG9yIHdob2xlIHRhYmxlXHJcbiAgICAgICAgICAgIGlmIChvLnNlbGVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgLy8gUGFnZSBudW1iZXJcclxuICAgICAgICAgICAgICAgIGlmICghaXNOYU4oby5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93cyA9IHJvd3MuY29uY2F0KHRoaXMucGFnZXNbby5zZWxlY3Rpb24gLSAxXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoby5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQXJyYXkgb2YgcGFnZSBudW1iZXJzXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IG8uc2VsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3MgPSByb3dzLmNvbmNhdCh0aGlzLnBhZ2VzW28uc2VsZWN0aW9uW2ldIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJvd3MgPSByb3dzLmNvbmNhdCh0aGlzLmFjdGl2ZVJvd3MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBPbmx5IHByb2NlZWQgaWYgd2UgaGF2ZSBkYXRhXHJcbiAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8udHlwZSA9PT0gXCJ0eHRcIiB8fCBvLnR5cGUgPT09IFwiY3N2XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgcm93c1tpXS5jZWxscy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCB2aXNpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5za2lwQ29sdW1uLmluZGV4T2YoaGVhZGVyc1t4XS5vcmlnaW5hbENlbGxJbmRleCkgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zKGhlYWRlcnNbeF0ub3JpZ2luYWxDZWxsSW5kZXgpLnZpc2libGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IHJvd3NbaV0uY2VsbHNbeF0udGV4dENvbnRlbnQgKyBvLmNvbHVtbkRlbGltaXRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29sdW1uIGRlbGltaXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIudHJpbSgpLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBcHBseSBsaW5lIGRlbGltaXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gby5saW5lRGVsaW1pdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGxpbmUgZGVsaW1pdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnRyaW0oKS5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5kb3dubG9hZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBcImRhdGE6dGV4dC9jc3Y7Y2hhcnNldD11dGYtOCxcIiArIHN0cjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8udHlwZSA9PT0gXCJzcWxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJlZ2luIElOU0VSVCBzdGF0ZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBcIklOU0VSVCBJTlRPIGBcIiArIG8udGFibGVOYW1lICsgXCJgIChcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCB0YWJsZSBoZWFkaW5ncyB0byBjb2x1bW4gbmFtZXNcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgY29sdW1uIHNraXAgYW5kIGNvbHVtbiB2aXNpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2tpcENvbHVtbi5pbmRleE9mKGhlYWRlcnNbaV0ub3JpZ2luYWxDZWxsSW5kZXgpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zKGhlYWRlcnNbaV0ub3JpZ2luYWxDZWxsSW5kZXgpLnZpc2libGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBcImBcIiArIGhlYWRlcnNbaV0udGV4dENvbnRlbnQgKyBcImAsXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYVxyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci50cmltKCkuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQmVnaW4gVkFMVUVTXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyICs9IFwiKSBWQUxVRVMgXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgcm93cyBhbmQgY29udmVydCBjZWxsIGRhdGEgdG8gY29sdW1uIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBcIihcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCByb3dzW2ldLmNlbGxzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgY29sdW1uIHNraXAgYW5kIGNvbHVtbiB2aXNpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5za2lwQ29sdW1uLmluZGV4T2YoaGVhZGVyc1t4XS5vcmlnaW5hbENlbGxJbmRleCkgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zKGhlYWRlcnNbeF0ub3JpZ2luYWxDZWxsSW5kZXgpLnZpc2libGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcIicgKyByb3dzW2ldLmNlbGxzW3hdLnRleHRDb250ZW50ICsgJ1wiLCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBjb21tYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIudHJpbSgpLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlbmQgVkFMVUVTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBcIiksXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWFcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIudHJpbSgpLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0cmFpbGluZyBjb2xvblxyXG4gICAgICAgICAgICAgICAgICAgIHN0ciArPSBcIjtcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uZG93bmxvYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJkYXRhOmFwcGxpY2F0aW9uL3NxbDtjaGFyc2V0PXV0Zi04LFwiICsgc3RyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoby50eXBlID09PSBcImpzb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgcm93c1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCByb3dzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyclt4XSA9IGFyclt4XSB8fCB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSXRlcmF0ZSBjb2x1bW5zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBoZWFkZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBmb3IgY29sdW1uIHNraXAgYW5kIGNvbHVtbiB2aXNpYmlsaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby5za2lwQ29sdW1uLmluZGV4T2YoaGVhZGVyc1tpXS5vcmlnaW5hbENlbGxJbmRleCkgPCAwICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zKGhlYWRlcnNbaV0ub3JpZ2luYWxDZWxsSW5kZXgpLnZpc2libGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJyW3hdW2hlYWRlcnNbaV0udGV4dENvbnRlbnRdID0gcm93c1t4XS5jZWxsc1tpXS50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ29udmVydCB0aGUgYXJyYXkgb2Ygb2JqZWN0cyB0byBKU09OIHN0cmluZ1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IEpTT04uc3RyaW5naWZ5KGFyciwgby5yZXBsYWNlciwgby5zcGFjZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgsXCIgKyBzdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIERvd25sb2FkXHJcbiAgICAgICAgICAgICAgICBpZiAoby5kb3dubG9hZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbGVuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgby5maWxlbmFtZSA9IG8uZmlsZW5hbWUgfHwgXCJkYXRhdGFibGVfZXhwb3J0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgby5maWxlbmFtZSArPSBcIi5cIiArIG8udHlwZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gZW5jb2RlVVJJKHN0cik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENyZWF0ZSBhIGxpbmsgdG8gdHJpZ2dlciB0aGUgZG93bmxvYWRcclxuICAgICAgICAgICAgICAgICAgICBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluay5ocmVmID0gc3RyO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmsuZG93bmxvYWQgPSBvLmZpbGVuYW1lO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdGhlIGxpbmtcclxuICAgICAgICAgICAgICAgICAgICBib2R5LmFwcGVuZENoaWxkKGxpbmspO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBUcmlnZ2VyIHRoZSBkb3dubG9hZFxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmsuY2xpY2soKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRoZSBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keS5yZW1vdmVDaGlsZChsaW5rKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSW1wb3J0IGRhdGEgdG8gdGhlIHRhYmxlXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnMgVXNlciBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICBwcm90by5pbXBvcnQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgIHZhciBvYmogPSBmYWxzZTtcclxuICAgICAgICB2YXIgZGVmYXVsdHMgPSB7XHJcbiAgICAgICAgICAgIC8vIGNzdlxyXG4gICAgICAgICAgICBsaW5lRGVsaW1pdGVyOiBcIlxcblwiLFxyXG4gICAgICAgICAgICBjb2x1bW5EZWxpbWl0ZXI6IFwiLFwiXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBvcHRpb25zIG9iamVjdFxyXG4gICAgICAgIGlmICghaXNPYmplY3Qob3B0aW9ucykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgb3B0aW9ucyA9IGV4dGVuZChkZWZhdWx0cywgb3B0aW9ucyk7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zLmRhdGEubGVuZ3RoIHx8IGlzT2JqZWN0KG9wdGlvbnMuZGF0YSkpIHtcclxuICAgICAgICAgICAgLy8gSW1wb3J0IENTVlxyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy50eXBlID09PSBcImNzdlwiKSB7XHJcbiAgICAgICAgICAgICAgICBvYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogW11cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU3BsaXQgdGhlIHN0cmluZyBpbnRvIHJvd3NcclxuICAgICAgICAgICAgICAgIHZhciByb3dzID0gb3B0aW9ucy5kYXRhLnNwbGl0KG9wdGlvbnMubGluZURlbGltaXRlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJvd3MubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmhlYWRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5oZWFkaW5ncyA9IHJvd3NbMF0uc3BsaXQob3B0aW9ucy5jb2x1bW5EZWxpbWl0ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93cy5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChyb3dzLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhW2ldID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTcGxpdCB0aGUgcm93cyBpbnRvIHZhbHVlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVzID0gcm93LnNwbGl0KG9wdGlvbnMuY29sdW1uRGVsaW1pdGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoKHZhbHVlcywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRhdGFbaV0ucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMudHlwZSA9PT0gXCJqc29uXCIpIHtcclxuICAgICAgICAgICAgICAgIHZhciBqc29uID0gaXNKc29uKG9wdGlvbnMuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVmFsaWQgSlNPTiBzdHJpbmdcclxuICAgICAgICAgICAgICAgIGlmIChqc29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChqc29uLCBmdW5jdGlvbiAoZGF0YSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZGF0YVtpXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoKGRhdGEsIGZ1bmN0aW9uICh2YWx1ZSwgY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmhlYWRpbmdzLmluZGV4T2YoY29sdW1uKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouaGVhZGluZ3MucHVzaChjb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhW2ldLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVGhhdCdzIG5vdCB2YWxpZCBKU09OIVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGlzT2JqZWN0KG9wdGlvbnMuZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgIG9iaiA9IG9wdGlvbnMuZGF0YTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSByb3dzXHJcbiAgICAgICAgICAgICAgICB0aGlzLmluc2VydChvYmopO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmludCB0aGUgdGFibGVcclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBoZWFkaW5ncyA9IHRoaXMuYWN0aXZlSGVhZGluZ3M7XHJcbiAgICAgICAgdmFyIHJvd3MgPSB0aGlzLmFjdGl2ZVJvd3M7XHJcbiAgICAgICAgdmFyIHRhYmxlID0gY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xyXG4gICAgICAgIHZhciB0aGVhZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICB2YXIgdGJvZHkgPSBjcmVhdGVFbGVtZW50KFwidGJvZHlcIik7XHJcblxyXG4gICAgICAgIHZhciB0ciA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuICAgICAgICBlYWNoKGhlYWRpbmdzLCBmdW5jdGlvbiAodGgpIHtcclxuICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQoXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidGhcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0bWw6IHRoLnRleHRDb250ZW50XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGVhZC5hcHBlbmRDaGlsZCh0cik7XHJcblxyXG4gICAgICAgIGVhY2gocm93cywgZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICB2YXIgdHIgPSBjcmVhdGVFbGVtZW50KFwidHJcIik7XHJcbiAgICAgICAgICAgIGVhY2gocm93LmNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG4gICAgICAgICAgICAgICAgdHIuYXBwZW5kQ2hpbGQoXHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogY2VsbC50ZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGJvZHkuYXBwZW5kQ2hpbGQodHIpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0YWJsZS5hcHBlbmRDaGlsZCh0aGVhZCk7XHJcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xyXG5cclxuICAgICAgICAvLyBPcGVuIG5ldyB3aW5kb3dcclxuICAgICAgICB2YXIgdyA9IHdpbi5vcGVuKCk7XHJcblxyXG4gICAgICAgIC8vIEFwcGVuZCB0aGUgdGFibGUgdG8gdGhlIGJvZHlcclxuICAgICAgICB3LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGFibGUpO1xyXG5cclxuICAgICAgICAvLyBQcmludFxyXG4gICAgICAgIHcucHJpbnQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IGEgbWVzc2FnZSBpbiB0aGUgdGFibGVcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnNldE1lc3NhZ2UgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xyXG4gICAgICAgIHZhciBjb2xzcGFuID0gMTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaGFzUm93cykge1xyXG4gICAgICAgICAgICBjb2xzcGFuID0gdGhpcy5kYXRhWzBdLmNlbGxzLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2xlYXIoXHJcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0clwiLCB7XHJcbiAgICAgICAgICAgICAgICBodG1sOiAnPHRkIGNsYXNzPVwiZGF0YVRhYmxlcy1lbXB0eVwiIGNvbHNwYW49XCInICtcclxuICAgICAgICAgICAgICAgICAgICBjb2xzcGFuICtcclxuICAgICAgICAgICAgICAgICAgICAnXCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSArXHJcbiAgICAgICAgICAgICAgICAgICAgXCI8L3RkPlwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDb2x1bW5zIEFQSSBhY2Nlc3NcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gbmV3IENvbHVtbnMgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgcHJvdG8uY29sdW1ucyA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBDb2x1bW5zKHRoaXMsIGNvbHVtbnMpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJvd3MgQVBJIGFjY2Vzc1xyXG4gICAgICogQHJldHVybiB7T2JqZWN0fSBuZXcgUm93cyBpbnN0YW5jZVxyXG4gICAgICovXHJcbiAgICBwcm90by5yb3dzID0gZnVuY3Rpb24gKHJvd3MpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJvd3ModGhpcywgcm93cyk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIGN1c3RvbSBldmVudCBsaXN0ZW5lclxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBldmVudFxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5vbiA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLmV2ZW50cyA9IHRoaXMuZXZlbnRzIHx8IHt9O1xyXG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XSA9IHRoaXMuZXZlbnRzW2V2ZW50XSB8fCBbXTtcclxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0ucHVzaChjYWxsYmFjayk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGN1c3RvbSBldmVudCBsaXN0ZW5lclxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBldmVudFxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5vZmYgPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cyB8fCB7fTtcclxuICAgICAgICBpZiAoZXZlbnQgaW4gdGhpcy5ldmVudHMgPT09IGZhbHNlKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLnNwbGljZSh0aGlzLmV2ZW50c1tldmVudF0uaW5kZXhPZihjYWxsYmFjayksIDEpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEZpcmUgY3VzdG9tIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IGV2ZW50XHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5lbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cyB8fCB7fTtcclxuICAgICAgICBpZiAoZXZlbnQgaW4gdGhpcy5ldmVudHMgPT09IGZhbHNlKSByZXR1cm47XHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmV2ZW50c1tldmVudF0ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdW2ldLmFwcGx5KHRoaXMsIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIERhdGFUYWJsZTtcclxufSk7IiwiaW1wb3J0IERhdGFUYWJsZSBmcm9tICd2YW5pbGxhLWRhdGF0YWJsZXMnO1xuaW1wb3J0IHsgY29sb3JfaGlnaGxpZ2h0IH0gZnJvbSAnLi9vcHRpb25zJztcblxuZnVuY3Rpb24gY3JlYXRlVGFibGVET00oZGF0YSwgb3B0cywgY29uZmlnKSB7XG4gIGNvbnN0IHsgbnVtLCBkZW51bSwgcmF0aW8sIG15X3JlZ2lvbiB9ID0gY29uZmlnO1xuICBjb25zdCBvcHRpb25zID0gb3B0cyB8fCB7fTtcbiAgb3B0aW9ucy5pZCA9IG9wdGlvbnMuaWQgfHwgJ215VGFibGUnO1xuICBjb25zdCBkb2MgPSBkb2N1bWVudDtcbiAgY29uc3QgbmJfZmVhdHVyZXMgPSBkYXRhLmxlbmd0aDtcbiAgY29uc3QgY29sdW1uX25hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGF0YVswXSk7XG4gIGNvbnN0IG5iX2NvbHVtbnMgPSBjb2x1bW5fbmFtZXMubGVuZ3RoO1xuICBjb25zdCBteVRhYmxlID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RhYmxlJyk7XG4gIGNvbnN0IGhlYWRlcnMgPSBkb2MuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcbiAgY29uc3QgYm9keSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0Ym9keScpO1xuICBjb25zdCBoZWFkZXJzX3JvdyA9IGRvYy5jcmVhdGVFbGVtZW50KCd0cicpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5iX2NvbHVtbnM7IGkrKykge1xuICAgIGNvbnN0IGNlbGwgPSBkb2MuY3JlYXRlRWxlbWVudCgndGgnKTtcbiAgICBjb25zdCBjb2xfbmFtZSA9IGNvbHVtbl9uYW1lc1tpXTtcbiAgICBpZiAobnVtLmluZGV4T2YoY29sX25hbWUpID4gLTEpIHtcbiAgICAgIGNlbGwuaW5uZXJIVE1MID0gYE51bTxicj48c3BhbiBjbGFzcz1cInNtYWxsXCI+JHtjb2xfbmFtZX1gO1xuICAgIH0gZWxzZSBpZiAoZGVudW0uaW5kZXhPZihjb2xfbmFtZSkgPiAtMSkge1xuICAgICAgY2VsbC5pbm5lckhUTUwgPSBgRGVudW08YnI+PHNwYW4gY2xhc3M9XCJzbWFsbFwiPiR7Y29sX25hbWV9YDtcbiAgICB9IGVsc2UgaWYgKHJhdGlvLmluZGV4T2YoY29sX25hbWUpID4gLTEpIHtcbiAgICAgIGNlbGwuaW5uZXJIVE1MID0gYFJhdGlvPGJyPjxzcGFuIGNsYXNzPVwic21hbGxcIj4ke2NvbF9uYW1lfWA7XG4gICAgfSBlbHNlIGlmIChjb2xfbmFtZSA9PT0gJ3JhbmcnKSB7XG4gICAgICBjZWxsLmlubmVySFRNTCA9ICdSYW5nICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNlbGwuaW5uZXJIVE1MID0gY29sX25hbWU7XG4gICAgfVxuICAgIGhlYWRlcnNfcm93LmFwcGVuZENoaWxkKGNlbGwpO1xuICB9XG4gIGhlYWRlcnMuYXBwZW5kQ2hpbGQoaGVhZGVyc19yb3cpO1xuICBteVRhYmxlLmFwcGVuZENoaWxkKGhlYWRlcnMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG5iX2ZlYXR1cmVzOyBpKyspIHtcbiAgICBjb25zdCByb3cgPSBkb2MuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICByb3cuaWQgPSBgcm93XyR7ZGF0YVtpXS5pZH1gO1xuICAgIGlmIChkYXRhW2ldLmlkID09PSBteV9yZWdpb24pIHtcbiAgICAgIHJvdy5jbGFzc05hbWUgPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmJfY29sdW1uczsgaisrKSB7XG4gICAgICBjb25zdCBjZWxsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RkJyk7XG4gICAgICBjb25zdCBjb2xfbmFtZSA9IGNvbHVtbl9uYW1lc1tqXTtcbiAgICAgIGlmIChudW0uaW5kZXhPZihjb2xfbmFtZSkgPiAtMSB8fCBkZW51bS5pbmRleE9mKGNvbF9uYW1lKSA+IC0xIHx8IHJhdGlvLmluZGV4T2YoY29sX25hbWUpID4gLTEpIHtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBNYXRoLnJvdW5kKGRhdGFbaV1bY29sX25hbWVdICogMTAwKSAvIDEwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBkYXRhW2ldW2NvbF9uYW1lXTtcbiAgICAgIH1cbiAgICAgIHJvdy5hcHBlbmRDaGlsZChjZWxsKTtcbiAgICB9XG4gICAgYm9keS5hcHBlbmRDaGlsZChyb3cpO1xuICB9XG4gIG15VGFibGUuYXBwZW5kQ2hpbGQoYm9keSk7XG4gIG15VGFibGUuc2V0QXR0cmlidXRlKCdpZCcsIG9wdGlvbnMuaWQpO1xuICByZXR1cm4gbXlUYWJsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VUYWJsZShkYXRhX25vX2VtcHR5LCBjb25maWcpIHtcbiAgZDMuc2VsZWN0KCcuZGF0YVRhYmxlLXdyYXBwZXInKS5yZW1vdmUoKTtcbiAgY29uc3QgdGFibGUgPSBjcmVhdGVUYWJsZURPTShkYXRhX25vX2VtcHR5LCB1bmRlZmluZWQsIGNvbmZpZyk7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtYXBfc2VjdGlvbicpLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgY29uc3QgZGF0YVRhYmxlID0gbmV3IERhdGFUYWJsZSgnI215VGFibGUnKTtcbiAgY29uc3QgdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRhVGFibGUtd3JhcHBlcicpO1xuICB0LnN0eWxlLm1hcmdpblRvcCA9ICcyMHB4JztcbiAgdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICB0LnN0eWxlLmZvbnRTaXplID0gJzAuN2VtJztcbiAgdC5xdWVyeVNlbGVjdG9yKCcuZGF0YVRhYmxlLXRvcCcpLnJlbW92ZSgpO1xuICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0LnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4uc21hbGwnKSlcbiAgICAuZm9yRWFjaCgoZWwpID0+IHtcbiAgICAgIGVsLm9uY2xpY2sgPSAoKSA9PiB7IGVsLnBhcmVudEVsZW1lbnQuY2xpY2soKTsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIH0pO1xufVxuIiwiaW1wb3J0IHsgbWF0aF9yb3VuZCB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuL29wdGlvbnMnO1xuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnLi8uLi9tYWluJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cblxuLyoqXG4qIEF0dGFjaCB0aGUgZnVsbF9kYXRhc2V0IEFycmF5IHRvIHRoZSBhcHAgT2JqZWN0IGFuZCBjcmVhdGUgYSBkaWN0aW9ubmFyeVxuKiBhbGxvd2luZyB0byBvYnRhaW4gdGVycml0b3JpYWwgdW5pdHMgbmFtZSBmcm9tIHRoZWlyIElkLlxuKlxuKiBAcGFyYW0ge0FycmF5fSBmdWxsX2RhdGFzZXQgLSBUaGUgZGF0YXNldCBhcyBhbiBBcnJheSBvZiBPYmplY3RcbiogQHBhcmFtIHtPYmplY3R9IGFwcCAtIFRoZSB2YXJpYWJsZSBjb250YWluaW5nIHRoZSBnbG9iYWwgcGFyYW1ldGVycyBhYm91dFxuKiAgIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBhcHBsaWNhdGlvbi5cbiogQHJldHVybiB7dm9pZH1cbipcbiovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZV9kYXRhc2V0KGZ1bGxfZGF0YXNldCwgYXBwKSB7XG4gIGFwcC5mdWxsX2RhdGFzZXQgPSBmdWxsX2RhdGFzZXQ7XG4gIC8vIENyZWF0ZSBhbiBPYmplY3QgZmVhdHVyZV9pZCAtPiAgZmVhdHVyZV9uYW1lIGZvciBlYXNpZXIgbG9va3VwOlxuICBhcHAuZmVhdHVyZV9uYW1lcyA9IHt9O1xuICBmdWxsX2RhdGFzZXQuZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgIGFwcC5mZWF0dXJlX25hbWVzW2VsZW0uZ2VvXSA9IGVsZW0uTm9tO1xuICB9KTtcbn1cblxuXG4vKipcbiogQXR0YWNoIHRoZSBmdWxsX2RhdGFzZXQgQXJyYXkgdG8gdGhlIGFwcCBPYmplY3QgYW5kIGNyZWF0ZSBhIGRpY3Rpb25uYXJ5XG4qIGFsbG93aW5nIHRvIG9idGFpbiB0ZXJyaXRvcmlhbCB1bml0cyBuYW1lIGZyb20gdGhlaXIgSWQuXG4qXG4qIEBwYXJhbSB7T2JqZWN0fSBhcHAgLSBUaGUgdmFyaWFibGUgY29udGFpbmluZyB0aGUgZ2xvYmFsIHBhcmFtZXRlcnMgYWJvdXRcbiogICB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgYXBwbGljYXRpb24uXG4qIEByZXR1cm4ge0FycmF5fSAtIFRoZSBmaWx0ZXJlZCBkYXRhLCBjb250YWluaW5nIG9ubHkgdGhlIHJlcXVlc3RlZCB2YXJpYWJsZXNcbiogICBmb3IgdGhlIGZlYXR1cmUgb2YgdGhlIGN1cnJlbnQgc3R1ZHkgem9uZSxcbiogICAgd2l0aG91dCBmZWF0dXJlcyBjb250YWluaW5nIGVtcHR5IHJhdGlvcy5cbipcbiovXG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyTGV2ZWxWYXIoYXBwLCBmaWx0ZXJfaWQpIHtcbiAgLy8gRmV0Y2ggdGhlIG5hbWUocykgb2YgdGhlIHJhdGlvIChhbmQgYXNzb2NpYXRlZCBudW0gYW5kIGRlbnVtIHZhcmlhYmxlKSxcbiAgLy8gdGhlIG5hbWUgb2YgdGhlIHRhcmdldGVkIHJlZ2lvbiBhbmQgdGhlIGN1cnJlbnQgbGV2ZWwgOlxuICBjb25zdCB7XG4gICAgbnVtLCBkZW51bSwgcmF0aW8sIGN1cnJlbnRfbGV2ZWwsIGlkX2ZpZWxkLCBmaWx0ZXJfa2V5LCBuYW1lX2ZpZWxkLCBteV9yZWdpb24sXG4gIH0gPSBhcHAuY3VycmVudF9jb25maWc7XG5cbiAgY29uc3QgYWxsX3ZhcmlhYmxlcyA9IHJhdGlvLmNvbmNhdChudW0pLmNvbmNhdChkZW51bSk7XG5cbiAgLy8gUHJlcGFyZSB0aGUgZGF0YTpcbiAgbGV0IHRlbXA7XG4gIGlmIChmaWx0ZXJfaWQpIHtcbiAgICB0ZW1wID0gYXBwLmZ1bGxfZGF0YXNldFxuICAgICAgLmZpbHRlcihmdCA9PiArZnQubGV2ZWwgPT09IGN1cnJlbnRfbGV2ZWwgJiYgZmlsdGVyX2lkLmluZGV4T2YoZnRbaWRfZmllbGRdKSA+IC0xKTtcbiAgfSBlbHNlIGlmIChmaWx0ZXJfa2V5KSB7XG4gICAgY29uc3QgbXlfY2F0ZWdvcnkgPSBhcHAuZnVsbF9kYXRhc2V0LmZpbHRlcihmdCA9PiBmdFtpZF9maWVsZF0gPT09IG15X3JlZ2lvbilbMF1bZmlsdGVyX2tleV07XG4gICAgdGVtcCA9IGFwcC5mdWxsX2RhdGFzZXRcbiAgICAgIC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSBjdXJyZW50X2xldmVsICYmIGZ0W2ZpbHRlcl9rZXldID09PSBteV9jYXRlZ29yeSk7XG4gIH0gZWxzZSB7XG4gICAgdGVtcCA9IGFwcC5mdWxsX2RhdGFzZXRcbiAgICAgIC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSBjdXJyZW50X2xldmVsKTtcbiAgfVxuICB0ZW1wID0gdGVtcC5tYXAoKGZ0KSA9PiB7XG4gICAgY29uc3QgcHJvcHNfZmVhdHVyZSA9IHtcbiAgICAgIGlkOiBmdFtpZF9maWVsZF0sXG4gICAgICBuYW1lOiBmdFtuYW1lX2ZpZWxkXSxcbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW5faSA9IGFsbF92YXJpYWJsZXMubGVuZ3RoOyBpIDwgbGVuX2k7IGkrKykge1xuICAgICAgcHJvcHNfZmVhdHVyZVthbGxfdmFyaWFibGVzW2ldXSA9ICtmdFthbGxfdmFyaWFibGVzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzX2ZlYXR1cmU7XG4gIH0pO1xuXG4gIC8vIC8vIEZpbHRlciBkYXRhIGZvciBlbXB0eSB2YWx1ZXMgOlxuICAvLyBjb25zdCBmaWx0ZXJlZF9kYXRhID0gdGVtcC5maWx0ZXIoXG4gIC8vICAgZnQgPT4gcmF0aW8ubWFwKHYgPT4gISFmdFt2XSkuZXZlcnkodiA9PiB2ID09PSB0cnVlKSk7XG5cbiAgLy9cbiAgYXBwLmN1cnJlbnRfZGF0YSA9IHRlbXA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmVwYXJlVmFyaWFibGVzSW5mbyhtZXRhZGF0YV9pbmRpY2F0ZXVycykge1xuICByZXR1cm4gbWV0YWRhdGFfaW5kaWNhdGV1cnNcbiAgICAuZmlsdGVyKGZ0ID0+IGZ0WydUeXBlIHN0YXRpc3RpcXVlJ10gPT09ICdSYXRpbycpXG4gICAgLm1hcChmdCA9PiAoe1xuICAgICAgcmF0aW86IGZ0WydpZCddLFxuICAgICAgbnVtOiBgJHtmdFsnaWQxJ119XyR7ZnRbJ0FubsOpZSddfWAgLFxuICAgICAgZGVudW06IGAke2Z0WydpZDInXX1fJHtmdFsnQW5uw6llJ119YCxcbiAgICAgIG5hbWU6IGAke2Z0WydOb20nXX0gKCR7ZnRbJ0FubsOpZSddfSlgLFxuICAgICAgZ3JvdXA6IGZ0WydUaMOobWUnXVxuICAgIH0pKTtcbn1cblxuLyoqXG4qIFNldCBhbmQgYXBwbHkgYSBuZXcgZmlsdGVyIChpZS4gcmVzdHJpY3QgdGhlIHN0dWR5IHpvbmUpIG9uIHRoZSBkYXRhc2V0IHRvIGJlIHVzZWQuXG4qXG4qIEBwYXJhbSB7U3RyaW5nfSBmaWx0ZXJfdHlwZSAtIFRoZSBuYW1lIG9mIHRoZSBmaWx0ZXIgdG8gdXNlLlxuKiBAcmV0dXJuIHt2b2lkfVxuKlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUZpbHRlcihhcHAsIGZpbHRlcl90eXBlKSB7XG4gIGlmIChmaWx0ZXJfdHlwZSA9PT0gJ2ZpbHRlcl9GUicpIHtcbiAgICBhcHAuY3VycmVudF9jb25maWcuZmlsdGVyX2tleSA9ICdQQVlTJztcbiAgICBmaWx0ZXJMZXZlbFZhcihhcHApO1xuICB9IGVsc2UgaWYgKGZpbHRlcl90eXBlID09PSAnbm9fZmlsdGVyJykge1xuICAgIGFwcC5jdXJyZW50X2NvbmZpZy5maWx0ZXJfa2V5ID0gdW5kZWZpbmVkO1xuICAgIGZpbHRlckxldmVsVmFyKGFwcCk7XG4gIH0gZWxzZSB7XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLmZpbHRlcl9rZXkgPSAndHlwZV90ZXN0JztcbiAgICBmaWx0ZXJMZXZlbFZhcihhcHApO1xuICB9XG5cbiAgYXBwLmNvbG9ycyA9IHt9O1xuICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xufVxuXG4vLyBUT0RPIDogRG9jXG5leHBvcnQgZnVuY3Rpb24gY2hhbmdlUmVnaW9uKGFwcCwgaWRfcmVnaW9uKSB7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24gPSBpZF9yZWdpb247XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25fcHJldHR5X25hbWUgPSBhcHAuZmVhdHVyZV9uYW1lc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXTtcbiAgaWYgKGFwcC5jdXJyZW50X2NvbmZpZy5maWx0ZXJfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBmaWx0ZXJMZXZlbFZhcihhcHApO1xuICB9XG4gIGNvbnNvbGUubG9nKGFwcCk7XG4gIC8vIFJlc2V0IHRoZSBjb2xvciB0byB1c2Ugb24gdGhlIGNoYXJ0L21hcDpcbiAgYXBwLmNvbG9ycyA9IHt9O1xuICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkVmFyaWFibGUoYXBwLCBjb2RlX3JhdGlvKSB7XG4gIGNvbnN0IHZhcmlhYmxlX2luZm8gPSB2YXJpYWJsZXMuZmlsdGVyKGQgPT4gZC5yYXRpbyA9PT0gY29kZV9yYXRpbylbMF07XG4gIGFwcC5jb2xvcnMgPSB7fTtcbiAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLm51bS5wdXNoKHZhcmlhYmxlX2luZm8ubnVtKTtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLmRlbnVtLnB1c2godmFyaWFibGVfaW5mby5kZW51bSk7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5wdXNoKHZhcmlhYmxlX2luZm8ucmF0aW8pO1xuICBhcHAuY3VycmVudF9jb25maWcucmF0aW9fcHJldHR5X25hbWUucHVzaCh2YXJpYWJsZV9pbmZvLm5hbWUpO1xuICBmaWx0ZXJMZXZlbFZhcihhcHApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlVmFyaWFibGUoYXBwLCBjb2RlX3JhdGlvKSB7XG4gIGNvbnN0IGl4ID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLmluZGV4T2YoY29kZV9yYXRpbyk7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5udW0uc3BsaWNlKGl4LCAxKTtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLmRlbnVtLnNwbGljZShpeCwgMSk7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5zcGxpY2UoaXgsIDEpO1xuICBhcHAuY3VycmVudF9jb25maWcucmF0aW9fcHJldHR5X25hbWUuc3BsaWNlKGl4LCAxKTtcbiAgZmlsdGVyTGV2ZWxWYXIoYXBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlc2V0VmFyaWFibGVzKGFwcCwgY29kZXNfcmF0aW8pIHtcbiAgYXBwLmNvbG9ycyA9IHt9XG4gIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5udW0gPSBbXTtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLmRlbnVtID0gW107XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpbyA9IFtdO1xuICBhcHAuY3VycmVudF9jb25maWcucmF0aW9fcHJldHR5X25hbWUgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IGNvZGVzX3JhdGlvLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY29uc3QgY29kZV9yYXRpbyA9IGNvZGVzX3JhdGlvW2ldO1xuICAgIGNvbnN0IHZhcmlhYmxlX2luZm8gPSB2YXJpYWJsZXMuZmlsdGVyKGQgPT4gZC5yYXRpbyA9PT0gY29kZV9yYXRpbylbMF07XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLm51bS5wdXNoKHZhcmlhYmxlX2luZm8ubnVtKTtcbiAgICBhcHAuY3VycmVudF9jb25maWcuZGVudW0ucHVzaCh2YXJpYWJsZV9pbmZvLmRlbnVtKTtcbiAgICBhcHAuY3VycmVudF9jb25maWcucmF0aW8ucHVzaCh2YXJpYWJsZV9pbmZvLnJhdGlvKTtcbiAgICBhcHAuY3VycmVudF9jb25maWcucmF0aW9fcHJldHR5X25hbWUucHVzaCh2YXJpYWJsZV9pbmZvLm5hbWUpO1xuICB9XG4gIGZpbHRlckxldmVsVmFyKGFwcCk7XG59XG5cbi8vIFRPRE86XG5leHBvcnQgZnVuY3Rpb24gY2FsY0NvbXBsZXR1ZGVTdWJzZXQoYXBwLCB2YXJzKSB7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50X2xldmVsLCBpZF9maWVsZCwgZmlsdGVyX2tleSwgbXlfcmVnaW9uLFxuICB9ID0gYXBwLmN1cnJlbnRfY29uZmlnO1xuXG4gIC8vIENvbXB1dGUgdGhlIGxlbmd0aCBvZiB0aGUgZGF0YXNldCAod2l0aGluIHRoZSBcInN0dWR5IHpvbmVcIiBpZiBhbnkpOlxuICBsZXQgdGVtcDtcbiAgaWYgKGZpbHRlcl9rZXkpIHtcbiAgICBjb25zdCBteV9jYXRlZ29yeSA9IGFwcC5mdWxsX2RhdGFzZXQuZmlsdGVyKGZ0ID0+IGZ0W2lkX2ZpZWxkXSA9PT0gbXlfcmVnaW9uKVswXVtmaWx0ZXJfa2V5XTtcbiAgICB0ZW1wID0gYXBwLmZ1bGxfZGF0YXNldFxuICAgICAgLmZpbHRlcihmdCA9PiArZnQubGV2ZWwgPT09IGN1cnJlbnRfbGV2ZWwgJiYgZnRbZmlsdGVyX2tleV0gPT09IG15X2NhdGVnb3J5KTtcbiAgfSBlbHNlIHtcbiAgICB0ZW1wID0gYXBwLmZ1bGxfZGF0YXNldFxuICAgICAgLmZpbHRlcihmdCA9PiArZnQubGV2ZWwgPT09IGN1cnJlbnRfbGV2ZWwpO1xuICB9XG4gIGNvbnN0IHRvdGFsX2xlbmd0aCA9IHRlbXAubGVuZ3RoO1xuXG4gIC8vIENvbXB1dGUgdGhlIGxlbmd0aCBvZiB0aGUgZGF0YXNldCBpZiB3ZSBmaWx0ZXIgZW1wdHkgZmVhdHVyZXNcbiAgLy8gb24gYWxsIHRoZSB2YXJpYWJsZXMgb2YgXCJ2YXJzXCI6XG4gIHRlbXAgPSB0ZW1wLm1hcCgoZnQpID0+IHtcbiAgICBjb25zdCBwcm9wc19mZWF0dXJlID0ge1xuICAgICAgaWQ6IGZ0W2lkX2ZpZWxkXSxcbiAgICB9O1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW5faSA9IHZhcnMubGVuZ3RoOyBpIDwgbGVuX2k7IGkrKykge1xuICAgICAgcHJvcHNfZmVhdHVyZVt2YXJzW2ldXSA9ICtmdFt2YXJzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BzX2ZlYXR1cmU7XG4gIH0pLmZpbHRlcihmdCA9PiB2YXJzLm1hcChyYXRpb19uYW1lID0+ICEhZnRbcmF0aW9fbmFtZV0pLmV2ZXJ5KHYgPT4gdiA9PT0gdHJ1ZSkpO1xuICBjb25zdCBmaWx0ZXJlZF9sZW5ndGggPSB0ZW1wLmxlbmd0aDtcblxuICAvLyBSZXR1cm4gdGhlIHJhdGlvIG9mIGF2YWlsYWJsZSB2YWx1ZXMgKFwiY29tcGzDqXR1ZGVcIikgd2l0aGluXG4gIC8vIHRoZSBzdHVkeSB6b25lIHNlbGVjdGVkIGJ5IHRoZSB1c2VyOlxuICByZXR1cm4gTWF0aC5yb3VuZCgoZmlsdGVyZWRfbGVuZ3RoIC8gdG90YWxfbGVuZ3RoKSAqIDEwMDApIC8gMTA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIHZhcnMpIHtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnRfbGV2ZWwsIGlkX2ZpZWxkLCBmaWx0ZXJfa2V5LCBteV9yZWdpb24sIHBvcF9maWVsZCxcbiAgfSA9IGFwcC5jdXJyZW50X2NvbmZpZztcblxuICAvLyBDb21wdXRlIHRoZSB0b3RhbCBwb3B1bGF0aW9uIHN0b2NrIG9mIHRoZSBkYXRhICh3aXRoaW4gdGhlIFwic3R1ZHkgem9uZVwiIGlmIGFueSk6XG4gIGxldCB0ZW1wO1xuICBpZiAoZmlsdGVyX2tleSkge1xuICAgIGNvbnN0IG15X2NhdGVnb3J5ID0gYXBwLmZ1bGxfZGF0YXNldC5maWx0ZXIoZnQgPT4gZnRbaWRfZmllbGRdID09PSBteV9yZWdpb24pWzBdW2ZpbHRlcl9rZXldO1xuICAgIHRlbXAgPSBhcHAuZnVsbF9kYXRhc2V0XG4gICAgICAuZmlsdGVyKGZ0ID0+ICtmdC5sZXZlbCA9PT0gY3VycmVudF9sZXZlbCAmJiBmdFtmaWx0ZXJfa2V5XSA9PT0gbXlfY2F0ZWdvcnkpO1xuICB9IGVsc2Uge1xuICAgIHRlbXAgPSBhcHAuZnVsbF9kYXRhc2V0XG4gICAgICAuZmlsdGVyKGZ0ID0+ICtmdC5sZXZlbCA9PT0gY3VycmVudF9sZXZlbCk7XG4gIH1cbiAgbGV0IHRvdGFsX3BvcCA9IDA7XG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB0ZW1wLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdG90YWxfcG9wICs9IGlzTmFOKCt0ZW1wW2ldW3BvcF9maWVsZF0pID8gMCA6ICt0ZW1wW2ldW3BvcF9maWVsZF07XG4gIH1cbiAgLy8gQ29tcHV0ZSB0aGUgcG9wdWxhdGlvbiBzdG9jayBvZiB0aGUgZGF0YXNldCBpZiB3ZSBmaWx0ZXIgZW1wdHkgZmVhdHVyZXNcbiAgLy8gb24gYWxsIHRoZSB2YXJpYWJsZXMgb2YgXCJ2YXJzXCI6XG4gIHRlbXAgPSB0ZW1wLm1hcCgoZnQpID0+IHtcbiAgICBjb25zdCBwcm9wc19mZWF0dXJlID0ge1xuICAgICAgaWQ6IGZ0W2lkX2ZpZWxkXSxcbiAgICAgIHBvcDogK2Z0W3BvcF9maWVsZF0sXG4gICAgfTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSB2YXJzLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICAgIHByb3BzX2ZlYXR1cmVbdmFyc1tpXV0gPSArZnRbdmFyc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBwcm9wc19mZWF0dXJlO1xuICB9KS5maWx0ZXIoZnQgPT4gdmFycy5tYXAocmF0aW9fbmFtZSA9PiAhIWZ0W3JhdGlvX25hbWVdKS5ldmVyeSh2ID0+IHYgPT09IHRydWUpKTtcbiAgbGV0IHN1YnNldF9wb3AgPSAwO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGVtcC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHN1YnNldF9wb3AgKz0gaXNOYU4odGVtcFtpXS5wb3ApID8gMCA6IHRlbXBbaV0ucG9wO1xuICB9XG4gIC8vIFJldHVybiB0aGUgcmF0aW8gb2YgcG9wdWxhdGlvbiB2YWx1ZXMgKFwiY29tcGzDqXR1ZGVcIikgd2l0aGluXG4gIC8vIHRoZSBzdHVkeSB6b25lIHNlbGVjdGVkIGJ5IHRoZSB1c2VyOlxuICByZXR1cm4gTWF0aC5yb3VuZCgoc3Vic2V0X3BvcCAvIHRvdGFsX3BvcCkgKiAxMDAwKSAvIDEwO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby1wYXJhbS1yZWFzc2lnbiAqL1xuIiwiaW1wb3J0IHsgY29tcCwgbWF0aF9yb3VuZCwgbWF0aF9hYnMsIFJlY3QsIHByZXBhcmVUb29sdGlwLCBzdmdQYXRoVG9Db29yZHMgfSBmcm9tICcuLy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgY29sb3JfZGlzYWJsZWQsIGNvbG9yX2NvdW50cmllcywgY29sb3Jfc3VwLCBjb2xvcl9pbmYsIGNvbG9yX2hpZ2hsaWdodCB9IGZyb20gJy4vLi4vb3B0aW9ucyc7XG5pbXBvcnQgeyBjYWxjUG9wQ29tcGxldHVkZVN1YnNldCB9IGZyb20gJy4vLi4vcHJlcGFyZV9kYXRhJztcbmltcG9ydCB7IHN2Z19tYXAgfSBmcm9tICcuLy4uL21hcCc7XG5pbXBvcnQgeyBhcHAsIHJlc2V0Q29sb3JzIH0gZnJvbSAnLi8uLi8uLi9tYWluJztcblxuZXhwb3J0IGNvbnN0IHN2Z19iYXIgPSBkMy5zZWxlY3QoJ3N2ZyNzdmdfYmFyJyksXG4gIG1hcmdpbiA9IHsgdG9wOiAxMCwgcmlnaHQ6IDIwLCBib3R0b206IDEwMCwgbGVmdDogNDAgfSxcbiAgbWFyZ2luMiA9IHsgdG9wOiA0MzAsIHJpZ2h0OiAyMCwgYm90dG9tOiAxNSwgbGVmdDogNDAgfSxcbiAgd2lkdGggPSArc3ZnX2Jhci5hdHRyKCd3aWR0aCcpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG4gIGhlaWdodCA9ICtzdmdfYmFyLmF0dHIoJ2hlaWdodCcpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20sXG4gIGhlaWdodDIgPSArc3ZnX2Jhci5hdHRyKCdoZWlnaHQnKSAtIG1hcmdpbjIudG9wIC0gbWFyZ2luMi5ib3R0b207XG5cbmxldCBuYkZ0O1xubGV0IGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbMCwgMF07XG5sZXQgY3VycmVudF9yYW5nZSA9IFswLCAwXTtcbmxldCBkaXNwbGF5ZWQ7XG5cbmZ1bmN0aW9uIGdldE1lYW5SYW5rKG1lYW5fdmFsdWUsIHJhdGlvX3RvX3VzZSkge1xuICBsZXQgbWVhbl9yYW5rID0gYXBwLmN1cnJlbnRfZGF0YS5tYXAoXG4gICAgKGQsIGkpID0+IFtkW3JhdGlvX3RvX3VzZV0sIG1hdGhfYWJzKG1lYW5fdmFsdWUgLSBkW3JhdGlvX3RvX3VzZV0pLCBpXSk7XG4gIG1lYW5fcmFuay5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSk7XG4gIG1lYW5fcmFuayA9IG1lYW5fcmFua1swXTtcbiAgaWYgKG1lYW5fcmFua1sxXSA+IG1lYW5fdmFsdWUpIHtcbiAgICBtZWFuX3JhbmsgPSBtZWFuX3JhbmtbMl0gLSAxO1xuICB9IGVsc2Uge1xuICAgIG1lYW5fcmFuayA9IG1lYW5fcmFua1syXTtcbiAgfVxuICByZXR1cm4gbWVhbl9yYW5rO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBCYXJDaGFydDEge1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIHRoaXMuYnJ1c2hlZCA9ICgpID0+IHtcbiAgICAgIGlmIChkMy5ldmVudC5zb3VyY2VFdmVudCAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC50eXBlID09PSAnem9vbScpIHJldHVybjsgLy8gaWdub3JlIGJydXNoLWJ5LXpvb21cbiAgICAgIGlmICghdGhpcy54KSB7IGNvbnNvbGUubG9nKCdhJyk7IHJldHVybjsgfVxuICAgICAgY29uc3QgcyA9IGQzLmV2ZW50LnNlbGVjdGlvbiB8fCB0aGlzLngyLnJhbmdlKCk7XG4gICAgICBjdXJyZW50X3JhbmdlID0gW21hdGhfcm91bmQoc1swXSAvICh3aWR0aCAvIG5iRnQpKSwgbWF0aF9yb3VuZChzWzFdIC8gKHdpZHRoIC8gbmJGdCkpXTtcbiAgICAgIHRoaXMueC5kb21haW4odGhpcy5kYXRhLnNsaWNlKGN1cnJlbnRfcmFuZ2VbMF0sIGN1cnJlbnRfcmFuZ2VbMV0pLm1hcChmdCA9PiBmdC5pZCkpO1xuICAgICAgc3ZnX2Jhci5zZWxlY3QoJy56b29tJykuY2FsbCh0aGlzLnpvb20udHJhbnNmb3JtLCBkMy56b29tSWRlbnRpdHlcbiAgICAgICAgLnNjYWxlKHdpZHRoIC8gKGN1cnJlbnRfcmFuZ2VbMV0gLSBjdXJyZW50X3JhbmdlWzBdKSlcbiAgICAgICAgLnRyYW5zbGF0ZSgtY3VycmVudF9yYW5nZVswXSwgMCkpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgIHRoaXMudXBkYXRlQ29udGV4dChjdXJyZW50X3JhbmdlWzBdLCBjdXJyZW50X3JhbmdlWzFdKTtcbiAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbCh0aGlzLmJydXNoX3RvcC5tb3ZlLCBudWxsKTtcbiAgICAgIHRoaXMuYnJ1c2hlZF90b3AoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5icnVzaGVkX3RvcCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZm9jdXMpIHsgY29uc29sZS5sb2coJ2InKTsgcmV0dXJuOyB9XG4gICAgICBpZiAoIXRoaXMubWFwX2VsZW0pIHsgY29uc29sZS5sb2coJ2MnKTsgcmV0dXJuOyB9XG4gICAgICBjb25zdCBkM19ldmVudCA9IGQzLmV2ZW50O1xuICAgICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgICBjb25zdCByZWZfdmFsdWUgPSB0aGlzLnJlZl92YWx1ZTtcbiAgICAgIGlmIChkM19ldmVudCAmJiBkM19ldmVudC5zZWxlY3Rpb25cbiAgICAgICAgICAgICYmIGQzX2V2ZW50LnNvdXJjZUV2ZW50ICYmIGQzX2V2ZW50LnNvdXJjZUV2ZW50LnRhcmdldCA9PT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJydXNoX3RvcCA+IHJlY3Qub3ZlcmxheScpKSB7XG4gICAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICAgIGNvbnN0IHMgPSBkM19ldmVudC5zZWxlY3Rpb247XG4gICAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbXG4gICAgICAgICAgY3VycmVudF9yYW5nZVswXSArIG1hdGhfcm91bmQoc1swXSAvICh3aWR0aCAvIGRpc3BsYXllZCkpIC0gMSxcbiAgICAgICAgICBjdXJyZW50X3JhbmdlWzBdICsgbWF0aF9yb3VuZChzWzFdIC8gKHdpZHRoIC8gZGlzcGxheWVkKSksXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMueC5kb21haW4odGhpcy5kYXRhLnNsaWNlKGN1cnJlbnRfcmFuZ2VfYnJ1c2hbMF0gKyAxLCBjdXJyZW50X3JhbmdlX2JydXNoWzFdKVxuICAgICAgICAgIC5tYXAoZnQgPT4gZnQuaWQpKTtcbiAgICAgICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgICAgICB0aGlzLl9mb2N1cy5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbikge1xuICAgICAgICAgICAgICBhcHAuY29sb3JzW2QuaWRdID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgICAgICAgICAgICByZXR1cm4gY29sb3JfaGlnaGxpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gY3VycmVudF9yYW5nZV9icnVzaFswXSAmJiBpIDwgY3VycmVudF9yYW5nZV9icnVzaFsxXSkge1xuICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGNvbXAoZFtyYXRpb190b191c2VdLCByZWZfdmFsdWUsIHRoaXMuc2VyaWVfaW52ZXJzZWQpO1xuICAgICAgICAgICAgICBhcHAuY29sb3JzW2QuaWRdID0gY29sb3I7XG4gICAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2xvcl9jb3VudHJpZXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkM19ldmVudCAmJiAhZDNfZXZlbnQuc2VsZWN0aW9uXG4gICAgICAgICAgICAmJiBkM19ldmVudC5zb3VyY2VFdmVudCAmJiBkM19ldmVudC5zb3VyY2VFdmVudC5kZXRhaWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICAgICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgICAgICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZvY3VzLnNlbGVjdEFsbCgnLmJhcicpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBhcHAuY29sb3JzW2QuaWRdIHx8IGNvbG9yX2NvdW50cmllcyk7XG4gICAgICB9XG4gICAgfTtcbiAgICBhcHAuY3VycmVudF9jb25maWcubmJfdmFyID0gMTtcbiAgICBjb25zdCB4ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIHdpZHRoXSkucGFkZGluZygwLjEpLFxuICAgICAgeDIgPSBkMy5zY2FsZUJhbmQoKS5yYW5nZShbMCwgd2lkdGhdKS5wYWRkaW5nKDAuMSksXG4gICAgICB5ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0LCAwXSksXG4gICAgICB5MiA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW2hlaWdodDIsIDBdKTtcblxuICAgIGNvbnN0IHhBeGlzID0gZDMuYXhpc0JvdHRvbSh4KTtcbiAgICBjb25zdCB4QXhpczIgPSBkMy5heGlzQm90dG9tKHgyKTtcbiAgICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHkpO1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLngyID0geDI7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnkyID0geTI7XG4gICAgdGhpcy54QXhpcyA9IHhBeGlzO1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcztcbiAgICB0aGlzLnhBeGlzMiA9IHhBeGlzMjtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBhdmFpbGFibGVfcmF0aW9zID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvO1xuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IGF2YWlsYWJsZV9yYXRpb3NbMF07XG4gICAgdGhpcy5yYXRpb190b191c2UgPSByYXRpb190b191c2U7XG5cbiAgICB0aGlzLmRhdGEgPSByZWZfZGF0YS5maWx0ZXIoZnQgPT4gISFmdFtyYXRpb190b191c2VdKTtcbiAgICB0aGlzLmRhdGEuc29ydCgoYSwgYikgPT4gYVtyYXRpb190b191c2VdIC0gYltyYXRpb190b191c2VdKTtcbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIHJlc2V0Q29sb3JzKCk7XG4gICAgdGhpcy5jdXJyZW50X3JhbmtzID0gdGhpcy5kYXRhLm1hcCgoZCwgaSkgPT4gaSArIDEpO1xuICAgIG5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIHRoaXMubWVhbl92YWx1ZSA9IGQzLm1lYW4odGhpcy5kYXRhLm1hcChkID0+IGRbcmF0aW9fdG9fdXNlXSkpO1xuICAgIHRoaXMucmVmX3ZhbHVlID0gdGhpcy5kYXRhLmZpbHRlcihcbiAgICAgIGZ0ID0+IGZ0LmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXVtyYXRpb190b191c2VdO1xuICAgIHN2Z19iYXIuYXBwZW5kKCdkZWZzJylcbiAgICAgIC5hcHBlbmQoJ2NsaXBQYXRoJylcbiAgICAgIC5hdHRyKCdpZCcsICdjbGlwJylcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHJzKHsgd2lkdGgsIGhlaWdodCB9KTtcblxuICAgIGNvbnN0IGZvY3VzID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgY2xhc3M6ICdmb2N1cycsXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgLFxuICAgICAgfSk7XG5cbiAgICBjb25zdCBjb250ZXh0ID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgY2xhc3M6ICdjb250ZXh0JyxcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7bWFyZ2luMi5sZWZ0fSwgJHttYXJnaW4yLnRvcH0pYCxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5fZm9jdXMgPSBmb2N1cztcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgeC5kb21haW4odGhpcy5jdXJyZW50X2lkcyk7XG4gICAgeS5kb21haW4oW1xuICAgICAgZDMubWluKHRoaXMuZGF0YSwgZCA9PiBkW3JhdGlvX3RvX3VzZV0pIC0gMixcbiAgICAgIGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZFtyYXRpb190b191c2VdKSxcbiAgICBdKTtcbiAgICB4Mi5kb21haW4oeC5kb21haW4oKSk7XG4gICAgeTIuZG9tYWluKHkuZG9tYWluKCkpO1xuXG4gICAgY29uc3QgYnJ1c2hfYm90dG9tID0gZDMuYnJ1c2hYKClcbiAgICAgIC5leHRlbnQoW1swLCAwXSwgW3dpZHRoLCBoZWlnaHQyXV0pXG4gICAgICAub24oJ2JydXNoIGVuZCcsIHRoaXMuYnJ1c2hlZCk7XG5cbiAgICBjb25zdCBicnVzaF90b3AgPSBkMy5icnVzaFgoKVxuICAgICAgLmV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKVxuICAgICAgLm9uKCdicnVzaCBlbmQnLCB0aGlzLmJydXNoZWRfdG9wKTtcblxuICAgIGNvbnN0IHpvb20gPSBkMy56b29tKClcbiAgICAgIC5zY2FsZUV4dGVudChbMSwgSW5maW5pdHldKVxuICAgICAgLnRyYW5zbGF0ZUV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKVxuICAgICAgLmV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKTtcbiAgICAgIC8vIC5vbihcInpvb21cIiwgem9vbWVkKTtcbiAgICB0aGlzLmJydXNoX3RvcCA9IGJydXNoX3RvcDtcbiAgICB0aGlzLmJydXNoX2JvdHRvbSA9IGJydXNoX2JvdHRvbTtcbiAgICB0aGlzLnpvb20gPSB6b29tO1xuXG4gICAgZm9jdXMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnYXhpcyBheGlzLS14JywgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0fSlgIH0pXG4gICAgICAuY2FsbCh4QXhpcyk7XG5cbiAgICBmb2N1cy5zZWxlY3QoJy5heGlzLS14JylcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdlbmQnKVxuICAgICAgLmF0dHJzKHsgZHg6ICctMC44ZW0nLCBkeTogJzAuMTVlbScsIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNjUpJyB9KTtcblxuICAgIGZvY3VzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYXhpcyBheGlzLS15JylcbiAgICAgIC5jYWxsKHlBeGlzKTtcblxuICAgIHRoaXMuZ19iYXIgPSBmb2N1cy5hcHBlbmQoJ2cnKTtcblxuICAgIGNvbnN0IGdyb3VwZV9saW5lX21lYW4gPSBmb2N1cy5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdtZWFuJyk7XG4gICAgZ3JvdXBlX2xpbmVfbWVhbi5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHsgeDogNjAsIHk6IHkodGhpcy5tZWFuX3ZhbHVlKSArIDIwIH0pXG4gICAgICAuc3R5bGVzKHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICBmaWxsOiAncmVkJyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6ICcwLjgnLFxuICAgICAgICAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicsXG4gICAgICB9KVxuICAgICAgLnRleHQoYFZhbGV1ciBtb3llbm5lIDogJHtNYXRoLnJvdW5kKHRoaXMubWVhbl92YWx1ZSAqIDEwKSAvIDEwfWApO1xuXG4gICAgZ3JvdXBlX2xpbmVfbWVhbi5hcHBlbmQoJ2xpbmUnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgeDE6IDAsXG4gICAgICAgIHgyOiB3aWR0aCxcbiAgICAgICAgeTE6IHkodGhpcy5tZWFuX3ZhbHVlKSxcbiAgICAgICAgeTI6IHkodGhpcy5tZWFuX3ZhbHVlKSxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiAnMTAsIDUnLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzJweCcsXG4gICAgICAgIGNsYXNzOiAnbWVhbl9saW5lJyxcbiAgICAgIH0pXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICdyZWQnKTtcblxuICAgIGdyb3VwZV9saW5lX21lYW4uYXBwZW5kKCdsaW5lJylcbiAgICAgIC5hdHRycyh7IHgxOiAwLCB4Mjogd2lkdGgsIHkxOiB5KHRoaXMubWVhbl92YWx1ZSksIHkyOiB5KHRoaXMubWVhbl92YWx1ZSksICdzdHJva2Utd2lkdGgnOiAnMTRweCcsIGNsYXNzOiAndHJhbnNwX21lYW5fbGluZScgfSlcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ3RyYW5zcGFyZW50JylcbiAgICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgICAgICBncm91cGVfbGluZV9tZWFuLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2luaXRpYWwnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlb3V0JywgKCkgPT4ge1xuICAgICAgICBncm91cGVfbGluZV9tZWFuLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy51cGRhdGVNaW5pQmFycygpO1xuXG4gICAgY29udGV4dC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JydXNoX2JvdHRvbScpXG4gICAgICAuY2FsbChicnVzaF9ib3R0b20pXG4gICAgICAuY2FsbChicnVzaF9ib3R0b20ubW92ZSwgeC5yYW5nZSgpKTtcblxuICAgIGZvY3VzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYnJ1c2hfdG9wJylcbiAgICAgIC5jYWxsKGJydXNoX3RvcClcbiAgICAgIC5jYWxsKGJydXNoX3RvcC5tb3ZlLCBudWxsKTtcblxuICAgIHRoaXMuY29tcGxldHVkZV92YWx1ZSA9IGNhbGNQb3BDb21wbGV0dWRlU3Vic2V0KGFwcCwgW3RoaXMucmF0aW9fdG9fdXNlXSk7XG5cbiAgICB0aGlzLmNvbXBsZXR1ZGUgPSBzdmdfYmFyLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cnMoeyBpZDogJ2NoYXJ0X2NvbXBsZXR1ZGUnLCB4OiA2MCwgeTogNDAgfSlcbiAgICAgIC5zdHlsZXMoeyAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicgfSlcbiAgICAgIC50ZXh0KGBDb21wbMOpdHVkZSA6ICR7dGhpcy5jb21wbGV0dWRlX3ZhbHVlfSVgKTtcblxuICAgIHN2Z19iYXIuYXBwZW5kKCdpbWFnZScpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB4OiB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgNSxcbiAgICAgICAgeTogMzg1LFxuICAgICAgICB3aWR0aDogMTUsXG4gICAgICAgIGhlaWdodDogMTUsXG4gICAgICAgICd4bGluazpocmVmJzogJ2ltZy9yZXZlcnNlX2JsdWUucG5nJyxcbiAgICAgICAgaWQ6ICdpbWdfcmV2ZXJzZScsXG4gICAgICB9KVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgLy8gdGhpcy5kYXRhID0gYXBwLmN1cnJlbnRfZGF0YS5zbGljZSgpO1xuICAgICAgICBpZiAoIXRoaXMuc2VyaWVfaW52ZXJzZWQpIHtcbiAgICAgICAgICB0aGlzLmRhdGEuc29ydCgoYSwgYikgPT4gYlt0aGlzLnJhdGlvX3RvX3VzZV0gLSBhW3RoaXMucmF0aW9fdG9fdXNlXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IGFbdGhpcy5yYXRpb190b191c2VdIC0gYlt0aGlzLnJhdGlvX3RvX3VzZV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VyaWVfaW52ZXJzZWQgPSAhdGhpcy5zZXJpZV9pbnZlcnNlZDtcbiAgICAgICAgeC5kb21haW4odGhpcy5kYXRhLnNsaWNlKGN1cnJlbnRfcmFuZ2VbMF0sIGN1cnJlbnRfcmFuZ2VbMV0pLm1hcChmdCA9PiBmdC5pZCkpO1xuICAgICAgICB4Mi5kb21haW4odGhpcy5kYXRhLm1hcChmdCA9PiBmdC5pZCkpO1xuICAgICAgICAvLyBzdmdfYmFyLnNlbGVjdChcIi56b29tXCIpLmNhbGwoem9vbS50cmFuc2Zvcm0sIGQzLnpvb21JZGVudGl0eVxuICAgICAgICAvLyAgICAgLnNjYWxlKHdpZHRoIC8gKGN1cnJlbnRfcmFuZ2VbMV0gLSBjdXJyZW50X3JhbmdlWzBdKSlcbiAgICAgICAgLy8gICAgIC50cmFuc2xhdGUoLWN1cnJlbnRfcmFuZ2VbMF0sIDApKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgLy8gdGhpcy51cGRhdGVNaW5pQmFycygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQoY3VycmVudF9yYW5nZVswXSwgY3VycmVudF9yYW5nZVsxXSk7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbChicnVzaF90b3AubW92ZSwgbnVsbCk7XG4gICAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChicnVzaF9ib3R0b20ubW92ZSwgeC5yYW5nZSgpKTtcbiAgICAgIH0pO1xuXG4gICAgLy8gUHJlcGFyZSB0aGUgdG9vbHRpcCBkaXNwbGF5ZWQgb24gbW91c2VvdmVyOlxuICAgIGNvbnN0IHRvb2x0aXAgPSBwcmVwYXJlVG9vbHRpcChzdmdfYmFyKTtcblxuICAgIC8vIERlYWN0aXZhdGUgdGhlIGJydXNoIHJlY3Qgc2VsZWN0aW9uIG9uIHRoZSBtYXAgKyBvbiB0aGUgY2hhcnRcbiAgICAvLyB3aGVuIGhlIHVzZXIgcHJlc3MgdGhlIEN0cmwga2V5OlxuICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKVxuICAgICAgICAgIC5zZWxlY3RBbGwoJy5zZWxlY3Rpb24sIC5vdmVybGF5JylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jdW1lbnQub25rZXl1cCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vXG4gICAgY29uc3QgaGVhZGVyX2Jhcl9zZWN0aW9uID0gZDMuc2VsZWN0KCcjaGVhZGVyX2NoYXJ0Jyk7XG5cbiAgICB0aGlzLnNlbGVjX3ZhciA9IGhlYWRlcl9iYXJfc2VjdGlvblxuICAgICAgLmluc2VydCgnc2VsZWN0JywgJyNpbWdfdGFibGUnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICd0aXRsZV92YXJpYWJsZScgfSlcbiAgICAgIC5zdHlsZXMoe1xuICAgICAgICAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicsXG4gICAgICAgICdmb250LXdlaWdodCc6ICc4MDAnLFxuICAgICAgICAnZm9udC1zaXplJzogJzE0cHgnLFxuICAgICAgICAnbWFyZ2luLXRvcCc6ICcxMnB4JyxcbiAgICAgICAgJ21hcmdpbi1sZWZ0JzogJzQwcHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSBhdmFpbGFibGVfcmF0aW9zLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICAgIHRoaXMuc2VsZWNfdmFyLmFwcGVuZCgnb3B0aW9uJylcbiAgICAgICAgLmF0dHIoJ3ZhbHVlJywgYXZhaWxhYmxlX3JhdGlvc1tpXSlcbiAgICAgICAgLnRleHQoYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjX3Zhci5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY29kZV92YXJpYWJsZSA9IHRoaXMudmFsdWU7XG4gICAgICBzZWxmLmNoYW5nZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpO1xuICAgICAgc2VsZi5jaGFuZ2VTdHVkeVpvbmUoKTtcbiAgICAgIHNlbGYudXBkYXRlQ29tcGxldHVkZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBtZW51IHVuZGVyIHRoZSBjaGFydCBhbGxvd2luZyB0byB1c2Ugc29tZSB1c2VmdWwgc2VsZWN0aW9uc1xuICAgIC8vIChhYm92ZSBvciBiZWxvdyB0aGUgbWVhbiB2YWx1ZSBhbmQgYWJvdmUgb3IgYmVsb3cgbXlfcmVnaW9uKVxuICAgIGNvbnN0IG1lbnVfc2VsZWN0aW9uID0gZDMuc2VsZWN0KCcjYmFyX3NlY3Rpb24nKVxuICAgICAgLmFwcGVuZCgnZGl2JylcbiAgICAgIC5hdHRyKCdpZCcsICdtZW51X3NlbGVjdGlvbicpXG4gICAgICAuc3R5bGVzKHsgcGFkZGluZzogJzAgMTBweCAxMHB4IDEwcHgnLCAndGV4dC1hbGlnbic6ICdjZW50ZXInIH0pO1xuXG4gICAgbWVudV9zZWxlY3Rpb24uYXBwZW5kKCdidXR0b24nKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdidXR0b25fYmx1ZScsIGlkOiAnYnRuX2Fib3ZlX21lYW4nIH0pXG4gICAgICAudGV4dCgnPCDDoCBsYSBtb3llbm5lJylcbiAgICAgIC5vbignY2xpY2snLCAoKSA9PiB0aGlzLnNlbGVjdEJlbG93TWVhbigpKTtcblxuICAgIG1lbnVfc2VsZWN0aW9uLmFwcGVuZCgnYnV0dG9uJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnYnV0dG9uX2JsdWUnLCBpZDogJ2J0bl9iZWxvd19tZWFuJyB9KVxuICAgICAgLnRleHQoJz4gw6AgbGEgbW95ZW5uZScpXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5zZWxlY3RBYm92ZU1lYW4oKSk7XG5cbiAgICBtZW51X3NlbGVjdGlvbi5hcHBlbmQoJ2J1dHRvbicpXG4gICAgICAuYXR0cnMoeyBjbGFzczogJ2J1dHRvbl9ibHVlJywgaWQ6ICdidG5fYWJvdmVfbXlfcmVnaW9uJyB9KVxuICAgICAgLnRleHQoJzwgw6AgbWEgcsOpZ2lvbicpXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5zZWxlY3RCZWxvd015UmVnaW9uKCkpO1xuXG4gICAgbWVudV9zZWxlY3Rpb24uYXBwZW5kKCdidXR0b24nKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdidXR0b25fYmx1ZScsIGlkOiAnYnRuX2JlbG93X215X3JlZ2lvbicgfSlcbiAgICAgIC50ZXh0KCc+IMOgIG1hIHLDqWdpb24nKVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHRoaXMuc2VsZWN0QWJvdmVNeVJlZ2lvbigpKTtcbiAgfVxuXG4gIHVwZGF0ZUNvbXBsZXR1ZGUoKSB7XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCBbdGhpcy5yYXRpb190b191c2VdKTtcblxuICAgIHRoaXMuY29tcGxldHVkZVxuICAgICAgLnRleHQoYENvbXBsw6l0dWRlIDogJHt0aGlzLmNvbXBsZXR1ZGVfdmFsdWV9JWApO1xuICB9XG5cbiAgdXBkYXRlQ29udGV4dChtaW4sIG1heCkge1xuICAgIHRoaXMuY29udGV4dC5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgKF8sIGkpID0+IChpID49IG1pbiAmJiBpIDwgbWF4ID8gJzEnIDogJzAuMycpKTtcbiAgfVxuXG4gIHVwZGF0ZSgpIHtcbiAgICBkaXNwbGF5ZWQgPSAwO1xuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IHRoaXMucmF0aW9fdG9fdXNlO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGJhciA9IHRoaXMuZ19iYXIuc2VsZWN0QWxsKCcuYmFyJylcbiAgICAgIC5kYXRhKHRoaXMuZGF0YSk7XG5cbiAgICBiYXJcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIHg6IHRoaXMueChkLmlkKSxcbiAgICAgICAgeTogdGhpcy55KGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICAgIHdpZHRoOiB0aGlzLnguYmFuZHdpZHRoKCksXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gdGhpcy55KGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICB9KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gYXBwLmNvbG9yc1tkLmlkXSB8fCBjb2xvcl9jb3VudHJpZXMpXG4gICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAoZCkgPT4ge1xuICAgICAgICBjb25zdCB0b19kaXNwbGF5ID0gdGhpcy54KGQuaWQpICE9IG51bGw7XG4gICAgICAgIGlmICh0b19kaXNwbGF5KSB7XG4gICAgICAgICAgZGlzcGxheWVkICs9IDE7XG4gICAgICAgICAgcmV0dXJuICdpbml0aWFsJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ25vbmUnO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKS5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKTtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gICAgICAgICAgLnRleHQoYCR7ZC5pZH1gKTtcbiAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTEnKVxuICAgICAgICAgIC50ZXh0KGAke21hdGhfcm91bmQoZFtzZWxmLnJhdGlvX3RvX3VzZV0gKiAxMCkgLyAxMH1gKTtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7W2QzLm1vdXNlKHRoaXMpWzBdIC0gNSwgZDMubW91c2UodGhpcylbMV0gLSA0NV19KWApO1xuICAgICAgfSk7XG5cbiAgICBiYXIuZW50ZXIoKVxuICAgICAgLmluc2VydCgncmVjdCcsICcubWVhbicpXG4gICAgICAuYXR0cnMoZCA9PiAoe1xuICAgICAgICBjbGFzczogJ2JhcicsXG4gICAgICAgIHg6IHRoaXMueChkLmlkKSxcbiAgICAgICAgeTogdGhpcy55KGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICAgIHdpZHRoOiB0aGlzLnguYmFuZHdpZHRoKCksXG4gICAgICAgIGhlaWdodDogaGVpZ2h0IC0gdGhpcy55KGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICB9KSk7XG5cbiAgICBiYXIuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgdGhpcy5fZm9jdXMuc2VsZWN0KCcuYXhpcy0teScpXG4gICAgICAuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgIGNvbnN0IGF4aXNfeCA9IHRoaXMuX2ZvY3VzLnNlbGVjdCgnLmF4aXMtLXgnKVxuICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsICgpID0+IChkaXNwbGF5ZWQgPiA3NSA/IDYgOiAxMCkpXG4gICAgICAuY2FsbCh0aGlzLnhBeGlzKTtcbiAgICBheGlzX3hcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgLmF0dHJzKCgpID0+IHtcbiAgICAgICAgaWYgKGRpc3BsYXllZCA+IDEwMCkge1xuICAgICAgICAgIHJldHVybiB7IGR4OiAnLTAuOGVtJywgZHk6ICcwLjE1ZW0nLCB0cmFuc2Zvcm06ICdyb3RhdGUoLTY1KScgfTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXNwbGF5ZWQgPiAyMCkge1xuICAgICAgICAgIHJldHVybiB7IGR4OiAnLTAuOGVtJywgZHk6ICcwLjE1ZW0nLCB0cmFuc2Zvcm06ICdyb3RhdGUoLTY1KScgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4geyBkeDogJzAnLCBkeTogJzAuNzFlbScsIHRyYW5zZm9ybTogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICgpID0+IChkaXNwbGF5ZWQgPiAyMCA/ICdlbmQnIDogJ21pZGRsZScpKTtcblxuICAgIHRoaXMudXBkYXRlTWluaUJhcnMoKTtcbiAgfVxuXG5cbiAgdXBkYXRlTWluaUJhcnMoKSB7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgY29uc3QgbWluaV9iYXJzID0gdGhpcy5jb250ZXh0LnNlbGVjdEFsbCgnLmJhcicpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEpO1xuXG4gICAgbWluaV9iYXJzXG4gICAgICAuYXR0cnMoZCA9PiAoe1xuICAgICAgICB4OiB0aGlzLngyKGQuaWQpLFxuICAgICAgICB5OiB0aGlzLnkyKGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICAgIHdpZHRoOiB0aGlzLngyLmJhbmR3aWR0aCgpLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodDIgLSB0aGlzLnkyKGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICB9KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gKGQuaWQgIT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24gPyBjb2xvcl9jb3VudHJpZXMgOiBjb2xvcl9oaWdobGlnaHQpKTtcblxuICAgIG1pbmlfYmFyc1xuICAgICAgLmVudGVyKClcbiAgICAgIC5pbnNlcnQoJ3JlY3QnKVxuICAgICAgLmF0dHJzKGQgPT4gKHtcbiAgICAgICAgY2xhc3M6ICdiYXInLFxuICAgICAgICB4OiB0aGlzLngyKGQuaWQpLFxuICAgICAgICB5OiB0aGlzLnkyKGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICAgIHdpZHRoOiB0aGlzLngyLmJhbmR3aWR0aCgpLFxuICAgICAgICBoZWlnaHQ6IGhlaWdodDIgLSB0aGlzLnkyKGRbcmF0aW9fdG9fdXNlXSksXG4gICAgICB9KSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gKGQuaWQgIT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24gPyBjb2xvcl9jb3VudHJpZXMgOiBjb2xvcl9oaWdobGlnaHQpKTtcbiAgICBtaW5pX2JhcnMuZXhpdCgpLnJlbW92ZSgpO1xuICB9XG5cbiAgdXBkYXRlTWFwUmVnaW8oKSB7XG4gICAgdGhpcy5tYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiAodGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV0pID4gLTFcbiAgICAgICAgPyAoYXBwLmNvbG9yc1tkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dXSB8fCBjb2xvcl9jb3VudHJpZXMpXG4gICAgICAgIDogY29sb3JfZGlzYWJsZWQpKTtcbiAgfVxuXG4gIHNlbGVjdEFib3ZlTXlSZWdpb24oKSB7XG4gICAgY29uc3QgbXlfcmFuayA9IHRoaXMuZGF0YS5tYXAoKGQsIGkpID0+IFtkLmlkLCBpXSlcbiAgICAgIC5maWx0ZXIoZCA9PiBkWzBdID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXVsxXTtcbiAgICBhcHAuY29sb3JzID0ge307XG4gICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICBpZiAoIXRoaXMuc2VyaWVfaW52ZXJzZWQpIHtcbiAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbbXlfcmFuaywgdGhpcy5kYXRhLmxlbmd0aF07XG4gICAgICB0aGlzLmRhdGFcbiAgICAgICAgLmZpbHRlcigoZCwgaSkgPT4gaSA+IG15X3JhbmspXG4gICAgICAgIC5tYXAoZCA9PiBkLmlkKVxuICAgICAgICAuZm9yRWFjaCgoZnQpID0+IHsgYXBwLmNvbG9yc1tmdF0gPSBjb2xvcl9zdXA7IH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X3JhbmdlX2JydXNoID0gWzAsIG15X3JhbmtdO1xuICAgICAgdGhpcy5kYXRhXG4gICAgICAgIC5maWx0ZXIoKGQsIGkpID0+IGkgPCBteV9yYW5rKVxuICAgICAgICAubWFwKGQgPT4gZC5pZClcbiAgICAgICAgLmZvckVhY2goKGZ0KSA9PiB7IGFwcC5jb2xvcnNbZnRdID0gY29sb3JfaW5mOyB9KTtcbiAgICB9XG4gICAgc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF9ib3R0b20nKS5jYWxsKFxuICAgICAgdGhpcy5icnVzaF9ib3R0b20ubW92ZSwgdGhpcy54Mi5yYW5nZSgpKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIC8vIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbCh0aGlzLmJydXNoX3RvcC5tb3ZlLCBjdXJyZW50X3JhbmdlX2JydXNoLm1hcChkID0+IGQgKiAod2lkdGggLyBuYkZ0KSkpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgfVxuXG4gIHNlbGVjdEJlbG93TXlSZWdpb24oKSB7XG4gICAgY29uc3QgbXlfcmFuayA9IHRoaXMuZGF0YS5tYXAoKGQsIGkpID0+IFtkLmlkLCBpXSlcbiAgICAgIC5maWx0ZXIoZCA9PiBkWzBdID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXVsxXTtcblxuICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgIGlmICghdGhpcy5zZXJpZV9pbnZlcnNlZCkge1xuICAgICAgY3VycmVudF9yYW5nZV9icnVzaCA9IFswLCBteV9yYW5rXTtcbiAgICAgIHRoaXMuZGF0YVxuICAgICAgICAuZmlsdGVyKChkLCBpKSA9PiBpIDwgbXlfcmFuaylcbiAgICAgICAgLm1hcChkID0+IGQuaWQpXG4gICAgICAgIC5mb3JFYWNoKChmdCkgPT4geyBhcHAuY29sb3JzW2Z0XSA9IGNvbG9yX2luZjsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbbXlfcmFuaywgdGhpcy5kYXRhLmxlbmd0aF07XG4gICAgICB0aGlzLmRhdGFcbiAgICAgICAgLmZpbHRlcigoZCwgaSkgPT4gaSA+IG15X3JhbmspXG4gICAgICAgIC5tYXAoZCA9PiBkLmlkKVxuICAgICAgICAuZm9yRWFjaCgoZnQpID0+IHsgYXBwLmNvbG9yc1tmdF0gPSBjb2xvcl9zdXA7IH0pO1xuICAgIH1cbiAgICBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX2JvdHRvbScpLmNhbGwoXG4gICAgICB0aGlzLmJydXNoX2JvdHRvbS5tb3ZlLCB0aGlzLngyLnJhbmdlKCkpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgLy8gc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF90b3AnKS5jYWxsKHRoaXMuYnJ1c2hfdG9wLm1vdmUsIGN1cnJlbnRfcmFuZ2VfYnJ1c2gubWFwKGQgPT4gZCAqICh3aWR0aCAvIG5iRnQpKSk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICB9XG5cbiAgc2VsZWN0QWJvdmVNZWFuKCkge1xuICAgIGNvbnN0IG1lYW5fcmFuayA9IGdldE1lYW5SYW5rKHRoaXMubWVhbl92YWx1ZSwgdGhpcy5yYXRpb190b191c2UpO1xuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IHRoaXMucmF0aW9fdG9fdXNlO1xuICAgIGNvbnN0IHJlZl92YWx1ZSA9IHRoaXMucmVmX3ZhbHVlO1xuXG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgaWYgKCF0aGlzLnNlcmllX2ludmVyc2VkKSB7XG4gICAgICBjdXJyZW50X3JhbmdlX2JydXNoID0gW21lYW5fcmFuaywgdGhpcy5kYXRhLmxlbmd0aF07XG4gICAgICB0aGlzLmRhdGEuZmlsdGVyKGQgPT4gZFtyYXRpb190b191c2VdID4gdGhpcy5tZWFuX3ZhbHVlKS5mb3JFYWNoKChmdCkgPT4ge1xuICAgICAgICBpZiAoZnRbcmF0aW9fdG9fdXNlXSA+IHJlZl92YWx1ZSkgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb2xvcl9zdXA7XG4gICAgICAgIGVsc2UgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb2xvcl9pbmY7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9yYW5nZV9icnVzaCA9IFswLCBtZWFuX3JhbmsgKyAxXTtcbiAgICAgIHRoaXMuZGF0YS5maWx0ZXIoZCA9PiBkW3JhdGlvX3RvX3VzZV0gPiB0aGlzLm1lYW5fdmFsdWUpLmZvckVhY2goKGZ0KSA9PiB7XG4gICAgICAgIGlmIChmdFtyYXRpb190b191c2VdID4gcmVmX3ZhbHVlKSBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbG9yX2luZjtcbiAgICAgICAgZWxzZSBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbG9yX3N1cDtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChcbiAgICAgIHRoaXMuYnJ1c2hfYm90dG9tLm1vdmUsIHRoaXMueDIucmFuZ2UoKSk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICAvLyBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX3RvcCcpLmNhbGwodGhpcy5icnVzaF90b3AubW92ZSwgY3VycmVudF9yYW5nZV9icnVzaC5tYXAoZCA9PiBkICogKHdpZHRoIC8gbmJGdCkpKTtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gIH1cblxuICBzZWxlY3RCZWxvd01lYW4oKSB7XG4gICAgY29uc3QgbWVhbl9yYW5rID0gZ2V0TWVhblJhbmsodGhpcy5tZWFuX3ZhbHVlLCB0aGlzLnJhdGlvX3RvX3VzZSk7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgY29uc3QgcmVmX3ZhbHVlID0gdGhpcy5yZWZfdmFsdWU7XG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIGlmICghdGhpcy5zZXJpZV9pbnZlcnNlZCkge1xuICAgICAgY3VycmVudF9yYW5nZV9icnVzaCA9IFswLCBtZWFuX3JhbmtdO1xuICAgICAgdGhpcy5kYXRhLmZpbHRlcihkID0+IGRbcmF0aW9fdG9fdXNlXSA8IHRoaXMubWVhbl92YWx1ZSkuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgICAgaWYgKGZ0W3JhdGlvX3RvX3VzZV0gPCByZWZfdmFsdWUpIGFwcC5jb2xvcnNbZnQuaWRdID0gY29sb3JfaW5mO1xuICAgICAgICBlbHNlIGFwcC5jb2xvcnNbZnQuaWRdID0gY29sb3Jfc3VwO1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbbWVhbl9yYW5rICsgMSwgdGhpcy5kYXRhLmxlbmd0aF07XG4gICAgICB0aGlzLmRhdGEuZmlsdGVyKGQgPT4gZFtyYXRpb190b191c2VdIDwgdGhpcy5tZWFuX3ZhbHVlKS5mb3JFYWNoKChmdCkgPT4ge1xuICAgICAgICBpZiAoZnRbcmF0aW9fdG9fdXNlXSA8IHJlZl92YWx1ZSkgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb2xvcl9zdXA7XG4gICAgICAgIGVsc2UgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb2xvcl9pbmY7XG4gICAgICB9KTtcbiAgICB9XG4gICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX2JvdHRvbScpLmNhbGwoXG4gICAgICB0aGlzLmJydXNoX2JvdHRvbS5tb3ZlLCB0aGlzLngyLnJhbmdlKCkpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgLy8gc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF90b3AnKS5jYWxsKHRoaXMuYnJ1c2hfdG9wLm1vdmUsIGN1cnJlbnRfcmFuZ2VfYnJ1c2gubWFwKGQgPT4gZCAqICh3aWR0aCAvIG5iRnQpKSk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICB9XG5cbiAgaGFuZGxlX2JydXNoX21hcChldmVudCkge1xuICAgIGlmICghZXZlbnQgfHwgIWV2ZW50LnNlbGVjdGlvbikge1xuICAgICAgdGhpcy5sYXN0X21hcF9zZWxlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IHRoaXMucmF0aW9fdG9fdXNlO1xuICAgIGNvbnN0IHJlZl92YWx1ZSA9IHRoaXMucmVmX3ZhbHVlO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbChzZWxmLmJydXNoX3RvcC5tb3ZlLCBudWxsKTtcbiAgICBjb25zdCBbdG9wbGVmdCwgYm90dG9tcmlnaHRdID0gZXZlbnQuc2VsZWN0aW9uO1xuICAgIHRoaXMubGFzdF9tYXBfc2VsZWN0aW9uID0gW3RvcGxlZnQsIGJvdHRvbXJpZ2h0XTtcbiAgICAvLyBjb25zdCB0cmFuc2Zvcm0gPSBzdmdfbWFwLm5vZGUoKS5fX3pvb207XG4gICAgLy8gdG9wbGVmdFswXSA9ICh0b3BsZWZ0WzBdIC0gdHJhbnNmb3JtLngpIC8gdHJhbnNmb3JtLms7XG4gICAgLy8gdG9wbGVmdFsxXSA9ICh0b3BsZWZ0WzFdIC0gdHJhbnNmb3JtLnkpIC8gdHJhbnNmb3JtLms7XG4gICAgLy8gYm90dG9tcmlnaHRbMF0gPSAoYm90dG9tcmlnaHRbMF0gLSB0cmFuc2Zvcm0ueCkgLyB0cmFuc2Zvcm0uaztcbiAgICAvLyBib3R0b21yaWdodFsxXSA9IChib3R0b21yaWdodFsxXSAtIHRyYW5zZm9ybS55KSAvIHRyYW5zZm9ybS5rO1xuICAgIGNvbnN0IHJlY3QgPSBuZXcgUmVjdCh0b3BsZWZ0LCBib3R0b21yaWdodCk7XG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIHNlbGYubWFwX2VsZW0udGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXTtcbiAgICAgICAgaWYgKGlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKSB7XG4gICAgICAgICAgYXBwLmNvbG9yc1tpZF0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmN1cnJlbnRfaWRzLmluZGV4T2YoaWQpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcl9kaXNhYmxlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3B0cykge1xuICAgICAgICAgIHRoaXMuX3B0cyA9IHN2Z1BhdGhUb0Nvb3Jkcyh0aGlzLmdldEF0dHJpYnV0ZSgnZCcpLCBhcHAudHlwZV9wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdHMgPSB0aGlzLl9wdHM7XG4gICAgICAgIGZvciAobGV0IGl4ID0gMCwgbmJfcHRzID0gcHRzLmxlbmd0aDsgaXggPCBuYl9wdHM7IGl4KyspIHtcbiAgICAgICAgICBpZiAocmVjdC5jb250YWlucyhwdHNbaXhdKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkLnByb3BlcnRpZXNbcmF0aW9fdG9fdXNlXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY29tcCh2YWx1ZSwgcmVmX3ZhbHVlLCB0aGlzLnNlcmllX2ludmVyc2VkKTtcbiAgICAgICAgICAgIGFwcC5jb2xvcnNbaWRdID0gY29sb3I7XG4gICAgICAgICAgICByZXR1cm4gY29sb3I7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xvcl9jb3VudHJpZXM7XG4gICAgICB9KTtcbiAgICBzZWxmLl9mb2N1cy5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBhcHAuY29sb3JzW2QuaWRdIHx8IGNvbG9yX2NvdW50cmllcyk7XG4gICAgY29uc3QgaWRzID0gT2JqZWN0LmtleXMoYXBwLmNvbG9ycyk7XG4gICAgY29uc3QgcmFua3MgPSBpZHMubWFwKGQgPT4gdGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGQuaWQpID4gLTEpLm1hcChkID0+IHRoaXMuY3VycmVudF9yYW5rc1tkXSk7XG4gICAgaWYgKHJhbmtzLmxlbmd0aCA+IDEpIHtcbiAgICAgIGNvbnN0IGMxID0gcmFua3NbMF0gLSAxO1xuICAgICAgY29uc3QgYzIgPSByYW5rc1tyYW5rcy5sZW5ndGggLSAxXTtcbiAgICAgIGlmIChjMSA8IGN1cnJlbnRfcmFuZ2VbMF0gfHwgYzIgPiBjdXJyZW50X3JhbmdlWzFdKSB7XG4gICAgICAgIGN1cnJlbnRfcmFuZ2UgPSBbXG4gICAgICAgICAgcmFua3NbMF0gLSAxLFxuICAgICAgICAgIHJhbmtzW3JhbmtzLmxlbmd0aCAtIDFdLFxuICAgICAgICBdO1xuICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX2JvdHRvbScpLmNhbGwoXG4gICAgICAgICAgc2VsZi5icnVzaF9ib3R0b20ubW92ZSxcbiAgICAgICAgICBbY3VycmVudF9yYW5nZVswXSAqICh3aWR0aCAvIG5iRnQpLCBjdXJyZW50X3JhbmdlWzFdICogKHdpZHRoIC8gbmJGdCldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9yYW5nZSA9IFswLCB0aGlzLmRhdGEubGVuZ3RoXTtcbiAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChcbiAgICAgICAgc2VsZi5icnVzaF9ib3R0b20ubW92ZSwgc2VsZi54LnJhbmdlKCkpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZUNsaWNrTWFwKGQsIHBhcmVudCkge1xuICAgIGNvbnN0IGlkID0gZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXTtcbiAgICBpZiAodGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGlkKSA8IDAgfHwgaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pIHJldHVybjtcbiAgICBpZiAoYXBwLmNvbG9yc1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgYXBwLmNvbG9yc1tpZF0gPSB1bmRlZmluZWQ7XG4gICAgICBkMy5zZWxlY3QocGFyZW50KS5hdHRyKCdmaWxsJywgY29sb3JfY291bnRyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgY29sb3IgPSBjb21wKFxuICAgICAgICBkLnByb3BlcnRpZXNbdGhpcy5yYXRpb190b191c2VdLFxuICAgICAgICB0aGlzLnJlZl92YWx1ZSxcbiAgICAgICAgdGhpcy5zZXJpZV9pbnZlcnNlZCk7XG4gICAgICBhcHAuY29sb3JzW2lkXSA9IGNvbG9yO1xuICAgICAgZDMuc2VsZWN0KHBhcmVudCkuYXR0cignZmlsbCcsIGNvbG9yKTtcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHVwZGF0ZUNoYW5nZVJlZ2lvbigpIHtcbiAgICBpZiAoYXBwLmN1cnJlbnRfY29uZmlnLmZpbHRlcl9rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy5jaGFuZ2VTdHVkeVpvbmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZWZfdmFsdWUgPSB0aGlzLmRhdGEuZmlsdGVyKFxuICAgICAgICBmdCA9PiBmdC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbilbMF1bdGhpcy5yYXRpb190b191c2VdO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgIHRoaXMudXBkYXRlQ29udGV4dCgwLCB0aGlzLmRhdGEubGVuZ3RoKTtcbiAgICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbCh0aGlzLmJydXNoX2JvdHRvbS5tb3ZlLCB0aGlzLngucmFuZ2UoKSk7XG4gICAgICB0aGlzLm1hcF9lbGVtLnJlbW92ZVJlY3RCcnVzaCgpO1xuICAgICAgdGhpcy5tYXBfZWxlbS51cGRhdGVMZWdlbmQoKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVNZWFuVmFsdWUoKSB7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCByYXRpb190b191c2UgPSB0aGlzLnJhdGlvX3RvX3VzZTtcbiAgICBjb25zdCBncnBfbWVhbiA9IHRoaXMuX2ZvY3VzLnNlbGVjdCgnLm1lYW4nKTtcbiAgICB0aGlzLm1lYW5fdmFsdWUgPSBkMy5tZWFuKHRoaXMuZGF0YS5tYXAoZCA9PiBkW3JhdGlvX3RvX3VzZV0pKTtcbiAgICBncnBfbWVhbi5zZWxlY3QoJ3RleHQnKVxuICAgICAgLmF0dHIoJ3knLCB5KHRoaXMubWVhbl92YWx1ZSkgKyAyMClcbiAgICAgIC50ZXh0KGBWYWxldXIgbW95ZW5uZSA6ICR7TWF0aC5yb3VuZCh0aGlzLm1lYW5fdmFsdWUgKiAxMCkgLyAxMH1gKTtcbiAgICBncnBfbWVhbi5zZWxlY3QoJy5tZWFuX2xpbmUnKVxuICAgICAgLmF0dHJzKHsgeTE6IHkodGhpcy5tZWFuX3ZhbHVlKSwgeTI6IHkodGhpcy5tZWFuX3ZhbHVlKSB9KTtcbiAgICBncnBfbWVhbi5zZWxlY3QoJy50cmFuc3BfbWVhbl9saW5lJylcbiAgICAgIC5hdHRycyh7IHkxOiB5KHRoaXMubWVhbl92YWx1ZSksIHkyOiB5KHRoaXMubWVhbl92YWx1ZSkgfSk7XG4gIH1cblxuICBjaGFuZ2VTdHVkeVpvbmUoKSB7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgdGhpcy5kYXRhID0gYXBwLmN1cnJlbnRfZGF0YS5maWx0ZXIoZnQgPT4gISFmdFtyYXRpb190b191c2VdKTtcblxuICAgIGlmICh0aGlzLnNlcmllX2ludmVyc2VkKSB7XG4gICAgICB0aGlzLmRhdGEuc29ydCgoYSwgYikgPT4gYltyYXRpb190b191c2VdIC0gYVtyYXRpb190b191c2VdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IGFbcmF0aW9fdG9fdXNlXSAtIGJbcmF0aW9fdG9fdXNlXSk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgbmJGdCA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5yZWZfdmFsdWUgPSB0aGlzLmRhdGEuZmluZChcbiAgICAgIGZ0ID0+IGZ0LmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVtyYXRpb190b191c2VdO1xuICAgIHRoaXMueC5kb21haW4odGhpcy5jdXJyZW50X2lkcyk7XG4gICAgY29uc3QgbWluX3NlcmllID0gZDMubWluKHRoaXMuZGF0YSwgZCA9PiBkW3JhdGlvX3RvX3VzZV0pO1xuICAgIGNvbnN0IG1heF9zZXJpZSA9IGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZFtyYXRpb190b191c2VdKTtcbiAgICBjb25zdCBvZmZzZXRfeSA9IChtYXhfc2VyaWUgLSBtaW5fc2VyaWUpIC8gMjA7XG4gICAgdGhpcy55LmRvbWFpbihbXG4gICAgICBtaW5fc2VyaWUgLSBvZmZzZXRfeSwgbWF4X3NlcmllLFxuICAgIF0pO1xuICAgIHRoaXMueDIuZG9tYWluKHRoaXMueC5kb21haW4oKSk7XG4gICAgdGhpcy55Mi5kb21haW4odGhpcy55LmRvbWFpbigpKTtcbiAgICB0aGlzLnVwZGF0ZU1lYW5WYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgdGhpcy51cGRhdGVDb250ZXh0KDAsIHRoaXMuZGF0YS5sZW5ndGgpO1xuXG4gICAgc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF9ib3R0b20nKS5jYWxsKHRoaXMuYnJ1c2hfYm90dG9tLm1vdmUsIHRoaXMueDIucmFuZ2UoKSk7XG4gICAgdGhpcy5tYXBfZWxlbS5yZW1vdmVSZWN0QnJ1c2goKTtcbiAgICBhcHAuY29sb3JzID0ge307XG4gICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gIH1cblxuICBhZGRWYXJpYWJsZShjb2RlX3ZhcmlhYmxlLCBuYW1lX3ZhcmlhYmxlKSB7XG4gICAgLy8gQWRkIHRoZSB2YXJpYWJsZSB0byB0aGUgaW5wdXQgZWxlbWVudCBhbGxvd2luZyB0byBjaG9vc2UgdmFyaWFibGVzOlxuICAgIHRoaXMuc2VsZWNfdmFyLmFwcGVuZCgnb3B0aW9uJylcbiAgICAgIC5hdHRyKCd2YWx1ZScsIGNvZGVfdmFyaWFibGUpXG4gICAgICAudGV4dChuYW1lX3ZhcmlhYmxlKTtcblxuICAgIC8vIEFuZCB1c2UgaXQgaW1tZWRpYXRseTpcbiAgICB0aGlzLnNlbGVjX3Zhci5ub2RlKCkudmFsdWUgPSBjb2RlX3ZhcmlhYmxlO1xuICAgIHRoaXMuc2VsZWNfdmFyLmRpc3BhdGNoKCdjaGFuZ2UnKTtcbiAgfVxuXG4gIHJlbW92ZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpIHtcbiAgICAvLyBBZGQgdGhlIHZhcmlhYmxlIHRvIHRoZSBpbnB1dCBlbGVtZW50IGFsbG93aW5nIHRvIGNob29zZSB2YXJpYWJsZXM6XG4gICAgdGhpcy5zZWxlY192YXIuc2VsZWN0KGBvcHRpb25bdmFsdWU9JHtjb2RlX3ZhcmlhYmxlfV1gKS5yZW1vdmUoKTtcbiAgICBpZiAodGhpcy5yYXRpb190b191c2UgPT09IGNvZGVfdmFyaWFibGUpIHtcbiAgICAgIHRoaXMuc2VsZWNfdmFyLm5vZGUoKS52YWx1ZSA9IHRoaXMuc2VsZWNfdmFyLnNlbGVjdCgnb3B0aW9uJykubm9kZSgpLnZhbHVlO1xuICAgICAgdGhpcy5zZWxlY192YXIuZGlzcGF0Y2goJ2NoYW5nZScpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpIHtcbiAgICB0aGlzLnJhdGlvX3RvX3VzZSA9IGNvZGVfdmFyaWFibGU7XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5fZm9jdXMucmVtb3ZlKCk7XG4gICAgdGhpcy5jb250ZXh0LnJlbW92ZSgpO1xuICAgIHRoaXMuc2VsZWNfdmFyLnJlbW92ZSgpO1xuICAgIHRoaXMubWFwX2VsZW0udW5iaW5kQnJ1c2goKTtcbiAgICB0aGlzLm1hcF9lbGVtID0gbnVsbDtcbiAgICBzdmdfYmFyLmh0bWwoJycpO1xuICB9XG5cbiAgYmluZE1hcChtYXBfZWxlbSkge1xuICAgIHRoaXMubWFwX2VsZW0gPSBtYXBfZWxlbTtcbiAgICB0aGlzLm1hcF9lbGVtLnJlc2V0Q29sb3JzKHRoaXMuY3VycmVudF9pZHMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wLCBtYXRoX3JvdW5kLCBtYXRoX2FicywgUmVjdCwgUHJvcFNpemVyLCBwcmVwYXJlVG9vbHRpcCwgc3ZnUGF0aFRvQ29vcmRzIH0gZnJvbSAnLi8uLi9oZWxwZXJzJztcbmltcG9ydCB7IGNvbG9yX2Rpc2FibGVkLCBjb2xvcl9jb3VudHJpZXMsIGNvbG9yX3N1cCwgY29sb3JfaW5mLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuLy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQgfSBmcm9tICcuLy4uL3ByZXBhcmVfZGF0YSc7XG5pbXBvcnQgeyBzdmdfbWFwIH0gZnJvbSAnLi8uLi9tYXAnO1xuaW1wb3J0IHsgYXBwLCB2YXJpYWJsZXMsIHJlc2V0Q29sb3JzIH0gZnJvbSAnLi8uLi8uLi9tYWluJztcblxuY29uc3Qgc3ZnX2JhciA9IGQzLnNlbGVjdCgnI3N2Z19iYXInKTtcbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDQwLCBsZWZ0OiAzMCB9O1xuXG5jb25zdCB3aWR0aCA9ICtzdmdfYmFyLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgaGVpZ2h0ID0gK3N2Z19iYXIuYXR0cignaGVpZ2h0JykgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuZXhwb3J0IGNsYXNzIEJ1YmJsZUNoYXJ0MSB7XG4gIGNvbnN0cnVjdG9yKHJlZl9kYXRhKSB7XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLm5iX3ZhciA9IDE7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgYXZhaWxhYmxlX3JhdGlvcyA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpbztcbiAgICBjb25zdCBhdmFpbGFibGVfbnVtcyA9IGFwcC5jdXJyZW50X2NvbmZpZy5udW07XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gYXZhaWxhYmxlX3JhdGlvc1swXTtcbiAgICBjb25zdCBzdG9ja190b191c2UgPSBhdmFpbGFibGVfbnVtc1swXTtcbiAgICB0aGlzLnJhdGlvX3RvX3VzZSA9IHJhdGlvX3RvX3VzZTtcbiAgICB0aGlzLnN0b2NrX3RvX3VzZSA9IHN0b2NrX3RvX3VzZTtcbiAgICB0aGlzLmRhdGEgPSByZWZfZGF0YS5maWx0ZXIoZnQgPT4gISFmdFtyYXRpb190b191c2VdKS5zbGljZSgpXG4gICAgICAuc29ydCgoYSwgYikgPT4gYltzdG9ja190b191c2VdIC0gYVtzdG9ja190b191c2VdKTtcbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIHJlc2V0Q29sb3JzKCk7XG4gICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uID0gW107XG4gICAgY29uc3QgZHJhd19ncm91cCA9IHN2Z19iYXJcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYCk7XG4gICAgZHJhd19ncm91cC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdheGlzIGF4aXMtLXgnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMCwgJHtoZWlnaHQgLyAyfSlgIH0pO1xuICAgIHRoaXMuZHJhd19ncm91cCA9IGRyYXdfZ3JvdXA7XG5cbiAgICAvLyBQcmVwYXJlIHRoZSB0b29sdGlwIGRpc3BsYXllZCBvbiBtb3VzZW92ZXI6XG4gICAgcHJlcGFyZVRvb2x0aXAoc3ZnX2Jhcik7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBcImNvbXBsw6l0dWRlXCIgdmFsdWUgZm9yIHRoaXMgcmF0aW86XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCBbdGhpcy5yYXRpb190b191c2VdKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgXCJjb21wbMOpdHVkZVwiIHRleHQ6XG4gICAgdGhpcy5jb21wbGV0dWRlID0gc3ZnX2Jhci5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHsgaWQ6ICdjaGFydF9jb21wbGV0dWRlJywgeDogNjAsIHk6IDQwIH0pXG4gICAgICAuc3R5bGVzKHsgJ2ZvbnQtZmFtaWx5JzogJ1xcJ1NpZ25pa2FcXCcsIHNhbnMtc2VyaWYnIH0pXG4gICAgICAudGV4dChgQ29tcGzDqXR1ZGUgOiAke3RoaXMuY29tcGxldHVkZV92YWx1ZX0lYCk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHNlY3Rpb24gY29udGFpbmluZyB0aGUgaW5wdXQgZWxlbWVudCBhbGxvd2luZyB0byBjaG9zZVxuICAgIC8vIGhvdyBtYW55IFwiY2xvc2VcIiByZWdpb25zIHdlIHdhbnQgdG8gaGlnaGxpZ2h0LlxuICAgIGNvbnN0IHNlbGVjdGlvbl9jbG9zZSA9IGQzLnNlbGVjdChzdmdfYmFyLm5vZGUoKS5wYXJlbnRFbGVtZW50KVxuICAgICAgLmFwcGVuZCgnZGl2JylcbiAgICAgIC5hdHRyKCdpZCcsICdtZW51X3NlbGVjdGlvbicpXG4gICAgICAuc3R5bGVzKHsgdG9wOiAnLTEwMHB4JywgJ21hcmdpbi1sZWZ0JzogJzMwcHgnLCBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9KVxuICAgICAgLmFwcGVuZCgncCcpO1xuXG4gICAgc2VsZWN0aW9uX2Nsb3NlLmFwcGVuZCgnc3BhbicpXG4gICAgICAucHJvcGVydHkoJ3ZhbHVlJywgJ2Nsb3NlJylcbiAgICAgIC5hdHRycyh7IHZhbHVlOiAnY2xvc2UnLCBjbGFzczogJ3R5cGVfc2VsZWN0aW9uIHNxdWFyZSBjaGVja2VkJyB9KTtcbiAgICBzZWxlY3Rpb25fY2xvc2UuYXBwZW5kKCdzcGFuJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnbGFiZWxfY2hrJyB9KVxuICAgICAgLmh0bWwoJ0xlcycpO1xuICAgIHNlbGVjdGlvbl9jbG9zZS5hcHBlbmQoJ2lucHV0JylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnbmJfc2VsZWN0JywgdHlwZTogJ251bWJlcicgfSlcbiAgICAgIC5wcm9wZXJ0eSgndmFsdWUnLCA1KTtcbiAgICBzZWxlY3Rpb25fY2xvc2UuYXBwZW5kKCdzcGFuJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnbGFiZWxfY2hrJyB9KVxuICAgICAgLmh0bWwoJ3LDqWdpb25zIGxlcyBwbHVzIHByb2NoZXMnKTtcbiAgICB0aGlzLm15X3JlZ2lvbl92YWx1ZSA9IHRoaXMuZGF0YVxuICAgICAgICAuZmlsdGVyKGQgPT4gZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbilcbiAgICAgICAgLm1hcChkID0+IGRbcmF0aW9fdG9fdXNlXSlbMF07XG4gICAgdGhpcy5iaW5kTWVudSgpO1xuICAgIHRoaXMuYXBwbHlTZWxlY3Rpb24oNSwgJ2Nsb3NlJyk7XG5cbiAgICAvL1xuICAgIGNvbnN0IGhlYWRlcl9iYXJfc2VjdGlvbiA9IGQzLnNlbGVjdCgnI2hlYWRlcl9jaGFydCcpO1xuXG4gICAgdGhpcy5zZWxlY192YXIgPSBoZWFkZXJfYmFyX3NlY3Rpb25cbiAgICAgIC5pbnNlcnQoJ3NlbGVjdCcsICcjaW1nX3RhYmxlJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAndGl0bGVfdmFyaWFibGUnIH0pXG4gICAgICAuc3R5bGVzKHtcbiAgICAgICAgJ2ZvbnQtZmFtaWx5JzogJ1xcJ1NpZ25pa2FcXCcsIHNhbnMtc2VyaWYnLFxuICAgICAgICAnZm9udC13ZWlnaHQnOiAnODAwJyxcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxNHB4JyxcbiAgICAgICAgJ21hcmdpbi10b3AnOiAnMTJweCcsXG4gICAgICAgICdtYXJnaW4tbGVmdCc6ICc0MHB4JyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgIH0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gYXZhaWxhYmxlX3JhdGlvcy5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gICAgICB0aGlzLnNlbGVjX3Zhci5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAgIC5hdHRyKCd2YWx1ZScsIGF2YWlsYWJsZV9yYXRpb3NbaV0pXG4gICAgICAgIC50ZXh0KGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpb19wcmV0dHlfbmFtZVtpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY192YXIub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNvZGVfdmFyaWFibGUgPSB0aGlzLnZhbHVlO1xuICAgICAgc2VsZi5jaGFuZ2VWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKTtcbiAgICAgIHNlbGYuY2hhbmdlU3R1ZHlab25lKCk7XG4gICAgICBzZWxmLnVwZGF0ZUNvbXBsZXR1ZGUoKTtcbiAgICB9KTtcblxuICAgIC8vIERlYWN0aXZhdGUgdGhlIHJlY3QgYnJ1c2ggc2VsZWN0aW9uIG9uIHRoZSBtYXBcbiAgICAvLyB3aGlsZSB0aGUgdXNlciBwcmVzcyB0aGUgQ3RybCBrZXk6XG4gICAgZG9jdW1lbnQub25rZXlkb3duID0gKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoZXZlbnQgJiYgZXZlbnQua2V5ID09PSAnQ29udHJvbCcpIHtcbiAgICAgICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKVxuICAgICAgICAgIC5zZWxlY3RBbGwoJy5zZWxlY3Rpb24sIC5vdmVybGF5JylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfVxuICAgIH07XG4gICAgLy8gUmVhY3RpdmF0ZSB0aGUgcmVjdCBicnVzaCBzZWxlY3Rpb24gb24gdGhlIG1hcFxuICAgIC8vIHdoZW4gdGhlIHVzZXIgZG9lc24ndCBwcmVzcyB0aGUgQ3RybCBrZXkgYW55bW9yZVxuICAgIGRvY3VtZW50Lm9ua2V5dXAgPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5rZXkgPT09ICdDb250cm9sJykge1xuICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpXG4gICAgICAgICAgLnNlbGVjdEFsbCgnLnNlbGVjdGlvbiwgLm92ZXJsYXknKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBhcHBseVNlbGVjdGlvbihuYiwgdHlwZV9zZWxlY3Rpb24gPSAnY2xvc2UnKSB7XG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIGlmIChuYiA+IDApIHtcbiAgICAgIGNvbnN0IG15X3JlZ2lvbl92YWx1ZSA9IHRoaXMubXlfcmVnaW9uX3ZhbHVlO1xuICAgICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG5cbiAgICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IHRoaXMuZGF0YS5tYXAoZCA9PiAoe1xuICAgICAgICBkaXN0OiBtYXRoX2FicyhkW3JhdGlvX3RvX3VzZV0gLSBteV9yZWdpb25fdmFsdWUpLFxuICAgICAgICByYXRpbzogZFtyYXRpb190b191c2VdLFxuICAgICAgICBpZDogZC5pZCB9KSk7XG4gICAgICBpZiAodHlwZV9zZWxlY3Rpb24gPT09ICdjbG9zZScpIHtcbiAgICAgICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLnNvcnQoKGEsIGIpID0+IGEuZGlzdCAtIGIuZGlzdCk7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbi5zbGljZSgxLCBuYiArIDEpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlX3NlbGVjdGlvbiA9PT0gJ2Rpc3RhbnQnKSB7XG4gICAgICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbi5zb3J0KChhLCBiKSA9PiBiLmRpc3QgLSBhLmRpc3QpO1xuICAgICAgICB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24gPSB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24uc2xpY2UoMCwgbmIpO1xuICAgICAgfVxuICAgICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLmZvckVhY2goKGVsZW0pID0+IHtcbiAgICAgICAgYXBwLmNvbG9yc1tlbGVtLmlkXSA9IGVsZW0ucmF0aW8gPCBteV9yZWdpb25fdmFsdWUgPyBjb2xvcl9pbmYgOiBjb2xvcl9zdXA7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uID0gW107XG4gICAgfVxuICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHNlbGYuZGF0YTtcbiAgICBjb25zdCBoaWdobGlnaHRfc2VsZWN0aW9uID0gc2VsZi5oaWdobGlnaHRfc2VsZWN0aW9uO1xuICAgIGNvbnN0IG15X3JlZ2lvbl92YWx1ZSA9IHNlbGYubXlfcmVnaW9uX3ZhbHVlO1xuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IHNlbGYucmF0aW9fdG9fdXNlO1xuICAgIGNvbnN0IHN0b2NrX3RvX3VzZSA9IHNlbGYuc3RvY2tfdG9fdXNlO1xuXG4gICAgbGV0IF9taW47XG4gICAgbGV0IF9tYXg7XG4gICAgaWYgKGhpZ2hsaWdodF9zZWxlY3Rpb24ubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZGlzdF9taW4gPSBteV9yZWdpb25fdmFsdWUgLSBkMy5taW4oaGlnaGxpZ2h0X3NlbGVjdGlvbiwgZCA9PiBkLnJhdGlvKTtcbiAgICAgIGNvbnN0IGRpc3RfbWF4ID0gZDMubWF4KGhpZ2hsaWdodF9zZWxlY3Rpb24sIGQgPT4gZC5yYXRpbykgLSBteV9yZWdpb25fdmFsdWU7XG4gICAgICBjb25zdCBkaXN0X2F4aXMgPSBNYXRoLm1heChkaXN0X21pbiwgZGlzdF9tYXgpO1xuICAgICAgY29uc3QgbWFyZ2luX21pbl9tYXggPSBtYXRoX3JvdW5kKGRpc3RfYXhpcykgLyA4O1xuICAgICAgX21pbiA9IG15X3JlZ2lvbl92YWx1ZSAtIGRpc3RfYXhpcyAtIG1hcmdpbl9taW5fbWF4O1xuICAgICAgX21heCA9IG15X3JlZ2lvbl92YWx1ZSArIGRpc3RfYXhpcyArIG1hcmdpbl9taW5fbWF4O1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBkaXN0X21pbiA9IG15X3JlZ2lvbl92YWx1ZSAtIGQzLm1pbihkYXRhLCBkID0+IGRbcmF0aW9fdG9fdXNlXSk7XG4gICAgICBjb25zdCBkaXN0X21heCA9IGQzLm1heChkYXRhLCBkID0+IGRbcmF0aW9fdG9fdXNlXSkgLSBteV9yZWdpb25fdmFsdWU7XG4gICAgICBjb25zdCBkaXN0X2F4aXMgPSBNYXRoLm1heChkaXN0X21pbiwgZGlzdF9tYXgpO1xuICAgICAgY29uc3QgbWFyZ2luX21pbl9tYXggPSBtYXRoX3JvdW5kKGRpc3RfYXhpcykgLyA4O1xuICAgICAgX21pbiA9IG15X3JlZ2lvbl92YWx1ZSAtIGRpc3RfYXhpcyAtIG1hcmdpbl9taW5fbWF4O1xuICAgICAgX21heCA9IG15X3JlZ2lvbl92YWx1ZSArIGRpc3RfYXhpcyArIG1hcmdpbl9taW5fbWF4O1xuICAgIH1cblxuICAgIGNvbnN0IHByb3Bfc2l6ZXIgPSBuZXcgUHJvcFNpemVyKGQzLm1heChkYXRhLCBkID0+IGRbc3RvY2tfdG9fdXNlXSksIDMwKTtcbiAgICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFtfbWluLCBfbWF4XSlcbiAgICAgIC5yYW5nZShbMCwgd2lkdGhdKTtcblxuICAgIHRoaXMuZHJhd19ncm91cC5zZWxlY3QoJ2cuYXhpcy0teCcpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjI1KVxuICAgICAgLmNhbGwoZDMuYXhpc0JvdHRvbSh4U2NhbGUpKTtcblxuICAgIGNvbnN0IGJ1YmJsZXMgPSB0aGlzLmRyYXdfZ3JvdXAuc2VsZWN0QWxsKCcuYnViYmxlJylcbiAgICAgIC5kYXRhKGRhdGEsIGQgPT4gZC5pZCk7XG5cbiAgICBidWJibGVzXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjI1KVxuICAgICAgLmF0dHJzKChkKSA9PiB7XG4gICAgICAgIGxldCB4X3ZhbHVlID0geFNjYWxlKGRbcmF0aW9fdG9fdXNlXSk7XG4gICAgICAgIGlmICh4X3ZhbHVlID4gd2lkdGgpIHhfdmFsdWUgPSB3aWR0aCArIDIwMDtcbiAgICAgICAgZWxzZSBpZiAoeF92YWx1ZSA8IDApIHhfdmFsdWUgPSAtMjAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGN4OiB4X3ZhbHVlLFxuICAgICAgICAgIGN5OiBoZWlnaHQgLyAyLFxuICAgICAgICAgIHI6IHByb3Bfc2l6ZXIuc2NhbGUoZFtzdG9ja190b191c2VdKSxcbiAgICAgICAgfTtcbiAgICAgIH0pXG4gICAgICAuc3R5bGVzKGQgPT4gKHtcbiAgICAgICAgZmlsbDogYXBwLmNvbG9yc1tkLmlkXSB8fCBjb2xvcl9jb3VudHJpZXMsXG4gICAgICB9KSk7XG5cbiAgICBidWJibGVzXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmluc2VydCgnY2lyY2xlJylcbiAgICAgIC5zdHlsZXMoZCA9PiAoe1xuICAgICAgICBmaWxsOiBhcHAuY29sb3JzW2QuaWRdIHx8IGNvbG9yX2NvdW50cmllcyxcbiAgICAgIH0pKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDIyNSlcbiAgICAgIC5hdHRycygoZCkgPT4ge1xuICAgICAgICBsZXQgeF92YWx1ZSA9IHhTY2FsZShkW3JhdGlvX3RvX3VzZV0pO1xuICAgICAgICBpZiAoeF92YWx1ZSA+IHdpZHRoKSB4X3ZhbHVlID0gd2lkdGggKyAyMDA7XG4gICAgICAgIGVsc2UgaWYgKHhfdmFsdWUgPCAwKSB4X3ZhbHVlID0gLTIwMDtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjbGFzczogJ2J1YmJsZScsXG4gICAgICAgICAgY3g6IHhfdmFsdWUsXG4gICAgICAgICAgY3k6IGhlaWdodCAvIDIsXG4gICAgICAgICAgcjogcHJvcF9zaXplci5zY2FsZShkW3N0b2NrX3RvX3VzZV0pLFxuICAgICAgICB9O1xuICAgICAgfSk7XG5cbiAgICBidWJibGVzLmV4aXQoKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjI1KS5yZW1vdmUoKTtcblxuICAgIHRoaXMuZHJhd19ncm91cC5zZWxlY3RBbGwoJy5idWJibGUnKVxuICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9KVxuICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpO1xuICAgICAgICBjb25zdCBfcmF0aW9fdG9fdXNlID0gc2VsZi5yYXRpb190b191c2U7XG4gICAgICAgIGNvbnN0IF9zdG9ja190b191c2UgPSBzZWxmLnN0b2NrX3RvX3VzZTtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gICAgICAgICAgLnRleHQoYCR7ZC5pZH1gKTtcbiAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTEnKVxuICAgICAgICAgIC50ZXh0KGBSYXRpbzogJHtNYXRoLnJvdW5kKGRbX3JhdGlvX3RvX3VzZV0gKiAxMCkgLyAxMH1gKTtcbiAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTInKVxuICAgICAgICAgIC50ZXh0KGBTdG9jazogJHtNYXRoLnJvdW5kKGRbX3N0b2NrX3RvX3VzZV0gKiAxMCkgLyAxMH1gKTtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7W2QzLm1vdXNlKHRoaXMpWzBdIC0gNSwgZDMubW91c2UodGhpcylbMV0gLSA0NV19KWApO1xuICAgICAgfSk7XG4gIH1cbiAgdXBkYXRlQ29tcGxldHVkZSgpIHtcbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIFt0aGlzLnJhdGlvX3RvX3VzZV0pO1xuXG4gICAgdGhpcy5jb21wbGV0dWRlXG4gICAgICAudGV4dChgQ29tcGzDqXR1ZGUgOiAke3RoaXMuY29tcGxldHVkZV92YWx1ZX0lYCk7XG4gIH1cblxuICB1cGRhdGVNYXBSZWdpbygpIHtcbiAgICBpZiAoIXRoaXMubWFwX2VsZW0pIHJldHVybjtcbiAgICB0aGlzLm1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+ICh0aGlzLmN1cnJlbnRfaWRzLmluZGV4T2YoZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXSkgPiAtMVxuICAgICAgICA/IChhcHAuY29sb3JzW2QucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV1dIHx8IGNvbG9yX2NvdW50cmllcylcbiAgICAgICAgOiBjb2xvcl9kaXNhYmxlZCkpO1xuICB9XG5cbiAgaGFuZGxlX2JydXNoX21hcChldmVudCkge1xuICAgIGlmICghZXZlbnQgfHwgIWV2ZW50LnNlbGVjdGlvbikge1xuICAgICAgdGhpcy5sYXN0X21hcF9zZWxlY3Rpb24gPSB1bmRlZmluZWQ7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IFt0b3BsZWZ0LCBib3R0b21yaWdodF0gPSBldmVudC5zZWxlY3Rpb247XG4gICAgdGhpcy5sYXN0X21hcF9zZWxlY3Rpb24gPSBbdG9wbGVmdCwgYm90dG9tcmlnaHRdO1xuICAgIGNvbnN0IHJlY3QgPSBuZXcgUmVjdCh0b3BsZWZ0LCBib3R0b21yaWdodCk7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIHNlbGYuaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IFtdO1xuICAgIHNlbGYubWFwX2VsZW0udGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXTtcbiAgICAgICAgaWYgKGlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKSB7XG4gICAgICAgICAgYXBwLmNvbG9yc1tpZF0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmN1cnJlbnRfaWRzLmluZGV4T2YoaWQpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcl9kaXNhYmxlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3B0cykge1xuICAgICAgICAgIHRoaXMuX3B0cyA9IHN2Z1BhdGhUb0Nvb3Jkcyh0aGlzLmdldEF0dHJpYnV0ZSgnZCcpLCBhcHAudHlwZV9wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdHMgPSB0aGlzLl9wdHM7XG4gICAgICAgIGZvciAobGV0IGl4ID0gMCwgbmJfcHRzID0gcHRzLmxlbmd0aDsgaXggPCBuYl9wdHM7IGl4KyspIHtcbiAgICAgICAgICBpZiAocmVjdC5jb250YWlucyhwdHNbaXhdKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBkLnByb3BlcnRpZXNbcmF0aW9fdG9fdXNlXTtcbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY29tcCh2YWx1ZSwgc2VsZi5teV9yZWdpb25fdmFsdWUsIHRoaXMuc2VyaWVfaW52ZXJzZWQpO1xuICAgICAgICAgICAgYXBwLmNvbG9yc1tpZF0gPSBjb2xvcjtcbiAgICAgICAgICAgIHNlbGYuaGlnaGxpZ2h0X3NlbGVjdGlvbi5wdXNoKHtcbiAgICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICAgIHJhdGlvOiB2YWx1ZSxcbiAgICAgICAgICAgICAgZGlzdDogbWF0aF9hYnModmFsdWUgLSBzZWxmLm15X3JlZ2lvbl92YWx1ZSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yX2NvdW50cmllcztcbiAgICAgIH0pO1xuICAgIHNlbGYudXBkYXRlKCk7XG4gIH1cblxuICBoYW5kbGVDbGlja01hcChkLCBwYXJlbnQpIHtcbiAgICBjb25zdCBpZCA9IGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV07XG4gICAgaWYgKHRoaXMuY3VycmVudF9pZHMuaW5kZXhPZihpZCkgPCAwIHx8IGlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKSByZXR1cm47XG4gICAgaWYgKGFwcC5jb2xvcnNbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIFJlbW92ZSB0aGUgY2xpY2tlZCBmZWF0dXJlIGZyb20gdGhlIGNvbG9yZWQgc2VsZWN0aW9uIG9uIHRoZSBjaGFydDpcbiAgICAgIGNvbnN0IGlkX3RvX3JlbW92ZSA9IHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvblxuICAgICAgICAubWFwKChmdCwgaSkgPT4gKGZ0LmlkID09PSBpZCA/IGkgOiBudWxsKSkuZmlsdGVyKGZ0ID0+IGZ0KTtcbiAgICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbi5zcGxpY2UoaWRfdG9fcmVtb3ZlLCAxKTtcbiAgICAgIC8vIENoYW5nZSBpdHMgY29sb3IgaW4gdGhlIGdsb2JhbCBjb2xvcnMgb2JqZWN0OlxuICAgICAgYXBwLmNvbG9yc1tpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBDaGFuZ2UgdGhlIGNvbG9yIG9uIHRoZSBtYXA6XG4gICAgICBkMy5zZWxlY3QocGFyZW50KS5hdHRyKCdmaWxsJywgY29sb3JfY291bnRyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmFsdWUgPSBkLnByb3BlcnRpZXNbdGhpcy5yYXRpb190b191c2VdO1xuICAgICAgY29uc3QgY29sb3IgPSBjb21wKHZhbHVlLCB0aGlzLm15X3JlZ2lvbl92YWx1ZSwgdGhpcy5zZXJpZV9pbnZlcnNlZCk7XG4gICAgICBhcHAuY29sb3JzW2lkXSA9IGNvbG9yO1xuICAgICAgLy8gQ2hhbmdlIHRoZSBjb2xvciBvbiB0aGUgbWFwOlxuICAgICAgZDMuc2VsZWN0KHBhcmVudCkuYXR0cignZmlsbCcsIGNvbG9yKTtcbiAgICAgIC8vIEFkZCB0aGUgY2xpY2tlZCBmZWF0dXJlIG9uIHRoZSBjb2xvcmVkIHNlbGVjdGlvbiBvbiB0aGUgY2hhcnQ6XG4gICAgICB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24ucHVzaCh7XG4gICAgICAgIGlkLFxuICAgICAgICByYXRpbzogdmFsdWUsXG4gICAgICAgIGRpc3Q6IG1hdGhfYWJzKHZhbHVlIC0gdGhpcy5teV9yZWdpb25fdmFsdWUpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGVDaGFuZ2VSZWdpb24oKSB7XG4gICAgaWYgKGFwcC5jdXJyZW50X2NvbmZpZy5maWx0ZXJfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY2hhbmdlU3R1ZHlab25lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICB0aGlzLm1hcF9lbGVtLnVwZGF0ZUxlZ2VuZCgpO1xuICAgICAgdGhpcy5teV9yZWdpb25fdmFsdWUgPSB0aGlzLmRhdGEuZmlsdGVyKFxuICAgICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pWzBdW3RoaXMucmF0aW9fdG9fdXNlXTtcbiAgICAgIHRoaXMuYXBwbHlTZWxlY3Rpb24odGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLmxlbmd0aCwgJ2Nsb3NlJyk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlU3R1ZHlab25lKCkge1xuICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgdGhpcy5tYXBfZWxlbS51cGRhdGVMZWdlbmQoKTtcbiAgICB0aGlzLmRhdGEgPSBhcHAuY3VycmVudF9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMucmF0aW9fdG9fdXNlXSkuc2xpY2UoKVxuICAgICAgLnNvcnQoKGEsIGIpID0+IGJbdGhpcy5zdG9ja190b191c2VdIC0gYVt0aGlzLnN0b2NrX3RvX3VzZV0pO1xuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgdGhpcy5teV9yZWdpb25fdmFsdWUgPSB0aGlzLmRhdGEuZmlsdGVyKFxuICAgICAgZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXVt0aGlzLnJhdGlvX3RvX3VzZV07XG4gICAgY29uc3QgdGVtcCA9IHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbi5sZW5ndGg7XG4gICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uID0gW107XG4gICAgdGhpcy5hcHBseVNlbGVjdGlvbih0ZW1wLCAnY2xvc2UnKTtcbiAgfVxuXG4gIGNoYW5nZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpIHtcbiAgICB0aGlzLnJhdGlvX3RvX3VzZSA9IGNvZGVfdmFyaWFibGU7XG4gICAgdGhpcy5zdG9ja190b191c2UgPSB2YXJpYWJsZXMuZmlsdGVyKGQgPT4gZC5yYXRpbyA9PT0gY29kZV92YXJpYWJsZSlbMF0ubnVtO1xuICB9XG5cblxuICBhZGRWYXJpYWJsZShjb2RlX3ZhcmlhYmxlLCBuYW1lX3ZhcmlhYmxlKSB7XG4gICAgLy8gQWRkIHRoZSB2YXJpYWJsZSB0byB0aGUgaW5wdXQgZWxlbWVudCBhbGxvd2luZyB0byBjaG9vc2UgdmFyaWFibGVzOlxuICAgIHRoaXMuc2VsZWNfdmFyLmFwcGVuZCgnb3B0aW9uJylcbiAgICAgIC5hdHRyKCd2YWx1ZScsIGNvZGVfdmFyaWFibGUpXG4gICAgICAudGV4dChuYW1lX3ZhcmlhYmxlKTtcblxuICAgIC8vIEFuZCB1c2UgaXQgaW1tZWRpYXRseTpcbiAgICB0aGlzLnNlbGVjX3Zhci5ub2RlKCkudmFsdWUgPSBjb2RlX3ZhcmlhYmxlO1xuICAgIHRoaXMuc2VsZWNfdmFyLmRpc3BhdGNoKCdjaGFuZ2UnKTtcbiAgfVxuXG4gIHJlbW92ZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpIHtcbiAgICAvLyBBZGQgdGhlIHZhcmlhYmxlIHRvIHRoZSBpbnB1dCBlbGVtZW50IGFsbG93aW5nIHRvIGNob29zZSB2YXJpYWJsZXM6XG4gICAgdGhpcy5zZWxlY192YXIuc2VsZWN0KGBvcHRpb25bdmFsdWU9JHtjb2RlX3ZhcmlhYmxlfV1gKS5yZW1vdmUoKTtcbiAgICBpZiAodGhpcy5yYXRpb190b191c2UgPT09IGNvZGVfdmFyaWFibGUpIHtcbiAgICAgIHRoaXMuc2VsZWNfdmFyLm5vZGUoKS52YWx1ZSA9IHRoaXMuc2VsZWNfdmFyLnNlbGVjdCgnb3B0aW9uJykubm9kZSgpLnZhbHVlO1xuICAgICAgdGhpcy5zZWxlY192YXIuZGlzcGF0Y2goJ2NoYW5nZScpO1xuICAgIH1cbiAgfVxuXG4gIGJpbmRNZW51KCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IG1lbnUgPSBkMy5zZWxlY3QoJyNtZW51X3NlbGVjdGlvbicpO1xuICAgIGNvbnN0IGFwcGx5Y2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgc2VsZi5tYXBfZWxlbS5yZW1vdmVSZWN0QnJ1c2goKTtcbiAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnR5cGVfc2VsZWN0aW9uJykudmFsdWU7XG4gICAgICBsZXQgdmFsdWUgPSArdGhpcy52YWx1ZTtcbiAgICAgIGlmICghKHZhbHVlID4gLTEpKSB7XG4gICAgICAgIHRoaXMudmFsdWUgPSA1O1xuICAgICAgICB2YWx1ZSA9IDU7XG4gICAgICB9XG4gICAgICBzZWxmLmFwcGx5U2VsZWN0aW9uKHZhbHVlLCB0eXBlKTtcbiAgICB9O1xuICAgIG1lbnUuc2VsZWN0KCcubmJfc2VsZWN0JylcbiAgICAgIC5vbignY2hhbmdlJywgYXBwbHljaGFuZ2UpO1xuICAgIG1lbnUuc2VsZWN0KCcubmJfc2VsZWN0JylcbiAgICAgIC5vbignd2hlZWwnLCBhcHBseWNoYW5nZSk7XG4gICAgbWVudS5zZWxlY3QoJy5uYl9zZWxlY3QnKVxuICAgICAgLm9uKCdrZXl1cCcsIGFwcGx5Y2hhbmdlKTtcbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLm1hcF9lbGVtLnVuYmluZEJydXNoKCk7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG51bGw7XG4gICAgdGhpcy5zZWxlY192YXIucmVtb3ZlKCk7XG4gICAgc3ZnX2Jhci5odG1sKCcnKTtcbiAgfVxuXG4gIGJpbmRNYXAobWFwX2VsZW0pIHtcbiAgICB0aGlzLm1hcF9lbGVtID0gbWFwX2VsZW07XG4gICAgdGhpcy5tYXBfZWxlbS5yZXNldENvbG9ycyh0aGlzLmN1cnJlbnRfaWRzKTtcbiAgICBkMy5zZWxlY3QoJyNtZW51X3NlbGVjdGlvbicpLnNlbGVjdCgnLm5iX3NlbGVjdCcpLmRpc3BhdGNoKCdjaGFuZ2UnKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udGV4dE1lbnUge1xuICBjb25zdHJ1Y3RvcihpdGVtcykge1xuICAgIGlmIChpdGVtcykge1xuICAgICAgdGhpcy5zZXRJdGVtcyhpdGVtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB9XG4gIH1cblxuICBhZGRJdGVtKGl0ZW0pIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goe1xuICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgYWN0aW9uOiBpdGVtLmFjdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZUl0ZW0obmFtZSkge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgIGlmICh0aGlzLml0ZW1zW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEl0ZW1zKGl0ZW1zKSB7XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBuYl9pdGVtcyA9IGl0ZW1zLmxlbmd0aDsgaSA8IG5iX2l0ZW1zOyBpKyspIHtcbiAgICAgIGlmIChpdGVtc1tpXS5uYW1lICYmIGl0ZW1zW2ldLmFjdGlvbikge1xuICAgICAgICB0aGlzLmFkZEl0ZW0oaXRlbXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNob3dNZW51KGV2ZW50LCBwYXJlbnQsIGl0ZW1zLCBwb3NpdGlvbikge1xuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5ET01vYmopIHtcbiAgICAgIHRoaXMuaGlkZU1lbnUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGl0ZW1zKSB7XG4gICAgICB0aGlzLnNldEl0ZW1zKGl0ZW1zKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRNZW51KHBhcmVudCk7XG4gICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgdGhpcy5ET01vYmouc3R5bGUudG9wID0gYCR7ZXZlbnQuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wfXB4YDtcbiAgICAgIHRoaXMuRE9Nb2JqLnN0eWxlLmxlZnQgPSBgJHtldmVudC5jbGllbnRYfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ET01vYmouc3R5bGUudG9wID0gYCR7cG9zaXRpb25bMV19cHhgO1xuICAgICAgdGhpcy5ET01vYmouc3R5bGUubGVmdCA9IGAke3Bvc2l0aW9uWzBdfXB4YDtcbiAgICB9XG4gICAgdGhpcy5kaXNwbGF5ZWQgPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmhpZGVNZW51KCkpO1xuICAgIH0sIDE1MCk7XG4gIH1cblxuICBoaWRlTWVudSgpIHtcbiAgICBpZiAodGhpcy5ET01vYmogJiYgdGhpcy5ET01vYmoucGFyZW50RWxlbWVudCAmJiB0aGlzLkRPTW9iai5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKSB7XG4gICAgICB0aGlzLkRPTW9iai5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuRE9Nb2JqKTtcbiAgICAgIHRoaXMuRE9Nb2JqID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwbGF5ZWQgPSBmYWxzZTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZU1lbnUpO1xuICB9XG5cbiAgaW5pdE1lbnUocGFyZW50KSB7XG4gICAgaWYgKHRoaXMuRE9Nb2JqICYmIHRoaXMuRE9Nb2JqLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5ET01vYmoucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCkge1xuICAgICAgdGhpcy5ET01vYmoucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLkRPTW9iaik7XG4gICAgICB0aGlzLkRPTW9iaiA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICBtZW51LmNsYXNzTmFtZSA9ICdjb250ZXh0LW1lbnUnO1xuICAgIG1lbnUuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIG5iX2l0ZW0gPSB0aGlzLml0ZW1zLmxlbmd0aDsgaSA8IG5iX2l0ZW07IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGkpO1xuICAgICAgaXRlbS5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJjb250ZXh0LW1lbnUtaXRlbS1uYW1lXCI+JHt0aGlzLml0ZW1zW2ldLm5hbWV9PC9zcGFuPmA7XG4gICAgICBsaXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgaXRlbS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpeCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XG4gICAgICAgIHNlbGYuaXRlbXNbaXhdLmFjdGlvbigpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5ET01vYmogPSBtZW51O1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChtZW51KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29tcCwgbWF0aF9yb3VuZCwgbWF0aF9hYnMsIFJlY3QsIGNvbXAyLCBwcmVwYXJlVG9vbHRpcCwgc3ZnUGF0aFRvQ29vcmRzLCBfZ2V0UFIsIGNvbXB1dGVQZXJjZW50aWxlUmFuayB9IGZyb20gJy4vLi4vaGVscGVycyc7XG5pbXBvcnQgeyBjb2xvcl9kaXNhYmxlZCwgY29sb3JfY291bnRyaWVzLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuLy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQgfSBmcm9tICcuLy4uL3ByZXBhcmVfZGF0YSc7XG5pbXBvcnQgeyBzdmdfbWFwIH0gZnJvbSAnLi8uLi9tYXAnO1xuaW1wb3J0IHsgYXBwLCB2YXJpYWJsZXMsIHJlc2V0Q29sb3JzIH0gZnJvbSAnLi8uLi8uLi9tYWluJztcbmltcG9ydCBDb250ZXh0TWVudSBmcm9tICcuLy4uL2NvbnRleHRNZW51JztcblxuY29uc3Qgc3ZnX2JhciA9IGQzLnNlbGVjdCgnI3N2Z19iYXInKTtcbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDQwLCBsZWZ0OiA0MCB9O1xuXG5jb25zdCB3aWR0aCA9ICtzdmdfYmFyLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgaGVpZ2h0ID0gK3N2Z19iYXIuYXR0cignaGVpZ2h0JykgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuXG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIGEgc2NhdHRlcnBsb3QgKi9cbmV4cG9ydCBjbGFzcyBTY2F0dGVyUGxvdDIge1xuICAvKipcbiAgICogQ3JlYXRlIGEgdGhlIHNjYXR0ZXJwbG90IG9uIHRoZSBgc3ZnX2JhcmAgc3ZnIGVsZW1lbnQgcHJldmlvdXNseSBkZWZpbmVkXG4gICAqIEBwYXJhbSB7QXJyYXl9IHJlZl9kYXRhIC0gQSByZWZlcmVuY2UgdG8gdGhlIHN1YnNldCBvZiB0aGUgZGF0YXNldCB0byBiZSB1c2VkXG4gICAqIHRvIGNyZWF0ZSB0aGUgc2NhdHRlcnBsb3QgKHNob3VsZCBjb250YWluIGF0IGxlYXN0IHR3byBmaWVsZCBmbGFnZ2VkIGFzIHJhdGlvXG4gICAqIGluIHRoZSBgYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvYCBPYmplY3QuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIHRoaXMuYnJ1c2hlZCA9ICgpID0+IHtcbiAgICAgIGlmIChkMy5ldmVudCAmJiAhZDMuZXZlbnQuc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChkMy5ldmVudC50eXBlID09PSAnZW5kJyAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC50eXBlID09PSAnbW91c2V1cCcpIHtcbiAgICAgICAgICB0aGlzLm1hcF9lbGVtLnJlbW92ZVJlY3RCcnVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICAgICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc2V0Q29sb3JzKCk7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIGNvbnN0IFt0b3BsZWZ0LCBib3R0b21yaWdodF0gPSBkMy5ldmVudC5zZWxlY3Rpb247XG4gICAgICBjb25zdCByYW5nZV94ID0gW1xuICAgICAgICB0aGlzLnguaW52ZXJ0KHRvcGxlZnRbMF0pLFxuICAgICAgICB0aGlzLnguaW52ZXJ0KGJvdHRvbXJpZ2h0WzBdKSxcbiAgICAgIF07XG4gICAgICBjb25zdCByYW5nZV95ID0gW1xuICAgICAgICB0aGlzLnkuaW52ZXJ0KGJvdHRvbXJpZ2h0WzFdKSxcbiAgICAgICAgdGhpcy55LmludmVydCh0b3BsZWZ0WzFdKSxcbiAgICAgIF07XG4gICAgICBjb25zdCB0MSA9IHRoaXMucmFua192YXJpYWJsZTE7XG4gICAgICBjb25zdCB0MiA9IHRoaXMucmFua192YXJpYWJsZTI7XG4gICAgICB0aGlzLmRhdGFcbiAgICAgICAgLmZpbHRlcihmdCA9PiBmdFt0MV0gPiByYW5nZV94WzBdXG4gICAgICAgICAgJiYgZnRbdDFdIDwgcmFuZ2VfeFsxXVxuICAgICAgICAgICYmIGZ0W3QyXSA+IHJhbmdlX3lbMF1cbiAgICAgICAgICAmJiBmdFt0Ml0gPCByYW5nZV95WzFdKVxuICAgICAgICAuZm9yRWFjaChmdCA9PiB7XG4gICAgICAgICAgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb21wMihcbiAgICAgICAgICAgIGZ0W3RoaXMudmFyaWFibGUxXSwgZnRbdGhpcy52YXJpYWJsZTJdLFxuICAgICAgICAgICAgc2VsZi5yZWZfdmFsdWUxLCBzZWxmLnJlZl92YWx1ZTIsXG4gICAgICAgICAgICBzZWxmLnhJbnZlcnNlZCwgc2VsZi55SW52ZXJzZWQpO1xuICAgICAgICB9KTtcbiAgICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgICAgdGhpcy5tYXBfZWxlbS5yZW1vdmVSZWN0QnJ1c2goKTtcbiAgICB9O1xuICAgIGFwcC5jdXJyZW50X2NvbmZpZy5uYl92YXIgPSAyO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMudmFyaWFibGUxID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvWzBdO1xuICAgIHRoaXMudmFyaWFibGUyID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvWzFdO1xuICAgIHRoaXMucmFua192YXJpYWJsZTEgPSBgcHJfJHt0aGlzLnZhcmlhYmxlMX1gO1xuICAgIHRoaXMucmFua192YXJpYWJsZTIgPSBgcHJfJHt0aGlzLnZhcmlhYmxlMn1gO1xuICAgIHRoaXMucHJldHR5X25hbWUxID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lWzBdO1xuICAgIHRoaXMucHJldHR5X25hbWUyID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lWzFdO1xuICAgIHRoaXMuZGF0YSA9IHJlZl9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMudmFyaWFibGUxXSAmJiAhIWZ0W3RoaXMudmFyaWFibGUyXSlcbiAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0geyBpZDogZC5pZCB9O1xuICAgICAgICByZXNbdGhpcy52YXJpYWJsZTFdID0gZFt0aGlzLnZhcmlhYmxlMV07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMl0gPSBkW3RoaXMudmFyaWFibGUyXTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgcmVzZXRDb2xvcnModGhpcy5jdXJyZW50X2lkcyk7XG4gICAgdGhpcy5uYkZ0ID0gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMSwgdGhpcy5yYW5rX3ZhcmlhYmxlMSk7XG4gICAgY29tcHV0ZVBlcmNlbnRpbGVSYW5rKHRoaXMuZGF0YSwgdGhpcy52YXJpYWJsZTIsIHRoaXMucmFua192YXJpYWJsZTIpO1xuXG4gICAgdGhpcy54ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgICAubmljZSgpO1xuICAgIHRoaXMueSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgIC5uaWNlKCk7XG4gICAgdGhpcy54QXhpcyA9IGQzLmF4aXNCb3R0b20odGhpcy54KS50aWNrcygxMik7XG4gICAgdGhpcy55QXhpcyA9IGQzLmF4aXNMZWZ0KHRoaXMueSkudGlja3MoMTIgKiBoZWlnaHQgLyB3aWR0aCk7XG4gICAgdGhpcy54QXhpczIgPSBkMy5heGlzQm90dG9tKHRoaXMueCkudGlja3MoMTIpO1xuICAgIHRoaXMueUF4aXMyID0gZDMuYXhpc0xlZnQodGhpcy55KS50aWNrcygxMiAqIGhlaWdodCAvIHdpZHRoKTtcblxuICAgIHRoaXMuYnJ1c2ggPSBkMy5icnVzaCgpXG4gICAgICAuZXh0ZW50KFtbMCwgMF0sIFt3aWR0aCwgaGVpZ2h0XV0pXG4gICAgICAub24oXCJicnVzaCBlbmRcIiwgdGhpcy5icnVzaGVkKTtcblxuICAgIHRoaXMueEludmVyc2VkID0gZmFsc2U7XG4gICAgdGhpcy55SW52ZXJzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlZl92YWx1ZTEgPSB0aGlzLmRhdGEuZmluZChcbiAgICAgIGQgPT4gZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbilbdGhpcy52YXJpYWJsZTFdO1xuICAgIHRoaXMucmVmX3ZhbHVlMiA9IHRoaXMuZGF0YS5maW5kKFxuICAgICAgZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVt0aGlzLnZhcmlhYmxlMl07XG5cbiAgICB0aGlzLnBsb3QgPSBzdmdfYmFyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1ttYXJnaW4ubGVmdCwgbWFyZ2luLnRvcF19KWApO1xuXG4gICAgdGhpcy5wbG90LmFwcGVuZCgnZGVmcycpXG4gICAgICAuYXBwZW5kKCdzdmc6Y2xpcFBhdGgnKVxuICAgICAgLmF0dHIoJ2lkJywgJ2NsaXAnKVxuICAgICAgLmFwcGVuZCgnc3ZnOnJlY3QnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5zY2F0dGVyID0gdGhpcy5wbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCAnc2NhdHRlcnBsb3QnKVxuICAgICAgLmF0dHIoJ2NsaXAtcGF0aCcsICd1cmwoI2NsaXApJyk7XG5cbiAgICB0aGlzLnguZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUxXSkpLm5pY2UoKTtcbiAgICB0aGlzLnkuZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUyXSkpLm5pY2UoKTtcbiAgICB0aGlzLm1lYW5fdmFyaWFibGUxID0gX2dldFBSKFxuICAgICAgZDMubWVhbih0aGlzLmRhdGEubWFwKGQgPT4gZFt0aGlzLnZhcmlhYmxlMV0pKSwgdGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy52YXJpYWJsZTFdKSk7XG4gICAgdGhpcy5tZWFuX3ZhcmlhYmxlMiA9IF9nZXRQUihcbiAgICAgIGQzLm1lYW4odGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy52YXJpYWJsZTJdKSksIHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUyXSkpO1xuXG4gICAgdGhpcy5tYWtlR3JpZCgpO1xuXG4gICAgY29uc3QgZ3JvdXBlX2xpbmVfbWVhbiA9IHRoaXMucGxvdC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsaXAtcGF0aCcsICd1cmwoI2NsaXApJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdtZWFuJyk7XG4gICAgZ3JvdXBlX2xpbmVfbWVhbi5hcHBlbmQoJ2xpbmUnKVxuICAgICAgLmF0dHIoJ2NsaXAtcGF0aCcsICd1cmwoI2NsaXApJylcbiAgICAgIC5hdHRycyh7XG4gICAgICAgIGlkOiAnbWVhbl94JyxcbiAgICAgICAgeDE6IHRoaXMueCh0aGlzLm1lYW5fdmFyaWFibGUxKSxcbiAgICAgICAgeDI6IHRoaXMueCh0aGlzLm1lYW5fdmFyaWFibGUxKSxcbiAgICAgICAgeTE6IDAsXG4gICAgICAgIHkyOiB3aWR0aCxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiAnMTAsIDUnLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzJweCcsXG4gICAgICB9KVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAncmVkJyk7XG4gICAgZ3JvdXBlX2xpbmVfbWVhbi5hcHBlbmQoJ2xpbmUnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAncmVkJylcbiAgICAgIC5hdHRycyh7XG4gICAgICAgIGlkOiAnbWVhbl95JyxcbiAgICAgICAgeDE6IDAsXG4gICAgICAgIHgyOiB3aWR0aCxcbiAgICAgICAgeTE6IHRoaXMueSh0aGlzLm1lYW5fdmFyaWFibGUyKSxcbiAgICAgICAgeTI6IHRoaXMueSh0aGlzLm1lYW5fdmFyaWFibGUyKSxcbiAgICAgICAgJ2NsaXAtcGF0aCc6ICd1cmwoI2NsaXApJyxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiAnMTAsIDUnLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzJweCcsXG4gICAgICB9KTtcblxuICAgIHRoaXMucGxvdC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgY2xhc3M6ICd4IGF4aXMnLCBpZDogJ2F4aXMtLXgnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMCwgJHtoZWlnaHR9KWAsXG4gICAgICB9KVxuICAgICAgLmNhbGwodGhpcy54QXhpcyk7XG5cbiAgICB0aGlzLnBsb3QuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAneSBheGlzJywgaWQ6ICdheGlzLS15Jywgb3BhY2l0eTogMC45IH0pXG4gICAgICAuY2FsbCh0aGlzLnlBeGlzKTtcblxuICAgIHRoaXMucHJlcGFyZVRpdGxlQXhpcygpO1xuXG4gICAgc3ZnX2Jhci5hcHBlbmQoJ2ltYWdlJylcbiAgICAgIC5hdHRycyh7XG4gICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgd2lkdGggLyAyIC0gMjAgLSBzdmdfYmFyLnNlbGVjdCgnI3RpdGxlLWF4aXMteCcpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCAvIDIsXG4gICAgICAgIHk6IG1hcmdpbi50b3AgKyBoZWlnaHQgKyBtYXJnaW4uYm90dG9tIC8gMiAtIDIuNSxcbiAgICAgICAgd2lkdGg6IDE1LFxuICAgICAgICBoZWlnaHQ6IDE1LFxuICAgICAgICAneGxpbms6aHJlZic6ICdpbWcvcmV2ZXJzZV9ibHVlLnBuZycsXG4gICAgICAgIGlkOiAnaW1nX3JldmVyc2VfeCcsXG4gICAgICB9KVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgdGhpcy54SW52ZXJzZWQgPSAhdGhpcy54SW52ZXJzZWQ7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5uYkZ0OyBpKyspIHtcbiAgICAgICAgICBzZWxmLmRhdGFbaV1bc2VsZi5yYW5rX3ZhcmlhYmxlMV0gPSAxMDAgLSBzZWxmLmRhdGFbaV1bc2VsZi5yYW5rX3ZhcmlhYmxlMV07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGFzdF9tYXBfc2VsZWN0aW9uKSB7XG4gICAgICAgICAgdGhpcy5tYXBfZWxlbS5jYWxsQnJ1c2godGhpcy5sYXN0X21hcF9zZWxlY3Rpb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgc3ZnX2Jhci5hcHBlbmQoJ2ltYWdlJylcbiAgICAgIC5hdHRycyh7XG4gICAgICAgIHg6IG1hcmdpbi5sZWZ0IC8gMiAtIDIwLFxuICAgICAgICB5OiBtYXJnaW4udG9wICsgKGhlaWdodCAvIDIpICsgc3ZnX2Jhci5zZWxlY3QoJyN0aXRsZS1heGlzLXknKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0IC8gMiArIDUsXG4gICAgICAgIHdpZHRoOiAxNSxcbiAgICAgICAgaGVpZ2h0OiAxNSxcbiAgICAgICAgJ3hsaW5rOmhyZWYnOiAnaW1nL3JldmVyc2VfYmx1ZS5wbmcnLFxuICAgICAgICBpZDogJ2ltZ19yZXZlcnNlX3knLFxuICAgICAgfSlcbiAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMueUludmVyc2VkID0gIXRoaXMueUludmVyc2VkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmJGdDsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5kYXRhW2ldW3RoaXMucmFua192YXJpYWJsZTJdID0gMTAwIC0gdGhpcy5kYXRhW2ldW3RoaXMucmFua192YXJpYWJsZTJdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhc3RfbWFwX3NlbGVjdGlvbikge1xuICAgICAgICAgIHRoaXMubWFwX2VsZW0uY2FsbEJydXNoKHRoaXMubGFzdF9tYXBfc2VsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIC8vIFByZXBhcmUgdGhlIHRvb2x0aXAgZGlzcGxheWVkIG9uIG1vdXNlb3ZlcjpcbiAgICBwcmVwYXJlVG9vbHRpcChzdmdfYmFyKTtcblxuICAgIC8vIENvbXB1dGUgdGhlIFwiY29tcGzDqXR1ZGVcIiB2YWx1ZSBmb3IgdGhpcyByYXRpbzpcbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIFt0aGlzLnZhcmlhYmxlMSwgdGhpcy52YXJpYWJsZTJdKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgXCJjb21wbMOpdHVkZVwiIHRleHQ6XG4gICAgdGhpcy5jb21wbGV0dWRlID0gc3ZnX2Jhci5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHsgaWQ6ICdjaGFydF9jb21wbGV0dWRlJywgeDogNjAsIHk6IDQwIH0pXG4gICAgICAuc3R5bGVzKHsgJ2ZvbnQtZmFtaWx5JzogJ1xcJ1NpZ25pa2FcXCcsIHNhbnMtc2VyaWYnIH0pXG4gICAgICAudGV4dChgQ29tcGzDqXR1ZGUgOiAke3RoaXMuY29tcGxldHVkZV92YWx1ZX0lYCk7XG5cbiAgICB0aGlzLnBsb3QuYXBwZW5kKFwiZ1wiKVxuICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImJydXNoXCIpXG4gICAgICAuY2FsbCh0aGlzLmJydXNoKTtcblxuXG4gICAgLy8gRGVhY3RpdmF0ZSB0aGUgcmVjdCBicnVzaCBzZWxlY3Rpb24gb24gdGhlIG1hcFxuICAgIC8vIHdoaWxlIHRoZSB1c2VyIHByZXNzIHRoZSBDdHJsIGtleTpcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5rZXkgPT09ICdDb250cm9sJykge1xuICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpXG4gICAgICAgICAgLnNlbGVjdEFsbCgnLnNlbGVjdGlvbiwgLm92ZXJsYXknKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBSZWFjdGl2YXRlIHRoZSByZWN0IGJydXNoIHNlbGVjdGlvbiBvbiB0aGUgbWFwXG4gICAgLy8gd2hlbiB0aGUgdXNlciBkb2Vzbid0IHByZXNzIHRoZSBDdHJsIGtleSBhbnltb3JlXG4gICAgZG9jdW1lbnQub25rZXl1cCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgdW5kZXJseWluZyBncmV5IGdyaWRcbiAgICovXG4gIG1ha2VHcmlkKCkge1xuICAgIHRoaXMucGxvdC5pbnNlcnQoJ2cnLCAnI3NjYXR0ZXJwbG90JylcbiAgICAgIC5hdHRycyh7XG4gICAgICAgIGNsYXNzOiAnZ3JpZCBncmlkLXgnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMCwgJHtoZWlnaHR9KWAsXG4gICAgICB9KVxuICAgICAgLmNhbGwodGhpcy54QXhpczJcbiAgICAgICAgLnRpY2tTaXplKC1oZWlnaHQpXG4gICAgICAgIC50aWNrRm9ybWF0KCcnKSk7XG4gICAgdGhpcy5wbG90Lmluc2VydCgnZycsICcjc2NhdHRlcnBsb3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dyaWQgZ3JpZC15JylcbiAgICAgIC5jYWxsKHRoaXMueUF4aXMyXG4gICAgICAgIC50aWNrU2l6ZSgtd2lkdGgpXG4gICAgICAgIC50aWNrRm9ybWF0KCcnKSk7XG4gICAgdGhpcy5wbG90LnNlbGVjdEFsbCgnLmdyaWQnKVxuICAgICAgLnNlbGVjdEFsbCgnbGluZScpXG4gICAgICAuYXR0cignc3Ryb2tlJywgJ2xpZ2h0Z3JheScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgdGl0bGUgb2YgdGhlIFggYW5kIFkgYXhpcyB3aXRoIHRoZSBhc3NvY2lhdGVkIGNvbnRleHQgbWVudVxuICAgKiBkaXNwbGF5ZWQgd2hlbiB0aGV5IGFyZSBjbGlja2VkIGFuZCBhbGxvd2luZyB0byBzZWxlY3QgYW4gb3RoZXIgdmFyaWFibGVcbiAgICogZm9yIHRoaXMgYXhpcy5cbiAgICovXG4gIHByZXBhcmVUaXRsZUF4aXMoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5tZW51WCA9IG5ldyBDb250ZXh0TWVudSgpO1xuICAgIHRoaXMubWVudVkgPSBuZXcgQ29udGV4dE1lbnUoKTtcbiAgICB0aGlzLml0ZW1zWCA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5maWx0ZXIoZWxlbSA9PiBlbGVtICE9PSB0aGlzLnZhcmlhYmxlMilcbiAgICAgIC5tYXAoZWxlbSA9PiAoe1xuICAgICAgICBuYW1lOiBlbGVtLFxuICAgICAgICBhY3Rpb246ICgpID0+IHRoaXMuY2hhbmdlVmFyaWFibGVYKGVsZW0pLFxuICAgICAgfSkpO1xuICAgIHRoaXMuaXRlbXNZID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLmZpbHRlcihlbGVtID0+IGVsZW0gIT09IHRoaXMudmFyaWFibGUxKVxuICAgICAgLm1hcChlbGVtID0+ICh7XG4gICAgICAgIG5hbWU6IGVsZW0sXG4gICAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jaGFuZ2VWYXJpYWJsZVkoZWxlbSksXG4gICAgICB9KSk7XG5cbiAgICBzdmdfYmFyLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICBpZDogJ3RpdGxlLWF4aXMteCcsXG4gICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgd2lkdGggLyAyLFxuICAgICAgICB5OiBtYXJnaW4udG9wICsgaGVpZ2h0ICsgbWFyZ2luLmJvdHRvbSAvIDIgKyAxMCxcbiAgICAgIH0pXG4gICAgICAuc3R5bGVzKHsgJ2ZvbnQtZmFtaWx5JzogJ3NhbnMtc2VyaWYnLCAnZm9udC1zaXplJzogJzEycHgnLCAndGV4dC1hbmNob3InOiAnbWlkZGxlJyB9KVxuICAgICAgLnRleHQodGhpcy52YXJpYWJsZTEpXG4gICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHNlbGYubWVudVkuZGlzcGxheWVkKSB7XG4gICAgICAgICAgc2VsZi5tZW51WS5oaWRlTWVudSgpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYubWVudVguc2hvd01lbnUoZDMuZXZlbnQsIGRvY3VtZW50LmJvZHksIHNlbGYuaXRlbXNYLCBbYmJveC5sZWZ0IC0gMjAsIGJib3gudG9wICsgMjBdKTtcbiAgICAgIH0pO1xuXG4gICAgc3ZnX2Jhci5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgaWQ6ICd0aXRsZS1heGlzLXknLFxuICAgICAgICB4OiBtYXJnaW4ubGVmdCAvIDIsXG4gICAgICAgIHk6IG1hcmdpbi50b3AgKyAoaGVpZ2h0IC8gMikgLSAxMCxcbiAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKC05MCwgJHttYXJnaW4ubGVmdCAvIDJ9LCAke21hcmdpbi50b3AgKyAoaGVpZ2h0IC8gMil9KWAsXG4gICAgICB9KVxuICAgICAgLnN0eWxlcyh7ICdmb250LWZhbWlseSc6ICdzYW5zLXNlcmlmJywgJ2ZvbnQtc2l6ZSc6ICcxMnB4JywgJ3RleHQtYW5jaG9yJzogJ21pZGRsZScgfSlcbiAgICAgIC50ZXh0KHRoaXMudmFyaWFibGUyKVxuICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYmJveCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChzZWxmLm1lbnVYLmRpc3BsYXllZCkge1xuICAgICAgICAgIHNlbGYubWVudVguaGlkZU1lbnUoKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm1lbnVZLnNob3dNZW51KGQzLmV2ZW50LCBkb2N1bWVudC5ib2R5LCBzZWxmLml0ZW1zWSwgW2Jib3gubGVmdCwgYmJveC5ib3R0b20gKyAxMF0pO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHNlbGYuZGF0YTtcbiAgICBjb25zdCByYW5rX3ZhcmlhYmxlMSA9IHRoaXMucmFua192YXJpYWJsZTE7XG4gICAgY29uc3QgcmFua192YXJpYWJsZTIgPSB0aGlzLnJhbmtfdmFyaWFibGUyO1xuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCBkZWZhdWx0X2NvbG9yID0gJ2dyYXknO1xuICAgIGNvbnN0IGRvdHMgPSB0aGlzLnNjYXR0ZXIuc2VsZWN0QWxsKCcuZG90JylcbiAgICAgIC5kYXRhKGRhdGEsIGQgPT4gZC5pZCk7XG5cbiAgICBkb3RzLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDIyNSlcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIHI6IDUsXG4gICAgICAgIGN4OiB4KGRbcmFua192YXJpYWJsZTFdKSxcbiAgICAgICAgY3k6IHkoZFtyYW5rX3ZhcmlhYmxlMl0pLFxuICAgICAgfSkpXG4gICAgICAuc3R5bGVzKGQgPT4gKHtcbiAgICAgICAgZmlsbDogYXBwLmNvbG9yc1tkLmlkXSB8fCBkZWZhdWx0X2NvbG9yLFxuICAgICAgfSkpO1xuXG4gICAgZG90cy5lbnRlcigpXG4gICAgICAuaW5zZXJ0KCdjaXJjbGUnKVxuICAgICAgLnN0eWxlcyhkID0+ICh7XG4gICAgICAgIGZpbGw6IGFwcC5jb2xvcnNbZC5pZF0gfHwgZGVmYXVsdF9jb2xvcixcbiAgICAgIH0pKVxuICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgLmR1cmF0aW9uKDIyNSlcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIHI6IDUsXG4gICAgICAgIGN4OiB4KGRbcmFua192YXJpYWJsZTFdKSxcbiAgICAgICAgY3k6IHkoZFtyYW5rX3ZhcmlhYmxlMl0pLFxuICAgICAgICBjbGFzczogJ2RvdCcsXG4gICAgICB9KSk7XG5cbiAgICBkb3RzLmV4aXQoKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjI1KS5yZW1vdmUoKTtcblxuICAgIGRvdHNcbiAgICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKS5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGNvbnN0IHRvb2x0aXAgPSBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKTtcbiAgICAgICAgY29uc3QgX3ZhcjEgPSBzZWxmLnZhcmlhYmxlMTtcbiAgICAgICAgY29uc3QgX3ZhcjIgPSBzZWxmLnZhcmlhYmxlMjtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gICAgICAgICAgLnRleHQoYCR7ZC5pZH1gKTtcbiAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTEnKVxuICAgICAgICAgIC50ZXh0KGBWYXJpYWJsZSAxIDogJHtNYXRoLnJvdW5kKGRbX3ZhcjFdICogMTApIC8gMTB9YCk7XG4gICAgICAgIHRvb2x0aXAuc2VsZWN0KCd0ZXh0LnZhbHVlX2ZlYXR1cmUyJylcbiAgICAgICAgICAudGV4dChgVmFyaWFibGUgMiA6ICR7TWF0aC5yb3VuZChkW192YXIyXSAqIDEwKSAvIDEwfWApO1xuICAgICAgICB0b29sdGlwXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtbZDMubW91c2UodGhpcylbMF0gLSA1LCBkMy5tb3VzZSh0aGlzKVsxXSAtIDQ1XX0pYCk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHVwZGF0ZUNvbXBsZXR1ZGUoKSB7XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCBbdGhpcy52YXJpYWJsZTEsIHRoaXMudmFyaWFibGUyXSk7XG5cbiAgICB0aGlzLmNvbXBsZXR1ZGVcbiAgICAgIC50ZXh0KGBDb21wbMOpdHVkZSA6ICR7dGhpcy5jb21wbGV0dWRlX3ZhbHVlfSVgKTtcbiAgfVxuXG4gIHVwZGF0ZU1hcFJlZ2lvKCkge1xuICAgIGlmICghdGhpcy5tYXBfZWxlbSkgcmV0dXJuO1xuICAgIHRoaXMubWFwX2VsZW0udGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuYXR0cignZmlsbCcsIGQgPT4gKHRoaXMuY3VycmVudF9pZHMuaW5kZXhPZihkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dKSA+IC0xXG4gICAgICAgID8gKGFwcC5jb2xvcnNbZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXV0gfHwgY29sb3JfY291bnRyaWVzKVxuICAgICAgICA6IGNvbG9yX2Rpc2FibGVkKSk7XG4gIH1cblxuICBoYW5kbGVfYnJ1c2hfbWFwKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudCB8fCAhZXZlbnQuc2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmxhc3RfbWFwX3NlbGVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc3ZnX2Jhci5zZWxlY3QoJy5icnVzaCcpLmNhbGwodGhpcy5icnVzaC5tb3ZlLCBudWxsKTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBbdG9wbGVmdCwgYm90dG9tcmlnaHRdID0gZXZlbnQuc2VsZWN0aW9uO1xuICAgIHRoaXMubGFzdF9tYXBfc2VsZWN0aW9uID0gW3RvcGxlZnQsIGJvdHRvbXJpZ2h0XTtcbiAgICBjb25zdCByZWN0ID0gbmV3IFJlY3QodG9wbGVmdCwgYm90dG9tcmlnaHQpO1xuICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICBzZWxmLm1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICBjb25zdCBpZCA9IGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV07XG4gICAgICAgIGlmIChpZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbikge1xuICAgICAgICAgIGFwcC5jb2xvcnNbaWRdID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgICAgICAgIHJldHVybiBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICAgIH0gZWxzZSBpZiAoc2VsZi5jdXJyZW50X2lkcy5pbmRleE9mKGlkKSA8IDApIHtcbiAgICAgICAgICByZXR1cm4gY29sb3JfZGlzYWJsZWQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLl9wdHMpIHtcbiAgICAgICAgICB0aGlzLl9wdHMgPSBzdmdQYXRoVG9Db29yZHModGhpcy5nZXRBdHRyaWJ1dGUoJ2QnKSwgYXBwLnR5cGVfcGF0aCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcHRzID0gdGhpcy5fcHRzO1xuICAgICAgICBmb3IgKGxldCBpeCA9IDAsIG5iX3B0cyA9IHB0cy5sZW5ndGg7IGl4IDwgbmJfcHRzOyBpeCsrKSB7XG4gICAgICAgICAgaWYgKHJlY3QuY29udGFpbnMocHRzW2l4XSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlMSA9IGQucHJvcGVydGllc1tzZWxmLnZhcmlhYmxlMV07XG4gICAgICAgICAgICBjb25zdCB2YWx1ZTIgPSBkLnByb3BlcnRpZXNbc2VsZi52YXJpYWJsZTJdO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBjb21wMihcbiAgICAgICAgICAgICAgdmFsdWUxLCB2YWx1ZTIsXG4gICAgICAgICAgICAgIHNlbGYucmVmX3ZhbHVlMSwgc2VsZi5yZWZfdmFsdWUyLFxuICAgICAgICAgICAgICBzZWxmLnhJbnZlcnNlZCwgc2VsZi55SW52ZXJzZWQpO1xuICAgICAgICAgICAgYXBwLmNvbG9yc1tpZF0gPSBjb2xvcjtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yX2NvdW50cmllcztcbiAgICAgIH0pO1xuICAgIHNlbGYudXBkYXRlKCk7XG4gIH1cblxuICBoYW5kbGVDbGlja01hcChkLCBwYXJlbnQpIHtcbiAgICBjb25zdCBpZCA9IGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV07XG4gICAgaWYgKHRoaXMuY3VycmVudF9pZHMuaW5kZXhPZihpZCkgPCAwIHx8IGlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKSByZXR1cm47XG4gICAgaWYgKGFwcC5jb2xvcnNbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIENoYW5nZSBpdHMgY29sb3IgaW4gdGhlIGdsb2JhbCBjb2xvcnMgb2JqZWN0OlxuICAgICAgYXBwLmNvbG9yc1tpZF0gPSB1bmRlZmluZWQ7XG4gICAgICAvLyBDaGFuZ2UgdGhlIGNvbG9yIG9uIHRoZSBtYXA6XG4gICAgICBkMy5zZWxlY3QocGFyZW50KS5hdHRyKCdmaWxsJywgY29sb3JfY291bnRyaWVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmFsdWUxID0gZC5wcm9wZXJ0aWVzW3RoaXMudmFyaWFibGUxXTtcbiAgICAgIGNvbnN0IHZhbHVlMiA9IGQucHJvcGVydGllc1t0aGlzLnZhcmlhYmxlMl07XG4gICAgICBjb25zdCBjb2xvciA9IGNvbXAyKFxuICAgICAgICB2YWx1ZTEsIHZhbHVlMixcbiAgICAgICAgdGhpcy5yZWZfdmFsdWUxLCB0aGlzLnJlZl92YWx1ZTIsXG4gICAgICAgIHRoaXMueEludmVyc2VkLCB0aGlzLnlJbnZlcnNlZCk7XG4gICAgICBhcHAuY29sb3JzW2lkXSA9IGNvbG9yO1xuICAgICAgLy8gQ2hhbmdlIHRoZSBjb2xvciBvbiB0aGUgbWFwOlxuICAgICAgZDMuc2VsZWN0KHBhcmVudCkuYXR0cignZmlsbCcsIGNvbG9yKTtcbiAgICAgIC8vIEFkZCB0aGUgY2xpY2tlZCBmZWF0dXJlIG9uIHRoZSBjb2xvcmVkIHNlbGVjdGlvbiBvbiB0aGUgY2hhcnQ6XG4gICAgfVxuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGVNZWFuVmFsdWUoKSB7XG4gICAgdGhpcy5tZWFuX3ZhcmlhYmxlMSA9IF9nZXRQUihcbiAgICAgIGQzLm1lYW4odGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy52YXJpYWJsZTFdKSksIHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUxXSkpO1xuICAgIHRoaXMubWVhbl92YXJpYWJsZTIgPSBfZ2V0UFIoXG4gICAgICBkMy5tZWFuKHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUyXSkpLCB0aGlzLmRhdGEubWFwKGQgPT4gZFt0aGlzLnZhcmlhYmxlMl0pKTtcbiAgICBjb25zdCBncnBfbWVhbiA9IHRoaXMucGxvdC5zZWxlY3QoJ2cubWVhbicpO1xuICAgIGdycF9tZWFuLnNlbGVjdCgnI21lYW5feCcpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjI1KVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgeDE6IHRoaXMueCh0aGlzLm1lYW5fdmFyaWFibGUxKSxcbiAgICAgICAgeDI6IHRoaXMueCh0aGlzLm1lYW5fdmFyaWFibGUxKSxcbiAgICAgIH0pO1xuICAgIGdycF9tZWFuLnNlbGVjdCgnI21lYW5feScpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjI1KVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgeTE6IHRoaXMueSh0aGlzLm1lYW5fdmFyaWFibGUyKSxcbiAgICAgICAgeTI6IHRoaXMueSh0aGlzLm1lYW5fdmFyaWFibGUyKSxcbiAgICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlQ2hhbmdlUmVnaW9uKCkge1xuICAgIGlmIChhcHAuY3VycmVudF9jb25maWcuZmlsdGVyX2tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmNoYW5nZVN0dWR5Wm9uZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZl92YWx1ZTEgPSB0aGlzLmRhdGEuZmluZChcbiAgICAgICAgZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVt0aGlzLnZhcmlhYmxlMV07XG4gICAgICB0aGlzLnJlZl92YWx1ZTIgPSB0aGlzLmRhdGEuZmluZChcbiAgICAgICAgZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVt0aGlzLnZhcmlhYmxlMl07XG4gICAgICB0aGlzLm1hcF9lbGVtLnJlbW92ZVJlY3RCcnVzaCgpO1xuICAgICAgdGhpcy5tYXBfZWxlbS51cGRhdGVMZWdlbmQoKTtcbiAgICAgIHRoaXMubWFwX2VsZW0ucmVzZXRDb2xvcnModGhpcy5jdXJyZW50X2lkcyk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNoYW5nZVN0dWR5Wm9uZSgpIHtcbiAgICB0aGlzLmRhdGEgPSBhcHAuY3VycmVudF9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMudmFyaWFibGUxXSAmJiAhIWZ0W3RoaXMudmFyaWFibGUyXSlcbiAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0geyBpZDogZC5pZCB9O1xuICAgICAgICByZXNbdGhpcy52YXJpYWJsZTFdID0gZFt0aGlzLnZhcmlhYmxlMV07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMl0gPSBkW3RoaXMudmFyaWFibGUyXTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgcmVzZXRDb2xvcnMoKTtcbiAgICB0aGlzLm5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLmRhdGEsIHRoaXMudmFyaWFibGUxLCB0aGlzLnJhbmtfdmFyaWFibGUxKTtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMiwgdGhpcy5yYW5rX3ZhcmlhYmxlMik7XG5cbiAgICB0aGlzLnhJbnZlcnNlZCA9IGZhbHNlO1xuICAgIHRoaXMueUludmVyc2VkID0gZmFsc2U7XG4gICAgY29uc3QgdG1wX215X3JlZ2lvbiA9IHRoaXMuZGF0YS5maWx0ZXIoZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXTtcbiAgICB0aGlzLnJlZl92YWx1ZTEgPSB0bXBfbXlfcmVnaW9uW3RoaXMudmFyaWFibGUxXTtcbiAgICB0aGlzLnJlZl92YWx1ZTIgPSB0bXBfbXlfcmVnaW9uW3RoaXMudmFyaWFibGUyXTtcblxuICAgIHRoaXMueC5kb21haW4oZDMuZXh0ZW50KHRoaXMuZGF0YSwgZCA9PiBkW3RoaXMucmFua192YXJpYWJsZTFdKSkubmljZSgpO1xuICAgIHRoaXMueS5kb21haW4oZDMuZXh0ZW50KHRoaXMuZGF0YSwgZCA9PiBkW3RoaXMucmFua192YXJpYWJsZTJdKSkubmljZSgpO1xuICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgdGhpcy51cGRhdGVJdGVtc0N0eE1lbnUoKTtcbiAgICB0aGlzLnVwZGF0ZU1lYW5WYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgY2hhbmdlVmFyaWFibGVYKGNvZGVfdmFyaWFibGUpIHtcbiAgICB0aGlzLnZhcmlhYmxlMSA9IGNvZGVfdmFyaWFibGU7XG4gICAgdGhpcy5yYW5rX3ZhcmlhYmxlMSA9IGBwcl8ke3RoaXMudmFyaWFibGUxfWA7XG4gICAgdGhpcy5wcmV0dHlfbmFtZTEgPSB2YXJpYWJsZXMuZmluZChmdCA9PiBmdC5yYXRpbyA9PT0gY29kZV92YXJpYWJsZSkubmFtZTtcbiAgICBzdmdfYmFyLnNlbGVjdCgnI3RpdGxlLWF4aXMteCcpXG4gICAgICAudGV4dChjb2RlX3ZhcmlhYmxlKTtcbiAgICAvLyBUT0RPOiBBbHNvIGNoYW5nZSB0aGUgcG9zaXRpb24gb2YgdGhlIGJ1dHRvbiBhbG93aW5nIHRvIGludmVyc2UgdGhlIHNlcmllXG4gICAgdGhpcy51cGRhdGVJdGVtc0N0eE1lbnUoKTtcbiAgICB0aGlzLmRhdGEgPSBhcHAuY3VycmVudF9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMudmFyaWFibGUxXSAmJiAhIWZ0W3RoaXMudmFyaWFibGUyXSlcbiAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0geyBpZDogZC5pZCB9O1xuICAgICAgICByZXNbdGhpcy52YXJpYWJsZTFdID0gZFt0aGlzLnZhcmlhYmxlMV07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMl0gPSBkW3RoaXMudmFyaWFibGUyXTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgcmVzZXRDb2xvcnMoKTtcbiAgICB0aGlzLm5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLmRhdGEsIHRoaXMudmFyaWFibGUxLCB0aGlzLnJhbmtfdmFyaWFibGUxKTtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMiwgdGhpcy5yYW5rX3ZhcmlhYmxlMik7XG4gICAgdGhpcy5yZWZfdmFsdWUxID0gdGhpcy5kYXRhLmZpbmQoXG4gICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMudmFyaWFibGUxXTtcbiAgICB0aGlzLnguZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUxXSkpLm5pY2UoKTtcbiAgICAvLyB0aGlzLnkuZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUyXSkpLm5pY2UoKTtcbiAgICB0aGlzLnVwZGF0ZU1lYW5WYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgY2hhbmdlVmFyaWFibGVZKGNvZGVfdmFyaWFibGUpIHtcbiAgICB0aGlzLnZhcmlhYmxlMiA9IGNvZGVfdmFyaWFibGU7XG4gICAgdGhpcy5yYW5rX3ZhcmlhYmxlMiA9IGBwcl8ke3RoaXMudmFyaWFibGUyfWA7XG4gICAgdGhpcy5wcmV0dHlfbmFtZTIgPSB2YXJpYWJsZXMuZmluZChmdCA9PiBmdC5yYXRpbyA9PT0gY29kZV92YXJpYWJsZSkubmFtZTtcbiAgICBzdmdfYmFyLnNlbGVjdCgnI3RpdGxlLWF4aXMteScpXG4gICAgICAudGV4dChjb2RlX3ZhcmlhYmxlKTtcbiAgICAvLyBUT0RPOiBBbHNvIGNoYW5nZSB0aGUgcG9zaXRpb24gb2YgdGhlIGJ1dHRvbiBhbG93aW5nIHRvIGludmVyc2UgdGhlIHNlcmllXG4gICAgdGhpcy51cGRhdGVJdGVtc0N0eE1lbnUoKTtcbiAgICB0aGlzLmRhdGEgPSBhcHAuY3VycmVudF9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMudmFyaWFibGUxXSAmJiAhIWZ0W3RoaXMudmFyaWFibGUyXSlcbiAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0geyBpZDogZC5pZCB9O1xuICAgICAgICByZXNbdGhpcy52YXJpYWJsZTFdID0gZFt0aGlzLnZhcmlhYmxlMV07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMl0gPSBkW3RoaXMudmFyaWFibGUyXTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgcmVzZXRDb2xvcnMoKTtcbiAgICB0aGlzLm5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLmRhdGEsIHRoaXMudmFyaWFibGUxLCB0aGlzLnJhbmtfdmFyaWFibGUxKTtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMiwgdGhpcy5yYW5rX3ZhcmlhYmxlMik7XG4gICAgdGhpcy5yZWZfdmFsdWUyID0gdGhpcy5kYXRhLmZpbmQoXG4gICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMudmFyaWFibGUyXTtcbiAgICAvLyB0aGlzLnguZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUxXSkpLm5pY2UoKTtcbiAgICB0aGlzLnkuZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUyXSkpLm5pY2UoKTtcbiAgICB0aGlzLnVwZGF0ZU1lYW5WYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlSXRlbXNDdHhNZW51KCkge1xuICAgIHRoaXMuaXRlbXNYID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLmZpbHRlcihlbGVtID0+IGVsZW0gIT09IHRoaXMudmFyaWFibGUyKVxuICAgICAgLm1hcChlbGVtID0+ICh7XG4gICAgICAgIG5hbWU6IGVsZW0sXG4gICAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jaGFuZ2VWYXJpYWJsZVgoZWxlbSksXG4gICAgICB9KSk7XG4gICAgdGhpcy5pdGVtc1kgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW8uZmlsdGVyKGVsZW0gPT4gZWxlbSAhPT0gdGhpcy52YXJpYWJsZTEpXG4gICAgICAubWFwKGVsZW0gPT4gKHtcbiAgICAgICAgbmFtZTogZWxlbSxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB0aGlzLmNoYW5nZVZhcmlhYmxlWShlbGVtKSxcbiAgICAgIH0pKTtcbiAgfVxuXG4gIGFkZFZhcmlhYmxlKGNvZGVfdmFyaWFibGUsIG5hbWVfdmFyaWFibGUpIHtcbiAgICB0aGlzLml0ZW1zWC5wdXNoKHtcbiAgICAgIG5hbWU6IGNvZGVfdmFyaWFibGUsXG4gICAgICBhY3Rpb246ICgpID0+IHRoaXMuY2hhbmdlVmFyaWFibGVYKGNvZGVfdmFyaWFibGUpLFxuICAgIH0pO1xuICAgIHRoaXMuaXRlbXNZLnB1c2goe1xuICAgICAgbmFtZTogY29kZV92YXJpYWJsZSxcbiAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jaGFuZ2VWYXJpYWJsZVkoY29kZV92YXJpYWJsZSksXG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSB2YXJpYWJsZSBmcm9tIHRoZSBYIGFuZCBZIGxpc3Qgb2YgaXRlbXM6XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuaXRlbXNYLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICBpZiAodGhpcy5pdGVtc1hbaV0ubmFtZSA9PT0gY29kZV92YXJpYWJsZSkge1xuICAgICAgICB0aGlzLml0ZW1zWC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gdGhpcy5pdGVtc1kubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICAgIGlmICh0aGlzLml0ZW1zWVtpXS5uYW1lID09PSBjb2RlX3ZhcmlhYmxlKSB7XG4gICAgICAgIHRoaXMuaXRlbXNZLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHZhcmlhYmxlIHRvIHJlbW92ZSB3YXMgY3VycmVudGx5IHVzZWQgZm9yIGRyYXdpbmcgdGhpcyBjaGFydCxcbiAgICAvLyBzZXQgYSBuZXcgdmFyaWFibGUgZm9yIHRoaXMgYXhpcyBhbmQgcmVkcmF3IHRoZSBjaGFydDpcbiAgICBpZiAoY29kZV92YXJpYWJsZSA9PT0gdGhpcy52YXJpYWJsZTEpIHtcbiAgICAgIGNvbnN0IG5ld192YXJfeCA9IHRoaXMuaXRlbXNYLmZpbHRlcihmdCA9PiBmdC5uYW1lICE9PSB0aGlzLnZhcmlhYmxlMilbMF0ubmFtZTtcbiAgICAgIHRoaXMuY2hhbmdlVmFyaWFibGVYKG5ld192YXJfeCk7XG4gICAgfSBlbHNlIGlmIChjb2RlX3ZhcmlhYmxlID09PSB0aGlzLnZhcmlhYmxlMikge1xuICAgICAgY29uc3QgbmV3X3Zhcl95ID0gdGhpcy5pdGVtc1kuZmlsdGVyKGZ0ID0+IGZ0Lm5hbWUgIT09IHRoaXMudmFyaWFibGUxKVswXS5uYW1lO1xuICAgICAgdGhpcy5jaGFuZ2VWYXJpYWJsZVkobmV3X3Zhcl95KTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5tYXBfZWxlbS51bmJpbmRCcnVzaCgpO1xuICAgIHRoaXMubWFwX2VsZW0gPSBudWxsO1xuICAgIHN2Z19iYXIuaHRtbCgnJyk7XG4gIH1cblxuICBiaW5kTWFwKG1hcF9lbGVtKSB7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG1hcF9lbGVtO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG59XG4iLCJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgY3JlYXRlTWVudSB9IGZyb20gJy4vbW9kdWxlcy9tZW51bGVmdCc7XG5pbXBvcnQgeyBtYWtlVG9wTWVudSwgbWFrZUhlYWRlckNoYXJ0LCBtYWtlSGVhZGVyTWFwU2VjdGlvbiB9IGZyb20gJy4vbW9kdWxlcy9tZW51dG9wJztcbmltcG9ydCB7IE1hcFNlbGVjdCwgbWFrZVNvdXJjZVNlY3Rpb24sIG1ha2VNYXBMZWdlbmQsIHN2Z19tYXAgfSBmcm9tICcuL21vZHVsZXMvbWFwJztcbmltcG9ydCB7IG1ha2VUYWJsZSB9IGZyb20gJy4vbW9kdWxlcy90YWJsZSc7XG5pbXBvcnQgeyBjb2xvcl9jb3VudHJpZXMsIGNvbG9yX2hpZ2hsaWdodCB9IGZyb20gJy4vbW9kdWxlcy9vcHRpb25zJztcbmltcG9ydCB7IEJhckNoYXJ0MSB9IGZyb20gJy4vbW9kdWxlcy9jaGFydHMvYmFyQ2hhcnRfMXYnO1xuaW1wb3J0IHsgQnViYmxlQ2hhcnQxIH0gZnJvbSAnLi9tb2R1bGVzL2NoYXJ0cy9idWJibGVDaGFydF8xdic7XG5pbXBvcnQgeyBTY2F0dGVyUGxvdDIgfSBmcm9tICcuL21vZHVsZXMvY2hhcnRzL3NjYXR0ZXJQbG90XzJ2JztcbmltcG9ydCB7IHVuYmluZFVJIH0gZnJvbSAnLi9tb2R1bGVzL2hlbHBlcnMnO1xuaW1wb3J0IHtcbiAgcHJlcGFyZV9kYXRhc2V0LFxuICBmaWx0ZXJMZXZlbFZhcixcbiAgYXBwbHlGaWx0ZXIsXG4gIGNoYW5nZVJlZ2lvbixcbiAgYWRkVmFyaWFibGUsXG4gIHJlbW92ZVZhcmlhYmxlLFxuICByZXNldFZhcmlhYmxlcyxcbiAgcHJlcGFyZVZhcmlhYmxlc0luZm9cbn0gZnJvbSAnLi9tb2R1bGVzL3ByZXBhcmVfZGF0YSc7XG5cbmRlYnVnKCdhcHA6bG9nJyk7XG5cbmV4cG9ydCBsZXQgdmFyaWFibGVzOy8qID0gW1xuICB7IHJhdGlvOiAnUENfQ0hPTV8xNTI0XzIwMTUnLCBudW06ICdDSE9NXzE1MjRfMjAxNScsIGRlbnVtOiAnQUNUXzE1MjRfMjAxNScsIG5hbWU6ICdUYXV4IGRlIGNob21hZ2UgZGVzIGpldW5lcyAoMjAxNSknLCBncm91cDogJ1BhdXZyZXTDqSAvIEV4Y2x1c2lvbiBzb2NpYWxlJyB9LFxuICB7IHJhdGlvOiAnUENfQ0hPTV8xNTc0XzIwMTUnLCBudW06ICdDSE9NXzE1NzRfMjAxNScsIGRlbnVtOiAnQUNUXzE1NzRfMjAxNScsIG5hbWU6ICdUYXV4IGRlIGNob21hZ2UgKDIwMTUpJywgZ3JvdXA6ICdQYXV2cmV0w6kgLyBFeGNsdXNpb24gc29jaWFsZScgfSxcbiAgeyByYXRpbzogJ1BDX0NIT01fTE9OR18yMDE2JywgbnVtOiAnQ0hPTV9MT05HXzIwMTYnLCBkZW51bTogJ0FDVF9MT05HXzIwMTYnLCBuYW1lOiAnVGF1eCBkZSBjaMO0bWFnZSBkZSBsb25ndWUgZHVyw6llICgyMDE2KScsIGdyb3VwOiAnUGF1dnJldMOpIC8gRXhjbHVzaW9uIHNvY2lhbGUnIH0sXG4gIHsgcmF0aW86ICdQQ19SRVZfMjAxNCcsIG51bTogJ1JFVl8yMDE0JywgZGVudW06ICdNRU5fMjAxNCcsIG5hbWU6ICdSZXZlbnUgZGVzIG3DqW5hZ2VzICgyMDE0KScsIGdyb3VwOiAnUGF1dnJldMOpIC8gRXhjbHVzaW9uIHNvY2lhbGUnIH0sXG4gIHsgcmF0aW86ICdQQ19CUkVWX0hBQl8yMDExJywgbnVtOiAnQlJFVl8yMDExJywgZGVudW06ICdQT1BfQlJFVl8yMDExJywgbmFtZTogJ1Byb2R1Y3Rpb25zIGlubm92YW50ZXMgKDIwMTEpJywgZ3JvdXA6ICdBY3Rpdml0w6kgLyBJbm5vdmF0aW9uJyB9LFxuICB7IHJhdGlvOiAnUENfUkRfRU1QXzIwMTMnLCBudW06ICdSRF9FTVBfMjAxMycsIGRlbnVtOiAnUE9QX1JEX0VNUF8yMDEzJywgbmFtZTogJ1BhcnQgZGUgbFxcJ2VtcGxvaSBlbiBSJkQgKDIwMTMpJywgZ3JvdXA6ICdBY3Rpdml0w6kgLyBJbm5vdmF0aW9uJyB9LFxuICB7IHJhdGlvOiAnUENfUElCX0hBQl8yMDE0JywgbnVtOiAnUENfUElCX0hBQl8yMDE0JywgZGVudW06ICdQT1BfUElCXzIwMTQnLCBuYW1lOiAnUElCIHBhciBoYWJpdGFudCAoZXVyb3MpKDIwMTQpJywgZ3JvdXA6ICdBY3Rpdml0w6kgLyBJbm5vdmF0aW9uJyB9LFxuICB7IHJhdGlvOiAnUENfQVJUSUZfQVJFQV8yMDE1JywgbnVtOiAnQVJUSUZfQVJFQV8yMDE1JywgZGVudW06ICdMQ19BUkVBXzIwMTUnLCBuYW1lOiAnUGFydCBkZXMgc3VyZmFjZXMgYXJ0aWZpY2lhbGlzw6llcyAoMjAxNSknLCBncm91cDogJ0Vudmlyb25uZW1lbnQgLyBUcmFuc2l0aW9uIMOpY29sb2dpcXVlJyB9LFxuXTsqL1xuXG5cbmNvbnN0IHN0dWR5X3pvbmVzID0gW1xuICB7IGlkOiAnbm9fZmlsdGVyJywgbmFtZTogJ1VFMjgnIH0sXG4gIHsgaWQ6ICdmaWx0ZXJfRlInLCBuYW1lOiAnRmlsdHJlIG5hdGlvbmFsIChGcmFuY2UpJyB9LFxuICB7IGlkOiAnZmlsdGVyX3BhcmFtMicsIG5hbWU6ICdFc3BhY2UgZGUgY29tcGFyYWlzb24gbsKwMicgfSxcbl07XG5cbmNvbnN0IHRlcnJpdG9yaWFsX21lc2ggPSBbXG4gIHsgaWQ6ICdOVVRTMScsIG5hbWU6ICdOVVRTMScgfSxcbiAgeyBpZDogJ05VVFMxMnN0YXQnLCBuYW1lOiAnTlVUUzEvMiAoc3RhdGlzdGlxdWUpJyB9LFxuXTtcblxuZXhwb3J0IGNvbnN0IGFwcCA9IHtcbiAgLy8gQSBtYXBwaW5nIGlkIC0+IGNvbG9yLCBjb250YWluaW5nIHRoZSBjb2xvciB0byB1c2UgZm9yIGVhY2hcbiAgLy8gZmVhdHVyZSBub3QgdXNpbmcgdGhlIGRlZmF1bHQgY29sb3Igb3IgdGhlIGRpc2FibGVkIGNvbG9yXG4gIGNvbG9yczoge30sXG4gIC8vIFRoZSBmaWx0ZXJlZCBkYXRhc2V0IChhY2Njb3JkaW5nIHRvOiB0aGUgY3VycmVudCB0ZXJyaXRvcmlhbCBsZXZlbCxcbiAgLy8gdGhlIGZpbHRlciBrZXkgKGlmIGFueSkgYW5kIHRoZSByYXRpbyhzKSBzZWxlY3RlZCBvbiB0aGUgbGVmdCBtZW51OlxuICBjdXJyZW50X2RhdGE6IFtdLFxuICAvLyBUaGUgZnVsbCBkYXRhc2V0IHByb3ZpZGVkIChjb250YWluaW5nIGFsbCB0aGUgZmVhdHVyZXMgYXQgYW55IGxldmVsIGluIG9uZSB0YWJsZSlcbiAgLy8gUm93IHdpdGhvdXQgZGF0YSBhcmUgZXhwZWN0ZWQgdG8gYmUgZW1wdHkgb3IgdG8gY29udGFpbiB0aGUgXCJOQVwiIHN0cmluZy5cbiAgZnVsbF9kYXRhc2V0OiBbXSxcbiAgLy8gVGhlIGlkcyBvZiB0aGUgY3VycmVudCBmZWF0dXJlIGluIHVzZSAoYWNjY29yZGluZyB0bzogdGhlIGN1cnJlbnQgdGVycml0b3JpYWwgbGV2ZWwsXG4gIC8vIHRoZSBmaWx0ZXIga2V5IChpZiBhbnkpIGFuZCB0aGUgcmF0aW8ocykgdXNlZCBpbiB0aGUgY3VycmVudCBjaGFydDsgZmlsdGVyZWRcbiAgLy8gdG8gbm90IGNvbnRhaW4gZmVhdHVyZSB3aXRoIGVtcHR5IHJhdGlvIHZhbHVlcyB3aXRoaW4gdGhlIHJhdGlvcyBpbiB1c2UpLlxuICBjdXJyZW50X2lkczogW10sXG59O1xuXG5mdW5jdGlvbiBzZXREZWZhdWx0Q29uZmlnKGNvZGUgPSAnRlJFJywgdmFyaWFibGUgPSAnUlRfQ0hPTV8xNTc0JykgeyAvLyB9LCBsZXZlbCA9ICdOVVRTMScpIHtcbiAgYXBwLmN1cnJlbnRfY29uZmlnID0ge1xuICAgIC8vIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBvZiB0aGUgZGF0YXNldCBjb250YWluaW5nIHRoZSBJRCBvZiBlYWNoIGZlYXR1cmU6XG4gICAgaWRfZmllbGQ6ICdnZW8nLFxuICAgIC8vIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBvZiB0aGUgZGF0YXNldCBjb250YWluaW5nIHRoZSBuYW1lIG9mIGVhY2ggZmVhdHVyZTpcbiAgICBuYW1lX2ZpZWxkOiAnTm9tJyxcbiAgICAvLyBUaGUgbmFtZSBvZiB0aGUgZmllbGQgb2YgdGhlIGRhdGFzZXQgY29udGFpbmluZyB0aGUgcG9wdWxhdGlvbiBvZiBlYWNoIGZlYXR1cmU6XG4gICAgcG9wX2ZpZWxkOiAnUE9QX0FHRV9UXzIwMTYnLFxuICAgIC8vIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBvZiB0aGUgZ2VvanNvbiBsYXllciBjb250YWluaW5nIHRoZSBJRCBvZiBlYWNoIGZlYXR1cmVcbiAgICAvLyAodGhlc2UgdmFsdWVzIHNob3VsZCBtYXRjaCB3aXRoIHRoZSB2YWx1ZXMgb2YgdGhlIFwiaWRfZmllbGRcIiBpbiB0aGVcbiAgICAvLyB0YWJ1bGFyIGRhdGFzZXQpXG4gICAgaWRfZmllbGRfZ2VvbTogJ05VVFMxXzIwMTYnLFxuICAgIG51bTogWydDSE9NXzE1NzRfMjAxNiddLFxuICAgIGRlbnVtOiBbJ0FDVF8xNTc0XzIwMTYnXSxcbiAgICByYXRpbzogW3ZhcmlhYmxlXSxcbiAgICByYXRpb19wcmV0dHlfbmFtZTogWydUYXV4IGRlIGNow7RtYWdlICgxNS03NCBhbnMpICgyMDE2KSddLFxuICAgIC8vIFRoZSBsZXZlbCBjdXJyZW50bHkgaW4gdXNlOlxuICAgIGN1cnJlbnRfbGV2ZWw6IDEsXG4gICAgLy8gVGhlIElEIG9mIHRoZSByZWdpb24gY3VycmVudGx5IGluIHVzZTpcbiAgICBteV9yZWdpb246IGNvZGUsXG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIHJlZ2lvbiBjdXJyZW50bHkgaW4gdXNlOlxuICAgIG15X3JlZ2lvbl9wcmV0dHlfbmFtZTogYXBwLmZlYXR1cmVfbmFtZXNbY29kZV0sXG4gICAgLy8gSG93IG1hbnkgcmF0aW8gb24gdGhlIGN1cnJlbnQgY2hhcnQ6XG4gICAgbmJfdmFyOiAxLFxuICB9O1xuICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xufVxuXG5mdW5jdGlvbiBzZXREZWZhdWx0Q29uZmlnTWVudShjb2RlID0gJ0ZSRScsIHZhcmlhYmxlID0gJ1JUX0NIT01fMTU3NCcsIGxldmVsID0gJ05VVFMxJykge1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAudGFyZ2V0X3JlZ2lvbi5zcXVhcmVbdmFsdWU9XCIke2NvZGV9XCJdYCkuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAudGFyZ2V0X3ZhcmlhYmxlLnNtYWxsX3NxdWFyZVt2YWx1ZT1cIiR7dmFyaWFibGV9XCJdYCkuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyX3Yuc3F1YXJlW2ZpbHRlci12YWx1ZT1cIm5vX2ZpbHRlclwiXScpLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLnRlcnJpdF9sZXZlbC5zcXVhcmVbdmFsdWU9XCIke2xldmVsfVwiXWApLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gcmVzZXRDb2xvcnMoKSB7XG4gIGFwcC5jb2xvcnMgPSB7fTtcbiAgLy8gZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gY3VycmVudF9pZHMubGVuZ3RoOyBpIDwgbGVuX2k7IGkrKykge1xuICAvLyAgIGFwcC5jb2xvcnNbY3VycmVudF9pZHNbaV1dID0gY29sb3JfY291bnRyaWVzO1xuICAvLyB9XG4gIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG59XG5cbi8qKlxuKiBDcmVhdGUgaGFuZGxlcnMgZm9yIHVzZXIgZXZlbnQgb24gdGhlIGxlZnQgbWVudSBhbmQgb24gdGhlIG1hcCBmb3IgY2hhcnRzIG9ubHlcbiogYWxsb3dpbmcgdG8gdXNlIDEgdmFyaWFibGUuXG4qXG4qIEBwYXJhbSB7T2JqZWN0fSBjaGFydCAtIFRoZSBjaGFydCBvYmplY3QuXG4qIEBwYXJhbSB7T2JqZWN0fSBtYXBfZWxlbSAtIFRoZSBtYXAgb2JqZWN0LlxuKiBAcmV0dXJuIHt2b2lkfVxuKlxuKi9cbmZ1bmN0aW9uIGJpbmRVSV9jaGFydChjaGFydCwgbWFwX2VsZW0pIHtcbiAgLy8gVXNlciBjaGFuZ2UgdGhlIHN0dWR5IHpvbmU6XG4gIGQzLnNlbGVjdEFsbCgnc3Bhbi5maWx0ZXJfdicpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAgICAgICBkMy5zZWxlY3RBbGwoJ3NwYW4uZmlsdGVyX3YnKS5hdHRyKCdjbGFzcycsICdmaWx0ZXJfdiBzcXVhcmUnKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgICAgIGNvbnN0IGZpbHRlcl90eXBlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZpbHRlci12YWx1ZScpO1xuICAgICAgICBhcHBseUZpbHRlcihhcHAsIGZpbHRlcl90eXBlKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0LmNoYW5nZVN0dWR5Wm9uZSgpO1xuICAgICAgICBjaGFydC51cGRhdGVDb21wbGV0dWRlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgLy8gVXNlciBjaGFuZ2UgdGhlIHRhcmdldGVkIHJlZ2lvbjpcbiAgZDMuc2VsZWN0QWxsKCdzcGFuLnRhcmdldF9yZWdpb24nKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpIHtcbiAgICAgICAgZDMuc2VsZWN0QWxsKCdzcGFuLnRhcmdldF9yZWdpb24nKS5hdHRyKCdjbGFzcycsICd0YXJnZXRfcmVnaW9uIHNxdWFyZScpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgICAgY29uc3QgaWRfcmVnaW9uID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIGNoYW5nZVJlZ2lvbihhcHAsIGlkX3JlZ2lvbik7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgYXZhaWxhYmxlcyByYXRpbyBvbiB0aGUgbGVmdCBtZW51XG4gICAgICAgIC8vICh0aGlzIG1heSBjaGFuZ2UgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgcmF0aW8ocykgYXMgc29tZSB2YXJpYWJsZXMgYXJlXG4gICAgICAgIC8vIG5vdCBhdmFpbGFibGUgZm9yIHNvbWUgZmVhdHVyZXMpIGFuZCBmZXRjaCB0aGUgbnVtYmVyIG9mIHNlbGVjdGVkXG4gICAgICAgIC8vIHZhcmlhYmxlcyBhZnRlciB0aGF0OlxuICAgICAgICBjb25zdCBuZXdfbmJfdmFyID0gdXBkYXRlQXZhaWxhYmxlc1JhdGlvcyhpZF9yZWdpb24pO1xuICAgICAgICBpZiAobmV3X25iX3ZhciA+PSBhcHAuY3VycmVudF9jb25maWcubmJfdmFyKSB7XG4gICAgICAgICAgY2hhcnQudXBkYXRlQ2hhbmdlUmVnaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgZmV3ZXIgc2VsZWN0ZWQgdmFyaWFibGVzIHRoYW4gcmVxdWVzdGVkIGJ5IHRoZSBjdXJyZW50IGNoYXJ0LFxuICAgICAgICAgIC8vIHJlZHJhdyB0aGUgZmlyc3QgKGRlZmF1bHQpIGtpbmQgb2YgY2hhcnQ6XG4gICAgICAgICAgZDMuc2VsZWN0KCdzcGFuLmNoYXJ0X3QxW3ZhbHVlPVwiQmFyQ2hhcnQxXCJdJykuZGlzcGF0Y2goJ2NsaWNrJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAvLyBVc2VyIGNsaWNrIG9uIHRoZSBuYW1lIG9mIGEgZ3JvdXAgb2YgdmFyaWFibGVzXG4gIC8vIHRvIGV4cGFuZCBvciBjb2xsYXBzZSBpdHMgY29udGVudDpcbiAgZDMuc2VsZWN0QWxsKCcubmFtZV9ncm91cF92YXInKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBncm91cF92YXIgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgICAgaWYgKGdyb3VwX3Zhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgZ3JvdXBfdmFyLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfdmFyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG5cbiAgICB9KTtcblxuICAvLyBVc2VyIGNsaWNrIHRvIGFkZC9yZW1vdmUgYSB2YXJpYWJsZSBmcm9tIHRoZSBjb21wYXJpc29uOlxuICBkMy5zZWxlY3RBbGwoJ3NwYW4udGFyZ2V0X3ZhcmlhYmxlJylcbiAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSByZXR1cm47XG4gICAgICBsZXQgbmJfdmFyO1xuICAgICAgaWYgKCF0aGlzLmNsYXNzTGlzdC5jb250YWlucygnY2hlY2tlZCcpKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgICAgICBjb25zdCBjb2RlX3ZhcmlhYmxlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIGNvbnN0IG5hbWVfdmFyaWFibGUgPSB2YXJpYWJsZXMuZmluZChkID0+IGQucmF0aW8gPT09IGNvZGVfdmFyaWFibGUpLm5hbWU7XG4gICAgICAgIGFkZFZhcmlhYmxlKGFwcCwgY29kZV92YXJpYWJsZSk7XG4gICAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgICBjaGFydC5hZGRWYXJpYWJsZShjb2RlX3ZhcmlhYmxlLCBuYW1lX3ZhcmlhYmxlKTtcbiAgICAgICAgbmJfdmFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3Bhbi50YXJnZXRfdmFyaWFibGUnKSkuZmlsdGVyKFxuICAgICAgICAgICAgZWxlbSA9PiAhIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpLmxlbmd0aDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbGV0IHRoZSB1c2VyIHJlbW92ZSB0aGUgdmFyaWFibGUgaWZcbiAgICAgICAgLy8gaXQncyB0aGUgb25seSBvbmUgc2VsZWN0ZWQgb3IgaWYgdGhlIGN1cnJlbnRseSBkaXNwbGF5ZWRcbiAgICAgICAgLy8gY2hhcnQgbmVlZCBhIG1pbmltdW0gbnVtYmVyIG9mIHZhcmlhYmxlczpcbiAgICAgICAgbmJfdmFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnc3Bhbi50YXJnZXRfdmFyaWFibGUnKSkuZmlsdGVyKFxuICAgICAgICAgICAgZWxlbSA9PiAhIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpLmxlbmd0aDtcbiAgICAgICAgaWYgKG5iX3ZhciA8IGFwcC5jdXJyZW50X2NvbmZpZy5uYl92YXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29kZV92YXJpYWJsZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgICAgcmVtb3ZlVmFyaWFibGUoYXBwLCBjb2RlX3ZhcmlhYmxlKTtcbiAgICAgICAgY2hhcnQucmVtb3ZlVmFyaWFibGUoY29kZV92YXJpYWJsZSk7XG4gICAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgICBuYl92YXIgLT0gMTtcbiAgICAgIH1cbiAgICAgIGlmIChuYl92YXIgPT09IDEpIHsgLy8gQWxsb3cgYWxsIGtpbmQgb2Ygdml6dSB3aXRoIDEgdmFyaWFibGU6XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNoYXJ0X3QxJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MScpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jaGFydF90MicpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDIgZGlzYWJsZWQnKTtcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcuY2hhcnRfdDMnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0eXBlX2NoYXJ0IGNoYXJ0X3QzIGRpc2FibGVkJyk7XG4gICAgICB9IGVsc2UgaWYgKG5iX3ZhciA9PT0gMikgeyAvLyBBbGxvdyBhbGwga2luZCBvZiB2aXp1IHdpdGggMiB2YXJpYWJsZXM6XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNoYXJ0X3QyJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MicpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jaGFydF90MycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDMgZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAobmJfdmFyID4gMikgeyAvLyBBbGxvdyBhbGwga2luZCBvZiB2aXp1IHdpdGggMyB2YXJpYWJsZXM6XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNoYXJ0X3QyJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MicpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jaGFydF90MycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDMnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAvLyBEaXNwYXRjaCBhIGNsaWNrIGV2ZW50IG9uIHRoZSBhc3NvY2lhdGVkIGNoZWNrYm94IHdoZW4gdGhlIHRleHQgaXMgY2xpY2tlZDpcbiAgZDMuc2VsZWN0QWxsKCdzcGFuLmxhYmVsX2NoaycpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucHJldmlvdXNTaWJsaW5nLmNsaWNrKCk7XG4gICAgfSk7XG5cbiAgY29uc3QgaGVhZGVyX21hcF9zZWN0aW9uID0gZDMuc2VsZWN0KCcjbWFwX3NlY3Rpb24gPiAjaGVhZGVyX21hcCcpO1xuXG4gIGhlYWRlcl9tYXBfc2VjdGlvbi5zZWxlY3QoJyNpbWdfcmVjdF9zZWxlYycpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfbWFwX3pvb20nKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfc2VsZWN0JykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHN2Z19tYXAub24oJy56b29tJywgbnVsbCk7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJykuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcbiAgICAgICAgbWFwX2VsZW0udGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpLm9uKCdjbGljaycsIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIGhlYWRlcl9tYXBfc2VjdGlvbi5zZWxlY3QoJyNpbWdfbWFwX3pvb20nKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX3JlY3Rfc2VsZWMnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfc2VsZWN0JykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHN2Z19tYXAuY2FsbChtYXBfZWxlbS56b29tX21hcCk7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJykuY2FsbChtYXBfZWxlbS5icnVzaF9tYXAubW92ZSwgbnVsbCk7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICBtYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJykub24oJ2NsaWNrJywgbnVsbCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgaGVhZGVyX21hcF9zZWN0aW9uLnNlbGVjdCgnI2ltZ19tYXBfc2VsZWN0JylcbiAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19yZWN0X3NlbGVjJykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfbWFwX3pvb20nKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgc3ZnX21hcC5vbignLnpvb20nLCBudWxsKTtcbiAgICAgICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKS5jYWxsKG1hcF9lbGVtLmJydXNoX21hcC5tb3ZlLCBudWxsKTtcbiAgICAgICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIG1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoZCkgeyBjaGFydC5oYW5kbGVDbGlja01hcChkLCB0aGlzKTsgfSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgY29uc3QgaGVhZGVyX3RhYmxlX3NlY3Rpb24gPSBkMy5zZWxlY3QoJyNtYXBfc2VjdGlvbicpXG4gICAgICAuaW5zZXJ0KCdwJywgJ3N2ZycpXG4gICAgICAuYXR0cignaWQnLCAnaGVhZGVyX3RhYmxlJylcbiAgICAgIC5zdHlsZXMoeyBkaXNwbGF5OiAnbm9uZScsIG1hcmdpbjogJ2F1dG8nLCAndGV4dC1hbGlnbic6ICdyaWdodCcgfSk7XG5cbiAgaGVhZGVyX3RhYmxlX3NlY3Rpb24uYXBwZW5kKCdzcGFuJylcbiAgICAuYXR0cignY2xhc3MnLCAnYnV0dG9uX2JsdWUnKVxuICAgIC5odG1sKCdDU1YnKVxuICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICBjb25zdCBjb250ZW50ID0gW1xuICAgICAgICAnaWQsTnVtw6lyYXRldXIsRMOpbm9taW5hdGV1cixSYXRpbyxSYW5nXFxyXFxuJyxcbiAgICAgICAgYXBwLmN1cnJlbnRfZGF0YS5tYXAoZCA9PiBbZC5pZCwgZC5udW0sIGQuZGVudW0sIGQucmF0aW8sIGQucmFuZ10uam9pbignLCcpKS5qb2luKCdcXHJcXG4nKSxcbiAgICAgIF0uam9pbignJyk7XG4gICAgICBjb25zdCBlbGVtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpO1xuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBgZGF0YTp0ZXh0L3BsYWluO2NoYXJzZXQ9dXRmLTgsJHtlbmNvZGVVUklDb21wb25lbnQoY29udGVudCl9YCk7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnZG93bmxvYWQnLCAndGFibGUuY3N2Jyk7XG4gICAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZW0pO1xuICAgICAgZWxlbS5jbGljaygpO1xuICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtKTtcbiAgICB9KTtcbiAgYmluZFRvcEJ1dHRvbnMoY2hhcnQsIG1hcF9lbGVtKTtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIGhhbmRsZSBjbGljayBvbiB0aGUgdG9wIG1lbnUsIGluIG9yZGVyIHRvIGNob29zZVxuKiB0aGUga2luZCBvZiBhdmFpbGFibGVzIHJlcHJlc2VudGF0aW9uXG4qXG4qXG4qXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGJpbmRUb3BCdXR0b25zKGNoYXJ0LCBtYXBfZWxlbSkge1xuICBkMy5zZWxlY3RBbGwoJy50eXBlX2NoYXJ0JylcbiAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdkaXNhYmxlZCcpKSByZXR1cm47XG4gICAgICBjaGFydC5yZW1vdmUoKTtcbiAgICAgIGNoYXJ0ID0gbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgdW5iaW5kVUkoKTtcbiAgICAgIG1hcF9lbGVtLnJlc2V0Wm9vbSgpO1xuICAgICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ0JhckNoYXJ0MScpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0JhckNoYXJ0MScpO1xuICAgICAgICBtYWtlVGFibGUoYXBwLmN1cnJlbnRfZGF0YSwgYXBwLmN1cnJlbnRfY29uZmlnKTtcbiAgICAgICAgY2hhcnQgPSBuZXcgQmFyQ2hhcnQxKGFwcC5jdXJyZW50X2RhdGEpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGJpbmRVSV9jaGFydChjaGFydCwgbWFwX2VsZW0pO1xuICAgICAgICBtYXBfZWxlbS5iaW5kQnJ1c2goY2hhcnQpO1xuICAgICAgICBjaGFydC5iaW5kTWFwKG1hcF9lbGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdCdWJibGVDaGFydDEnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdCdWJibGVDaGFydDEnKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0ID0gbmV3IEJ1YmJsZUNoYXJ0MShhcHAuY3VycmVudF9kYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBiaW5kVUlfY2hhcnQoY2hhcnQsIG1hcF9lbGVtKTtcbiAgICAgICAgbWFwX2VsZW0uYmluZEJydXNoKGNoYXJ0KTtcbiAgICAgICAgY2hhcnQuYmluZE1hcChtYXBfZWxlbSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnU2NhdHRlclBsb3QyJykge1xuICAgICAgICBjb25zb2xlLmxvZygnU2NhdHRlclBsb3QyJyk7XG4gICAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgICBjaGFydCA9IG5ldyBTY2F0dGVyUGxvdDIoYXBwLmN1cnJlbnRfZGF0YSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgYmluZFVJX2NoYXJ0KGNoYXJ0LCBtYXBfZWxlbSk7XG4gICAgICAgIG1hcF9lbGVtLmJpbmRCcnVzaChjaGFydCk7XG4gICAgICAgIGNoYXJ0LmJpbmRNYXAobWFwX2VsZW0pO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ1JhZGFyQ2hhcnQzJykge1xuICAgICAgICBjb25zb2xlLmxvZygnUmFkYXJDaGFydDMnKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0ID0gbmV3IFNjYXR0ZXJQbG90MihhcHAuY3VycmVudF9kYXRhKTtcbiAgICAgICAgYmluZFVJX2NoYXJ0KGNoYXJ0LCBtYXBfZWxlbSk7XG4gICAgICAgIG1hcF9lbGVtLmJpbmRCcnVzaChjaGFydCk7XG4gICAgICAgIGNoYXJ0LmJpbmRNYXAobWFwX2VsZW0pO1xuICAgICAgfVxuICAgIH0pO1xufVxuXG5cbmZ1bmN0aW9uIGxvYWREYXRhKCkge1xuICBkMy5xdWV1ZSg0KVxuICAgIC5kZWZlcihkMy5jc3YsICdkYXRhL1JFR0lPVklaX0RBVEEuY3N2JylcbiAgICAuZGVmZXIoZDMuanNvbiwgJ2RhdGEvY2dldC1udXRzMS0zMDM1Lmdlb2pzb24nKVxuICAgIC5kZWZlcihkMy5qc29uLCAnZGF0YS9jb3VudHJpZXMzMDM1Lmdlb2pzb24nKVxuICAgIC5kZWZlcihkMy5qc29uLCAnZGF0YS9yZW1vdGUzMDM1Lmdlb2pzb24nKVxuICAgIC5kZWZlcihkMy5qc29uLCAnZGF0YS90ZW1wbGF0ZTMwMzUuZ2VvanNvbicpXG4gICAgLmRlZmVyKGQzLmpzb24sICdkYXRhL3NlYV9ib3hlcy5nZW9qc29uJylcbiAgICAuZGVmZXIoZDMuY3N2LCAnZGF0YS9pbmRpY2F0ZXVyc19tZXRhLmNzdicpXG4gICAgLmF3YWl0QWxsKChlcnJvciwgcmVzdWx0cykgPT4ge1xuICAgICAgaWYgKGVycm9yKSB0aHJvdyBlcnJvcjtcbiAgICAgIGNvbnN0IFtcbiAgICAgICAgZnVsbF9kYXRhc2V0LCBudXRzMSwgY291bnRyaWVzLCByZW1vdGUsIHRlbXBsYXRlLCBzZWFib3hlcywgbWV0YWRhdGFfaW5kaWNhdGV1cnMsXG4gICAgICBdID0gcmVzdWx0cztcbiAgICAgIHZhcmlhYmxlcyA9IHByZXBhcmVWYXJpYWJsZXNJbmZvKG1ldGFkYXRhX2luZGljYXRldXJzKTtcbiAgICAgIGNvbnNvbGUubG9nKHZhcmlhYmxlcyk7XG4gICAgICBwcmVwYXJlX2RhdGFzZXQoZnVsbF9kYXRhc2V0LCBhcHApO1xuICAgICAgc2V0RGVmYXVsdENvbmZpZygnRlJCJywgJ1JUX0NIT01fMTU3NCcsICdOVVRTMScpO1xuICAgICAgY29uc3QgZmVhdHVyZXNfbWVudSA9IGZ1bGxfZGF0YXNldC5maWx0ZXIoZnQgPT4gZnQuZ2VvLmluZGV4T2YoJ0ZSJykgPiAtMVxuICAgICAgICAmJiArZnQubGV2ZWwgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5jdXJyZW50X2xldmVsKTtcbiAgICAgIGNyZWF0ZU1lbnUoZmVhdHVyZXNfbWVudSwgdmFyaWFibGVzLCBzdHVkeV96b25lcywgdGVycml0b3JpYWxfbWVzaCk7XG4gICAgICBtYWtlVG9wTWVudSgpO1xuICAgICAgbWFrZUhlYWRlckNoYXJ0KCk7XG4gICAgICBzZXREZWZhdWx0Q29uZmlnTWVudSgnRlJCJywgJ1JUX0NIT01fMTU3NCcsICdOVVRTMScpO1xuICAgICAgZmlsdGVyTGV2ZWxWYXIoYXBwKTtcbiAgICAgIGNvbnNvbGUubG9nKGFwcCk7XG4gICAgICBjb25zdCBtYXBfZWxlbSA9IG5ldyBNYXBTZWxlY3QobnV0czEsIGNvdW50cmllcywgcmVtb3RlLCB0ZW1wbGF0ZSwgc2VhYm94ZXMpO1xuICAgICAgY29uc3QgY2hhcnQgPSBuZXcgQmFyQ2hhcnQxKGFwcC5jdXJyZW50X2RhdGEpO1xuICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICBtYWtlSGVhZGVyTWFwU2VjdGlvbigpO1xuICAgICAgbWFrZVNvdXJjZVNlY3Rpb24oKTtcbiAgICAgIG1ha2VNYXBMZWdlbmQoKTtcbiAgICAgIGJpbmRVSV9jaGFydChjaGFydCwgbWFwX2VsZW0pO1xuICAgICAgbWFwX2VsZW0uYmluZEJydXNoKGNoYXJ0KTtcbiAgICAgIGNoYXJ0LmJpbmRNYXAobWFwX2VsZW0pO1xuICAgIH0pO1xufVxuXG4vKipcbiogRnVuY3Rpb24gdG8gc2VsZWN0IHRoZSBmaXJzdCB2YXJpYWJsZSBvbiB0aGUgbGVmdCBtZW51XG4qICh0cmlnZ2VyZWQgYWZ0ZXIgY2hhbmdpbmcgcmVnaW9uLCBpZiBubyBtb3JlIHZhcmlhYmxlIHdhcyBzZWxlY3RlZClcbipcbiogQHJldHVybiB7dm9pZH1cbiovXG5mdW5jdGlvbiBzZWxlY3RGaXJzdEF2YWlsYWJsZVZhcigpIHtcbiAgY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZW51Jyk7XG4gIGNvbnN0IHYgPSBtZW51LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXJnZXRfdmFyaWFibGUnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCF2W2ldLmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkge1xuICAgICAgdltpXS5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgICByZXR1cm4gdltpXS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuKiBGdW5jdGlvbiB0byB1cGRhdGUgdGhlIGF2YWlsYWJsZXMgcmF0aW9zIGluIHRoZSBsZWZ0IG1lbnUgKGFmdGVyIGNoYW5naW5nIHJlZ2lvbilcbiogSWYgYSBzZWxlY3RlZCB2YXJpYWJsZSBpcyBub3QgYXZhaWxhYmxlIGFueW1vcmUgaXQgd2lsbCBiZSBkZXNlbGVjdGVkLlxuKiBJZiB0aGVyZSBzZWxlY3RlZCB2YXJpYWJsZSAoYWxsIHRoZSBwcmV2aW91c2x5IHNlbGVjdGVkIHZhcmlhYmxlcyBhcmUgdW5hdmFpbGFibGUgZm9yIHRoaXMgcmVnaW9uKVxuKiB0aGUgZmlyc3QgdmFyaWFibGUgb24gdGhlIG1lbnUgd2lsbCBiZSBzZWxlY3RlZC5cbiogSWYgdGhlIG5ldyBudW1iZXIgb2Ygc2VsZWN0ZWQgZmVhdHVyZSBpcyBpbmZlcmlvciB0byB0aGUgbnVtYmVyIG9mIHZhcmlhYmxlcyBvbiB0aGUgY3VycmVudFxuKiBjaGFydCwgYSBuZXcgY2hhcnQgKHN1aXRhYmxlIGZvciBvbmx5IDEgdmFyaWFibGUpIHdpbGwgYmUgc2VsZWN0ZWQuXG4qXG4qXG4qIEBwYXJhbSB7U3RyaW5nfSBteV9yZWdpb24gLSBUaGUgSUQgb2YgdGhlIG5ld2x5IHNlbGVjdGVkIHJlZ2lvbi5cbiogQHJldHVybiB7TnVtYmVyfSAtIFRoZSBuZXcgbnVtYmVyIG9mIHNlbGVjdGVkIHJhdGlvcy5cbipcbiovXG5mdW5jdGlvbiB1cGRhdGVBdmFpbGFibGVzUmF0aW9zKG15X3JlZ2lvbikge1xuICBjb25zdCBkYXRhX215X2ZlYXR1cmUgPSBhcHAuZnVsbF9kYXRhc2V0LmZpbHRlcihcbiAgICBmdCA9PiBmdFthcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRdID09PSBteV9yZWdpb24pWzBdO1xuICBjb25zdCBtZW51ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21lbnUnKTtcbiAgY29uc3QgbGluZXMgPSBtZW51LnF1ZXJ5U2VsZWN0b3JBbGwoJy50YXJnZXRfdmFyaWFibGUnKTtcbiAgZm9yIChsZXQgaSA9IDAsIG5iX2xpbmVzID0gbGluZXMubGVuZ3RoOyBpIDwgbmJfbGluZXM7IGkrKykge1xuICAgIGNvbnN0IGNvZGVfdmFyaWFibGUgPSBsaW5lc1tpXS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgaWYgKGRhdGFfbXlfZmVhdHVyZVtjb2RlX3ZhcmlhYmxlXSAhPT0gdW5kZWZpbmVkXG4gICAgICAgICYmIGRhdGFfbXlfZmVhdHVyZVtjb2RlX3ZhcmlhYmxlXSAhPT0gJ05BJykge1xuICAgICAgbGluZXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGxpbmVzW2ldLm5leHRTaWJsaW5nLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxpbmVzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgIGxpbmVzW2ldLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICBsaW5lc1tpXS5uZXh0U2libGluZy5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgfVxuICBjb25zdCBuZXdfdmFyID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZ2V0X3ZhcmlhYmxlLmNoZWNrZWQnKTtcbiAgaWYgKG5ld192YXIubGVuZ3RoICE9PSBhcHAuY3VycmVudF9jb25maWcucmF0aW8ubGVuZ3RoKSB7XG4gICAgbGV0IG5ld192YXJfbmFtZXM7XG4gICAgaWYgKG5ld192YXIubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zdCBuYW1lID0gc2VsZWN0Rmlyc3RBdmFpbGFibGVWYXIoKTtcbiAgICAgIG5ld192YXJfbmFtZXMgPSBbbmFtZV07XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld192YXJfbmFtZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChcbiAgICAgICAgbmV3X3ZhcikubWFwKGVsZW0gPT4gZWxlbS5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJykpO1xuICAgIH1cbiAgICByZXNldFZhcmlhYmxlcyhhcHAsIG5ld192YXJfbmFtZXMpO1xuICB9XG4gIHJldHVybiBuZXdfdmFyLmxlbmd0aDtcbn1cblxubG9hZERhdGEoKTtcbiJdLCJuYW1lcyI6WyJyZXF1aXJlJCQwIiwibXMiLCJjb2xvcl9jb3VudHJpZXMiLCJjb2xvcl9kaXNhYmxlZCIsImNvbG9yX3N1cCIsImNvbG9yX2luZiIsImNvbG9yX2hpZ2hsaWdodCIsIm1hdGhfYWJzIiwiTWF0aCIsImFicyIsIm1hdGhfcm91bmQiLCJyb3VuZCIsInByZXBhcmVUb29sdGlwIiwicGFyZW50X3N2Z19lbGVtIiwidG9vbHRpcCIsImFwcGVuZCIsImF0dHIiLCJzdHlsZSIsImF0dHJzIiwid2lkdGgiLCJoZWlnaHQiLCJmaWxsIiwiY2xhc3MiLCJ4IiwiZHkiLCJ1bmJpbmRVSSIsInNlbGVjdEFsbCIsIm9uIiwic2VsZWN0IiwicmVtb3ZlIiwib25rZXl1cCIsIm9ua2V5ZG93biIsImNvbXAiLCJ0ZXN0X3ZhbHVlIiwicmVmX3ZhbHVlIiwic2VyaWVfaW52ZXJzZWQiLCJjb21wMiIsInZhbDEiLCJ2YWwyIiwicmVmX3ZhbDEiLCJyZWZfdmFsMiIsInhJbnZlcnNlZCIsInlJbnZlcnNlZCIsIlJlY3QiLCJ0b3BsZWZ0IiwiYm90dG9tcmlnaHQiLCJ4bWluIiwieG1heCIsInltaW4iLCJ5bWF4IiwicHQiLCJQcm9wU2l6ZXIiLCJmaXhlZF92YWx1ZSIsImZpeGVkX3NpemUiLCJzcXJ0IiwiUEkiLCJzbWF4Iiwic2NhbGUiLCJ2YWwiLCJnZXRfdmFsdWUiLCJwb3ciLCJzaXplIiwicmVtb3ZlRHVwbGljYXRlcyIsImFyciIsInRtcCIsImkiLCJsZW5fYXJyIiwibGVuZ3RoIiwiaW5kZXhPZiIsInB1c2giLCJnZXRTdmdQYXRoVHlwZSIsInBhdGgiLCJzdmdQYXRoVG9Db29yZHMiLCJ0eXBlX3BhdGgiLCJzbGljZSIsInNwbGl0IiwibWFwIiwiYSIsImNvbXB1dGVQZXJjZW50aWxlUmFuayIsIm9iaiIsImZpZWxkX25hbWUiLCJyZXN1bHRfZmllbGRfbmFtZSIsInZhbHVlcyIsImQiLCJsZW5fdmFsdWVzIiwiZ2V0UFIiLCJ2IiwiY291bnQiLCJpeCIsIl9nZXRQUiIsInNlcmllIiwiY3JlYXRlTWVudSIsIm5hbWVzIiwidmFyaWFibGVzIiwic3R1ZHlfem9uZXMiLCJ0ZXJyaXRvcmlhbF9tZXNoIiwidGl0bGVfc2VjdGlvbjEiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbGFzc05hbWUiLCJpbm5lckhUTUwiLCJzZWN0aW9uMSIsIm92ZXJmbG93IiwibGVuX2kiLCJpZCIsImdlbyIsIm5hbWUiLCJOb20iLCJlbnRyeSIsImFwcGVuZENoaWxkIiwidGl0bGVfc2VjdGlvbjIiLCJzZWN0aW9uMiIsImdyb3Vwc192YXIiLCJncm91cCIsImdwX25hbWUiLCJkaXZfZ3JwIiwiZGlzcGxheSIsInZhcl9uYW1lcyIsImZpbHRlciIsImoiLCJsZW5faiIsIm5hbWVfdmFyIiwiY29kZV92YXIiLCJyYXRpbyIsInN1Yl9lbnRyeSIsInRpdGxlX3NlY3Rpb24zIiwic2VjdGlvbjMiLCJ6b25lIiwidGl0bGVfc2VjdGlvbjQiLCJzZWN0aW9uNCIsInRlcnJpdF9sZXZlbCIsIm1lbnUiLCJnZXRFbGVtZW50QnlJZCIsImZsb2F0IiwibWFrZVRvcE1lbnUiLCJ0b3BfbWVudSIsImQzIiwic3R5bGVzIiwicGFkZGluZyIsIndpZHRoX2xlZnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwidCIsIndpZHRoX2NlbnRyYWxfY2hhcnQiLCJ3aWR0aF9tYXAiLCJ3aWR0aF90eXBlX2NvbXAiLCJtYXJnaW4iLCJodG1sIiwidHlwZV9jaGFydCIsInBvc2l0aW9uIiwidmFsdWUiLCJyZXNzZW1ibGFuY2UiLCJpbmVnYWxpdGUiLCJtYWtlSGVhZGVyTWFwU2VjdGlvbiIsImhlYWRlcl9tYXBfc2VjdGlvbiIsImluc2VydCIsIm1ha2VIZWFkZXJDaGFydCIsImhlYWRlcl9iYXJfc2VjdGlvbiIsInN2Z19tYXAiLCJtYXJnaW5fbWFwIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiaGVpZ2h0X21hcCIsInN0cm9rZSIsInByb2plY3Rpb24iLCJnZXRfYmJveF9sYXllcl9wYXRoIiwiYmJveF9sYXllciIsIkluZmluaXR5IiwiZWFjaCIsImJib3hfcGF0aCIsImJvdW5kcyIsImdlb21ldHJ5IiwiZml0TGF5ZXIiLCJ0cmFuc2xhdGUiLCJiIiwicyIsIm1heCIsIm1hcF96b29tZWQiLCJ0cmFuc2Zvcm0iLCJldmVudCIsImsiLCJ5IiwibGF5ZXJzIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiTWFwU2VsZWN0IiwibnV0czEiLCJjb3VudHJpZXMiLCJyZW1vdGUiLCJ0ZW1wbGF0ZSIsInNlYWJveGVzIiwiZ2VvSWRlbnRpdHkiLCJmaXRFeHRlbnQiLCJyZWZsZWN0WSIsImdlb1BhdGgiLCJ6b29tX21hcCIsInpvb20iLCJzY2FsZUV4dGVudCIsInRyYW5zbGF0ZUV4dGVudCIsImNhbGwiLCJkYXRhIiwiZmVhdHVyZXMiLCJlbnRlciIsInNlYWJveGVzMiIsInRhcmdldF9sYXllciIsInByb3BlcnRpZXMiLCJhcHAiLCJjdXJyZW50X2NvbmZpZyIsImlkX2ZpZWxkX2dlb20iLCJteV9yZWdpb24iLCJub2RlIiwiZ2V0QXR0cmlidXRlIiwiYmluZFRvb2x0aXAiLCJjdXJyZW50X2lkcyIsImNvbG9ycyIsInRleHQiLCJfaXgiLCJuYl92YWwiLCJtaW4iLCJyYXRpb19wcmV0dHlfbmFtZSIsIm1vdXNlIiwiem9vbUlkZW50aXR5IiwiY2xhc3NMaXN0IiwiYWRkIiwibXlfcmVnaW9uX3ByZXR0eV9uYW1lIiwiYnJ1c2hfbWFwIiwibW92ZSIsInNlbGVjdGlvbiIsImNoYXJ0IiwicmVzZXRIZWFkZXJCdXR0b24iLCJicnVzaCIsImV4dGVudCIsImhhbmRsZV9icnVzaF9tYXAiLCJtYWtlU291cmNlU2VjdGlvbiIsInRleHRfem9uZSIsIm1ha2VNYXBMZWdlbmQiLCJsZWdlbmRfZWxlbXMiLCJjb2xvciIsInJlY3Rfc2l6ZSIsInNwYWNpbmciLCJsZ2RfaGVpZ2h0Iiwib2Zmc2V0IiwiZ3JwX2xnZCIsImxlZ2VuZHMiLCJ0eCIsInR5IiwiZGVmaW5lIiwidGhpcyIsImNyZWF0ZVRhYmxlRE9NIiwib3B0cyIsImNvbmZpZyIsIm51bSIsImRlbnVtIiwib3B0aW9ucyIsImRvYyIsIm5iX2ZlYXR1cmVzIiwiY29sdW1uX25hbWVzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm5iX2NvbHVtbnMiLCJteVRhYmxlIiwiaGVhZGVycyIsImJvZHkiLCJoZWFkZXJzX3JvdyIsImNlbGwiLCJjb2xfbmFtZSIsInJvdyIsInNldEF0dHJpYnV0ZSIsIm1ha2VUYWJsZSIsImRhdGFfbm9fZW1wdHkiLCJ0YWJsZSIsInVuZGVmaW5lZCIsImRhdGFUYWJsZSIsIkRhdGFUYWJsZSIsIm1hcmdpblRvcCIsImZvbnRTaXplIiwicHJvdG90eXBlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbCIsIm9uY2xpY2siLCJwYXJlbnRFbGVtZW50IiwiY2xpY2siLCJwcmVwYXJlX2RhdGFzZXQiLCJmdWxsX2RhdGFzZXQiLCJmZWF0dXJlX25hbWVzIiwiZWxlbSIsImZpbHRlckxldmVsVmFyIiwiZmlsdGVyX2lkIiwiY3VycmVudF9sZXZlbCIsImlkX2ZpZWxkIiwiZmlsdGVyX2tleSIsIm5hbWVfZmllbGQiLCJhbGxfdmFyaWFibGVzIiwiY29uY2F0IiwidGVtcCIsImZ0IiwibGV2ZWwiLCJteV9jYXRlZ29yeSIsInByb3BzX2ZlYXR1cmUiLCJjdXJyZW50X2RhdGEiLCJwcmVwYXJlVmFyaWFibGVzSW5mbyIsIm1ldGFkYXRhX2luZGljYXRldXJzIiwiYXBwbHlGaWx0ZXIiLCJmaWx0ZXJfdHlwZSIsImNoYW5nZVJlZ2lvbiIsImlkX3JlZ2lvbiIsImxvZyIsImFkZFZhcmlhYmxlIiwiY29kZV9yYXRpbyIsInZhcmlhYmxlX2luZm8iLCJyZW1vdmVWYXJpYWJsZSIsInNwbGljZSIsInJlc2V0VmFyaWFibGVzIiwiY29kZXNfcmF0aW8iLCJsZW4iLCJjYWxjUG9wQ29tcGxldHVkZVN1YnNldCIsInZhcnMiLCJwb3BfZmllbGQiLCJ0b3RhbF9wb3AiLCJpc05hTiIsInJhdGlvX25hbWUiLCJldmVyeSIsInN1YnNldF9wb3AiLCJwb3AiLCJzdmdfYmFyIiwibWFyZ2luMiIsImhlaWdodDIiLCJuYkZ0IiwiY3VycmVudF9yYW5nZV9icnVzaCIsImN1cnJlbnRfcmFuZ2UiLCJkaXNwbGF5ZWQiLCJnZXRNZWFuUmFuayIsIm1lYW5fdmFsdWUiLCJyYXRpb190b191c2UiLCJtZWFuX3JhbmsiLCJzb3J0IiwiQmFyQ2hhcnQxIiwicmVmX2RhdGEiLCJicnVzaGVkIiwic291cmNlRXZlbnQiLCJ0eXBlIiwieDIiLCJyYW5nZSIsImRvbWFpbiIsInVwZGF0ZSIsInVwZGF0ZUNvbnRleHQiLCJicnVzaF90b3AiLCJicnVzaGVkX3RvcCIsIl9mb2N1cyIsIm1hcF9lbGVtIiwiZDNfZXZlbnQiLCJ0YXJnZXQiLCJyZW1vdmVSZWN0QnJ1c2giLCJ1cGRhdGVNYXBSZWdpbyIsImRldGFpbCIsIm5iX3ZhciIsInNjYWxlQmFuZCIsInNjYWxlTGluZWFyIiwieTIiLCJ4QXhpcyIsImF4aXNCb3R0b20iLCJ4QXhpczIiLCJ5QXhpcyIsImF4aXNMZWZ0Iiwic2VsZiIsImF2YWlsYWJsZV9yYXRpb3MiLCJjdXJyZW50X3JhbmtzIiwibWVhbiIsImZvY3VzIiwiY29udGV4dCIsImJydXNoX2JvdHRvbSIsImJydXNoWCIsImR4IiwiZ19iYXIiLCJncm91cGVfbGluZV9tZWFuIiwieDEiLCJ5MSIsInVwZGF0ZU1pbmlCYXJzIiwiY29tcGxldHVkZV92YWx1ZSIsImNvbXBsZXR1ZGUiLCJrZXkiLCJzZWxlY192YXIiLCJjb2RlX3ZhcmlhYmxlIiwiY2hhbmdlVmFyaWFibGUiLCJjaGFuZ2VTdHVkeVpvbmUiLCJ1cGRhdGVDb21wbGV0dWRlIiwibWVudV9zZWxlY3Rpb24iLCJzZWxlY3RCZWxvd01lYW4iLCJzZWxlY3RBYm92ZU1lYW4iLCJzZWxlY3RCZWxvd015UmVnaW9uIiwic2VsZWN0QWJvdmVNeVJlZ2lvbiIsIl8iLCJiYXIiLCJiYW5kd2lkdGgiLCJ0b19kaXNwbGF5IiwiZXhpdCIsImF4aXNfeCIsIm1pbmlfYmFycyIsIm15X3JhbmsiLCJsYXN0X21hcF9zZWxlY3Rpb24iLCJyZWN0IiwiX3B0cyIsInB0cyIsIm5iX3B0cyIsImNvbnRhaW5zIiwiaWRzIiwia2V5cyIsInJhbmtzIiwiYzEiLCJjMiIsInBhcmVudCIsInVwZGF0ZUxlZ2VuZCIsImdycF9tZWFuIiwiZmluZCIsIm1pbl9zZXJpZSIsIm1heF9zZXJpZSIsIm9mZnNldF95IiwidXBkYXRlTWVhblZhbHVlIiwibmFtZV92YXJpYWJsZSIsImRpc3BhdGNoIiwidW5iaW5kQnJ1c2giLCJyZXNldENvbG9ycyIsIkJ1YmJsZUNoYXJ0MSIsImF2YWlsYWJsZV9udW1zIiwic3RvY2tfdG9fdXNlIiwiaGlnaGxpZ2h0X3NlbGVjdGlvbiIsImRyYXdfZ3JvdXAiLCJzZWxlY3Rpb25fY2xvc2UiLCJwcm9wZXJ0eSIsIm15X3JlZ2lvbl92YWx1ZSIsImJpbmRNZW51IiwiYXBwbHlTZWxlY3Rpb24iLCJuYiIsInR5cGVfc2VsZWN0aW9uIiwiZGlzdCIsIl9taW4iLCJfbWF4IiwiZGlzdF9taW4iLCJkaXN0X21heCIsImRpc3RfYXhpcyIsIm1hcmdpbl9taW5fbWF4IiwicHJvcF9zaXplciIsInhTY2FsZSIsImJ1YmJsZXMiLCJ4X3ZhbHVlIiwiX3JhdGlvX3RvX3VzZSIsIl9zdG9ja190b191c2UiLCJpZF90b19yZW1vdmUiLCJhcHBseWNoYW5nZSIsImNvbnRleHRNZW51IiwiaXRlbXMiLCJzZXRJdGVtcyIsIml0ZW0iLCJhY3Rpb24iLCJuYl9pdGVtcyIsImFkZEl0ZW0iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIkRPTW9iaiIsImhpZGVNZW51IiwiaW5pdE1lbnUiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50WCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0IiwibmJfaXRlbSIsIlNjYXR0ZXJQbG90MiIsInJhbmdlX3giLCJpbnZlcnQiLCJyYW5nZV95IiwidDEiLCJyYW5rX3ZhcmlhYmxlMSIsInQyIiwicmFua192YXJpYWJsZTIiLCJ2YXJpYWJsZTEiLCJ2YXJpYWJsZTIiLCJyZWZfdmFsdWUxIiwicmVmX3ZhbHVlMiIsInByZXR0eV9uYW1lMSIsInByZXR0eV9uYW1lMiIsInJlcyIsIm5pY2UiLCJ0aWNrcyIsInlBeGlzMiIsInBsb3QiLCJzY2F0dGVyIiwibWVhbl92YXJpYWJsZTEiLCJtZWFuX3ZhcmlhYmxlMiIsIm1ha2VHcmlkIiwib3BhY2l0eSIsInByZXBhcmVUaXRsZUF4aXMiLCJjYWxsQnJ1c2giLCJ0aWNrU2l6ZSIsInRpY2tGb3JtYXQiLCJtZW51WCIsIkNvbnRleHRNZW51IiwibWVudVkiLCJpdGVtc1giLCJjaGFuZ2VWYXJpYWJsZVgiLCJpdGVtc1kiLCJjaGFuZ2VWYXJpYWJsZVkiLCJiYm94Iiwic2hvd01lbnUiLCJkZWZhdWx0X2NvbG9yIiwiZG90cyIsIl92YXIxIiwiX3ZhcjIiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJ0bXBfbXlfcmVnaW9uIiwidXBkYXRlSXRlbXNDdHhNZW51IiwibmV3X3Zhcl94IiwibmV3X3Zhcl95IiwiZGVidWciLCJzZXREZWZhdWx0Q29uZmlnIiwiY29kZSIsInZhcmlhYmxlIiwic2V0RGVmYXVsdENvbmZpZ01lbnUiLCJiaW5kVUlfY2hhcnQiLCJuZXdfbmJfdmFyIiwidXBkYXRlQXZhaWxhYmxlc1JhdGlvcyIsInVwZGF0ZUNoYW5nZVJlZ2lvbiIsImdyb3VwX3ZhciIsIm5leHRTaWJsaW5nIiwiQXJyYXkiLCJwcmV2aW91c1NpYmxpbmciLCJoYW5kbGVDbGlja01hcCIsImhlYWRlcl90YWJsZV9zZWN0aW9uIiwiY29udGVudCIsInJhbmciLCJqb2luIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYmluZFRvcEJ1dHRvbnMiLCJyZXNldFpvb20iLCJiaW5kQnJ1c2giLCJiaW5kTWFwIiwibG9hZERhdGEiLCJxdWV1ZSIsImRlZmVyIiwiY3N2IiwianNvbiIsImF3YWl0QWxsIiwiZXJyb3IiLCJyZXN1bHRzIiwiZmVhdHVyZXNfbWVudSIsInNlbGVjdEZpcnN0QXZhaWxhYmxlVmFyIiwiZGF0YV9teV9mZWF0dXJlIiwibGluZXMiLCJuYl9saW5lcyIsIm5ld192YXIiLCJuZXdfdmFyX25hbWVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7QUFJQSxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ2YsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUNmLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUM7QUFDZixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsTUFBTSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7O0FBZ0JuQixNQUFjLEdBQUcsU0FBUyxHQUFHLEVBQUUsT0FBTyxFQUFFO0VBQ3RDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFDO0VBQ3hCLElBQUksSUFBSSxHQUFHLE9B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
