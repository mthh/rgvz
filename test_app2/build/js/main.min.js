(function (exports) {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var tingle_min = createCommonjsModule(function (module, exports) {
!function(t,o){"function"==typeof undefined&&undefined.amd?undefined(o):module.exports=o();}(commonjsGlobal,function(){function t(t){var o={onClose:null,onOpen:null,beforeOpen:null,beforeClose:null,stickyFooter:!1,footer:!1,cssClass:[],closeLabel:"Close",closeMethods:["overlay","button","escape"]};this.opts=r({},o,t),this.init();}function o(){this.modalBoxFooter&&(this.modalBoxFooter.style.width=this.modalBox.clientWidth+"px",this.modalBoxFooter.style.left=this.modalBox.offsetLeft+"px");}function e(){this.modal=document.createElement("div"),this.modal.classList.add("tingle-modal"),0!==this.opts.closeMethods.length&&this.opts.closeMethods.indexOf("overlay")!==-1||this.modal.classList.add("tingle-modal--noOverlayClose"),this.modal.style.display="none",this.opts.cssClass.forEach(function(t){"string"==typeof t&&this.modal.classList.add(t);},this),this.opts.closeMethods.indexOf("button")!==-1&&(this.modalCloseBtn=document.createElement("button"),this.modalCloseBtn.classList.add("tingle-modal__close"),this.modalCloseBtnIcon=document.createElement("span"),this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"),this.modalCloseBtnIcon.innerHTML="Ã—",this.modalCloseBtnLabel=document.createElement("span"),this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"),this.modalCloseBtnLabel.innerHTML=this.opts.closeLabel,this.modalCloseBtn.appendChild(this.modalCloseBtnIcon),this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)),this.modalBox=document.createElement("div"),this.modalBox.classList.add("tingle-modal-box"),this.modalBoxContent=document.createElement("div"),this.modalBoxContent.classList.add("tingle-modal-box__content"),this.modalBox.appendChild(this.modalBoxContent),this.opts.closeMethods.indexOf("button")!==-1&&this.modal.appendChild(this.modalCloseBtn),this.modal.appendChild(this.modalBox);}function s(){this.modalBoxFooter=document.createElement("div"),this.modalBoxFooter.classList.add("tingle-modal-box__footer"),this.modalBox.appendChild(this.modalBoxFooter);}function i(){this._events={clickCloseBtn:this.close.bind(this),clickOverlay:l.bind(this),resize:this.checkOverflow.bind(this),keyboardNav:n.bind(this)},this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.addEventListener("click",this._events.clickCloseBtn),this.modal.addEventListener("mousedown",this._events.clickOverlay),window.addEventListener("resize",this._events.resize),document.addEventListener("keydown",this._events.keyboardNav);}function n(t){this.opts.closeMethods.indexOf("escape")!==-1&&27===t.which&&this.isOpen()&&this.close();}function l(t){this.opts.closeMethods.indexOf("overlay")!==-1&&!d(t.target,"tingle-modal")&&t.clientX<this.modal.clientWidth&&this.close();}function d(t,o){for(;(t=t.parentElement)&&!t.classList.contains(o););return t}function a(){this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.removeEventListener("click",this._events.clickCloseBtn),this.modal.removeEventListener("mousedown",this._events.clickOverlay),window.removeEventListener("resize",this._events.resize),document.removeEventListener("keydown",this._events.keyboardNav);}function r(){for(var t=1;t<arguments.length;t++)for(var o in arguments[t])arguments[t].hasOwnProperty(o)&&(arguments[0][o]=arguments[t][o]);return arguments[0]}function h(){var t,o=document.createElement("tingle-test-transition"),e={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in e)if(void 0!==o.style[t])return e[t]}var c=h();return t.prototype.init=function(){this.modal||(e.call(this),i.call(this),document.body.insertBefore(this.modal,document.body.firstChild),this.opts.footer&&this.addFooter());},t.prototype.destroy=function(){null!==this.modal&&(a.call(this),this.modal.parentNode.removeChild(this.modal),this.modal=null);},t.prototype.open=function(){var t=this;"function"==typeof t.opts.beforeOpen&&t.opts.beforeOpen(),this.modal.style.removeProperty?this.modal.style.removeProperty("display"):this.modal.style.removeAttribute("display"),document.body.classList.add("tingle-enabled"),this.setStickyFooter(this.opts.stickyFooter),this.modal.classList.add("tingle-modal--visible"),c?this.modal.addEventListener(c,function o(){"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),t.modal.removeEventListener(c,o,!1);},!1):"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),this.checkOverflow();},t.prototype.isOpen=function(){return!!this.modal.classList.contains("tingle-modal--visible")},t.prototype.close=function(){if("function"==typeof this.opts.beforeClose){var t=this.opts.beforeClose.call(this);if(!t)return}document.body.classList.remove("tingle-enabled"),this.modal.classList.remove("tingle-modal--visible");var o=this;c?this.modal.addEventListener(c,function t(){o.modal.removeEventListener(c,t,!1),o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this);},!1):(o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this));},t.prototype.setContent=function(t){"string"==typeof t?this.modalBoxContent.innerHTML=t:(this.modalBoxContent.innerHTML="",this.modalBoxContent.appendChild(t));},t.prototype.getContent=function(){return this.modalBoxContent},t.prototype.addFooter=function(){s.call(this);},t.prototype.setFooterContent=function(t){this.modalBoxFooter.innerHTML=t;},t.prototype.getFooterContent=function(){return this.modalBoxFooter},t.prototype.setStickyFooter=function(t){this.isOverflow()||(t=!1),t?this.modalBox.contains(this.modalBoxFooter)&&(this.modalBox.removeChild(this.modalBoxFooter),this.modal.appendChild(this.modalBoxFooter),this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"),o.call(this),this.modalBoxContent.style["padding-bottom"]=this.modalBoxFooter.clientHeight+20+"px"):this.modalBoxFooter&&(this.modalBox.contains(this.modalBoxFooter)||(this.modal.removeChild(this.modalBoxFooter),this.modalBox.appendChild(this.modalBoxFooter),this.modalBoxFooter.style.width="auto",this.modalBoxFooter.style.left="",this.modalBoxContent.style["padding-bottom"]="",this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky")));},t.prototype.addFooterBtn=function(t,o,e){var s=document.createElement("button");return s.innerHTML=t,s.addEventListener("click",e),"string"==typeof o&&o.length&&o.split(" ").forEach(function(t){s.classList.add(t);}),this.modalBoxFooter.appendChild(s),s},t.prototype.resize=function(){console.warn("Resize is deprecated and will be removed in version 1.0");},t.prototype.isOverflow=function(){var t=window.innerHeight,o=this.modalBox.clientHeight;return o>=t},t.prototype.checkOverflow=function(){this.modal.classList.contains("tingle-modal--visible")&&(this.isOverflow()?this.modal.classList.add("tingle-modal--overflow"):this.modal.classList.remove("tingle-modal--overflow"),!this.isOverflow()&&this.opts.stickyFooter?this.setStickyFooter(!1):this.isOverflow()&&this.opts.stickyFooter&&(o.call(this),this.setStickyFooter(!0)));},{modal:t}});
});

var color_countries = 'rgb(147,144,252)';
var color_disabled = 'rgb(214, 214, 214)';
var color_sup = 'green';
var color_inf = 'red';
var color_highlight = 'yellow';
var color_default_dissim = 'darkred';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var math_pow = Math.pow;
var math_abs = Math.abs;
var math_round = Math.round;
var math_max = Math.max;
var math_sin = Math.sin;
var math_cos = Math.cos;
var math_sqrt = Math.sqrt;
var HALF_PI = Math.PI / 2;

function prepareTooltip(parent_svg_elem) {
  var tooltip = parent_svg_elem.append('g').attr('class', 'tooltip').style('display', 'none');

  tooltip.append('rect').attrs({ x: 15, width: 0, height: 0, fill: 'beige' }).style('opacity', 0.75);

  tooltip.append('text').attrs({ class: 'id_feature', x: 25, dy: '1.2em', 'font-size': '14px' }).style('font-weight', 'bold');

  tooltip.append('text').attrs({
    class: 'value_feature1',
    x: 25,
    dy: '2.4em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature2',
    x: 25,
    dy: '3.5em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature3',
    x: 25,
    dy: '4.6em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature4',
    x: 25,
    dy: '5.7em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature5',
    x: 25,
    dy: '6.8em',
    'font-size': '14px'
  });

  return tooltip;
}

function unbindUI() {
  // Removes the current behavior corresponding to clicking on the left menu:
  d3.selectAll('span.filter_v').on('click', null);
  d3.selectAll('span.target_region').on('click', null);
  d3.selectAll('span.label_chk').on('click', null);

  // Remove the table:
  d3.select('.dataTable-wrapper').remove();

  // Unbind buttons on the top of the map:
  d3.select('#header_map').selectAll('img').on('click', null);

  // Remove the selection menu (or buttons) under the chart:
  d3.select('#bar_section > #menu_selection').remove();

  // Removes the current behavior corresponding to clicking on the top menu:
  d3.selectAll('.type_chart.title_menu').on('click', null);

  // Removes the current behavior corresponding to pressing the Control key:
  document.onkeyup = null;
  document.onkeydown = null;
}

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} test_value - The value to be compared to the value of "my region".
* @param {Number} ref_value - The value of my region.
* @param {Boolean} serie_inversed - Whether the serie is inversed or not in the current chart.
* @return {String} - A string containing the color to be used for this value.
*
*/
var comp = function comp(test_value, ref_value, serie_inversed) {
  if (test_value < ref_value) {
    return serie_inversed ? color_sup : color_inf;
  }
  return serie_inversed ? color_inf : color_sup;
};

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} val1 - The value to be compared to the value of "my region" for the 1st variable.
* @param {Number} val2 - The value to be compared to the value of "my region" for the 2nd variable.
* @param {Number} ref_val1 - The value of my region for he first variable.
* @param {Number} ref_val2 - The value of my region for the second variable.
* @param {Boolean} xInversed - Whether the serie is inversed on the x axis in the current chart.
* @param {Boolean} yInversed - Whether the serie is inversed on the y axis in the current chart.
* @return {String} - A string containing the color to be used for theses values.
*
*/
var comp2 = function comp2(val1, val2, ref_val1, ref_val2, xInversed, yInversed) {
  if (val1 < ref_val1 && !xInversed || val1 > ref_val1 && xInversed) {
    // val1 is inferior:
    if (val2 < ref_val2) {
      return yInversed ? 'rgb(160, 30, 160)' : color_inf;
    }
    return yInversed ? color_inf : 'rgb(160, 30, 160)';
  }
  // val1 is superior :
  if (val2 > ref_val2) {
    return !yInversed ? color_sup : 'orange';
  }
  return !yInversed ? 'orange' : color_sup;
};

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

var PropSizer = function PropSizer(fixed_value, fixed_size) {
  var _this = this;

  this.fixed_value = fixed_value;
  var sqrt = Math.sqrt;
  var abs = Math.abs;
  var PI = Math.PI;
  this.smax = fixed_size * fixed_size * PI;
  this.scale = function (val) {
    return sqrt(abs(val) * _this.smax / _this.fixed_value) / PI;
  };
  // this.get_value = size => ((size * PI) ** 2) / this.smax * this.fixed_value;
  // Use Math pow to support browser without ** operator:
  // eslint-disable-next-line no-restricted-properties
  this.get_value = function (size) {
    return Math.pow(size * PI, 2) / _this.smax * _this.fixed_value;
  };
};

var removeDuplicates = function removeDuplicates(arr) {
  var tmp = [];
  for (var i = 0, len_arr = arr.length; i < len_arr; i++) {
    if (tmp.indexOf(arr[i]) === -1) {
      tmp.push(arr[i]);
    }
  }
  return tmp;
};

var getSvgPathType = function getSvgPathType(path) {
  if (path.indexOf('M ') > -1 && path.indexOf(' L ') > -1) {
    return 2;
  }
  return 1;
};

var svgPathToCoords = function svgPathToCoords(path, type_path) {
  if (type_path === 1) {
    return path.slice(1).split('L').map(function (pt) {
      return pt.split(',').map(function (a) {
        return +a;
      });
    });
  }
  return path.slice(2).split(' L ').map(function (pt) {
    return pt.split(' ').map(function (a) {
      return +a;
    });
  });
};

function computePercentileRank(obj, field_name, result_field_name) {
  var values = obj.map(function (d) {
    return d[field_name];
  });
  var len_values = values.length;
  var getPR = function getPR(v) {
    var count = 0;
    for (var i = 0; i < len_values; i++) {
      if (values[i] <= v) {
        count += 1;
      }
    }
    return 100 * count / len_values;
  };
  for (var ix = 0; ix < len_values; ix++) {
    // eslint-disable-next-line no-param-reassign
    obj[ix][result_field_name] = getPR(values[ix]);
  }
}

var _getPR = function _getPR(v, serie) {
  var count = 0;
  for (var i = 0; i < serie.length; i++) {
    if (serie[i] <= v) {
      count += 1;
    }
  }
  return 100 * count / serie.length;
};

var getMean = function getMean(serie) {
  var nb_values = serie.length;
  var sum = 0;
  for (var i = 0; i < nb_values; i++) {
    sum += serie[i];
  }
  return sum / nb_values;
};

var getStdDev = function getStdDev(serie, mean_value) {
  var nb_values = serie.length;
  if (!mean_value) {
    mean_value = getMean(serie); // eslint-disable-line no-param-reassign
  }
  var sum = 0;
  for (var i = 0; i < nb_values; i++) {
    // eslint-disable-next-line no-restricted-properties
    sum += math_pow(serie[i] - mean_value, 2);
  }
  return math_sqrt(1 / nb_values * sum);
};

var getStandardizedMeanStdDev = function getStandardizedMeanStdDev(serie) {
  var mean = getMean(serie);
  var stddev = getStdDev(serie, mean);
  return serie.map(function (val) {
    return (val - mean) / stddev;
  });
};

var shuffle = function shuffle(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    // eslint-disable-next-line no-param-reassign
    var _ref = [array[j], array[i]];
    array[i] = _ref[0];
    array[j] = _ref[1];
  }
  return array;
};

function euclidian_distance(feature1, feature2) {
  var _feature1$geometry$co = slicedToArray(feature1.geometry.coordinates, 2),
      x1 = _feature1$geometry$co[0],
      y1 = _feature1$geometry$co[1];

  var _feature2$geometry$co = slicedToArray(feature2.geometry.coordinates, 2),
      x2 = _feature2$geometry$co[0],
      y2 = _feature2$geometry$co[1];

  var a = x1 - x2;
  var b = y1 - y2;
  return math_sqrt(a * a + b * b);
}

var createMenu = function createMenu(names, variables, study_zones, territorial_mesh) {
  // First section, regions names:
  var title_section1 = document.createElement('p');
  title_section1.className = 'title_menu';
  title_section1.innerHTML = 'Ma rÃ©gion';
  var section1 = document.createElement('div');
  section1.className = 'box';
  section1.style.overflow = 'auto';
  section1.style.height = '180px';
  for (var i = 0, len_i = names.length; i < len_i; i++) {
    var id = names[i].geo;
    var name = names[i].Nom;
    var entry = document.createElement('p');
    entry.innerHTML = '<span value="' + id + '" class=\'target_region square\'></span><span class="label_chk">' + name + '</span>';
    section1.appendChild(entry);
  }

  // Second section, groups of variables:
  var title_section2 = document.createElement('p');
  title_section2.className = 'title_menu';
  title_section2.innerHTML = 'Mon/mes indicateurs';
  var section2 = document.createElement('div');
  section2.id = 'menu_variables';
  section2.className = 'box';
  section2.style.overflow = 'auto';
  section2.style.height = '170px';

  // Filter the "variables" variable to fetch the group names :
  var groups_var = removeDuplicates(variables.map(function (d) {
    return d.group;
  }));

  var _loop = function _loop(_i, _len_i) {
    var gp_name = groups_var[_i];
    var entry = document.createElement('p');
    entry.className = 'name_group_var';
    entry.innerHTML = '<span class=\'square\'></span><span>' + gp_name + '</span>';
    section2.appendChild(entry);
    var div_grp = document.createElement('div');
    div_grp.style.display = _i === 0 ? null : 'none';
    var var_names = variables.filter(function (d) {
      return d.group === gp_name;
    });
    for (var j = 0, len_j = var_names.length; j < len_j; j++) {
      var name_var = var_names[j].name;
      var code_var = var_names[j].ratio;
      var sub_entry = document.createElement('p');
      sub_entry.className = 'small';
      sub_entry.innerHTML = '<span value="' + code_var + '" class="target_variable small_square"></span><span class="label_chk">' + name_var + '</span><span class="i_info">i</span>';
      div_grp.appendChild(sub_entry);
    }
    section2.appendChild(div_grp);
  };

  for (var _i = 0, _len_i = groups_var.length; _i < _len_i; _i++) {
    _loop(_i, _len_i);
  }

  // Third section, study zone:
  var title_section3 = document.createElement('p');
  title_section3.className = 'title_menu';
  title_section3.innerHTML = 'Mon espace d\'Ã©tude';
  var section3 = document.createElement('div');
  section3.id = 'menu_studyzone';
  section3.className = 'box';
  for (var _i2 = 0, _len_i2 = study_zones.length; _i2 < _len_i2; _i2++) {
    var _entry = document.createElement('p');
    var zone = study_zones[_i2];
    _entry.innerHTML = '<span filter-value="' + zone.id + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span><span class="i_info">i</span>';
    section3.appendChild(_entry);
  }

  // Fourth section:
  var title_section4 = document.createElement('p');
  title_section4.className = 'title_menu';
  title_section4.innerHTML = 'Maillage territorial d\'analyse';
  var section4 = document.createElement('div');
  section4.id = 'menu_territ_level';
  section4.className = 'box';
  for (var _i3 = 0, _len_i3 = territorial_mesh.length; _i3 < _len_i3; _i3++) {
    var _entry2 = document.createElement('p');
    var territ_level = territorial_mesh[_i3];
    _entry2.innerHTML = '<span value="' + territ_level.id + '" class=\'square territ_level\'></span><span class="label_chk">' + territ_level.name + '</span><span class="i_info">i</span>';
    section4.appendChild(_entry2);
  }

  // The actual menu containing these 4 sections:
  var menu = document.getElementById('menu');
  menu.id = 'menu';
  menu.style.width = '340px';
  menu.style.float = 'left';
  menu.appendChild(title_section1);
  menu.appendChild(section1);
  menu.appendChild(title_section2);
  menu.appendChild(section2);
  menu.appendChild(title_section3);
  menu.appendChild(section3);
  menu.appendChild(title_section4);
  menu.appendChild(section4);
};

function makeTopMenu() {
  var top_menu = d3.select('#menutop').styles({ 'font-family': "'Signika', sans-serif", 'font-size': '0.80em', padding: '0.3px' });
  var width_left = document.querySelector('#menu').getBoundingClientRect().width + 25 + 'px';
  var t = document.querySelector('#bar_section').getBoundingClientRect().width;
  var width_central_chart = t + 'px';
  var width_map = document.querySelector('#map_section').getBoundingClientRect().width - 35 + 'px';
  var width_type_comp = (t - 80) / 2 - 2 + 'px';
  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_left, float: 'left', margin: '0 3px' }).html('SÃ‰LECTION');

  var type_chart = top_menu.append('div').attr('class', 'top_section').styles({ width: width_central_chart, float: 'left', margin: '0 3px', 'text-align': 'center' });

  var position = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  position.append('p').attr('class', 'title_type_comp').html('POSITION');

  position.append('span').attrs({ class: 'type_chart chart_t1', value: 'BarChart1' }).html('1 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ScatterPlot2' }).html('2 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t3 disabled', value: 'RadarChart3' }).html('+3 ind.');

  var ressemblance = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  ressemblance.append('p').attr('class', 'title_type_comp').html('RESSEMBLANCES');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t1', value: 'BubbleChart1' }).html('1 ind.');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'SimilarityChart' }).html('+2 ind.');

  // const inegalite = type_chart
  //   .append('div')
  //   .attr('class', 'type_comparaison')
  //   .styles({ width: width_type_comp });
  //
  // inegalite.append('p')
  //   .attr('class', 'title_type_comp')
  //   .html('INÃ‰GALITÃ‰S');
  //
  // inegalite.append('span')
  //   .attrs({ class: 'type_chart chart_t1', value: 'BoxPlot1' })
  //   .html('1 ind.');
  //
  // inegalite.append('span')
  //   .attrs({ class: 'type_chart chart_t2 disabled', value: 'ParallelCoords2' })
  //   .html('+2 ind.');

  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_map, float: 'left', margin: '0 0 0 20px' }).html('QUELLES REGIONS ?');
}

function makeHeaderMapSection() {
  var header_map_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_map').style('margin', '0 0 0 10px');

  header_map_section.insert('img').attrs({
    class: 'map_button active',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  });
}

function makeHeaderChart() {
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').attr('id', 'header_chart').style('margin-bottom', '0').style('clear', 'both');

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/edit-table-insert-row-above.svg',
    id: 'img_table'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    if (document.querySelector('.dataTable-wrapper').style.display) {
      document.querySelector('#svg_map').style.display = 'none';
      document.querySelector('#svg_legend').style.display = 'none';
      document.querySelector('#header_map').style.display = 'none';
      document.querySelector('#header_table').style.display = null;
      document.querySelector('.dataTable-wrapper').style.display = null;
      this.style.filter = 'invert(75%)';
    } else {
      document.querySelector('#svg_map').style.display = null;
      document.querySelector('#svg_legend').style.display = null;
      document.querySelector('#header_map').style.display = null;
      document.querySelector('#header_table').style.display = 'none';
      document.querySelector('.dataTable-wrapper').style.display = 'none';
      this.style.filter = null;
    }
  });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/printer.svg',
    id: 'img_printer'
  }).styles({ margin: '3px', float: 'right' });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/gtk-info.svg',
    id: 'img_info'
  }).styles({ margin: '3px', float: 'right' });
}

var svg_map = d3.select('svg#svg_map');
var margin_map = { top: 0, right: 0, bottom: 0, left: 0 };
var width_map = +svg_map.attr('width') - margin_map.left - margin_map.right;
var height_map = +svg_map.attr('height') - margin_map.top - margin_map.bottom;

var styles = {
  template: { id: 'template', fill: 'rgb(247, 252, 254)', 'fill-opacity': 1 },
  countries: { id: 'countries', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes: { id: 'seaboxes', fill: '#e0faff', 'fill-opacity': 1, stroke: 'black', 'stroke-width': 0.2 },
  remote: { id: 'remote', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes2: { id: 'seaboxes2', fill: 'none', stroke: 'black', 'stroke-width': 0.8 },
  nuts1: { id: 'nuts1', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' }
};

var projection = void 0;
var path = void 0;

function get_bbox_layer_path(name) {
  var bbox_layer = [[Infinity, Infinity], [-Infinity, -Infinity]];
  svg_map.select('#' + name).selectAll('path').each(function (d) {
    var bbox_path = path.bounds(d.geometry);
    bbox_layer[0][0] = bbox_path[0][0] < bbox_layer[0][0] ? bbox_path[0][0] : bbox_layer[0][0];
    bbox_layer[0][1] = bbox_path[0][1] < bbox_layer[0][1] ? bbox_path[0][1] : bbox_layer[0][1];
    bbox_layer[1][0] = bbox_path[1][0] > bbox_layer[1][0] ? bbox_path[1][0] : bbox_layer[1][0];
    bbox_layer[1][1] = bbox_path[1][1] > bbox_layer[1][1] ? bbox_path[1][1] : bbox_layer[1][1];
  });
  return bbox_layer;
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('template');
  var s = 1 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map);
  var t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function map_zoomed() {
  var transform = d3.event.transform;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style('stroke-width', function () {
    return styles[this.id]['stroke-width'] / transform.k + 'px';
  });

  layers.selectAll('g').transition(t).attr('transform', transform);

  svg_map.select('.brush_map').transition(t).attr('transform', transform);
}

var MapSelect = function () {
  function MapSelect(nuts1, countries, remote, template, seaboxes) {
    classCallCheck(this, MapSelect);

    projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], template).reflectY(true);

    path = d3.geoPath().projection(projection);
    var layers = svg_map.append('g').attr('id', 'layers');

    this.zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

    svg_map.call(this.zoom_map);

    layers.append('g').attrs(styles.template).selectAll('path').data(template.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.countries).attr('id', 'countries').selectAll('path').data(countries.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.remote).selectAll('path').data(remote.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes2).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    this.target_layer = layers.append('g').attrs(styles.nuts1);
    this.target_layer.selectAll('path').data(nuts1.features).enter().append('path').attr('fill', function (d) {
      return d.properties[app.current_config.id_field_geom] !== app.current_config.my_region ? color_countries : color_highlight;
    }).attr('d', path);
    app.type_path = getSvgPathType(this.target_layer.select('path').node().getAttribute('d'));
    fitLayer();
    prepareTooltip(svg_map);
    // this.bindTooltip();
  }

  createClass(MapSelect, [{
    key: 'resetColors',
    value: function resetColors$$1(current_ids) {
      var id_field_geom = app.current_config.id_field_geom;
      this.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[id_field_geom];
        if (id === app.current_config.my_region) {
          return color_highlight;
        } else if (current_ids.indexOf(id) > -1) {
          return app.colors[id] || color_countries;
        }
        return color_disabled;
      });
    }
    // bindTooltip() {
    //   this.target_layer.selectAll('path')
    //     .on('mouseover', () => {
    //       svg_map.select('.tooltip')
    //         .style('display', null);
    //     })
    //     .on('mouseout', () => {
    //       svg_map.select('.tooltip')
    //         .style('display', 'none');
    //     })
    //     .on('mousemove', function (d) {
    //       const tooltip = svg_map.select('.tooltip');
    //       tooltip
    //         .select('text.id_feature')
    //         .text(`${d.properties[app.current_config.id_field_geom]}`);
    //       let _ix, nb_val;
    //       for (_ix = 0, nb_val = Math.min(app.current_config.ratio.length, 5); _ix < nb_val; _ix++) {
    //         tooltip.select(`text.value_feature${_ix + 1}`)
    //           .text(`${app.current_config.ratio_pretty_name[_ix]}: ${math_round(d.properties[app.current_config.ratio[_ix]] * 10) / 10}`);
    //       }
    //       tooltip
    //         .attr('transform', `translate(${[d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 - _ix * 12]})`);
    //     });
    // }

  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      svg_map.transition().duration(250).call(this.zoom_map.transform, d3.zoomIdentity);
    }
  }, {
    key: 'updateLegend',
    value: function updateLegend() {
      d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + app.current_config.my_region_pretty_name);
    }
  }, {
    key: 'removeRectBrush',
    value: function removeRectBrush() {
      svg_map.select('.brush_map').call(this.brush_map.move, null);
    }
  }, {
    key: 'callBrush',
    value: function callBrush(selection) {
      svg_map.select('.brush_map').call(this.brush_map.move, selection);
    }
  }, {
    key: 'bindBrushClick',
    value: function bindBrushClick(chart) {
      if (chart.handleClickMap) {
        document.getElementById('img_map_select').classList.remove('disabled');
        document.getElementById('img_map_select').classList.add('active');
      } else {
        document.getElementById('img_map_select').classList.add('disabled');
      }
      if (chart.handle_brush_map) {
        document.getElementById('img_rect_selec').classList.remove('disabled');
        document.getElementById('img_rect_selec').classList.add('active');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.remove('active');
        this.brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
          chart.handle_brush_map(d3.event);
        });
        svg_map.append('g').attr('class', 'brush_map').call(this.brush_map);
      } else {
        document.getElementById('img_rect_selec').classList.remove('active');
        document.getElementById('img_rect_selec').classList.add('disabled');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.add('active');
      }
    }
  }, {
    key: 'getUnitsWithin',
    value: function getUnitsWithin(dist_km) {
      var dist = dist_km * 1000;
      return this.dist_to_my_region.filter(function (d) {
        return d.dist <= dist;
      }).map(function (d) {
        return d.id;
      });
    }
  }, {
    key: 'computeDistMat',
    value: function computeDistMat() {
      var features = Array.prototype.slice.call(this.target_layer.node().querySelectorAll('path'));
      var nb_ft = features.length;
      var my_region_geom = features.find(function (d) {
        return d.__data__.properties[app.current_config.id_field_geom] === app.current_config.my_region;
      }).__data__.geometry;
      var my_region_centroid = turf.centroid(my_region_geom);
      var result_dist = [];
      for (var i = 0; i < nb_ft; i++) {
        var id = features[i].__data__.properties[app.current_config.id_field_geom];
        var dist = euclidian_distance(my_region_centroid, turf.centroid(features[i].__data__.geometry));
        result_dist.push({ id: id, dist: dist });
      }
      this.dist_to_my_region = result_dist;
    }
  }, {
    key: 'unbindBrushClick',
    value: function unbindBrushClick() {
      this.brush_map = null;
      svg_map.select('.brush_map').remove();
    }
  }]);
  return MapSelect;
}();

function makeSourceSection() {
  var text_zone = d3.select('#svg_legend').append('text').attrs({ y: 32.5, 'text-anchor': 'end' }).style('font-size', '11px').style('font-family', '\'Signika\', sans-serif');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Niveau rÃ©gional : NUTS 1 (version 2016)');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Origine des donnÃ©es : Eurostat, 2016');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Limite administrative: UMS RIATE, CC-BY-SA');
}

function makeMapLegend() {
  var legend_elems = [{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions du filtre de comparaison' }, { color: color_sup, text: 'Rang plus Ã©levÃ© que ma rÃ©gion' }, { color: color_inf, text: 'Rang moins Ã©levÃ© que ma rÃ©gion' }];

  var rect_size = 14;
  var spacing = 4;
  var lgd_height = rect_size + spacing;
  var offset = lgd_height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').append('g').attr('transform', 'translate(50, 40)').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * lgd_height - offset;
    return 'translate(' + [tx, ty] + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attrs({ x: rect_size + spacing, y: rect_size - spacing }).text(function (d) {
    return d.text;
  });
}

var vanillaDataTables = createCommonjsModule(function (module, exports) {
/*!
 *
 * Vanilla-DataTables
 * Copyright (c) 2015-2017 Karl Saunders (http://mobius.ovh)
 * Licensed under MIT (http://www.opensource.org/licenses/mit-license.php)
 *
 * Version: 1.6.2
 *
 */
(function (root, factory) {
    var plugin = "DataTable";

    if (typeof undefined === "function" && undefined.amd) {
        undefined([], factory(plugin));
    } else {
        module.exports = factory(plugin);
    }
})(commonjsGlobal, function (plugin) {
    "use strict";
    var win = window,
        doc = document,
        body = doc.body;

    /**
     * Default configuration
     * @typ {Object}
     */
    var defaultConfig = {
        perPage: 10,
        perPageSelect: [5, 10, 15, 20, 25],

        sortable: true,
        searchable: true,

        // Pagination
        nextPrev: true,
        firstLast: false,
        prevText: "&lsaquo;",
        nextText: "&rsaquo;",
        firstText: "&laquo;",
        lastText: "&raquo;",
        ellipsisText: "&hellip;",
        ascText: "â–´",
        descText: "â–¾",
        truncatePager: true,
        pagerDelta: 2,

        fixedColumns: true,
        fixedHeight: false,

        header: true,
        footer: false,

        // Customise the display text
        labels: {
            placeholder: "Search...", // The search input placeholder
            perPage: "{select} entries per page", // per-page dropdown label
            noRows: "No entries found", // Message shown when there are no search results
            info: "Showing {start} to {end} of {rows} entries" //
        },

        // Customise the layout
        layout: {
            top: "{select}{search}",
            bottom: "{info}{pager}"
        }
    };

    /**
     * Check is item is object
     * @return {Boolean}
     */
    var isObject = function (val) {
        return Object.prototype.toString.call(val) === "[object Object]";
    };

    /**
     * Check is item is array
     * @return {Boolean}
     */
    var isArray = function (val) {
        return Array.isArray(val);
    };

    /**
     * Check for valid JSON string
     * @param  {String}   str
     * @return {Boolean|Array|Object}
     */
    var isJson = function (str) {
        var t = !1;
        try {
            t = JSON.parse(str);
        } catch (e) {
            return !1;
        }
        return !(null === t || (!isArray(t) && !isObject(t))) && t;
    };

    /**
     * Merge objects (reccursive)
     * @param  {Object} r
     * @param  {Object} t
     * @return {Object}
     */
    var extend = function (src, props) {
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var val = props[prop];
                if (val && isObject(val)) {
                    src[prop] = src[prop] || {};
                    extend(src[prop], val);
                } else {
                    src[prop] = val;
                }
            }
        }
        return src;
    };

    /**
     * Iterator helper
     * @param  {(Array|Object)}   arr     Any object, array or array-like collection.
     * @param  {Function}         fn      Callback
     * @param  {Object}           scope   Change the value of this
     * @return {Void}
     */
    var each = function (arr, fn, scope) {
        var n;
        if (isObject(arr)) {
            for (n in arr) {
                if (Object.prototype.hasOwnProperty.call(arr, n)) {
                    fn.call(scope, arr[n], n);
                }
            }
        } else {
            for (n = 0; n < arr.length; n++) {
                fn.call(scope, arr[n], n);
            }
        }
    };

    /**
     * Add event listener to target
     * @param  {Object} el
     * @param  {String} e
     * @param  {Function} fn
     */
    var on = function (el, e, fn) {
        el.addEventListener(e, fn, false);
    };

    /**
     * Create DOM element node
     * @param  {String}   a nodeName
     * @param  {Object}   b properties and attributes
     * @return {Object}
     */
    var createElement = function (a, b) {
        var d = doc.createElement(a);
        if (b && "object" == typeof b) {
            var e;
            for (e in b) {
                if ("html" === e) {
                    d.innerHTML = b[e];
                } else {
                    d.setAttribute(e, b[e]);
                }
            }
        }
        return d;
    };

    var flush = function (el, ie) {
        if (el instanceof NodeList) {
            each(el, function (e) {
                flush(e, ie);
            });
        } else {
            if (ie) {
                while (el.hasChildNodes()) {
                    el.removeChild(el.firstChild);
                }
            } else {
                el.innerHTML = "";
            }
        }
    };

    /**
     * Create button helper
     * @param  {String}   c
     * @param  {Number}   p
     * @param  {String}   t
     * @return {Object}
     */
    var button = function (c, p, t) {
        return createElement("li", {
            class: c,
            html: '<a href="#" data-page="' + p + '">' + t + "</a>"
        });
    };

    /**
     * classList shim
     * @type {Object}
     */
    var classList = {
        add: function (s, a) {
            if (s.classList) {
                s.classList.add(a);
            } else {
                if (!classList.contains(s, a)) {
                    s.className = s.className.trim() + " " + a;
                }
            }
        },
        remove: function (s, a) {
            if (s.classList) {
                s.classList.remove(a);
            } else {
                if (classList.contains(s, a)) {
                    s.className = s.className.replace(
                        new RegExp("(^|\\s)" + a.split(" ").join("|") + "(\\s|$)", "gi"),
                        " "
                    );
                }
            }
        },
        contains: function (s, a) {
            if (s)
                return s.classList ?
                    s.classList.contains(a) :
                    !!s.className &&
                    !!s.className.match(new RegExp("(\\s|^)" + a + "(\\s|$)"));
        }
    };

    /**
     * Bubble sort algorithm
     */
    var sortItems = function (a, b) {
        var c, d;
        if (1 === b) {
            c = 0;
            d = a.length;
        } else {
            if (b === -1) {
                c = a.length - 1;
                d = -1;
            }
        }
        for (var e = !0; e;) {
            e = !1;
            for (var f = c; f != d; f += b) {
                if (a[f + b] && a[f].value > a[f + b].value) {
                    var g = a[f],
                        h = a[f + b],
                        i = g;
                    a[f] = h;
                    a[f + b] = i;
                    e = !0;
                }
            }
        }
        return a;
    };

    /**
     * Pager truncation algorithm
     */
    var truncate = function (a, b, c, d, ellipsis) {
        d = d || 2;
        var j,
            e = 2 * d,
            f = b - d,
            g = b + d,
            h = [],
            i = [];
        if (b < 4 - d + e) {
            g = 3 + e;
        } else if (b > c - (3 - d + e)) {
            f = c - (2 + e);
        }
        for (var k = 1; k <= c; k++) {
            if (1 == k || k == c || (k >= f && k <= g)) {
                var l = a[k - 1];
                classList.remove(l, "active");
                h.push(l);
            }
        }
        each(h, function (c) {
            var d = c.children[0].getAttribute("data-page");
            if (j) {
                var e = j.children[0].getAttribute("data-page");
                if (d - e == 2) i.push(a[e]);
                else if (d - e != 1) {
                    var f = createElement("li", {
                        class: "ellipsis",
                        html: '<a href="#">' + ellipsis + "</a>"
                    });
                    i.push(f);
                }
            }
            i.push(c);
            j = c;
        });

        return i;
    };

    /**
     * Parse data to HTML table
     */
    var dataToTable = function (data) {
        var thead = false,
            tbody = false;

        data = data || this.options.data;

        if (data.headings) {
            thead = createElement("thead");
            var tr = createElement("tr");
            each(data.headings, function (col) {
                var td = createElement("th", {
                    html: col
                });
                tr.appendChild(td);
            });

            thead.appendChild(tr);
        }

        if (data.data && data.data.length) {
            tbody = createElement("tbody");
            each(data.data, function (rows) {
                if (data.headings) {
                    if (data.headings.length !== rows.length) {
                        throw new Error(
                            "The number of rows do not match the number of headings."
                        );
                    }
                }
                var tr = createElement("tr");
                each(rows, function (value) {
                    var td = createElement("td", {
                        html: value
                    });
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
        }

        if (thead) {
            if (this.table.tHead !== null) {
                this.table.removeChild(this.table.tHead);
            }
            this.table.appendChild(thead);
        }

        if (tbody) {
            if (this.table.tBodies.length) {
                this.table.removeChild(this.table.tBodies[0]);
            }
            this.table.appendChild(tbody);
        }
    };

    /**
     * Use moment.js to parse cell contents for sorting
     * @param  {String} content     The datetime string to parse
     * @param  {String} format      The format for moment to use
     * @return {String|Boolean}     Datatime string or false
     */
    var parseDate = function (content, format) {
        var date = false;

        // moment() throws a fit if the string isn't a valid datetime string
        // so we need to supply the format to the constructor (https://momentjs.com/docs/#/parsing/string-format/)

        // Converting to YYYYMMDD ensures we can accurately sort the column numerically

        if (format) {
            switch (format) {
            case "ISO_8601":
                date = moment(content, moment.ISO_8601).format("YYYYMMDD");
                break;
            case "RFC_2822":
                date = moment(content, "ddd, MM MMM YYYY HH:mm:ss ZZ").format("YYYYMMDD");
                break;
            case "MYSQL":
                date = moment(content, "YYYY-MM-DD hh:mm:ss").format("YYYYMMDD");
                break;
            case "UNIX":
                date = moment(content).unix();
                break;
                // User defined format using the data-format attribute or columns[n].format option
            default:
                date = moment(content, format).format("YYYYMMDD");
                break;
            }
        }

        return date;
    };

    /**
     * Columns API
     * @param {Object} instance DataTable instance
     * @param {Mixed} columns  Column index or array of column indexes
     */
    var Columns = function (dt) {
        this.dt = dt;
        return this;
    };

    /**
     * Swap two columns
     * @return {Void}
     */
    Columns.prototype.swap = function (columns) {
        if (columns.length && columns.length === 2) {
            var cols = [];

            // Get the current column indexes
            each(this.dt.headings, function (h, i) {
                cols.push(i);
            });

            var x = columns[0];
            var y = columns[1];
            var b = cols[y];
            cols[y] = cols[x];
            cols[x] = b;

            this.order(cols);
        }
    };

    /**
     * Reorder the columns
     * @return {Array} columns  Array of ordered column indexes
     */
    Columns.prototype.order = function (columns) {

        var a, b, c, d, h, s, cell,
            temp = [
                [],
                [],
                [],
                []
            ],
            dt = this.dt;

        // Order the headings
        each(columns, function (column, x) {
            h = dt.headings[column];
            s = h.getAttribute("data-sortable") !== "false";
            a = h.cloneNode(true);
            a.originalCellIndex = x;
            a.sortable = s;

            temp[0].push(a);

            if (dt.hiddenColumns.indexOf(column) < 0) {
                b = h.cloneNode(true);
                b.originalCellIndex = x;
                b.sortable = s;

                temp[1].push(b);
            }
        });

        // Order the row cells
        each(dt.data, function (row, i) {
            c = row.cloneNode();
            d = row.cloneNode();

            c.dataIndex = d.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                c.searchIndex = d.searchIndex = row.searchIndex;
            }

            // Append the cell to the fragment in the correct order
            each(columns, function (column, x) {
                cell = row.cells[column].cloneNode(true);
                cell.data = row.cells[column].data;
                c.appendChild(cell);

                if (dt.hiddenColumns.indexOf(column) < 0) {
                    cell = row.cells[column].cloneNode(true);
                    cell.data = row.cells[column].data;
                    d.appendChild(cell);
                }
            });

            temp[2].push(c);
            temp[3].push(d);
        });

        dt.headings = temp[0];
        dt.activeHeadings = temp[1];

        dt.data = temp[2];
        dt.activeRows = temp[3];

        // Update
        dt.update();
    };

    /**
     * Hide columns
     * @return {Void}
     */
    Columns.prototype.hide = function (columns) {
        if (columns.length) {
            var dt = this.dt;

            each(columns, function (column) {
                if (dt.hiddenColumns.indexOf(column) < 0) {
                    dt.hiddenColumns.push(column);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Show columns
     * @return {Void}
     */
    Columns.prototype.show = function (columns) {
        if (columns.length) {
            var index, dt = this.dt;

            each(columns, function (column) {
                index = dt.hiddenColumns.indexOf(column);
                if (index > -1) {
                    dt.hiddenColumns.splice(index, 1);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Check column(s) visibility
     * @return {Boolean}
     */
    Columns.prototype.visible = function (columns) {
        var cols, dt = this.dt;

        columns = columns || dt.headings.map(function (th) {
            return th.originalCellIndex;
        });

        if (!isNaN(columns)) {
            cols = dt.hiddenColumns.indexOf(columns) < 0;
        } else if (isArray(columns)) {
            cols = [];
            each(columns, function (column) {
                cols.push(dt.hiddenColumns.indexOf(column) < 0);
            });
        }

        return cols;
    };

    /**
     * Add a new column
     * @param {Object} data
     */
    Columns.prototype.add = function (data) {
        var that = this,
            td, th = document.createElement("th");

        if (!this.dt.headings.length) {
            this.dt.insert({
                headings: [data.heading],
                data: data.data.map(function (i) {
                    return [i];
                })
            });
            this.rebuild();
            return;
        }

        if (!this.dt.hiddenHeader) {
            if (data.heading.nodeName) {
                th.appendChild(data.heading);
            } else {
                th.innerHTML = data.heading;
            }
        } else {
            th.innerHTML = "";
        }

        this.dt.headings.push(th);

        each(this.dt.data, function (row, i) {
            if (data.data[i]) {
                td = document.createElement("td");

                if (data.data[i].nodeName) {
                    td.appendChild(data.data[i]);
                } else {
                    td.innerHTML = data.data[i];
                }

                td.data = td.innerHTML;

                if (data.render) {
                    td.innerHTML = data.render.call(that, td.data, td, row);
                }

                row.appendChild(td);
            }
        });

        if (data.type) {
            th.setAttribute("data-type", data.type);
        }
        if (data.format) {
            th.setAttribute("data-format", data.format);
        }

        if (data.hasOwnProperty("sortable")) {
            th.sortable = data.sortable;
            th.setAttribute("data-sortable", data.sortable === true ? "true" : "false");
        }

        this.rebuild();

        this.dt.renderHeader();
    };

    /**
     * Remove column(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Columns.prototype.remove = function (select) {
        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (column) {
                this.remove(column);
            }, this);
        } else {
            this.dt.headings.splice(select, 1);

            each(this.dt.data, function (row) {
                row.removeChild(row.cells[select]);
            });
        }

        this.rebuild();
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    Columns.prototype.sort = function (column, direction, init) {

        var dt = this.dt;

        // Check column is present
        if (dt.hasHeadings && (column < 1 || column > dt.activeHeadings.length)) {
            return false;
        }

        dt.sorting = true;

        // Convert to zero-indexed
        column = column - 1;

        var dir,
            rows = dt.data,
            alpha = [],
            numeric = [],
            a = 0,
            n = 0,
            th = dt.activeHeadings[column];

        column = th.originalCellIndex;

        each(rows, function (tr) {
            var cell = tr.cells[column];
            var content = cell.data;
            var num = content.replace(/(\$|\,|\s|%)/g, "");

            // Check for date format and moment.js
            if (th.getAttribute("data-type") === "date" && win.moment) {
                var format = false,
                    formatted = th.hasAttribute("data-format");

                if (formatted) {
                    format = th.getAttribute("data-format");
                }

                num = parseDate(content, format);
            }

            if (parseFloat(num) == num) {
                numeric[n++] = {
                    value: Number(num),
                    row: tr
                };
            } else {
                alpha[a++] = {
                    value: content,
                    row: tr
                };
            }
        });

        /* Sort according to direction (ascending or descending) */
        var top, btm;
        if (classList.contains(th, "asc") || direction == "asc") {
            top = sortItems(alpha, -1);
            btm = sortItems(numeric, -1);
            dir = "descending";
            classList.remove(th, "asc");
            classList.add(th, "desc");
        } else {
            top = sortItems(numeric, 1);
            btm = sortItems(alpha, 1);
            dir = "ascending";
            classList.remove(th, "desc");
            classList.add(th, "asc");
        }

        /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */
        if (dt.lastTh && th != dt.lastTh) {
            classList.remove(dt.lastTh, "desc");
            classList.remove(dt.lastTh, "asc");
        }

        dt.lastTh = th;

        /* Reorder the table */
        rows = top.concat(btm);

        dt.data = [];
        var indexes = [];

        each(rows, function (v, i) {
            dt.data.push(v.row);

            if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {
                indexes.push(i);
            }
        }, dt);

        dt.searchData = indexes;

        this.rebuild();

        dt.update();

        if (!init) {
            dt.emit("datatable.sort", column, dir);
        }
    };

    /**
     * Rebuild the columns
     * @return {Void}
     */
    Columns.prototype.rebuild = function () {
        var a, b, c, d, dt = this.dt,
            temp = [];

        dt.activeRows = [];
        dt.activeHeadings = [];

        each(dt.headings, function (th, i) {
            th.originalCellIndex = i;
            th.sortable = th.getAttribute("data-sortable") !== "false";
            if (dt.hiddenColumns.indexOf(i) < 0) {
                dt.activeHeadings.push(th);
            }
        }, this);

        // Loop over the rows and reorder the cells
        each(dt.data, function (row, i) {
            a = row.cloneNode();
            b = row.cloneNode();

            a.dataIndex = b.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                a.searchIndex = b.searchIndex = row.searchIndex;
            }

            // Append the cell to the fragment in the correct order
            each(row.cells, function (cell) {
                c = cell.cloneNode(true);
                c.data = cell.data;
                a.appendChild(c);

                if (dt.hiddenColumns.indexOf(cell.cellIndex) < 0) {
                    d = cell.cloneNode(true);
                    d.data = cell.data;
                    b.appendChild(d);
                }
            });

            // Append the fragment with the ordered cells
            temp.push(a);
            dt.activeRows.push(b);
        });

        dt.data = temp;

        dt.update();
    };

    /**
     * Rows API
     * @param {Object} instance DataTable instance
     * @param {Array} rows
     */
    var Rows = function (dt, rows) {
        this.dt = dt;
        this.rows = rows;

        return this;
    };

    /**
     * Build a new row
     * @param  {Array} row
     * @return {HTMLElement}
     */
    Rows.prototype.build = function (row) {
        var td, tr = createElement("tr");

        var headings = this.dt.headings;

        if (!headings.length) {
            headings = row.map(function () {
                return "";
            });
        }

        each(headings, function (h, i) {
            td = createElement("td");

            // Fixes #29
            if (!row[i] && !row[i].length) {
                row[i] = "";
            }

            td.innerHTML = row[i];

            td.data = row[i];

            tr.appendChild(td);
        });

        return tr;
    };

    Rows.prototype.render = function (row) {
        return row;
    };

    /**
     * Add new row
     * @param {Array} select
     */
    Rows.prototype.add = function (data) {

        if (isArray(data)) {
            var dt = this.dt;
            // Check for multiple rows
            if (isArray(data[0])) {
                each(data, function (row, i) {
                    dt.data.push(this.build(row));
                }, this);
            } else {
                dt.data.push(this.build(data));
            }

            // We may have added data to an empty table
            if ( dt.data.length ) {
                dt.hasRows = true;
            }


            this.update();

            dt.columns().rebuild();
        }
    };

    /**
     * Remove row(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Rows.prototype.remove = function (select) {

        var dt = this.dt;

        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (row, i) {
                dt.data.splice(row, 1);
            });
        } else {
            dt.data.splice(select, 1);
        }

        this.update();
        dt.columns().rebuild();
    };

    /**
     * Update row indexes
     * @return {Void}
     */
    Rows.prototype.update = function () {
        each(this.dt.data, function (row, i) {
            row.dataIndex = i;
        });
    };

    ////////////////////
    //    MAIN LIB    //
    ////////////////////

    var DataTable = function (table, options) {
        this.initialized = false;

        // user options
        this.options = extend(defaultConfig, options);

        if (typeof table === "string") {
            var selector = table;
            table = document.querySelector(table);

            if (!table) {
                throw new Error("The element '" + selector + "' can not be found.");
            }
        }

        if (table.tagName.toLowerCase() !== "table") {
            throw new Error("The selected element is not a table.");
        }

        this.initialLayout = table.innerHTML;
        this.initialSortable = this.options.sortable;

        // Disable manual sorting if no header is present (#4)
        if (!this.options.header) {
            this.options.sortable = false;
        }

        if (table.tHead === null) {
            if (!this.options.data ||
                (this.options.data && !this.options.data.headings)
            ) {
                this.options.sortable = false;
            }
        }

        if (table.tBodies.length && !table.tBodies[0].rows.length) {
            if (this.options.data) {
                if (!this.options.data.data) {
                    throw new Error(
                        "You seem to be using the data option, but you've not defined any rows."
                    );
                }
            }
        }

        this.table = table;

        this.init();
    };

    /**
     * Add custom property or method to extend DataTable
     * @param  {String} prop    - Method name or property
     * @param  {Mixed} val      - Function or property value
     * @return {Void}
     */
    DataTable.extend = function(prop, val) {
        if (typeof val === "function") {
            DataTable.prototype[prop] = val;
        } else {
            DataTable[prop] = val;
        }
    };

    var proto = DataTable.prototype;

    /**
     * Initialize the instance
     * @param  {Object} options
     * @return {Void}
     */
    proto.init = function (options) {
        if (this.initialized || classList.contains(this.table, "dataTable-table")) {
            return false;
        }

        var that = this;

        this.options = extend(this.options, options || {});

        // IE detection
        this.isIE = !!/(msie|trident)/i.test(navigator.userAgent);

        this.currentPage = 1;
        this.onFirstPage = true;

        this.hiddenColumns = [];
        this.columnRenderers = [];
        this.selectedColumns = [];

        this.render();

        setTimeout(function () {
            that.emit("datatable.init");
            that.initialized = true;

            if (that.options.plugins) {
                each(that.options.plugins, function(options, plugin) {
                    if (that[plugin] && typeof that[plugin] === "function") {
                        that[plugin] = that[plugin](options, {
                            extend: extend,
                            classList: classList,
                            createElement: createElement
                        });

                        // Init plugin
                        if (options.enabled && that[plugin].init && typeof that[plugin].init === "function") {
                            that[plugin].init();
                        }
                    }
                });
            }
        }, 10);
    };

    /**
     * Render the instance
     * @param  {String} type
     * @return {Void}
     */
    proto.render = function (type) {
        if (type) {
            switch (type) {
            case "page":
                this.renderPage();
                break;
            case "pager":
                this.renderPager();
                break;
            case "header":
                this.renderHeader();
                break;
            }

            return false;
        }

        var that = this,
            o = that.options,
            template = "";

        // Convert data to HTML
        if (o.data) {
            dataToTable.call(that);
        }

        if (o.ajax) {
            var ajax = o.ajax;
            var xhr = new XMLHttpRequest();

            var xhrProgress = function (e) {
                that.emit("datatable.ajax.progress", e, xhr);
            };

            var xhrLoad = function (e) {
                if (xhr.readyState === 4) {
                    that.emit("datatable.ajax.loaded", e, xhr);

                    if (xhr.status === 200) {
                        var obj = {};
                        obj.data = ajax.load ? ajax.load.call(that, xhr) : xhr.responseText;

                        obj.type = "json";

                        if (ajax.content && ajax.content.type) {
                            obj.type = ajax.content.type;

                            obj = extend(obj, ajax.content);
                        }

                        that.import(obj);

                        that.setColumns(true);

                        that.emit("datatable.ajax.success", e, xhr);
                    } else {
                        that.emit("datatable.ajax.error", e, xhr);
                    }
                }
            };

            var xhrFailed = function (e) {
                that.emit("datatable.ajax.error", e, xhr);
            };

            var xhrCancelled = function (e) {
                that.emit("datatable.ajax.abort", e, xhr);
            };

            on(xhr, "progress", xhrProgress);
            on(xhr, "load", xhrLoad);
            on(xhr, "error", xhrFailed);
            on(xhr, "abort", xhrCancelled);

            that.emit("datatable.ajax.loading", xhr);

            xhr.open("GET", typeof ajax === "string" ? o.ajax : o.ajax.url);
            xhr.send();
        }

        // Store references
        that.body = that.table.tBodies[0];
        that.head = that.table.tHead;
        that.foot = that.table.tFoot;

        if (!that.body) {
            that.body = createElement("tbody");

            that.table.appendChild(that.body);
        }

        that.hasRows = that.body.rows.length > 0;

        // Make a tHead if there isn't one (fixes #8)
        if (!that.head) {
            var h = createElement("thead");
            var t = createElement("tr");

            if (that.hasRows) {
                each(that.body.rows[0].cells, function () {
                    t.appendChild(createElement("th"));
                });

                h.appendChild(t);
            }

            that.head = h;

            that.table.insertBefore(that.head, that.body);

            that.hiddenHeader = !o.ajax;
        }

        that.headings = [];
        that.hasHeadings = that.head.rows.length > 0;

        if (that.hasHeadings) {
            that.header = that.head.rows[0];
            that.headings = [].slice.call(that.header.cells);
        }

        // Header
        if (!o.header) {
            if (that.head) {
                that.table.removeChild(that.table.tHead);
            }
        }

        // Footer
        if (o.footer) {
            if (that.head && !that.foot) {
                that.foot = createElement("tfoot", {
                    html: that.head.innerHTML
                });
                that.table.appendChild(that.foot);
            }
        } else {
            if (that.foot) {
                that.table.removeChild(that.table.tFoot);
            }
        }

        // Build
        that.wrapper = createElement("div", {
            class: "dataTable-wrapper dataTable-loading"
        });

        // Template for custom layouts
        template += "<div class='dataTable-top'>";
        template += o.layout.top;
        template += "</div>";
        template += "<div class='dataTable-container'></div>";
        template += "<div class='dataTable-bottom'>";
        template += o.layout.bottom;
        template += "</div>";

        // Info placement
        template = template.replace("{info}", "<div class='dataTable-info'></div>");

        // Per Page Select
        if (o.perPageSelect) {
            var wrap = "<div class='dataTable-dropdown'><label>";
            wrap += o.labels.perPage;
            wrap += "</label></div>";

            // Create the select
            var select = createElement("select", {
                class: "dataTable-selector"
            });

            // Create the options
            each(o.perPageSelect, function (val) {
                var selected = val === o.perPage;
                var option = new Option(val, val, selected, selected);
                select.add(option);
            });

            // Custom label
            wrap = wrap.replace("{select}", select.outerHTML);

            // Selector placement
            template = template.replace("{select}", wrap);
        } else {
            template = template.replace("{select}", "");
        }

        // Searchable
        if (o.searchable) {
            var form =
                "<div class='dataTable-search'><input class='dataTable-input' placeholder='" +
                o.labels.placeholder +
                "' type='text'></div>";

            // Search input placement
            template = template.replace("{search}", form);
        } else {
            template = template.replace("{search}", "");
        }

        if (that.hasHeadings) {
            // Sortable
            this.render("header");
        }

        // Add table class
        classList.add(that.table, "dataTable-table");

        // Paginator
        var w = createElement("div", {
            class: "dataTable-pagination"
        });
        var paginator = createElement("ul");
        w.appendChild(paginator);

        // Pager(s) placement
        template = template.replace(/\{pager\}/g, w.outerHTML);

        that.wrapper.innerHTML = template;

        that.container = that.wrapper.querySelector(".dataTable-container");

        that.pagers = that.wrapper.querySelectorAll(".dataTable-pagination");

        that.label = that.wrapper.querySelector(".dataTable-info");

        // Insert in to DOM tree
        that.table.parentNode.replaceChild(that.wrapper, that.table);
        that.container.appendChild(that.table);

        // Store the table dimensions
        that.rect = that.table.getBoundingClientRect();

        // Convert rows to array for processing
        that.data = [].slice.call(that.body.rows);
        that.activeRows = that.data.slice();
        that.activeHeadings = that.headings.slice();

        // Update
        that.update();

        if (!o.ajax) {
            that.setColumns();
        }

        // Fix height
        this.fixHeight();

        // Fix columns
        that.fixColumns();

        // Class names
        if (!o.header) {
            classList.add(that.wrapper, "no-header");
        }

        if (!o.footer) {
            classList.add(that.wrapper, "no-footer");
        }

        if (o.sortable) {
            classList.add(that.wrapper, "sortable");
        }

        if (o.searchable) {
            classList.add(that.wrapper, "searchable");
        }

        if (o.fixedHeight) {
            classList.add(that.wrapper, "fixed-height");
        }

        if (o.fixedColumns) {
            classList.add(that.wrapper, "fixed-columns");
        }

        that.bindEvents();
    };

    /**
     * Render the page
     * @return {Void}
     */
    proto.renderPage = function () {
        if (this.hasRows && this.totalPages) {
            if (this.currentPage > this.totalPages) {
                this.currentPage = 1;
            }

            // Use a fragment to limit touching the DOM
            var index = this.currentPage - 1,
                frag = doc.createDocumentFragment();

            if (this.hasHeadings) {
                flush(this.header, this.isIE);

                each(this.activeHeadings, function (th) {
                    this.header.appendChild(th);
                }, this);
            }

            each(this.pages[index], function (row) {
                frag.appendChild(this.rows().render(row));
            }, this);

            this.clear(frag);

            this.onFirstPage = this.currentPage === 1;
            this.onLastPage = this.currentPage === this.lastPage;
        } else {
            this.clear();
        }

        // Update the info
        var current = 0,
            f = 0,
            t = 0,
            items;

        if (this.totalPages) {
            current = this.currentPage - 1;
            f = current * this.options.perPage;
            t = f + this.pages[current].length;
            f = f + 1;
            items = !!this.searching ? this.searchData.length : this.data.length;
        }

        if (this.label && this.options.labels.info.length) {
            // CUSTOM LABELS
            var string = this.options.labels.info
                .replace("{start}", f)
                .replace("{end}", t)
                .replace("{page}", this.currentPage)
                .replace("{pages}", this.totalPages)
                .replace("{rows}", items);

            this.label.innerHTML = items ? string : "";
        }

        if (this.currentPage == 1) {
            this.fixHeight();
        }
    };

    /**
     * Render the pager(s)
     * @return {Void}
     */
    proto.renderPager = function () {
        flush(this.pagers, this.isIE);

        if (this.totalPages > 1) {
            var c = "pager",
                frag = doc.createDocumentFragment(),
                prev = this.onFirstPage ? 1 : this.currentPage - 1,
                next = this.onlastPage ? this.totalPages : this.currentPage + 1;

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, 1, this.options.firstText));
            }

            // prev button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, prev, this.options.prevText));
            }

            var pager = this.links;

            // truncate the links
            if (this.options.truncatePager) {
                pager = truncate(
                    this.links,
                    this.currentPage,
                    this.pages.length,
                    this.options.pagerDelta,
                    this.options.ellipsisText
                );
            }

            // active page link
            classList.add(this.links[this.currentPage - 1], "active");

            // append the links
            each(pager, function (p) {
                classList.remove(p, "active");
                frag.appendChild(p);
            });

            classList.add(this.links[this.currentPage - 1], "active");

            // next button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, next, this.options.nextText));
            }

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, this.totalPages, this.options.lastText));
            }

            // We may have more than one pager
            each(this.pagers, function (pager) {
                pager.appendChild(frag.cloneNode(true));
            });
        }
    };

    /**
     * Render the header
     * @return {Void}
     */
    proto.renderHeader = function () {
        var that = this;

        that.labels = [];

        if (that.headings && that.headings.length) {
            each(that.headings, function (th, i) {

                that.labels[i] = th.textContent;

                if (classList.contains(th.firstElementChild, "dataTable-sorter")) {
                    th.innerHTML = th.firstElementChild.innerHTML;
                }

                th.sortable = th.getAttribute("data-sortable") !== "false";

                th.originalCellIndex = i;
                if (that.options.sortable && th.sortable) {
                    var link = createElement("a", {
                        href: "#",
                        class: "dataTable-sorter",
                        html: th.innerHTML
                    });

                    th.innerHTML = "";
                    th.setAttribute("data-sortable", "");
                    th.appendChild(link);
                }
            });
        }

        that.fixColumns();
    };

    /**
     * Bind event listeners
     * @return {[type]} [description]
     */
    proto.bindEvents = function () {
        var that = this,
            o = that.options;

        // Per page selector
        if (o.perPageSelect) {
            var selector = that.wrapper.querySelector(".dataTable-selector");
            if (selector) {
                // Change per page
                on(selector, "change", function (e) {
                    o.perPage = parseInt(this.value, 10);
                    that.update();

                    that.fixHeight();

                    that.emit("datatable.perpage", o.perPage);
                });
            }
        }

        // Search input
        if (o.searchable) {
            that.input = that.wrapper.querySelector(".dataTable-input");
            if (that.input) {
                on(that.input, "keyup", function (e) {
                    that.search(this.value);
                });
            }
        }

        // Pager(s) / sorting
        on(that.wrapper, "click", function (e) {
            var t = e.target;
            if (t.nodeName.toLowerCase() === "a") {
                if (t.hasAttribute("data-page")) {
                    that.page(t.getAttribute("data-page"));
                    e.preventDefault();
                } else if (
                    o.sortable &&
                    classList.contains(t, "dataTable-sorter") &&
                    t.parentNode.getAttribute("data-sortable") != "false"
                ) {
                    that.columns().sort(that.activeHeadings.indexOf(t.parentNode) + 1);
                    e.preventDefault();
                }
            }
        });
    };

    /**
     * Set up columns
     * @return {[type]} [description]
     */
    proto.setColumns = function (ajax) {

        var that = this;

        if (!ajax) {
            each(that.data, function (row) {
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });
        }

        // Check for the columns option
        if (that.options.columns && that.headings.length) {

            each(that.options.columns, function (data) {

                // convert single column selection to array
                if (!isArray(data.select)) {
                    data.select = [data.select];
                }

                if (data.hasOwnProperty("render") && typeof data.render === "function") {
                    that.selectedColumns = that.selectedColumns.concat(data.select);

                    that.columnRenderers.push({
                        columns: data.select,
                        renderer: data.render
                    });
                }

                // Add the data attributes to the th elements
                each(data.select, function (column) {
                    var th = that.headings[column];
                    if (data.type) {
                        th.setAttribute("data-type", data.type);
                    }
                    if (data.format) {
                        th.setAttribute("data-format", data.format);
                    }
                    if (data.hasOwnProperty("sortable")) {
                        th.setAttribute("data-sortable", data.sortable);
                    }

                    if (data.hasOwnProperty("hidden")) {
                        if (data.hidden !== false) {
                            that.columns(column).hide();
                        }
                    }

                    if (data.hasOwnProperty("sort") && data.select.length === 1) {
                        that.columns().sort(data.select[0] + 1, data.sort, true);
                    }
                });
            });
        }

        if (that.hasRows) {
            each(that.data, function (row, i) {
                row.dataIndex = i;
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });

            if (that.selectedColumns.length) {
                each(that.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (that.selectedColumns.indexOf(i) > -1) {
                            each(that.columnRenderers, function (o) {
                                if (o.columns.indexOf(i) > -1) {
                                    cell.innerHTML = o.renderer.call(that, cell.data, cell, row);
                                }
                            });
                        }
                    });
                });
            }

            that.columns().rebuild();
        }

        that.render("header");
    };

    /**
     * Destroy the instance
     * @return {void}
     */
    proto.destroy = function () {
        this.table.innerHTML = this.initialLayout;

        // Remove the className
        classList.remove(this.table, "dataTable-table");

        // Remove the containers
        this.wrapper.parentNode.replaceChild(this.table, this.wrapper);

        this.initialized = false;
    };

    /**
     * Update the instance
     * @return {Void}
     */
    proto.update = function () {
        this.paginate(this);
        this.render("page");

        this.links = [];

        var i = this.pages.length;
        while (i--) {
            var num = i + 1;
            this.links[i] = button(i === 0 ? "active" : "", num, num);
        }

        this.sorting = false;

        this.render("pager");

        this.rows().update();

        this.emit("datatable.update");
    };

    /**
     * Sort rows into pages
     * @return {Number}
     */
    proto.paginate = function () {
        var perPage = this.options.perPage,
            rows = this.activeRows;

        if (this.searching) {
            rows = [];

            each(this.searchData, function (index) {
                rows.push(this.activeRows[index]);
            }, this);
        }

        // Check for hidden columns
        this.pages = rows
            .map(function (tr, i) {
                return i % perPage === 0 ? rows.slice(i, i + perPage) : null;
            })
            .filter(function (page) {
                return page;
            });

        this.totalPages = this.lastPage = this.pages.length;

        return this.totalPages;
    };

    /**
     * Fix column widths
     * @return {Void}
     */
    proto.fixColumns = function () {

        if (this.options.fixedColumns && this.activeHeadings && this.activeHeadings.length) {

            var cells,
                hd = false;

            this.columnWidths = [];

            // If we have headings we need only set the widths on them
            // otherwise we need a temp header and the widths need applying to all cells
            if (this.table.tHead) {
                // Reset widths
                each(this.activeHeadings, function (cell) {
                    cell.style.width = "";
                }, this);

                each(this.activeHeadings, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    cell.style.width = w + "%";
                    this.columnWidths[i] = ow;
                }, this);
            } else {
                cells = [];

                // Make temperary headings
                hd = createElement("thead");
                var r = createElement("tr");
                var c = this.table.tBodies[0].rows[0].cells;
                each(c, function () {
                    var th = createElement("th");
                    r.appendChild(th);
                    cells.push(th);
                });

                hd.appendChild(r);
                this.table.insertBefore(hd, this.body);

                var widths = [];
                each(cells, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    widths.push(w);
                    this.columnWidths[i] = ow;
                }, this);

                each(this.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (this.columns(cell.cellIndex).visible())
                            cell.style.width = widths[i] + "%";
                    }, this);
                }, this);

                // Discard the temp header
                this.table.removeChild(hd);
            }
        }
    };

    /**
     * Fix the container height;
     * @return {Void}
     */
    proto.fixHeight = function () {
        if (this.options.fixedHeight) {
            this.container.style.height = null;
            this.rect = this.container.getBoundingClientRect();
            this.container.style.height = this.rect.height + "px";
        }
    };

    /**
     * Perform a search of the data set
     * @param  {string} query
     * @return {void}
     */
    proto.search = function (query) {
        if (!this.hasRows) return false;

        var that = this;

        query = query.toLowerCase();

        this.currentPage = 1;
        this.searching = true;
        this.searchData = [];

        if (!query.length) {
            this.searching = false;
            this.update();
            this.emit("datatable.search", query, this.searchData);
            classList.remove(this.wrapper, "search-results");
            return false;
        }

        this.clear();

        each(this.data, function (row, idx) {
            var inArray = this.searchData.indexOf(row) > -1;

            // https://github.com/Mobius1/Vanilla-DataTables/issues/12
            var doesQueryMatch = query.split(" ").reduce(function (bool, word) {
                var includes = false;

                for (var x = 0; x < row.cells.length; x++) {
                    if (
                        row.cells[x].textContent.toLowerCase().indexOf(word) > -1 &&
                        that.columns(row.cells[x].cellIndex).visible()
                    ) {
                        includes = true;
                        break;
                    }
                }

                return bool && includes;
            }, true);

            if (doesQueryMatch && !inArray) {
                row.searchIndex = idx;
                this.searchData.push(idx);
            } else {
                row.searchIndex = null;
            }
        }, this);

        classList.add(this.wrapper, "search-results");

        if (!that.searchData.length) {
            classList.remove(that.wrapper, "search-results");

            that.setMessage(that.options.labels.noRows);
        } else {
            that.update();
        }

        this.emit("datatable.search", query, this.searchData);
    };

    /**
     * Change page
     * @param  {int} page
     * @return {void}
     */
    proto.page = function (page) {
        // We don't want to load the current page again.
        if (page == this.currentPage) {
            return false;
        }

        if (!isNaN(page)) {
            this.currentPage = parseInt(page, 10);
        }

        if (page > this.pages.length || page < 0) {
            return false;
        }

        this.render("page");
        this.render("pager");

        this.emit("datatable.page", page);
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    proto.sortColumn = function (column, direction) {
        // Use columns API until sortColumn method is removed
        this.columns().sort(column, direction);
    };

    /**
     * Add new row data
     * @param {object} data
     */
    proto.insert = function (data) {

        var that = this,
            rows = [];
        if (isObject(data)) {
            if (data.headings) {
                if (!that.hasHeadings && !that.hasRows) {
                    var tr = createElement("tr"),
                        th;
                    each(data.headings, function (heading) {
                        th = createElement("th", {
                            html: heading
                        });

                        tr.appendChild(th);
                    });
                    that.head.appendChild(tr);

                    that.header = tr;
                    that.headings = [].slice.call(tr.cells);
                    that.hasHeadings = true;

                    // Re-enable sorting if it was disabled due
                    // to missing header
                    that.options.sortable = that.initialSortable;

                    // Allow sorting on new header
                    that.render("header");
                }
            }

            if (data.data && isArray(data.data)) {
                rows = data.data;
            }
        } else if (isArray(data)) {
            each(data, function (row) {
                var r = [];
                each(row, function (cell, heading) {

                    var index = that.labels.indexOf(heading);

                    if (index > -1) {
                        r[index] = cell;
                    }
                });
                rows.push(r);
            });
        }

        if (rows.length) {
            that.rows().add(rows);

            that.hasRows = true;
        }

        that.update();

        that.fixColumns();
    };

    /**
     * Refresh the instance
     * @return {void}
     */
    proto.refresh = function () {
        if (this.options.searchable) {
            this.input.value = "";
            this.searching = false;
        }
        this.currentPage = 1;
        this.onFirstPage = true;
        this.update();

        this.emit("datatable.refresh");
    };

    /**
     * Truncate the table
     * @param  {mixes} html - HTML string or HTMLElement
     * @return {void}
     */
    proto.clear = function (html) {
        if (this.body) {
            flush(this.body, this.isIE);
        }

        var parent = this.body;
        if (!this.body) {
            parent = this.table;
        }

        if (html) {
            if (typeof html === "string") {
                var frag = doc.createDocumentFragment();
                frag.innerHTML = html;
            }

            parent.appendChild(html);
        }
    };

    /**
     * Export table to various formats (csv, txt or sql)
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.export = function (options) {
        if (!this.hasHeadings && !this.hasRows) return false;

        var headers = this.activeHeadings,
            rows = [],
            arr = [],
            i,
            x,
            str,
            link;

        var defaults = {
            download: true,
            skipColumn: [],

            // csv
            lineDelimiter: "\n",
            columnDelimiter: ",",

            // sql
            tableName: "myTable",

            // json
            replacer: null,
            space: 4
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        var o = extend(defaults, options);

        if (o.type) {
            if (o.type === "txt" || o.type === "csv") {
                // Include headings
                rows[0] = this.header;
            }

            // Selection or whole table
            if (o.selection) {
                // Page number
                if (!isNaN(o.selection)) {
                    rows = rows.concat(this.pages[o.selection - 1]);
                } else if (isArray(o.selection)) {
                    // Array of page numbers
                    for (i = 0; i < o.selection.length; i++) {
                        rows = rows.concat(this.pages[o.selection[i] - 1]);
                    }
                }
            } else {
                rows = rows.concat(this.activeRows);
            }

            // Only proceed if we have data
            if (rows.length) {
                if (o.type === "txt" || o.type === "csv") {
                    str = "";

                    for (i = 0; i < rows.length; i++) {
                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += rows[i].cells[x].textContent + o.columnDelimiter;
                            }
                        }
                        // Remove trailing column delimiter
                        str = str.trim().substring(0, str.length - 1);

                        // Apply line delimiter
                        str += o.lineDelimiter;
                    }

                    // Remove trailing line delimiter
                    str = str.trim().substring(0, str.length - 1);

                    if (o.download) {
                        str = "data:text/csv;charset=utf-8," + str;
                    }
                } else if (o.type === "sql") {
                    // Begin INSERT statement
                    str = "INSERT INTO `" + o.tableName + "` (";

                    // Convert table headings to column names
                    for (i = 0; i < headers.length; i++) {
                        // Check for column skip and column visibility
                        if (
                            o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                            this.columns(headers[i].originalCellIndex).visible()
                        ) {
                            str += "`" + headers[i].textContent + "`,";
                        }
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Begin VALUES
                    str += ") VALUES ";

                    // Iterate rows and convert cell data to column values
                    for (i = 0; i < rows.length; i++) {
                        str += "(";

                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += '"' + rows[i].cells[x].textContent + '",';
                            }
                        }

                        // Remove trailing comma
                        str = str.trim().substring(0, str.length - 1);

                        // end VALUES
                        str += "),";
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Add trailing colon
                    str += ";";

                    if (o.download) {
                        str = "data:application/sql;charset=utf-8," + str;
                    }
                } else if (o.type === "json") {
                    // Iterate rows
                    for (x = 0; x < rows.length; x++) {
                        arr[x] = arr[x] || {};
                        // Iterate columns
                        for (i = 0; i < headers.length; i++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                                this.columns(headers[i].originalCellIndex).visible()
                            ) {
                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent;
                            }
                        }
                    }

                    // Convert the array of objects to JSON string
                    str = JSON.stringify(arr, o.replacer, o.space);

                    if (o.download) {
                        str = "data:application/json;charset=utf-8," + str;
                    }
                }

                // Download
                if (o.download) {
                    // Filename
                    o.filename = o.filename || "datatable_export";
                    o.filename += "." + o.type;

                    str = encodeURI(str);

                    // Create a link to trigger the download
                    link = document.createElement("a");
                    link.href = str;
                    link.download = o.filename;

                    // Append the link
                    body.appendChild(link);

                    // Trigger the download
                    link.click();

                    // Remove the link
                    body.removeChild(link);
                }

                return str;
            }
        }

        return false;
    };

    /**
     * Import data to the table
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.import = function (options) {
        var obj = false;
        var defaults = {
            // csv
            lineDelimiter: "\n",
            columnDelimiter: ","
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        options = extend(defaults, options);

        if (options.data.length || isObject(options.data)) {
            // Import CSV
            if (options.type === "csv") {
                obj = {
                    data: []
                };

                // Split the string into rows
                var rows = options.data.split(options.lineDelimiter);

                if (rows.length) {

                    if (options.headings) {
                        obj.headings = rows[0].split(options.columnDelimiter);

                        rows.shift();
                    }

                    each(rows, function (row, i) {
                        obj.data[i] = [];

                        // Split the rows into values
                        var values = row.split(options.columnDelimiter);

                        if (values.length) {
                            each(values, function (value) {
                                obj.data[i].push(value);
                            });
                        }
                    });
                }
            } else if (options.type === "json") {
                var json = isJson(options.data);

                // Valid JSON string
                if (json) {
                    obj = {
                        headings: [],
                        data: []
                    };

                    each(json, function (data, i) {
                        obj.data[i] = [];
                        each(data, function (value, column) {
                            if (obj.headings.indexOf(column) < 0) {
                                obj.headings.push(column);
                            }

                            obj.data[i].push(value);
                        });
                    });
                } else {
                    console.warn("That's not valid JSON!");
                }
            }

            if (isObject(options.data)) {
                obj = options.data;
            }

            if (obj) {
                // Add the rows
                this.insert(obj);
            }
        }

        return false;
    };
    /**
     * Print the table
     * @return {void}
     */
    proto.print = function () {
        var headings = this.activeHeadings;
        var rows = this.activeRows;
        var table = createElement("table");
        var thead = createElement("thead");
        var tbody = createElement("tbody");

        var tr = createElement("tr");
        each(headings, function (th) {
            tr.appendChild(
                createElement("th", {
                    html: th.textContent
                })
            );
        });

        thead.appendChild(tr);

        each(rows, function (row) {
            var tr = createElement("tr");
            each(row.cells, function (cell) {
                tr.appendChild(
                    createElement("td", {
                        html: cell.textContent
                    })
                );
            });
            tbody.appendChild(tr);
        });

        table.appendChild(thead);
        table.appendChild(tbody);

        // Open new window
        var w = win.open();

        // Append the table to the body
        w.document.body.appendChild(table);

        // Print
        w.print();
    };

    /**
     * Show a message in the table
     * @param {string} message
     */
    proto.setMessage = function (message) {
        var colspan = 1;

        if (this.hasRows) {
            colspan = this.data[0].cells.length;
        }

        this.clear(
            createElement("tr", {
                html: '<td class="dataTables-empty" colspan="' +
                    colspan +
                    '">' +
                    message +
                    "</td>"
            })
        );
    };

    /**
     * Columns API access
     * @return {Object} new Columns instance
     */
    proto.columns = function (columns) {
        return new Columns(this, columns);
    };

    /**
     * Rows API access
     * @return {Object} new Rows instance
     */
    proto.rows = function (rows) {
        return new Rows(this, rows);
    };

    /**
     * Add custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.on = function (event, callback) {
        this.events = this.events || {};
        this.events[event] = this.events[event] || [];
        this.events[event].push(callback);
    };

    /**
     * Remove custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.off = function (event, callback) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        this.events[event].splice(this.events[event].indexOf(callback), 1);
    };

    /**
     * Fire custom event
     * @param  {String} event
     * @return {Void}
     */
    proto.emit = function (event) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        for (var i = 0; i < this.events[event].length; i++) {
            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
        }
    };

    return DataTable;
});
});

function createTableDOM(data, opts, config) {
  var num = config.num,
      denum = config.denum,
      ratio = config.ratio,
      my_region = config.my_region;

  var options = opts || {};
  options.id = options.id || 'myTable';
  var doc = document;
  var nb_features = data.length;
  var column_names = Object.getOwnPropertyNames(data[0]);
  var nb_columns = column_names.length;
  var myTable = doc.createElement('table');
  var headers = doc.createElement('thead');
  var body = doc.createElement('tbody');
  var headers_row = doc.createElement('tr');
  // TODO: Only display ratios values if there is more than 1 variable currently selected
  for (var i = 0; i < nb_columns; i++) {
    var cell = doc.createElement('th');
    var col_name = column_names[i];
    if (num.indexOf(col_name) > -1) {
      cell.innerHTML = 'Num<br><span class="small">' + col_name;
    } else if (denum.indexOf(col_name) > -1) {
      cell.innerHTML = 'Denum<br><span class="small">' + col_name;
    } else if (ratio.indexOf(col_name) > -1) {
      cell.innerHTML = 'Ratio<br><span class="small">' + col_name;
    } else if (col_name === 'rang') {
      cell.innerHTML = 'Rang ';
    } else {
      cell.innerHTML = col_name;
    }
    headers_row.appendChild(cell);
  }
  headers.appendChild(headers_row);
  myTable.appendChild(headers);
  for (var _i = 0; _i < nb_features; _i++) {
    var row = doc.createElement('tr');
    row.id = 'row_' + data[_i].id;
    if (data[_i].id === my_region) {
      row.className = color_highlight;
    }
    for (var j = 0; j < nb_columns; j++) {
      var _cell = doc.createElement('td');
      var _col_name = column_names[j];
      if (num.indexOf(_col_name) > -1 || denum.indexOf(_col_name) > -1 || ratio.indexOf(_col_name) > -1) {
        _cell.innerHTML = Math.round(data[_i][_col_name] * 100) / 10;
      } else {
        _cell.innerHTML = data[_i][_col_name];
      }
      row.appendChild(_cell);
    }
    body.appendChild(row);
  }
  myTable.appendChild(body);
  myTable.setAttribute('id', options.id);
  return myTable;
}

function makeTable(data_no_empty, config) {
  d3.select('.dataTable-wrapper').remove();
  var table = createTableDOM(data_no_empty, undefined, config);
  document.querySelector('#map_section').appendChild(table);
  var dataTable = new vanillaDataTables('#myTable');
  var t = document.querySelector('.dataTable-wrapper');
  t.style.marginTop = '20px';
  t.style.display = 'none';
  t.style.fontSize = '0.7em';
  t.querySelector('.dataTable-top').remove();
  Array.prototype.slice.call(t.querySelectorAll('span.small')).forEach(function (el) {
    el.onclick = function () {
      el.parentElement.click();
    }; // eslint-disable-line no-param-reassign
  });
}

/* eslint-disable no-param-reassign */

/**
* Attach the full_dataset Array to the app Object and create a dictionnary
* allowing to obtain territorial units name from their Id.
*
* @param {Array} full_dataset - The dataset as an Array of Object
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {void}
*
*/
function prepare_dataset(full_dataset, app$$1) {
  app$$1.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name for easier lookup:
  app$$1.feature_names = {};
  full_dataset.forEach(function (elem) {
    app$$1.feature_names[elem.geo] = elem.Nom;
  });
}

/**
* Attach the full_dataset Array to the app Object and create a dictionnary
* allowing to obtain territorial units name from their Id.
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {Array} - The filtered data, containing only the requested variables
*   for the feature of the current study zone,
*    without features containing empty ratios.
*
*/
function filterLevelVar(app$$1, filter_id) {
  // Fetch the name(s) of the ratio (and associated num and denum variable),
  // the name of the targeted region and the current level :
  var _app$current_config = app$$1.current_config,
      num = _app$current_config.num,
      denum = _app$current_config.denum,
      ratio = _app$current_config.ratio,
      current_level = _app$current_config.current_level,
      id_field = _app$current_config.id_field,
      filter_key = _app$current_config.filter_key,
      name_field = _app$current_config.name_field,
      my_region = _app$current_config.my_region;


  var all_variables = ratio.concat(num).concat(denum);

  // Prepare the data:
  var temp = void 0;
  if (filter_id) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && filter_id.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.filter(function (ft) {
      return ft[id_field] === my_region;
    })[0][filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      name: ft[name_field]
    };
    for (var i = 0, len_i = all_variables.length; i < len_i; i++) {
      props_feature[all_variables[i]] = +ft[all_variables[i]];
    }
    return props_feature;
  });

  app$$1.current_data = temp;
}

/**
* Function to prepare the global "variables_info" Array of objects from the array
* containing the readed 'metadata.csv' file.
*
* @param {Array} metadata_indicateurs - The array return by d3.csv.
* @return {void}
*
*/
function prepareVariablesInfo(metadata_indicateurs) {
  console.log(metadata_indicateurs);
  return metadata_indicateurs.filter(function (ft) {
    return ft['Type statistique'] === 'Ratio';
  }).map(function (ft) {
    return {
      ratio: ft['id'],
      num: ft['id1'] + '_' + ft['AnnÃ©e'],
      denum: ft['id2'] + '_' + ft['AnnÃ©e'],
      name: ft['Nom'] + ' (' + ft['AnnÃ©e'] + ')',
      group: ft['ThÃ¨me'],
      methodo: ft['MÃ©thodologie'],
      source: ft['Source'],
      last_update: ft['DerniÃ¨re mise Ã  jour']
    };
  });
}

/**
* Set and apply a new filter (ie. restrict the study zone) on the dataset to be used.
*
* @param {String} filter_type - The name of the filter to use.
* @return {void}
*
*/
function applyFilter(app$$1, filter_type) {
  if (filter_type === 'filter_FR') {
    app$$1.current_config.filter_key = 'Pays';
    filterLevelVar(app$$1);
  } else if (filter_type === 'no_filter') {
    app$$1.current_config.filter_key = undefined;
    filterLevelVar(app$$1);
  } else {
    app$$1.current_config.filter_key = 'type_test';
    filterLevelVar(app$$1);
  }

  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

// TODO : Doc
function changeRegion(app$$1, id_region) {
  app$$1.current_config.my_region = id_region;
  app$$1.current_config.my_region_pretty_name = app$$1.feature_names[app$$1.current_config.my_region];
  if (app$$1.current_config.filter_key !== undefined) {
    filterLevelVar(app$$1);
  }
  // Reset the color to use on the chart/map:
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

/**
*
*
*
*
*/
function addVariable(app$$1, code_ratio) {
  var variable_info = exports.variables_info.filter(function (d) {
    return d.ratio === code_ratio;
  })[0];
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num.push(variable_info.num);
  app$$1.current_config.denum.push(variable_info.denum);
  app$$1.current_config.ratio.push(variable_info.ratio);
  app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  filterLevelVar(app$$1);
}

/**
*
*
*
*
*/
function removeVariable(app$$1, code_ratio) {
  var ix = app$$1.current_config.ratio.indexOf(code_ratio);
  app$$1.current_config.num.splice(ix, 1);
  app$$1.current_config.denum.splice(ix, 1);
  app$$1.current_config.ratio.splice(ix, 1);
  app$$1.current_config.ratio_pretty_name.splice(ix, 1);
  filterLevelVar(app$$1);
}

/**
* Reset the current variables in use.
*
*
*
*/
function resetVariables(app$$1, codes_ratio) {
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num = [];
  app$$1.current_config.denum = [];
  app$$1.current_config.ratio = [];
  app$$1.current_config.ratio_pretty_name = [];

  var _loop = function _loop(i, len) {
    var code_ratio = codes_ratio[i];
    var variable_info = exports.variables_info.filter(function (d) {
      return d.ratio === code_ratio;
    })[0];
    app$$1.current_config.num.push(variable_info.num);
    app$$1.current_config.denum.push(variable_info.denum);
    app$$1.current_config.ratio.push(variable_info.ratio);
    app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  };

  for (var i = 0, len = codes_ratio.length; i < len; i++) {
    _loop(i, len);
  }
  filterLevelVar(app$$1);
}

/**
* Compute the ratio of available (= not empty) values (the "complÃ©tude") within
* the subset currently in use for all the variables in "vars".
*
* @param {Object} app -
* @param {Array} vars -
* @return {Number}
*
*/


/**
* Compute the ratio of population covered by features on which all the variables
* of "vars" are available.
*
* @param {Object} app -
* @param {Array} vars -
* @return {Number}
*
*/
function calcPopCompletudeSubset(app$$1, vars) {
  var _app$current_config3 = app$$1.current_config,
      current_level = _app$current_config3.current_level,
      id_field = _app$current_config3.id_field,
      filter_key = _app$current_config3.filter_key,
      my_region = _app$current_config3.my_region,
      pop_field = _app$current_config3.pop_field;

  // Compute the total population stock of the data (within the "study zone" if any):

  var temp = void 0;
  if (filter_key) {
    var my_category = app$$1.full_dataset.find(function (ft) {
      return ft[id_field] === my_region;
    })[filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  var total_pop = 0;
  for (var i = 0, len = temp.length; i < len; i++) {
    total_pop += isNaN(+temp[i][pop_field]) ? 0 : +temp[i][pop_field];
  }
  // Compute the population stock of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      pop: +ft[pop_field]
    };
    for (var _i = 0, len_i = vars.length; _i < len_i; _i++) {
      props_feature[vars[_i]] = +ft[vars[_i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var subset_pop = 0;
  for (var _i2 = 0, _len = temp.length; _i2 < _len; _i2++) {
    subset_pop += isNaN(temp[_i2].pop) ? 0 : temp[_i2].pop;
  }
  // Return the ratio of population values ("complÃ©tude") within
  // the study zone selected by the user:
  return Math.round(subset_pop / total_pop * 1000) / 10;
}
/* eslint-enable no-param-reassign */

var TableResumeStat = function () {
  function TableResumeStat(summary_features) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, TableResumeStat);

    var doc = document;
    var nb_features = summary_features.length;
    var column_names = ['Variable', 'Min', 'Moyenne', 'Max', 'Ma rÃ©gion'];
    var nb_columns = column_names.length;
    var container_div = doc.createElement('div');
    var myTable = doc.createElement('table');
    var headers = doc.createElement('thead');
    var table_body = doc.createElement('tbody');
    var headers_row = doc.createElement('tr');
    myTable.className = 'minitable';
    container_div.className = 'minitable_container';
    for (var i = 0; i < nb_columns; i++) {
      var cell = doc.createElement('th');
      cell.innerHTML = column_names[i];
      headers_row.appendChild(cell);
    }
    headers.appendChild(headers_row);
    myTable.appendChild(headers);
    for (var _i = 0; _i < nb_features; _i++) {
      var row = doc.createElement('tr');
      row.id = 'row_' + summary_features[_i].id;
      for (var j = 0; j < nb_columns; j++) {
        var _cell = doc.createElement('td');
        var col_name = column_names[j];
        if (col_name !== 'Variable') {
          _cell.innerHTML = Math.round(summary_features[_i][col_name] * 10) / 10;
        } else {
          _cell.innerHTML = summary_features[_i][col_name];
        }
        row.appendChild(_cell);
      }
      table_body.appendChild(row);
    }
    myTable.appendChild(table_body);
    myTable.setAttribute('id', options.id || 'table_summary');
    container_div.appendChild(myTable);
    document.querySelector('#map_section').appendChild(container_div);
    this.nb_columns = nb_columns;
    this.column_names = column_names;
    this.table_body = table_body;
  }

  createClass(TableResumeStat, [{
    key: 'addFeatures',
    value: function addFeatures(summary_features) {
      for (var i = 0, len = summary_features.length; i < len; i++) {
        this.addFeature(summary_features[i]);
      }
    }
  }, {
    key: 'addFeature',
    value: function addFeature(summary) {
      var row = document.createElement('tr');
      row.id = 'row_' + summary.id;
      for (var j = 0; j < this.nb_columns; j++) {
        var cell = document.createElement('td');
        var col_name = this.column_names[j];
        if (col_name !== 'Variable') {
          cell.innerHTML = Math.round(summary[col_name] * 10) / 10;
        } else {
          cell.innerHTML = summary[col_name];
        }
        row.appendChild(cell);
      }
      this.table_body.appendChild(row);
    }
  }, {
    key: 'removeFeature',
    value: function removeFeature(id_variable) {
      var row = this.table_body.querySelector('tr#row_' + id_variable);
      if (row) row.remove();
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      var rows = this.table_body.querySelectorAll('tr');
      for (var i = rows.length - 1; i > -1; i--) {
        rows[i].remove();
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_body.parentElement.parentElement.remove();
      this.table_body = null;
    }
  }]);
  return TableResumeStat;
}();

var svg_bar = d3.select('svg#svg_bar');
var margin = { top: 10, right: 20, bottom: 100, left: 45 };
var margin2 = { top: 430, right: 20, bottom: 15, left: 45 };
var width = +svg_bar.attr('width') - margin.left - margin.right;
var height = +svg_bar.attr('height') - margin.top - margin.bottom;
var height2 = +svg_bar.attr('height') - margin2.top - margin2.bottom;

var nbFt = void 0;
var current_range_brush = [0, 0];
var current_range = [0, 0];
var displayed = void 0;

function getMeanRank(mean_value, ratio_to_use) {
  var mean_rank = app.current_data.map(function (d, i) {
    return [d[ratio_to_use], math_abs(mean_value - d[ratio_to_use]), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

var BarChart1 = function () {
  function BarChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BarChart1);

    this.brushed = function () {
      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return; // ignore brush-by-zoom
      if (!_this.x) {
        console.log('a');return;
      }
      var s = d3.event.selection || _this.x2.range();
      current_range = [math_round(s[0] / (width / nbFt)), math_round(s[1] / (width / nbFt))];
      _this.x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      svg_bar.select('.zoom').call(_this.zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
      _this.update();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(_this.brush_top.move, null);
      _this.brushed_top();
    };

    this.brushed_top = function () {
      if (!_this._focus) {
        console.log('b');return;
      }
      if (!_this.map_elem) {
        console.log('c');return;
      }
      var d3_event = d3.event;
      var ratio_to_use = _this.ratio_to_use;
      var ref_value = _this.ref_value;
      if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
        _this.map_elem.removeRectBrush();
        var s = d3_event.selection;
        current_range_brush = [current_range[0] + math_round(s[0] / (width / displayed)) - 1, current_range[0] + math_round(s[1] / (width / displayed))];
        _this.x.domain(_this.data.slice(current_range_brush[0] + 1, current_range_brush[1]).map(function (ft) {
          return ft.id;
        }));
        app.colors = {};
        _this._focus.selectAll('.bar').style('fill', function (d, i) {
          if (d.id === app.current_config.my_region) {
            app.colors[d.id] = color_highlight;
            return color_highlight;
          } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
            var color = comp(d[ratio_to_use], ref_value, _this.serie_inversed);
            app.colors[d.id] = color;
            return color;
          }
          return color_countries;
        });
        _this.updateMapRegio();
      } else {
        if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
          _this.map_elem.removeRectBrush();
          app.colors = {};
          app.colors[app.current_config.my_region] = color_highlight;
          _this.updateMapRegio();
        }
        _this._focus.selectAll('.bar').style('fill', function (d) {
          return app.colors[d.id] || color_countries;
        });
      }
    };

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var x = d3.scaleBand().range([0, width]).padding(0.1),
        x2 = d3.scaleBand().range([0, width]).padding(0.1),
        y = d3.scaleLinear().range([height, 0]),
        y2 = d3.scaleLinear().range([height2, 0]);

    var xAxis = d3.axisBottom(x);
    var xAxis2 = d3.axisBottom(x2);
    var yAxis = d3.axisLeft(y);

    this.x = x;
    this.x2 = x2;
    this.y = y;
    this.y2 = y2;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.xAxis2 = xAxis2;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var ratio_to_use = available_ratios[0];
    this.ratio_to_use = ratio_to_use;

    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    });
    this.data.sort(function (a, b) {
      return a[ratio_to_use] - b[ratio_to_use];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.current_ranks = this.data.map(function (d, i) {
      return i + 1;
    });
    nbFt = this.data.length;
    this.mean_value = getMean(this.data.map(function (d) {
      return d[ratio_to_use];
    }));
    this.ref_value = this.data.filter(function (ft) {
      return ft.id === app.current_config.my_region;
    })[0][ratio_to_use];
    svg_bar.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width, height: height });

    var focus = svg_bar.append('g').attrs({
      class: 'focus',
      transform: 'translate(' + margin.left + ', ' + margin.top + ')'
    });

    var context = svg_bar.append('g').attrs({
      class: 'context',
      transform: 'translate(' + margin2.left + ', ' + margin2.top + ')'
    });

    this._focus = focus;
    this.context = context;

    x.domain(this.current_ids);
    y.domain([0, d3.max(this.data, function (d) {
      return d[ratio_to_use];
    })]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    var brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on('brush end', this.brushed);

    var brush_top = d3.brushX().extent([[0, 0], [width, height]]).on('brush end', this.brushed_top);

    var zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
    // .on("zoom", zoomed);
    this.brush_top = brush_top;
    this.brush_bottom = brush_bottom;
    this.zoom = zoom;

    focus.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height + ')' }).call(xAxis);

    focus.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    focus.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = focus.append('g');

    var groupe_line_mean = focus.append('g').attr('class', 'mean');
    groupe_line_mean.append('text').attrs({ x: 60, y: y(this.mean_value) + 20 }).styles({
      display: 'none',
      fill: 'red',
      'fill-opacity': '0.8',
      'font-family': '\'Signika\', sans-serif'
    }).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);

    groupe_line_mean.append('line').attrs({
      x1: 0,
      x2: width,
      y1: y(this.mean_value),
      y2: y(this.mean_value),
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px',
      class: 'mean_line'
    }).style('stroke', 'red');

    groupe_line_mean.append('line').attrs({ x1: 0, x2: width, y1: y(this.mean_value), y2: y(this.mean_value), 'stroke-width': '14px', class: 'transp_mean_line' }).style('stroke', 'transparent').on('mouseover', function () {
      groupe_line_mean.select('text').style('display', 'initial');
    }).on('mouseout', function () {
      groupe_line_mean.select('text').style('display', 'none');
    });

    this.updateMiniBars();

    context.append('g').attr('class', 'brush_bottom').call(brush_bottom).call(brush_bottom.move, x.range());

    focus.append('g').attr('class', 'brush_top').call(brush_top).call(brush_top.move, null);

    this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

    this.completude = svg_bar.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    svg_bar.append('image').attrs({
      x: width + margin.left + 5,
      y: 385,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      // this.data = app.current_data.slice();
      if (!_this.serie_inversed) {
        _this.data.sort(function (a, b) {
          return b[_this.ratio_to_use] - a[_this.ratio_to_use];
        });
      } else {
        _this.data.sort(function (a, b) {
          return a[_this.ratio_to_use] - b[_this.ratio_to_use];
        });
      }
      _this.serie_inversed = !_this.serie_inversed;
      x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      x2.domain(_this.data.map(function (ft) {
        return ft.id;
      }));
      // svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity
      //     .scale(width / (current_range[1] - current_range[0]))
      //     .translate(-current_range[0], 0));
      _this.update();
      // this.updateMiniBars();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(brush_top.move, null);
      _this.map_elem.removeRectBrush();
      svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
    });

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar);

    // Deactivate the brush rect selection on the map + on the chart
    // when he user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', 'none');
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', null);
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Create the menu under the chart allowing to use some useful selections
    // (above or below the mean value and above or below my_region)
    var menu_selection = d3.select('#bar_section').append('div').attr('id', 'menu_selection').styles({ padding: '0 10px 10px 10px', 'text-align': 'center' });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('< Ã  la moyenne').on('click', function () {
      return _this.selectBelowMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('> Ã  la moyenne').on('click', function () {
      return _this.selectAboveMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('< Ã  ma rÃ©gion').on('click', function () {
      return _this.selectBelowMyRegion();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('> Ã  ma rÃ©gion').on('click', function () {
      return _this.selectAboveMyRegion();
    });

    this.makeTableStat();
  }

  createClass(BarChart1, [{
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      displayed = 0;
      var ratio_to_use = this.ratio_to_use;
      var self = this;
      var bar = this.g_bar.selectAll('.bar').data(this.data);

      bar.attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      }).style('display', function (d) {
        var to_display = _this2.x(d.id) != null;
        if (to_display) {
          displayed += 1;
          return 'initial';
        }
        return 'none';
      }).on('mouseover', function () {
        svg_bar.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar.select('.tooltip');
        tooltip.select('rect').attrs({ width: 0, height: 0 });
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('' + math_round(d[self.ratio_to_use] * 10) / 10);
        var b = tooltip.node().getBoundingClientRect();
        tooltip.select('rect').attrs({
          width: b.width + 20,
          height: b.height + 7.5
        });
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });

      bar.enter().insert('rect', '.mean').attrs(function (d) {
        return {
          class: 'bar',
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      });

      bar.exit().remove();

      this._focus.select('.axis--y').call(this.yAxis);

      var axis_x = this._focus.select('.axis--x').attr('font-size', function () {
        return displayed > 75 ? 6 : 10;
      }).call(this.xAxis);
      axis_x.selectAll('text').attrs(function () {
        if (displayed > 100) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else if (displayed > 20) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else {
          return { dx: '0', dy: '0.71em', transform: null };
        }
      }).style('text-anchor', function () {
        return displayed > 20 ? 'end' : 'middle';
      });

      this.updateMiniBars();
    }
  }, {
    key: 'updateMiniBars',
    value: function updateMiniBars() {
      var _this3 = this;

      var ratio_to_use = this.ratio_to_use;
      var mini_bars = this.context.selectAll('.bar').data(this.data);

      mini_bars.attrs(function (d) {
        return {
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });

      mini_bars.enter().insert('rect').attrs(function (d) {
        return {
          class: 'bar',
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });
      mini_bars.exit().remove();
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      } else {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      } else {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this5 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [mean_rank, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      } else {
        current_range_brush = [0, mean_rank + 1];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this6 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      app.colors = {};
      if (!this.serie_inversed) {
        current_range_brush = [0, mean_rank];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      } else {
        current_range_brush = [mean_rank + 1, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var _this7 = this;

      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      var self = this;
      svg_bar.select('.brush_top').call(self.brush_top.move, null);

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      // const transform = svg_map.node().__zoom;
      // topleft[0] = (topleft[0] - transform.x) / transform.k;
      // topleft[1] = (topleft[1] - transform.y) / transform.k;
      // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
      // bottomright[1] = (bottomright[1] - transform.y) / transform.k;
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, ref_value, this.serie_inversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self._focus.selectAll('.bar').style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      });
      var ids = Object.keys(app.colors);
      var ranks = ids.map(function (d) {
        return _this7.current_ids.indexOf(d.id) > -1;
      }).map(function (d) {
        return _this7.current_ranks[d];
      });
      if (ranks.length > 1) {
        var c1 = ranks[0] - 1;
        var c2 = ranks[ranks.length - 1];
        if (c1 < current_range[0] || c2 > current_range[1]) {
          current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
          svg_bar.select('.brush_bottom').call(self.brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
        }
      } else {
        current_range = [0, this.data.length];
        svg_bar.select('.brush_bottom').call(self.brush_bottom.move, self.x.range());
      }
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        app.colors[id] = undefined;
        d3.select(parent).attr('fill', color_countries);
      } else {
        var color = comp(d.properties[this.ratio_to_use], this.ref_value, this.serie_inversed);
        app.colors[id] = color;
        d3.select(parent).attr('fill', color);
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value = this.data.filter(function (ft) {
          return ft.id === app.current_config.my_region;
        })[0][this.ratio_to_use];
        this.update();
        this.updateContext(0, this.data.length);
        this.updateMapRegio();
        this.updateTableStats();
        svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x.range());
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
      }
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var y = this.y;
      var ratio_to_use = this.ratio_to_use;
      var grp_mean = this._focus.select('.mean');
      this.mean_value = getMean(this.data.map(function (d) {
        return d[ratio_to_use];
      }));
      grp_mean.select('text').attr('y', y(this.mean_value) + 20).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);
      grp_mean.select('.mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
      grp_mean.select('.transp_mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var ratio_to_use = this.ratio_to_use;
      this.data = app.current_data.filter(function (ft) {
        return !!ft[ratio_to_use];
      });

      if (this.serie_inversed) {
        this.data.sort(function (a, b) {
          return b[ratio_to_use] - a[ratio_to_use];
        });
      } else {
        this.data.sort(function (a, b) {
          return a[ratio_to_use] - b[ratio_to_use];
        });
      }
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      nbFt = this.data.length;
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.x.domain(this.current_ids);
      var min_serie = d3.min(this.data, function (d) {
        return d[ratio_to_use];
      });
      var max_serie = d3.max(this.data, function (d) {
        return d[ratio_to_use];
      });
      var offset_y = (max_serie - min_serie) / 20;
      this.y.domain([
      // min_serie - offset_y, max_serie,
      0, max_serie]);
      this.x2.domain(this.x.domain());
      this.y2.domain(this.y.domain());
      this.updateMeanValue();
      this.update();
      this.updateContext(0, this.data.length);

      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.map_elem.removeRectBrush();
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateTableStats();
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this._focus.remove();
      this.context.remove();
      this.selec_var.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this8 = this;

      var values = this.data.map(function (d) {
        return d[_this8.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.ref_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BarChart1;
}();

var svg_bar$1 = d3.select('#svg_bar');
var margin$1 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$1 = +svg_bar$1.attr('width') - margin$1.left - margin$1.right;
var height$1 = +svg_bar$1.attr('height') - margin$1.top - margin$1.bottom;

var BubbleChart1 = function () {
  function BubbleChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BubbleChart1);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var available_nums = app.current_config.num;
    var ratio_to_use = available_ratios[0];
    var stock_to_use = available_nums[0];
    this.ratio_to_use = ratio_to_use;
    this.stock_to_use = stock_to_use;
    this.my_region_value = ref_data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[ratio_to_use];
    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    }).slice();
    this.data.forEach(function (ft) {
      // eslint-disable-next-line no-param-reassign
      ft.dist = math_abs(+ft[ratio_to_use] - _this.my_region_value);
    });
    this.data.sort(function (a, b) {
      return b.dist - a.dist;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.highlight_selection = [];
    this.serie_inversed = false;
    var draw_group = svg_bar$1.append('g').attr('transform', 'translate(' + margin$1.left + ', ' + margin$1.top + ')');
    draw_group.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height$1 / 2 + ')' });
    this.draw_group = draw_group;

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$1);

    // Compute the "complÃ©tude" value for this ratio:
    this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

    // Create the "complÃ©tude" text:
    this.completude = svg_bar$1.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Create the button allowing to choose
    // if the colors are inversed
    // (like green/red for superior/inferior regions)
    svg_bar$1.append('image').attrs({
      x: width$1 + margin$1.left + 5,
      y: 232.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      _this.serie_inversed = !_this.serie_inversed;
      _this.applySelection(_this.highlight_selection.length);
    });

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var selection_close = d3.select(svg_bar$1.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-100px', 'margin-left': '30px', position: 'relative' }).append('p');

    selection_close.append('span').property('value', 'close').attrs({ value: 'close', class: 'type_selection square checked' });
    selection_close.append('span').attrs({ class: 'label_chk' }).html('Les');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).property('value', 5);
    selection_close.append('span').attrs({ class: 'label_chk' }).html('rÃ©gions les plus proches');

    this.bindMenu();

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    this.makeTableStat();
  }

  createClass(BubbleChart1, [{
    key: 'applySelection',
    value: function applySelection(nb) {
      app.colors = {};
      if (nb > 0) {
        var ratio_to_use = this.ratio_to_use;

        this.highlight_selection = this.data.map(function (d) {
          return {
            dist: d.dist,
            ratio: +d[ratio_to_use],
            id: d.id
          };
        });

        this.highlight_selection.sort(function (a, b) {
          return a.dist - b.dist;
        });
        this.highlight_selection = this.highlight_selection.slice(1, nb + 1);
      } else {
        this.highlight_selection = [];
      }
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      var self = this;
      var data = self.data;
      var highlight_selection = self.highlight_selection;
      var my_region_value = self.my_region_value;
      var ratio_to_use = self.ratio_to_use;
      var stock_to_use = self.stock_to_use;

      var _min = void 0;
      var _max = void 0;
      if (highlight_selection.length > 0) {
        var dist_min = math_abs(my_region_value - +d3.min(highlight_selection, function (d) {
          return d.ratio;
        }));
        var dist_max = math_abs(+d3.max(highlight_selection, function (d) {
          return d.ratio;
        }) - my_region_value);
        var dist_axis = Math.max(dist_min, dist_max);
        var margin_min_max = math_round(dist_axis) / 8;
        _min = my_region_value - dist_axis - margin_min_max;
        _max = my_region_value + dist_axis + margin_min_max;
        if (_min > _max) {
          console.log('a');var _ref = [_max, _min];
          _min = _ref[0];
          _max = _ref[1];
        }
      } else {
        var _dist_min = math_abs(my_region_value - d3.min(data, function (d) {
          return d[ratio_to_use];
        }));
        var _dist_max = math_abs(d3.max(data, function (d) {
          return d[ratio_to_use];
        }) - my_region_value);
        var _dist_axis = Math.max(_dist_min, _dist_max);
        var _margin_min_max = math_round(_dist_axis) / 8;
        _min = my_region_value - _dist_axis - _margin_min_max;
        _max = my_region_value + _dist_axis + _margin_min_max;
      }

      this.highlight_selection.forEach(function (elem) {
        app.colors[elem.id] = comp(elem.ratio, my_region_value, _this2.serie_inversed);
      });

      app.colors[app.current_config.my_region] = color_highlight;
      var prop_sizer = new PropSizer(d3.max(data, function (d) {
        return d[stock_to_use];
      }), 30);
      var xScale = d3.scaleLinear().domain([_min, _max]).range([0, width$1]);

      this.draw_group.select('g.axis--x').transition().duration(225).call(d3.axisBottom(xScale));

      var bubbles = this.draw_group.selectAll('.bubble').data(data, function (d) {
        return d.id;
      });

      bubbles.transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries,
          'fill-opacity': d.id === app.current_config.my_region ? 1 : app.colors[d.id] ? 0.7 : 0.3,
          stroke: 'darkgray',
          'stroke-width': 0.75,
          'stroke-opacity': 0.75
        };
      });

      bubbles.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries,
          'fill-opacity': d.id === app.current_config.my_region ? 1 : app.colors[d.id] ? 0.7 : 0.3,
          stroke: 'darkgray',
          'stroke-width': 0.75,
          'stroke-opacity': 0.75
        };
      }).transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          class: 'bubble',
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      }).on('end', function () {
        _this2.draw_group.selectAll('.bubble').on('mouseover', function () {
          svg_bar$1.select('.tooltip').style('display', null);
        }).on('mouseout', function () {
          svg_bar$1.select('.tooltip').style('display', 'none');
        }).on('mousemove', function (d) {
          var tooltip = svg_bar$1.select('.tooltip');
          var _ratio_to_use = self.ratio_to_use;
          var _stock_to_use = self.stock_to_use;
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text('' + d.id);
          tooltip.select('text.value_feature1').text('Ratio: ' + Math.round(d[_ratio_to_use] * 10) / 10);
          tooltip.select('text.value_feature2').text('Stock: ' + Math.round(d[_stock_to_use] * 10) / 10);
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({
            width: b.width + 20,
            height: b.height + 7.5
          });
          tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
        });
      });
      bubbles.exit().transition().duration(225).remove();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this3 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this3.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:
        var id_to_remove = this.highlight_selection.map(function (ft, i) {
          return ft.id === id ? i : null;
        }).filter(function (ft) {
          return ft;
        })[0];
        this.highlight_selection.splice(id_to_remove, 1);
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value = +d.properties[this.ratio_to_use];
        var color = comp(value, this.my_region_value, this.serie_inversed);
        // app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
        this.highlight_selection.push({
          id: id,
          ratio: value,
          dist: math_abs(value - this.my_region_value)
        });
      }
      this.highlight_selection.sort(function (a, b) {
        return a.dist - b.dist;
      });
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      var _this4 = this;

      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.map_elem.updateLegend();
        this.my_region_value = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.ratio_to_use];
        this.data.forEach(function (ft) {
          // eslint-disable-next-line no-param-reassign
          ft.dist = math_abs(+ft[_this4.ratio_to_use] - _this4.my_region_value);
        });
        this.updateTableStats();
        this.applySelection(this.highlight_selection.length);
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this5 = this;

      this.map_elem.updateLegend();
      this.my_region_value = app.current_data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.ratio_to_use];
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this5.ratio_to_use];
      }).slice();
      this.data.forEach(function (ft) {
        // eslint-disable-next-line no-param-reassign
        ft.dist = math_abs(+ft[_this5.ratio_to_use] - _this5.my_region_value);
      });
      this.data.sort(function (a, b) {
        return b.dist - a.dist;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      var temp = this.highlight_selection.length;
      this.highlight_selection = [];
      this.updateTableStats();
      this.applySelection(temp);
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.stock_to_use = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      }).num;
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        // self.map_elem.removeRectBrush();
        var value = +this.value;
        if (value < 1) {
          this.value = 1;
          return;
        }
        self.applySelection(value);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.table_stats.remove();
      this.table_stats = null;
      this.selec_var.remove();
      svg_bar$1.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      d3.select('#menu_selection').select('.nb_select').dispatch('change');
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this6 = this;

      var values = this.data.map(function (d) {
        return d[_this6.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.my_region_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BubbleChart1;
}();

var contextMenu = function () {
  function contextMenu(items) {
    classCallCheck(this, contextMenu);

    if (items) {
      this.setItems(items);
    } else {
      this.items = [];
    }
  }

  createClass(contextMenu, [{
    key: 'addItem',
    value: function addItem(item) {
      this.items.push({
        name: item.name,
        action: item.action
      });
    }
  }, {
    key: 'removeItem',
    value: function removeItem(name) {
      for (var i = this.items.length - 1; i > 0; i--) {
        if (this.items[i].name === name) {
          this.items.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: 'setItems',
    value: function setItems(items) {
      this.items = [];
      for (var i = 0, nb_items = items.length; i < nb_items; i++) {
        if (items[i].name && items[i].action) {
          this.addItem(items[i]);
        }
      }
    }
  }, {
    key: 'showMenu',
    value: function showMenu(event, parent, items, position) {
      var _this = this;

      if (event.preventDefault) event.preventDefault();
      if (event.stopPropagation) event.stopPropagation();
      if (this.DOMobj) {
        this.hideMenu();
        return;
      }
      if (items) {
        this.setItems(items);
      }

      this.initMenu(parent);
      if (!position) {
        this.DOMobj.style.top = event.clientY + document.body.scrollTop + 'px';
        this.DOMobj.style.left = event.clientX + 'px';
      } else {
        this.DOMobj.style.top = position[1] + 'px';
        this.DOMobj.style.left = position[0] + 'px';
      }
      this.displayed = true;
      setTimeout(function () {
        document.addEventListener('click', function () {
          return _this.hideMenu();
        });
      }, 150);
    }
  }, {
    key: 'hideMenu',
    value: function hideMenu() {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      this.displayed = false;
      document.removeEventListener('click', this.hideMenu);
    }
  }, {
    key: 'initMenu',
    value: function initMenu(parent) {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      var self = this;
      var menu = document.createElement('div');
      var list = document.createElement('ul');
      menu.className = 'context-menu';
      menu.appendChild(list);
      for (var i = 0, nb_item = this.items.length; i < nb_item; i++) {
        var item = document.createElement('li');
        item.setAttribute('data-index', i);
        item.innerHTML = '<span class="context-menu-item-name">' + this.items[i].name + '</span>';
        list.appendChild(item);
        item.onclick = function () {
          var ix = this.getAttribute('data-index');
          self.items[ix].action();
        };
      }
      this.DOMobj = menu;
      parent.appendChild(menu);
    }
  }]);
  return contextMenu;
}();

var svg_bar$2 = d3.select('#svg_bar');
var margin$2 = { top: 20, right: 20, bottom: 40, left: 40 };

var width$2 = +svg_bar$2.attr('width') - margin$2.left - margin$2.right;
var height$2 = +svg_bar$2.attr('height') - margin$2.top - margin$2.bottom;

/** Class representing a scatterplot */
var ScatterPlot2 = function () {
  /**
   * Create a the scatterplot on the `svg_bar` svg element previously defined
   * @param {Array} ref_data - A reference to the subset of the dataset to be used
   * to create the scatterplot (should contain at least two field flagged as ratio
   * in the `app.current_config.ratio` Object).
   */
  function ScatterPlot2(ref_data) {
    var _this = this;

    classCallCheck(this, ScatterPlot2);

    this.brushed = function () {
      if (d3.event && !d3.event.selection) {
        if (d3.event.type === 'end' && d3.event.sourceEvent.type === 'mouseup') {
          _this.map_elem.removeRectBrush();
        }
        app.colors = {};
        app.colors[app.current_config.my_region] = color_highlight;
        _this.update();
        _this.updateMapRegio();
        return;
      }

      resetColors();
      var self = _this;

      var _d3$event$selection = slicedToArray(d3.event.selection, 2),
          topleft = _d3$event$selection[0],
          bottomright = _d3$event$selection[1];

      var range_x = [_this.x.invert(topleft[0]), _this.x.invert(bottomright[0])];
      var range_y = [_this.y.invert(bottomright[1]), _this.y.invert(topleft[1])];
      var t1 = void 0;
      var t2 = void 0;
      if (_this.type === 'value') {
        t1 = _this.variable1;
        t2 = _this.variable2;
      } else {
        t1 = _this.rank_variable1;
        t2 = _this.rank_variable2;
      }

      _this.data.filter(function (ft) {
        return ft[t1] > range_x[0] && ft[t1] < range_x[1] && ft[t2] > range_y[0] && ft[t2] < range_y[1];
      }).forEach(function (ft) {
        app.colors[ft.id] = comp2(ft[_this.variable1], ft[_this.variable2], self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
      });
      app.colors[app.current_config.my_region] = color_highlight;
      _this.update();
      _this.updateMapRegio();
      _this.map_elem.removeRectBrush();
    };

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var self = this;
    this.type = 'rank';
    this.variable1 = app.current_config.ratio[0];
    this.variable2 = app.current_config.ratio[1];
    this.rank_variable1 = 'pr_' + this.variable1;
    this.rank_variable2 = 'pr_' + this.variable2;
    this.pretty_name1 = app.current_config.ratio_pretty_name[0];
    this.pretty_name2 = app.current_config.ratio_pretty_name[1];
    this.data = ref_data.filter(function (ft) {
      return !!ft[_this.variable1] && !!ft[_this.variable2];
    }).map(function (d) {
      var res = { id: d.id };
      res[_this.variable1] = d[_this.variable1];
      res[_this.variable2] = d[_this.variable2];
      return res;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors(this.current_ids);
    this.nbFt = this.data.length;
    computePercentileRank(this.data, this.variable1, this.rank_variable1);
    computePercentileRank(this.data, this.variable2, this.rank_variable2);

    this.x = d3.scaleLinear().range([0, width$2]).nice();
    this.y = d3.scaleLinear().range([height$2, 0]).nice();
    this.xAxis = d3.axisBottom(this.x).ticks(12);
    this.yAxis = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);
    this.xAxis2 = d3.axisBottom(this.x).ticks(12);
    this.yAxis2 = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);

    this.brush = d3.brush().extent([[0, 0], [width$2, height$2]]).on('brush end', this.brushed);

    this.xInversed = false;
    this.yInversed = false;
    this.ref_value1 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable1];
    this.ref_value2 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable2];

    this.plot = svg_bar$2.append('g').attr('transform', 'translate(' + [margin$2.left, margin$2.top] + ')');

    this.plot.append('defs').append('svg:clipPath').attr('id', 'clip').append('svg:rect').attrs({
      width: width$2,
      height: height$2,
      x: 0,
      y: 0
    });

    this.scatter = this.plot.append('g').attr('id', 'scatterplot').attr('clip-path', 'url(#clip)');

    this.scatter.append('g').attr('class', 'brush').call(this.brush);

    this.makeGrid();

    var groupe_line_mean = this.plot.append('g').attr('clip-path', 'url(#clip)').attr('class', 'mean');
    groupe_line_mean.append('line').attr('clip-path', 'url(#clip)').attrs({
      id: 'mean_x',
      x1: this.x(this.mean_variable1),
      x2: this.x(this.mean_variable1),
      y1: 0,
      y2: width$2,
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).style('stroke', 'red');
    groupe_line_mean.append('line').style('stroke', 'red').attrs({
      id: 'mean_y',
      x1: 0,
      x2: width$2,
      y1: this.y(this.mean_variable2),
      y2: this.y(this.mean_variable2),
      'clip-path': 'url(#clip)',
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    });

    this.plot.append('g').attrs({
      class: 'x axis', id: 'axis--x', transform: 'translate(0, ' + height$2 + ')'
    }).call(this.xAxis);

    this.plot.append('g').attrs({ class: 'y axis', id: 'axis--y', opacity: 0.9 }).call(this.yAxis);

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(this.plot);

    this.prepareTitleAxis();

    svg_bar$2.append('image').attrs({
      x: margin$2.left + width$2 / 2 - 20 - svg_bar$2.select('#title-axis-x').node().getBoundingClientRect().width / 2,
      y: margin$2.top + height$2 + margin$2.bottom / 2 - 2.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_x'
    }).on('click', function () {
      _this.xInversed = !_this.xInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        self.data[i][self.rank_variable1] = 100 - self.data[i][self.rank_variable1];
      }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    svg_bar$2.append('image').attrs({
      x: margin$2.left / 2 - 20,
      y: margin$2.top + height$2 / 2 + svg_bar$2.select('#title-axis-y').node().getBoundingClientRect().height / 2 + 5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_y'
    }).on('click', function () {
      _this.yInversed = !_this.yInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        _this.data[i][_this.rank_variable2] = 100 - _this.data[i][_this.rank_variable2];
      }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    // Compute the "complÃ©tude" value for this ratio:
    this.completude_value = calcPopCompletudeSubset(app, [this.variable1, this.variable2]);

    // Create the "complÃ©tude" text:
    this.completude = svg_bar$2.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    var menu_selection = d3.select(svg_bar$2.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-20px', 'margin-left': '30px', position: 'relative' });

    var chart_type = menu_selection.append('p').styles({
      float: 'right',
      display: 'inline-grid'
    });

    chart_type.append('span').attrs({
      id: 'ind_raw_values',
      class: 'choice_ind'
    }).text('Valeurs brutes');

    chart_type.append('span').attrs({
      id: 'ind_ranks',
      class: 'choice_ind active'
    }).text('Valeurs de rang');

    this.bindMenu();

    // this.update();
    this.makeTableStat();
  }

  /**
   * Create the underlying grey grid
   */


  createClass(ScatterPlot2, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#scatterplot').attrs({
        class: 'grid grid-x', transform: 'translate(0, ' + height$2 + ')'
      }).call(this.xAxis2.tickSize(-height$2).tickFormat(''));
      this.plot.insert('g', '#scatterplot').attr('class', 'grid grid-y').call(this.yAxis2.tickSize(-width$2).tickFormat(''));
    }
  }, {
    key: 'updateAxisGrid',
    value: function updateAxisGrid() {
      this.plot.select('.grid-x').transition().duration(125).call(this.xAxis2.tickSize(-height$2).tickFormat(''));
      this.plot.select('.grid-y').transition().duration(125).call(this.yAxis2.tickSize(-width$2).tickFormat(''));
      this.plot.select('#axis--x').transition().duration(125).call(this.xAxis);
      this.plot.select('#axis--y').transition().duration(125).call(this.yAxis);
      this.plot.selectAll('.grid').selectAll('line').attr('stroke', 'lightgray');
    }

    /**
     * Create the title of the X and Y axis with the associated context menu
     * displayed when they are clicked and allowing to select an other variable
     * for this axis.
     */

  }, {
    key: 'prepareTitleAxis',
    value: function prepareTitleAxis() {
      var _this2 = this;

      var self = this;
      this.menuX = new contextMenu();
      this.menuY = new contextMenu();
      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableY(elem);
          }
        };
      });

      svg_bar$2.append('text').attrs({
        id: 'title-axis-x',
        x: margin$2.left + width$2 / 2,
        y: margin$2.top + height$2 + margin$2.bottom / 2 + 10
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable1).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuY.displayed) {
          self.menuY.hideMenu();
        }
        self.menuX.showMenu(d3.event, document.body, self.itemsX, [bbox.left - 20, bbox.top + 20]);
      });

      svg_bar$2.append('text').attrs({
        id: 'title-axis-y',
        x: margin$2.left / 2,
        y: margin$2.top + height$2 / 2 - 10,
        transform: 'rotate(-90, ' + margin$2.left / 2 + ', ' + (margin$2.top + height$2 / 2) + ')'
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable2).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuX.displayed) {
          self.menuX.hideMenu();
        }
        self.menuY.showMenu(d3.event, document.body, self.itemsY, [bbox.left, bbox.bottom + 10]);
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this3 = this;

      var self = this;
      var data = self.data;

      if (this.type === 'rank') {
        this.x.domain(d3.extent(this.data, function (d) {
          return d[_this3.rank_variable1];
        })).nice();
        this.y.domain(d3.extent(this.data, function (d) {
          return d[_this3.rank_variable2];
        })).nice();
        this.mean_variable1 = _getPR(getMean(this.data.map(function (d) {
          return d[_this3.variable1];
        })), this.data.map(function (d) {
          return d[_this3.variable1];
        }));
        this.mean_variable2 = _getPR(getMean(this.data.map(function (d) {
          return d[_this3.variable2];
        })), this.data.map(function (d) {
          return d[_this3.variable2];
        }));

        var rank_variable1 = this.rank_variable1;
        var rank_variable2 = this.rank_variable2;
        var x = this.x;
        var y = this.y;
        var default_color = 'gray';

        var dots = this.scatter.selectAll('.dot').data(data, function (d) {
          return d.id;
        });

        dots.transition().duration(125).attrs(function (d) {
          return {
            r: 5,
            cx: x(d[rank_variable1]),
            cy: y(d[rank_variable2])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || default_color
          };
        }).on('end', function () {
          dots.call(function (selection) {
            selection.on('mouseover.tooltip', function () {
              svg_bar$2.select('.tooltip').style('display', null);
            }).on('mousemove.tooltip', function (d) {
              var tooltip = svg_bar$2.select('.tooltip').attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 35] + ')');
              tooltip.select('rect').attrs({ width: 0, height: 0 });
              tooltip.select('text.id_feature').text('' + d.id);
              tooltip.select('text.value_feature1').text(self.variable1 + ' (rang) : ' + Math.round(d[self.rank_variable1] * 10) / 10 + '/100');
              tooltip.select('text.value_feature2').text(self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10);
              tooltip.select('text.value_feature3').text(self.variable2 + ' (rang) : ' + Math.round(d[self.rank_variable2] * 10) / 10 + '/100');
              tooltip.select('text.value_feature4').text(self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10);
              var b = tooltip.node().getBoundingClientRect();
              tooltip.select('rect').attrs({ width: b.width + 20, height: b.height + 7.5 });
            }).on('mouseout.tooltip', function () {
              svg_bar$2.select('.tooltip').style('display', 'none');
            });
          });
        });

        dots.enter().insert('circle').transition().duration(125).styles(function (d) {
          return {
            fill: app.colors[d.id] || default_color
          };
        }).attrs(function (d) {
          return {
            r: 5,
            cx: x(d[rank_variable1]),
            cy: y(d[rank_variable2]),
            class: 'dot'
          };
        });
        dots.exit().transition().duration(125).remove();
      } else if (this.type === 'value') {
        var variable1 = this.variable1;
        var variable2 = this.variable2;
        this.x.domain(d3.extent(this.data, function (d) {
          return d[variable1];
        })).nice();
        this.y.domain(d3.extent(this.data, function (d) {
          return d[variable2];
        })).nice();
        this.mean_variable1 = getMean(this.data.map(function (d) {
          return d[variable1];
        }));
        this.mean_variable2 = getMean(this.data.map(function (d) {
          return d[variable2];
        }));

        var _x = this.x;
        var _y = this.y;
        var _default_color = 'gray';

        this.plot.select('#axis--x').transition().duration(125).call(this.xAxis);
        this.plot.select('#axis--y').transition().duration(125).call(this.yAxis);

        var _dots = this.scatter.selectAll('.dot').data(data, function (d) {
          return d.id;
        });

        _dots.transition().duration(125).attrs(function (d) {
          return {
            r: 5,
            cx: _x(d[variable1]),
            cy: _y(d[variable2])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || _default_color
          };
        }).on('end', function () {
          _dots.call(function (selection) {
            selection.on('mouseover.tooltip', function () {
              svg_bar$2.select('.tooltip').style('display', null);
            }).on('mousemove.tooltip', function (d) {
              var tooltip = svg_bar$2.select('.tooltip').attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 35] + ')');
              tooltip.select('rect').attrs({ width: 0, height: 0 });
              tooltip.select('text.id_feature').text('' + d.id);
              tooltip.select('text.value_feature1').text(self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10);
              tooltip.select('text.value_feature2').text(self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10);
              var b = tooltip.node().getBoundingClientRect();
              tooltip.select('rect').attrs({ width: b.width + 20, height: b.height + 7.5 });
            }).on('mouseout.tooltip', function () {
              svg_bar$2.select('.tooltip').style('display', 'none');
            });
          });
        });

        _dots.enter().insert('circle').transition().duration(125).styles(function (d) {
          return {
            fill: app.colors[d.id] || _default_color
          };
        }).attrs(function (d) {
          return {
            r: 5,
            cx: _x(d[variable1]),
            cy: _y(d[variable2]),
            class: 'dot'
          };
        });
        _dots.exit().transition().duration(125).remove();
      }
      this.updateMeanValue();
      this.updateAxisGrid();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.variable1, this.variable2]);
      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      svg_bar$2.select('.brush').call(this.brush.move, null);
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value1 = d.properties[self.variable1];
            var value2 = d.properties[self.variable2];
            var color = comp2(value1, value2, self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self.update();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value1 = d.properties[this.variable1];
        var value2 = d.properties[this.variable2];
        var color = comp2(value1, value2, this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
      }
      this.update();
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var _this5 = this;

      if (this.type === 'value') {
        this.mean_variable1 = getMean(this.data.map(function (d) {
          return d[_this5.variable1];
        }));
        this.mean_variable2 = getMean(this.data.map(function (d) {
          return d[_this5.variable2];
        }));
      } else if (this.type === 'rank') {
        this.mean_variable1 = _getPR(getMean(this.data.map(function (d) {
          return d[_this5.variable1];
        })), this.data.map(function (d) {
          return d[_this5.variable1];
        }));
        this.mean_variable2 = _getPR(getMean(this.data.map(function (d) {
          return d[_this5.variable2];
        })), this.data.map(function (d) {
          return d[_this5.variable2];
        }));
      }
      var grp_mean = this.plot.select('g.mean');
      grp_mean.select('#mean_x').transition().duration(125).attrs({
        x1: this.x(this.mean_variable1),
        x2: this.x(this.mean_variable1)
      });
      grp_mean.select('#mean_y').transition().duration(125).attrs({
        y1: this.y(this.mean_variable2),
        y2: this.y(this.mean_variable2)
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value1 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable1];
        this.ref_value2 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable2];
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
        this.map_elem.resetColors(this.current_ids);
        this.update();
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this6 = this;

      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this6.variable1] && !!ft[_this6.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this6.variable1] = d[_this6.variable1];
        res[_this6.variable2] = d[_this6.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);

      this.xInversed = false;
      this.yInversed = false;
      var tmp_my_region = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0];
      this.ref_value1 = tmp_my_region[this.variable1];
      this.ref_value2 = tmp_my_region[this.variable2];

      this.map_elem.removeRectBrush();
      this.updateItemsCtxMenu();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'changeVariableX',
    value: function changeVariableX(code_variable) {
      var _this7 = this;

      this.variable1 = code_variable;
      this.rank_variable1 = 'pr_' + this.variable1;
      this.pretty_name1 = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      }).name;
      svg_bar$2.select('#title-axis-x').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this7.variable1] && !!ft[_this7.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this7.variable1] = d[_this7.variable1];
        res[_this7.variable2] = d[_this7.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value1 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable1];
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'changeVariableY',
    value: function changeVariableY(code_variable) {
      var _this8 = this;

      this.variable2 = code_variable;
      this.rank_variable2 = 'pr_' + this.variable2;
      this.pretty_name2 = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      }).name;
      svg_bar$2.select('#title-axis-y').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this8.variable1] && !!ft[_this8.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this8.variable1] = d[_this8.variable1];
        res[_this8.variable2] = d[_this8.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value2 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable2];
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'updateItemsCtxMenu',
    value: function updateItemsCtxMenu() {
      var _this9 = this;

      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this9.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this9.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this9.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this9.changeVariableY(elem);
          }
        };
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this10 = this;

      this.itemsX.push({
        name: code_variable,
        action: function action() {
          return _this10.changeVariableX(code_variable);
        }
      });
      this.itemsY.push({
        name: code_variable,
        action: function action() {
          return _this10.changeVariableY(code_variable);
        }
      });
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this11 = this;

      // Remove the variable from the X and Y list of items:
      for (var i = this.itemsX.length - 1; i > -1; i--) {
        if (this.itemsX[i].name === code_variable) {
          this.itemsX.splice(i, 1);
          break;
        }
      }
      for (var _i = this.itemsY.length - 1; _i > -1; _i--) {
        if (this.itemsY[_i].name === code_variable) {
          this.itemsY.splice(_i, 1);
          break;
        }
      }

      // If the variable to remove was currently used for drawing this chart,
      // set a new variable for this axis and redraw the chart:
      if (code_variable === this.variable1) {
        var new_var_x = this.itemsX.filter(function (ft) {
          return ft.name !== _this11.variable2;
        })[0].name;
        this.changeVariableX(new_var_x);
      } else if (code_variable === this.variable2) {
        var new_var_y = this.itemsY.filter(function (ft) {
          return ft.name !== _this11.variable1;
        })[0].name;
        this.changeVariableY(new_var_y);
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$2.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');

      menu.select('#ind_raw_values').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.type = 'value';
        this.classList.add('active');
        menu.select('#ind_ranks').attr('class', 'choice_ind');
        // self.g_bar.selectAll('g').remove();
        self.update();
      });

      menu.select('#ind_ranks').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.type = 'rank';
        this.classList.add('active');
        menu.select('#ind_raw_values').attr('class', 'choice_ind');
        // self.g_bar.selectAll('rect').remove();
        self.update();
      });
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this12 = this;

      var values1 = this.data.map(function (d) {
        return d[_this12.variable1];
      });
      var values2 = this.data.map(function (d) {
        return d[_this12.variable2];
      });
      var features = [{
        Min: d3.min(values1),
        Max: d3.max(values1),
        Moyenne: getMean(values1),
        id: this.variable1,
        Variable: this.variable1,
        'Ma rÃ©gion': this.ref_value1
      }, {
        Min: d3.min(values2),
        Max: d3.max(values2),
        Moyenne: getMean(values2),
        id: this.variable2,
        Variable: this.variable2,
        'Ma rÃ©gion': this.ref_value2
      }];
      return features;
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return ScatterPlot2;
}();

var svg_bar$3 = d3.select('#svg_bar');
var margin$3 = { top: 70, right: 70, bottom: 70, left: 70 };

var width$3 = +svg_bar$3.attr('width') - margin$3.left - margin$3.right;
var height$3 = +svg_bar$3.attr('height') - margin$3.top - margin$3.bottom;

var wrap = function wrap(_text, _width) {
  _text.each(function () {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        lineHeight = 1.4,
        // ems
    y = text.attr('y'),
        x = text.attr('x'),
        dy = parseFloat(text.attr('dy'));
    var line = [],
        lineNumber = 0;
    var tspan = text.text(null).append('tspan').attr('x', x).attr('y', y).attr('dy', dy + 'em');
    var word = words.pop();
    while (word) {
      line.push(word);
      tspan.text(line.join(' '));
      if (tspan.node().getComputedTextLength() > _width) {
        line.pop();
        tspan.text(line.join(' '));
        line = [word];
        tspan = text.append('tspan').attr('x', x).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
      }
      word = words.pop();
    }
  });
};

var move = function move(array, from, to) {
  array.splice(to, 0, array.splice(from, 1)[0]);
  return array;
};

var swap = function swap(array, ix1, ix2) {
  // eslint-disable-line no-param-reassign
  var _ref = [array[ix2], array[ix1]];
  array[ix1] = _ref[0];
  array[ix2] = _ref[1];
  return array;
};

var prepare_data_radar_default = function prepare_data_radar_default(data, variables) {
  // Prepare the data for "My RÃ©gion":
  var v_my_region = data.find(function (d) {
    return d.id === app.current_config.my_region;
  });
  var ojb_my_region = {
    name: app.current_config.my_region,
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    ojb_my_region.axes.push({
      axis: t, value: v_my_region[_v]
    });
  });
  return ojb_my_region;
};

var prepare_data_radar_ft = function prepare_data_radar_ft(data, variables, ft) {
  var ft_values = data.find(function (d) {
    return d.id === ft;
  });
  if (!ft_values) {
    return null;
  }
  var obj = {
    name: ft,
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    obj.axes.push({
      axis: t, value: ft_values[_v]
    });
  });
  return obj;
};

var RadarChart3 = function () {
  function RadarChart3(data, options) {
    var _this = this;

    classCallCheck(this, RadarChart3);

    var cfg = {
      w: width$3, // Width of the circle
      h: height$3, // Height of the circle
      margin: margin$3, // The margins of the SVG
      levels: 10, // How many levels or inner circles should there be drawn
      maxValue: 100, // What is the value that the biggest circle will represent
      labelFactor: 1.3, // How much farther than the radius of the outer circle should the labels be placed
      wrapWidth: 85, // The number of pixels after which a label needs to be given a new line
      opacityArea: 0.35, // The opacity of the area of the blob
      dotRadius: 4, // The size of the colored circles of each blog
      opacityCircles: 0.1, // The opacity of the circles of each blob
      strokeWidth: 2, // The width of the stroke around each blob
      roundStrokes: false, // If true the area and stroke will follow a round path (cardinal-closed)
      color: d3.scaleOrdinal(d3.schemeCategory10), // Color function,
      format: '.2', // The format string to be used by d3.format
      unit: '%', // The unit to display after the number on the axis and point tooltips (like $, â‚¬, %, etc)
      legend: false,
      allowInverseData: true
    };
    this.cfg = cfg;
    // Put all of the options into a variable called cfg
    if (typeof options !== 'undefined') {
      for (var i in options) {
        if (typeof options[i] !== 'undefined') {
          cfg[i] = options[i];
        }
      }
    }

    this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (cfg.w / 2 + cfg.margin.left) + ',' + (cfg.h / 2 + cfg.margin.top) + ')');

    this.prepareData(data);
    this.drawAxisGrid();
    this.drawArea();
    this.handleLegend();
    // Compute the "complÃ©tude" value for these ratios:
    this.completude_value = calcPopCompletudeSubset(app, this.variables);

    // Create the "complÃ©tude" text:
    this.completude = svg_bar$3.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    if (cfg.allowInverseData) {
      this.inverse_data = function (field) {
        var data_length = _this.data.length;
        if (!field) {
          for (var _i = 0; _i < data_length; _i++) {
            var ax = _this.data[_i].axes;
            for (var j = 0; j < ax.length; j++) {
              ax[j].value = 100 - ax[j].value;
            }
          }
        } else {
          for (var _i2 = 0; _i2 < data_length; _i2++) {
            var _ax = _this.data[_i2].axes;
            for (var _j = 0; _j < _ax.length; _j++) {
              if (_ax[_j].axis === field) {
                _ax[_j].value = 100 - _ax[_j].value;
              }
            }
          }
        }
        _this.update();
      };
    }
    this.makeTableStat();
  }

  createClass(RadarChart3, [{
    key: 'add_element',
    value: function add_element(elem) {
      var _this2 = this;

      var n_axis = elem.axes.map(function (i) {
        return i.axis;
      });
      if (!(JSON.stringify(n_axis) === JSON.stringify(this.allAxis))) {
        throw new Error('Expected element with same axes name than existing data.');
      }
      this.data.push(elem);
      this.displayed_ids.push(elem.name);
      for (var j = 0; j < this.data.length; j++) {
        var on_axes = [];
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          on_axes.push(this.data[j].name);
        }
      }

      var self = this;
      var cfg = this.cfg;
      var n = this.data.length - 1;
      var blobWrapper = this.g.insert('g', '.radarCircleWrapper').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', this.radarLine(elem.axes)).style('fill', cfg.color(n)).style('fill-opacity', 0).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0.1);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.7);
      }).on('mouseout', function () {
        // Bring back all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });
      // .on('click', function () {
      //   const p = this.parentElement;
      //   if (p.previousSibling.className !== 'tooltip') {
      //     const group = g.node();
      //     group.insertBefore(p, group.querySelector('.tooltip'));
      //     const new_order = [];
      //     g.selectAll('.radarWrapper').each(d => new_order.push(d.name));
      //     new_order.reverse();
      //     updateLegend(new_order);
      //   }
      // });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', this.radarLine(elem.axes)).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', cfg.color(n)).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(elem.axes).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', function (d) {
        return cfg.color(d.id);
      }).style('fill-opacity', 0.8);

      blobWrapper.node().__data__ = elem;

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = this.g.insert('g', '.tooltip').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarCircleWrapper');

      blobCircleWrapper.node().__data__ = elem;

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(elem.axes).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        self.g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(this.Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        self.g.select('.tooltip').transition().style('display', 'none').text('');
      });
    }
  }, {
    key: 'changeOrder',
    value: function changeOrder() {
      this.data = this.data.slice(1, this.data.length).concat(this.data.slice(0, 1));
      this.update();
    }
  }, {
    key: 'prepareData',
    value: function prepareData(data) {
      var _this3 = this;

      // Set the minimum number of variables to keep selected for this kind of chart:
      app.current_config.nb_var = 3;
      this.variables = app.current_config.ratio;
      this.ref_data = data.slice().filter(function (ft) {
        return _this3.variables.map(function (v) {
          return !!ft[v];
        }).every(function (d) {
          return d === true;
        });
      });
      this.rank_variables = this.variables.map(function (d) {
        return 'pr_' + d;
      });
      this.variables.forEach(function (d, i) {
        computePercentileRank(_this3.ref_data, d, _this3.rank_variables[i]);
      });
      this.data = [prepare_data_radar_default(this.ref_data, this.variables)];
      this.displayed_ids = this.data.map(function (d) {
        return d.name;
      });
      this.current_ids = this.ref_data.map(function (d) {
        return d.id;
      });
      this.id_my_region = app.current_config.my_region;

      // If the supplied maxValue is smaller than the actual one, replace by the max in the data
      var maxValue = 0;
      for (var j = 0; j < this.data.length; j++) {
        var on_axes = [];
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          if (this.data[j].axes[i].value > maxValue) {
            maxValue = this.data[j].axes[i].value;
          }
        }
      }

      this.maxValue = math_max(this.cfg.maxValue, maxValue);
      this.allAxis = this.data[0].axes.map(function (i) {
        return i.axis;
      }); // Names of each axis
      this.total = this.allAxis.length; // The number of different axes
      this.radius = Math.min(this.cfg.w / 2, this.cfg.h / 2); // Radius of the outermost circle
      this.Format = d3.format(this.cfg.format); // Formatting
      this.angleSlice = Math.PI * 2 / this.total; // The width in radians of each "slice"
      // Scale for the radius
      this.rScale = d3.scaleLinear().range([0, this.radius]).domain([0, this.maxValue]);
      // The radial line function
      this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
        return _this3.rScale(d.value);
      }).angle(function (d, i) {
        return i * _this3.angleSlice;
      });
    }
  }, {
    key: 'drawAxisGrid',
    value: function drawAxisGrid() {
      var self = this;
      var cfg = this.cfg;
      var g = this.g;
      var radius = this.radius;
      var maxValue = this.maxValue;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      var labelClicked = function labelClicked() {
        var ix = +this.id;
        if (ix + 1 === self.allAxis.length) {
          for (var i = 0; i < self.data.length; i++) {
            swap(self.data[i].axes, ix, 0);
          }
        } else {
          var new_ix = ix + 1;
          for (var _i3 = 0; _i3 < self.data.length; _i3++) {
            move(self.data[_i3].axes, ix, new_ix);
          }
        }
        self.update();
      };

      var labelCtxMenu = function labelCtxMenu(label) {
        d3.event.stopPropagation();
        d3.event.preventDefault();
        var ix = +this.id;
        self.inverse_data(label);
      };

      var axisGrid = g.append('g').attr('class', 'axisWrapper');

      // Draw the background circles
      axisGrid.selectAll('.levels').data(d3.range(1, cfg.levels + 1).reverse()).enter().append('circle').attr('class', 'gridCircle').attr('r', function (d) {
        return radius / cfg.levels * d;
      }).style('fill', '#CDCDCD').style('stroke', '#CDCDCD').style('fill-opacity', cfg.opacityCircles).style('filter', 'url(#glow)');

      // // Text indicating at what % each level is
      // axisGrid.selectAll('.axisLabel')
      //   .data(d3.range(1, (cfg.levels + 1)).reverse())
      //   .enter().append('text')
      //   .attr('class', 'axisLabel')
      //   .attr('x', 4)
      //   .attr('y', d => -d * radius / cfg.levels)
      //   .attr('dy', '0.4em')
      //   .style('font-size', '10px')
      //   .attr('fill', '#737373')
      //   .text(d => Format(maxValue * d / cfg.levels) + cfg.unit);

      // Create the straight lines radiating outward from the center
      var axis = axisGrid.selectAll('.axis').data(this.allAxis).enter().append('g').attr('class', 'axis');
      // Append the lines
      axis.append('line').attr('x1', 0).attr('y1', 0).attr('x2', function (d, i) {
        return rScale(maxValue * 1.1) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y2', function (d, i) {
        return rScale(maxValue * 1.1) * math_sin(angleSlice * i - HALF_PI);
      }).attr('class', 'line').style('stroke', 'white').style('stroke-width', '2px');

      // Append the labels at each axis
      axis.append('text').attr('class', 'legend').style('font-size', '11px').attr('id', function (d, i) {
        return i;
      }).attr('text-anchor', 'middle').attr('dy', '0.35em').attr('x', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI);
      }).text(function (d) {
        return d;
      }).on('click', labelClicked).on('contextmenu', cfg.allowInverseData ? labelCtxMenu : null).call(wrap, cfg.wrapWidth);

      // Filter for the outside glow
      var filter = g.append('defs').append('filter').attr('id', 'glow');
      filter.append('feGaussianBlur').attr('stdDeviation', '2.5').attr('result', 'coloredBlur');
      var feMerge = filter.append('feMerge');
      feMerge.append('feMergeNode').attr('in', 'coloredBlur');
      feMerge.append('feMergeNode').attr('in', 'SourceGraphic');

      this.axisGrid = axisGrid;
    }
  }, {
    key: 'handleLegend',
    value: function handleLegend() {
      var cfg = this.cfg;
      if (cfg.legend !== false && _typeof(cfg.legend) === 'object') {
        var names = this.data.map(function (el) {
          return el.name;
        });
        if (cfg.legend.title) {
          this.legendZone.append('text').attr('class', 'title').attr('transform', 'translate(0, -20)').attr('x', cfg.w - 70).attr('y', 10).attr('font-size', '12px').attr('fill', '#404040').text(cfg.legend.title);
        }
        var legend = this.legendZone.selectAll('g').data(names);
        var legendEnter = legend.enter().append('g');

        // Create rectangles markers
        legendEnter.append('rect').attrs(function (d, i) {
          return {
            x: cfg.w - 65,
            y: i * 20,
            width: 10,
            height: 10
          };
        }).style('fill', function (d) {
          return cfg.color(d);
        });

        // Create labels
        legendEnter.append('text').attrs(function (d, i) {
          return {
            x: cfg.w - 52,
            y: i * 20 + 9,
            fill: '#737373',
            'font-size': '11px'
          };
        }).text(function (d) {
          return d;
        });

        legend.merge(legendEnter).selectAll('rect').attr('y', function (d, i) {
          return i * 20;
        }).style('fill', function (d) {
          return cfg.color(d);
        });

        legend.merge(legendEnter).selectAll('text').attrs(function (d, i) {
          return {
            x: cfg.w - 52,
            y: i * 20 + 9
          };
        }).text(function (d) {
          return d;
        });

        legend.exit().remove();
      }
    }
  }, {
    key: 'drawArea',
    value: function drawArea() {
      var _this4 = this;

      var cfg = this.cfg;
      var g = this.g;
      var Format = this.Format;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      // Create a wrapper for the blobs
      var blobWrapper = g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('fill', function (d, i) {
        return cfg.color(i);
      }).style('fill-opacity', 0).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0.1);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.7);
      }).on('mouseout', function () {
        // Bring back all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });
      // .on('click', function () {
      //   const p = this.parentElement;
      //   if (p.previousSibling.className !== 'tooltip') {
      //     const group = g.node();
      //     group.insertBefore(p, group.querySelector('.tooltip'));
      //     const new_order = [];
      //     g.selectAll('.radarWrapper').each(d => new_order.push(d.name));
      //     new_order.reverse();
      //     updateLegend(new_order);
      //   }
      // });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', function (d, i) {
        return cfg.color(i);
      }).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', function (d) {
        return cfg.color(d.id);
      }).style('fill-opacity', 0.8);

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarCircleWrapper');

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        g.select('.tooltip').transition().style('display', 'none').text('');
      });

      var tooltip = g.append('text').attrs({ class: 'tooltip', x: 0, y: 0, dy: '0.35em', 'text-anchor': 'middle' }).styles({ 'font-size': '12px', display: 'none' });

      this.legendZone = svg_bar$3.append('g').attrs({
        id: 'legendZone',
        class: 'legend',
        transform: 'translate(' + cfg.legend.translateX + ',' + (cfg.legend.translateY + 20) + ')'
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this5 = this;

      var rScale = this.rScale;
      var maxValue = this.maxValue;
      var cfg = this.cfg;
      var angleSlice = this.angleSlice;
      // console.log(this.current_ids);
      // if (new_data) {
      //   const new_axis = new_data[0].axes.map(elem => elem.axis);
      //   if (!(JSON.stringify(new_axis) === JSON.stringify(this.allAxis))) {
      //     throw new Error('Expected element with same axes name than existing data.');
      //   }
      //   this.data = new_data;
      //   this.allAxis = new_axis;
      // } else {
      this.allAxis = this.data[0].axes.map(function (elem) {
        return elem.axis;
      });
      // }
      var update_axis = this.axisGrid.selectAll('.axis').data(this.allAxis);

      var t = this.g.selectAll('.radarWrapper').transition().duration(225);
      // .on('end', () => {
      //   parent.selectAll('text.legend')
      //     .text(d => d)
      //     .call(wrap, cfg.wrapWidth);
      //   // wrap(parent.selectAll('text.legend'), cfg.wrapWidth);
      // });
      update_axis.select('text.legend').attrs(function (d, i) {
        return {
          id: i,
          x: rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI),
          y: rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI)
        };
      }).text(function (d) {
        return d;
      }).call(wrap, cfg.wrapWidth);

      var update_blobWrapper = this.g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      });

      update_blobWrapper.select('.radarArea').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      update_blobWrapper.select('.radarStroke').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      var circle = update_blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      });
      circle.transition(t).attrs(function (d, i) {
        return {
          cx: rScale(d.value) * math_cos(angleSlice * i - HALF_PI),
          cy: rScale(d.value) * math_sin(angleSlice * i - HALF_PI)
        };
      }).styles(function (d) {
        return {
          fill: cfg.color(d.id),
          'fill-opacity': 0.8
        };
      });

      console.log(this.g.selectAll('.radarCircleWrapper'));
      console.log(this.data);

      var update_blobCircleWrapper = this.g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      });

      var invisibleCircle = update_blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      });
      invisibleCircle.transition(t).attrs(function (d, i) {
        return {
          cx: rScale(d.value) * math_cos(angleSlice * i - HALF_PI),
          cy: rScale(d.value) * math_sin(angleSlice * i - HALF_PI)
        };
      });
    }
  }, {
    key: 'round_stroke',
    value: function round_stroke(val) {
      var _this6 = this;

      if (val === undefined) {
        return this.cfg.roundStrokes;
      } else if (val !== this.cfg.roundStrokes) {
        this.cfg.roundStrokes = val;
        this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
          return _this6.rScale(d.value);
        }).angle(function (d, i) {
          return i * _this6.angleSlice;
        });
        this.update();
      }
      return val;
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.updateMapRegio();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$3.html('');
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this7 = this;

      var old_my_region = this.id_my_region;
      var other_features = this.displayed_ids.filter(function (d) {
        return d !== old_my_region;
      });
      this.g.remove();
      this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.id_my_region = app.current_config.my_region;
      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this7.ref_data, _this7.variables, id);
        _this7.add_element(a);
      });
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this8 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this8.id_my_region;
      });
      this.g.remove();
      this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this8.ref_data, _this8.variables, id);
        _this8.add_element(a);
      });
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this9 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this9.id_my_region;
      });
      this.g.remove();
      this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this9.ref_data, _this9.variables, id);
        _this9.add_element(a);
      });
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this10 = this;

      var all_values = this.variables.map(function (v) {
        return _this10.ref_data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.ref_data.find(function (d) {
        return d.id === _this10.id_my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this10.variables[i],
          Variable: _this10.variables[i],
          'Ma rÃ©gion': my_region[_this10.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === this.id_my_region) return;
      if (this.displayed_ids.indexOf(id) < 0) {
        var a = prepare_data_radar_ft(this.ref_data, this.variables, id);
        this.add_element(a);
        this.update();
      } else {
        this.g.selectAll('#' + id + '.radarWrapper').remove();
        this.g.selectAll('#' + id + '.radarCircleWrapper').remove();
        var ix = this.data.map(function (_d, i) {
          return [i, _d.name === id];
        }).find(function (_d) {
          return _d[1] === true;
        });
        this.data.splice(ix, 1);
        this.displayed_ids = this.data.map(function (_d) {
          return _d.name;
        });
        this.update();
      }
      this.updateMapRegio();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, this.variables);
      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this11 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return d.properties[app.current_config.id_field_geom] === _this11.id_my_region ? color_highlight : _this11.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? _this11.displayed_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? color_default_dissim : color_countries : color_disabled;
      });
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return RadarChart3;
}();

var svg_bar$4 = d3.select('#svg_bar');
var margin$4 = { top: 20, right: 20, bottom: 40, left: 40 };

var width$4 = +svg_bar$4.attr('width') - margin$4.left - margin$4.right;
var height$4 = +svg_bar$4.attr('height') - margin$4.top - margin$4.bottom;

/**
* Class representing some "special" bar chart, allowing to toogle the
* reprsentation between a simple bar chart (for **similarity**)
* and a grouped bar chart with negative value (for **dissimilarity**)
*/
var SimilarityChart = function () {
  /**
  * Create a the bar chart on the `svg_bar` svg element previously defined.
  * @param {Array} ref_data - A reference to the subset of the dataset to be used
  * to create the scatterplot (should contain at least two field flagged as ratio
  * in the `app.current_config.ratio` Object).
  */
  function SimilarityChart(ref_data) {
    var _this = this;

    classCallCheck(this, SimilarityChart);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var x = d3.scaleBand().range([0, width$4]).padding(0.1);
    var x1 = d3.scaleBand().padding(0.05);
    var y = d3.scaleLinear().range([height$4, 0]);
    var z = d3.scaleOrdinal().range(shuffle(d3.schemeCategory10));
    var xAxis = d3.axisBottom(x);
    var yAxis = d3.axisLeft(y);
    this.x = x;
    this.x1 = x1;
    this.y = y;
    this.z = z;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.nb_display = 5;
    this.variables = app.current_config.ratio;
    this.current_type = 'global';
    // Filter the data against empty features:
    this.ref_data = ref_data.filter(function (ft) {
      return _this.variables.map(function (v) {
        return !!ft[v];
      }).every(function (v) {
        return v === true;
      });
    }).slice();
    // Standardize all variables:
    this.variables.forEach(function (v) {
      var serie = _this.ref_data.map(function (ft) {
        return ft[v];
      });
      var standardized = getStandardizedMeanStdDev(serie);
      var name_standardized = 'st_' + v;
      _this.ref_data.forEach(function (ft, i) {
        // eslint-disable-next-line no-param-reassign
        ft[name_standardized] = standardized[i];
      });
    });

    // Find value of my region:
    this.obj_my_region = this.ref_data.find(function (d) {
      return d.id === app.current_config.my_region;
    });

    this.ref_data.forEach(function (ft) {
      var s = _this.variables.map(function (v) {
        return math_pow(_this.obj_my_region['st_' + v] - ft['st_' + v], 2);
      }).reduce(function (a, b) {
        return a + b;
      }, 0);
      // eslint-disable-next-line no-param-reassign
      ft.dissimilarity = math_sqrt(s);
      _this.variables.forEach(function (v) {
        var var_name = 'ec_' + v;
        // eslint-disable-next-line no-param-reassign
        ft[var_name] = ft[v] / _this.obj_my_region[v] * 100 - 100;
      });
    });
    this.ref_data = this.ref_data.sort(function (a, b) {
      return a.dissimilarity - b.dissimilarity;
    });
    this.data = this.ref_data.slice(1, 1 + this.nb_display);

    this.current_ids = this.ref_data.map(function (d) {
      return d.id;
    });
    this.displayed_ids = this.data.map(function (d) {
      return d.id;
    });

    resetColors();

    svg_bar$4.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width$4, height: height$4 });

    var plot = svg_bar$4.append('g').attr('transform', 'translate(' + margin$4.left + ', ' + margin$4.top + ')');

    this.plot = plot;

    var _max = d3.max(this.data, function (d) {
      return d.dissimilarity;
    });

    x.domain(this.displayed_ids);
    y.domain([0, _max + _max / 12]);

    plot.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height$4 + ')' }).call(xAxis);

    plot.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    plot.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = plot.append('g').attr('id', 'bar');

    this.completude_value = calcPopCompletudeSubset(app, this.variables);

    this.completude = svg_bar$4.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar$4);

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var menu_selection = d3.select(svg_bar$4.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-20px', 'margin-left': '30px', position: 'relative' });
    var selection_close = menu_selection.append('p').style('float', 'left');

    selection_close.append('span').property('value', 'close').attrs({ value: 'close', class: 'type_selection square checked' });
    selection_close.append('span').attrs({ class: 'label_chk' }).html('Les');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).property('value', 5);
    selection_close.append('span').attrs({ class: 'label_chk' }).html('rÃ©gions les plus proches');

    var indice_kind = menu_selection.append('p').styles({
      float: 'right',
      display: 'inline-grid'
    });

    indice_kind.append('span').attrs({
      id: 'ind_global',
      class: 'choice_ind active'
    }).text('Indice global');

    indice_kind.append('span').attrs({
      id: 'ind_detail',
      class: 'choice_ind'
    }).text('Indices dÃ©taillÃ©s');

    this.makeGrid();
    this.bindMenu();
    this.update();
    this.makeTableStat();
  }

  createClass(SimilarityChart, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#bar').attr('class', 'grid grid-y').call(d3.axisLeft(this.y).tickSize(-width$4).tickFormat('')).selectAll('line, path').attr('stroke', 'lightgray');
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, this.variables);
      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      var self = this;
      svg_bar$4.select('.tooltip').selectAll('text').text('');
      svg_bar$4.select('#title-axis-y').remove();
      if (this.current_type === 'global') {
        var _max = d3.max(this.data, function (d) {
          return d.dissimilarity;
        });
        this.x.domain(this.displayed_ids);
        this.y.domain([0, _max + _max / 12]);

        this.plot.select('#zero_line').remove();

        var bars = this.g_bar.selectAll('.bar').data(this.data, function (d) {
          return d.id;
        });

        bars.attrs(function (d) {
          return {
            x: _this2.x(d.id),
            y: _this2.y(d.dissimilarity),
            width: _this2.x.bandwidth(),
            height: height$4 - _this2.y(d.dissimilarity)
          };
        }).style('fill', color_default_dissim);

        bars.enter().insert('rect', '.mean').attrs(function (d) {
          return {
            class: 'bar',
            x: _this2.x(d.id),
            y: _this2.y(d.dissimilarity),
            width: _this2.x.bandwidth(),
            height: height$4 - _this2.y(d.dissimilarity)
          };
        }).style('fill', color_default_dissim).on('mouseover', function () {
          svg_bar$4.select('.tooltip').style('display', null);
        }).on('mouseout', function () {
          svg_bar$4.select('.tooltip').style('display', 'none');
        }).on('mousemove', function (d) {
          var tooltip = svg_bar$4.select('.tooltip');
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text(app.current_config.my_region + ' - ' + d.id);
          tooltip.select('text.value_feature1').text('Indice de dissimilarit\xE9 : ' + math_round(d.dissimilarity * 10) / 10);
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({
            width: b.width + 20,
            height: b.height + 7.5
          });
          tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 25] + ')');
        });

        bars.exit().remove();

        var axis_x = this.plot.select('.axis--x').attr('font-size', function () {
          return _this2.nb_display > 75 ? 6 : 10;
        }).call(this.xAxis);

        axis_x.selectAll('text').attrs(function () {
          if (_this2.nb_display > 100) {
            return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
          } else if (_this2.nb_display > 20) {
            return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
          }
          return { dx: '0', dy: '0.71em', transform: null };
        }).style('text-anchor', function () {
          return _this2.nb_display > 20 ? 'end' : 'middle';
        });

        this.plot.select('.axis--y').call(this.yAxis);

        this.plot.select('.grid-y').call(d3.axisLeft(this.y).tickSize(-width$4).tickFormat('')).selectAll('line, path').attr('stroke', 'lightgray');

        svg_bar$4.append('text').attrs({
          id: 'title-axis-y',
          x: margin$4.left / 2,
          y: margin$4.top + height$4 / 2 - 10,
          transform: 'rotate(-90, ' + margin$4.left / 2 + ', ' + (margin$4.top + height$4 / 2) + ')'
        }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text('Indice de dissimilaritÃ©');
      } else if (this.current_type === 'detail') {
        var keys = this.variables.map(function (v) {
          return 'ec_' + v;
        });
        this.x.domain(this.displayed_ids);
        this.x1.domain(keys).rangeRound([0, this.x.bandwidth()]);
        this.z.domain(keys);
        var mmin = d3.min(this.data, function (d) {
          return d3.min(keys, function (key) {
            return d[key];
          });
        });
        this.y.domain([mmin > 0 ? 0 : mmin, d3.max(this.data, function (d) {
          return d3.max(keys, function (key) {
            return d[key];
          });
        })]).nice();

        this.plot.select('#zero_line').remove();
        this.plot.insert('line').attrs({
          x1: 0,
          x2: width$4,
          y1: this.y(0),
          y2: this.y(0),
          'stroke-width': '1px',
          stroke: '#000',
          id: 'zero_line'
        });

        var _bars = this.g_bar.selectAll('.group_bar').data(this.data, function (d) {
          return d.id;
        });

        _bars.attr('transform', function (d) {
          return 'translate(' + _this2.x(d.id) + ', 0)';
        });

        _bars.selectAll('rect').attrs(function (d) {
          return {
            x: _this2.x1(d.key),
            y: _this2.y(Math.max(0, d.value)),
            width: _this2.x1.bandwidth(),
            height: Math.abs(_this2.y(d.value) - _this2.y(0)),
            fill: _this2.z(d.key)
          };
        });

        _bars.enter().append('g').attrs(function (d) {
          return {
            class: 'group_bar',
            transform: 'translate(' + _this2.x(d.id) + ', 0)'
          };
        }).selectAll('rect').data(function (d) {
          return keys.map(function (key) {
            return { key: key, value: d[key], value_ref: d[key.replace('ec_', '')], id: d.id };
          });
        }).enter().append('rect').attrs(function (d) {
          return {
            x: _this2.x1(d.key),
            y: _this2.y(Math.max(0, d.value)),
            width: _this2.x1.bandwidth(),
            height: Math.abs(_this2.y(d.value) - _this2.y(0)),
            fill: _this2.z(d.key)
          };
        }).on('mouseover', function () {
          svg_bar$4.select('.tooltip').style('display', null);
        }).on('mouseout', function () {
          svg_bar$4.select('.tooltip').style('display', 'none');
        }).on('mousemove', function (d) {
          var tooltip = svg_bar$4.select('.tooltip');
          var indic = d.key.replace('ec_', '');
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text(app.current_config.my_region + ' - ' + d.id);
          tooltip.select('text.value_feature1').text('Indicateur : ' + indic);
          tooltip.select('text.value_feature2').text(app.current_config.my_region + ' : ' + math_round(self.obj_my_region[indic] * 10) / 10);
          tooltip.select('text.value_feature3').text(d.id + ' : ' + math_round(d.value_ref * 10) / 10);
          tooltip.select('text.value_feature4').text('\xC9cart: ' + math_round(d.value * 10) / 10 + ' %');
          var tx = +this.parentElement.getAttribute('transform').replace('translate(', '').replace(', 0)', '');
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({
            width: b.width + 20,
            height: b.height + 7.5
          });
          tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5 + tx, d3.mouse(this)[1] - 72.5] + ')');
        });

        _bars.exit().remove();

        var _axis_x = this.plot.select('.axis--x').transition().call(d3.axisBottom(this.x));
        this.plot.select('.axis--y').transition().call(d3.axisLeft(this.y).ticks(null, 's'));

        this.plot.select('.grid-y').transition().call(d3.axisLeft(this.y).tickSize(-width$4).tickFormat('')).selectAll('line').attr('stroke', 'lightgray');

        _axis_x.selectAll('text').attrs(function () {
          if (_this2.nb_display > 18) {
            return {
              dx: '-0.8em',
              dy: '0.15em',
              transform: 'rotate(-65)',
              'font-size': _this2.nb_display > 45 ? '7.5px' : '9px' };
          }
          return { dx: '0', dy: '0.71em', transform: null };
        }).style('text-anchor', function () {
          return _this2.nb_display > 18 ? 'end' : 'middle';
        });

        _axis_x.selectAll('.tick > line').attrs({
          transform: 'translate(' + Math.ceil(width$4 / (this.displayed_ids.length * 2)) + ',0)',
          y1: 6,
          y2: -height$4
        }).styles({
          stroke: 'gray',
          'stroke-opacity': 0.4
        });
      }
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this3 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this3.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this4 = this;

      this.variables = app.current_config.ratio;
      // Filter the data against empty features:
      this.ref_data = app.current_data.filter(function (ft) {
        return _this4.variables.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      // Standardize all variables:
      this.variables.forEach(function (v) {
        var serie = _this4.ref_data.map(function (ft) {
          return ft[v];
        });
        var standardized = getStandardizedMeanStdDev(serie);
        var name_standardized = 'st_' + v;
        _this4.ref_data.forEach(function (ft, i) {
          // eslint-disable-next-line no-param-reassign
          ft[name_standardized] = standardized[i];
        });
      });

      // Find value of my region:
      this.obj_my_region = this.ref_data.find(function (d) {
        return d.id === app.current_config.my_region;
      });

      this.ref_data.forEach(function (ft) {
        var s = _this4.variables.map(function (v) {
          return math_pow(_this4.obj_my_region['st_' + v] - ft['st_' + v], 2);
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
        // eslint-disable-next-line no-param-reassign
        ft.dissimilarity = math_sqrt(s);
        _this4.variables.forEach(function (v) {
          var var_name = 'ec_' + v;
          // eslint-disable-next-line no-param-reassign
          ft[var_name] = ft[v] / _this4.obj_my_region[v] * 100 - 100;
        });
      });
      this.ref_data = this.ref_data.sort(function (a, b) {
        return a.dissimilarity - b.dissimilarity;
      });
      this.data = this.ref_data.slice(1, 1 + this.nb_display);

      this.current_ids = this.ref_data.map(function (d) {
        return d.id;
      });
      this.displayed_ids = this.data.map(function (d) {
        return d.id;
      });
      app.colors = {};
      this.displayed_ids.forEach(function (_id) {
        app.colors[_id] = color_default_dissim;
      });
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateCompletude();
      this.updateTableStats();
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'applySelection',
    value: function applySelection(nb_value) {
      this.nb_display = nb_value;
      this.data = this.ref_data.slice(1, 1 + nb_value);
      this.displayed_ids = this.data.map(function (d) {
        return d.id;
      });
      app.colors = {};
      this.displayed_ids.forEach(function (_id) {
        app.colors[_id] = color_default_dissim;
      });
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        var value = +this.value;
        if (value < 1) {
          this.value = 1;
          return;
        }
        if (self.current_type === 'global' && value > self.ref_data.length) {
          value = this.value = self.ref_data.length;
        } else if (self.current_type === 'detail' && value > 50) {
          value = this.value = 50;
        }
        self.applySelection(value);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);

      menu.select('#ind_global').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.current_type = 'global';
        this.classList.add('active');
        menu.select('#ind_detail').attr('class', 'choice_ind');
        self.g_bar.selectAll('g').remove();
        self.update();
      });

      menu.select('#ind_detail').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.current_type = 'detail';
        this.classList.add('active');
        menu.select('#ind_global').attr('class', 'choice_ind');
        self.g_bar.selectAll('rect').remove();
        self.update();
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      this.g_bar.selectAll('rect, g').remove();
      this.changeStudyZone();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      this.g_bar.selectAll('rect, g').remove();
      this.changeStudyZone();
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.plot.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$4.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.applySelection(5);

      // TODO : define in each chart was kind of tooltip to display on the map
      // this.map_elem.target_layer.selectAll('path')
      //   .on('mouseover', () => {
      //     svg_map.select('.tooltip')
      //       .style('display', null);
      //   })
      //   .on('mouseout', () => {
      //     svg_map.select('.tooltip')
      //       .style('display', 'none');
      //   })
      //   .on('mousemove', function (d) {
      //     const tooltip = svg_map.select('.tooltip');
      //     tooltip
      //       .select('text.id_feature')
      //       .text(`${d.properties[app.current_config.id_field_geom]}`);
      //     let _ix, nb_val;
      //     for (_ix = 0, nb_val = Math.min(app.current_config.ratio.length, 5); _ix < nb_val; _ix++) {
      //       tooltip.select(`text.value_feature${_ix + 1}`)
      //         .text(`${app.current_config.ratio_pretty_name[_ix]}: ${math_round(d.properties[app.current_config.ratio[_ix]] * 10) / 10}`);
      //     }
      //     tooltip
      //       .attr('transform', `translate(${[d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 - _ix * 12]})`);
      //   });
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this5 = this;

      var all_values = this.variables.map(function (v) {
        return _this5.ref_data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.ref_data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this5.variables[i],
          Variable: _this5.variables[i],
          'Ma rÃ©gion': my_region[_this5.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      this.table_stats = new TableResumeStat(this.prepareTableStat());
    }
  }]);
  return SimilarityChart;
}();

var svg_bar$5 = d3.select('#svg_bar');
var margin$5 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$5 = +svg_bar$5.attr('width') - margin$5.left - margin$5.right;
var height$5 = +svg_bar$5.attr('height') - margin$5.top - margin$5.bottom;

var boxQuartiles = function boxQuartiles(values) {
  return [d3.quantile(values, 0.25), d3.quantile(values, 0.5), d3.quantile(values, 0.75)];
};

/**
* Class representing a chart of "parallel coordinates".
*/
var BoxPlot1 = function () {
  function BoxPlot1(ref_data) {
    var _this = this;

    classCallCheck(this, BoxPlot1);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var self = this;
    this.ratio_to_use = app.current_config.ratio[0];
    this.current_level = +app.current_config.current_level;
    this.inf_level = +this.current_level + 2;
    this.plot = svg_bar$5.append('g').attr('transform', 'translate(' + [margin$5.left, margin$5.top] + ')');

    this.ref_data = ref_data.filter(function (ft) {
      return !!ft[_this.ratio_to_use];
    });
    var inf_level_features = app.full_dataset.filter(function (ft) {
      return +ft.level === _this.inf_level;
    });
    var _all_values = [];
    this.data = [];
    this.ref_data.forEach(function (ft) {
      var id = ft.id;
      var children_ids = app.agg_n2.filter(function (d) {
        return d.NUTS1_2016 === id;
      }).map(function (d) {
        return d.geo;
      });
      var children = inf_level_features.filter(function (d) {
        return children_ids.indexOf(d[app.current_config.id_field].slice(0, 4)) > -1;
      }).map(function (d) {
        return +d[_this.ratio_to_use];
      });
      console.log(children);
      if (children.length < 2) {
        ft.remove = true; // eslint-disable-line no-param-reassign
        return;
      }
      children.sort(function (a, b) {
        return a - b;
      });
      var record = {
        id: id,
        counts: children,
        quartile: boxQuartiles(children),
        whiskers: [d3.min(children), d3.max(children)],
        color: id === app.current_config.my_region ? color_highlight : color_countries
      };
      _all_values = _all_values.concat(children);
      _this.data.push(record);
    });

    this.data.sort(function (a, b) {
      return a.quartile[1] - b.quartile[1];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    var min = d3.min(_all_values) - 5;
    var max = d3.max(_all_values) + 5;
    var xScale = d3.scaleBand().domain(this.data.map(function (d) {
      return d.id;
    })).range([0, width$5]).padding(1);
    var yScale = d3.scaleLinear().domain([min, max]).range([height$5, 0]);

    var max_nb_ft = this.data.map(function (d) {
      return d.counts.length;
    });
    max_nb_ft.sort(function (a, b) {
      return a - b;
    });
    max_nb_ft = max_nb_ft[max_nb_ft.length - 1];
    var barWidth = xScale.step() - 1;
    var get_bar_width = function get_bar_width(nb_ft) {
      return barWidth * nb_ft / max_nb_ft;
    };

    this.plot = svg_bar$5.append('g').attr('transform', 'translate(' + [margin$5.left, margin$5.top] + ')');
    this.plot.append('g').attrs({ class: 'axis axis--x', transform: 'translate(10, ' + height$5 + ')' }).call(d3.axisBottom(xScale));
    this.plot.append('g').attrs({ class: 'axis axis--y', transform: 'translate(10, 0)' }).call(d3.axisLeft(yScale));

    this.g_box = this.plot.append('g').attr('transform', 'translate(10, 0)');

    this.vertical_lines = this.g_box.selectAll('.vertical_lines').data(this.data).enter().append('line').attrs(function (d) {
      return {
        x1: xScale(d.id) + get_bar_width(d.counts.length) / 2,
        y1: yScale(d.whiskers[0]),
        x2: xScale(d.id) + get_bar_width(d.counts.length) / 2,
        y2: yScale(d.whiskers[1]),
        stroke: '#000',
        'stroke-width': 0.5,
        fill: 'none'
      };
    });

    this.g_box.selectAll('rect').data(this.data).enter().append('rect').attrs(function (d) {
      return {
        width: get_bar_width(d.counts.length),
        height: yScale(d.quartile[0]) - yScale(d.quartile[2]),
        x: xScale(d.id),
        y: yScale(d.quartile[2]),
        fill: d.color,
        stroke: '#000',
        'stroke-width': 0.5
      };
    });

    var horizontalLineConfigs = [{
      x1: function x1(datum) {
        return xScale(datum.id);
      },
      y1: function y1(datum) {
        return yScale(datum.whiskers[1]);
      },
      x2: function x2(datum) {
        return xScale(datum.id) + get_bar_width(datum.counts.length);
      },
      y2: function y2(datum) {
        return yScale(datum.whiskers[1]);
      }
    }, {
      x1: function x1(datum) {
        return xScale(datum.id);
      },
      y1: function y1(datum) {
        return yScale(datum.quartile[1]);
      },
      x2: function x2(datum) {
        return xScale(datum.id) + get_bar_width(datum.counts.length);
      },
      y2: function y2(datum) {
        return yScale(datum.quartile[1]);
      }
    }, {
      x1: function x1(datum) {
        return xScale(datum.id);
      },
      y1: function y1(datum) {
        return yScale(datum.whiskers[0]);
      },
      x2: function x2(datum) {
        return xScale(datum.id) + get_bar_width(datum.counts.length);
      },
      y2: function y2(datum) {
        return yScale(datum.whiskers[0]);
      }
    }];
    for (var i = 0; i < horizontalLineConfigs.length; i++) {
      var lineConfig = horizontalLineConfigs[i];
      var horizontalLine = this.g_box.selectAll('.whiskers').data(this.data).enter().append('line').attrs({
        x1: lineConfig.x1,
        y1: lineConfig.y1,
        x2: lineConfig.x2,
        y2: lineConfig.y2,
        stroke: '#000',
        'stroke-width': 0.5,
        fill: 'none'
      });
    }
    this.plot.select('.axis--x').selectAll('text').styles({
      'text-anchor': 'end',
      'font-size': '9px'
    }).attrs({
      dx: '-0.8em',
      dy: '0.15em',
      transform: 'rotate(-65)'
    });
    this.makeTableStat();
  }

  createClass(BoxPlot1, [{
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {}
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {}
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {}
  }, {
    key: 'remove',
    value: function remove() {
      this.plot.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$5.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this2 = this;

      var values = this.data.map(function (d) {
        return d[_this2.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.ref_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BoxPlot1;
}();

var svg_bar$6 = d3.select('#svg_bar');
var margin$6 = { top: 20, right: 40, bottom: 40, left: 40 };

var width$6 = +svg_bar$6.attr('width') - margin$6.left - margin$6.right;
var height$6 = +svg_bar$6.attr('height') - margin$6.top - margin$6.bottom;

/**
* Class representing a chart of "parallel coordinates".
*/
var ParallelCoords2 = function () {
  function ParallelCoords2(ref_data) {
    var _this = this;

    classCallCheck(this, ParallelCoords2);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var self = this;
    this.variables = app.current_config.ratio.slice();
    this.current_level = +app.current_config.current_level;
    this.inf_level = +this.current_level + 2;
    this.plot = svg_bar$6.append('g').attr('transform', 'translate(' + [margin$6.left, margin$6.top] + ')');

    this.x = d3.scaleBand().rangeRound([0, width$6]);
    this.y = {};
    this.line = d3.line();
    // this.all_keys = this.variables;
    this.data = ref_data.filter(function (ft) {
      return _this.variables.map(function (v) {
        return !!ft[v];
      }).every(function (v) {
        return v === true;
      });
    });
    var inf_level_features = app.full_dataset.filter(function (ft) {
      return +ft.level === _this.inf_level;
    });
    this.data.forEach(function (ft) {
      var id = ft.id;
      var children_ids = app.agg_n2.filter(function (d) {
        return d.NUTS1_2016 === id;
      }).map(function (d) {
        return d.geo;
      });
      // const children = inf_level_features.filter(
      //   d => children_ids.indexOf(d[app.current_config.id_field]) > -1);
      var children = inf_level_features.filter(function (d) {
        return children_ids.indexOf(d[app.current_config.id_field].slice(0, 4)) > -1;
      });

      if (children.length < 2) {
        ft.remove = true; // eslint-disable-line no-param-reassign
        return;
      }
      // Compute Relative Standard Deviation ("coefficient de variation") for each variable:
      _this.variables.forEach(function (v) {
        var v_name = 'rsd_' + v;
        var serie = children.map(function (d) {
          return +d[v];
        });
        var mean = getMean(serie);
        var rsd = mean / getStdDev(serie, mean);
        ft[v_name] = rsd; // eslint-disable-line no-param-reassign
      });
    });
    this.data = this.data.filter(function (d) {
      return !d.remove;
    });
    this.dimensions = Object.keys(this.data[0]).filter(function (v) {
      return v.indexOf('rsd_') === 0;
    });
    var extents = this.dimensions.map(function (v) {
      return d3.extent(_this.data, function (p) {
        return +p[v];
      });
    });
    var common_domain = [d3.min(extents, function (d) {
      return d[0];
    }), d3.max(extents, function (d) {
      return d[1];
    })];

    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    this.x.domain(this.dimensions);
    this.x.rangeRound([0, width$6 + this.x.step() * 1.5]);

    this.dimensions.forEach(function (d) {
      _this.y[d] = d3.scaleLinear()
      // use the same domain for each axis :
      .domain(common_domain)
      // .domain(d3.extent(this.data, p => +p[d]))
      .range([height$6, 0]);
    });

    this.background = this.plot.append('g').attr('class', 'background').selectAll('path').data(this.data).enter().append('path').attr('d', function (d) {
      return _this.path(d);
    }).attr('id', function (d) {
      return 'f_' + d.id;
    });

    // const foreground = this.plot.append('g')
    //   .attr('class', 'foreground')
    //   .selectAll('path')
    //   .data(this.data)
    //   .enter()
    //   .append('path')
    //   .attr('d', d => this.path(d));

    var g = this.plot.selectAll('.dimension').data(this.dimensions).enter().append('g').attrs(function (d) {
      return {
        class: 'dimension',
        transform: 'translate(' + _this.x(d) + ')'
      };
    });

    g.append('g').attr('class', 'axis').each(function (d) {
      d3.select(this).call(d3.axisLeft(self.y[d]));
    }).append('text').styles({
      'text-anchor': 'middle',
      'font-size': '11px'
    }).attr('y', -5).text(function (d) {
      return d;
    });

    // foreground
    //   .on('mouseover', function (d) {
    //     d3.select(this).style('stroke-width', d.id === app.current_config.my_region ? 2.8 : 2);
    //     svg_bar.append('text')
    //       .attrs({
    //         id: 'id_feature',
    //         x: 75,
    //         y: self.y[self.dimensions[0]](d[self.dimensions]),
    //       });
    //   })
    //   .on('mouseout', function (d) {
    //     d3.select(this).style('stroke-width', d.id === app.current_config.my_region ? 1.7 : 1);
    //     svg_bar.select('#id_feature').remove();
    //   });
    //
    // this.plot.select(`.foreground > #f_${app.current_config.my_region}`);
    this.makeTableStat();
  }

  createClass(ParallelCoords2, [{
    key: 'path',
    value: function path(d) {
      var _this2 = this;

      return this.line(this.dimensions.map(function (p) {
        return [_this2.x(p), _this2.y[p](d[p])];
      }));
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.plot.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$6.html('');
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this3 = this;

      var all_values = this.variables.map(function (v) {
        return _this3.data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this3.variables[i],
          Variable: _this3.variables[i],
          'Ma rÃ©gion': my_region[_this3.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      this.table_stats = new TableResumeStat(this.prepareTableStat());
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {}
  }]);
  return ParallelCoords2;
}();

// import debug from 'debug';
exports.variables_info = void 0;

var study_zones = [{ id: 'no_filter', name: 'UE28' }, { id: 'filter_FR', name: 'Filtre national (France)' }, { id: 'filter_param2', name: 'Espace de comparaison nÂ°2' }];

var territorial_mesh = [{ id: 'NUTS1', name: 'NUTS1' }, { id: 'NUTS12stat', name: 'NUTS1/2 (statistique)' }];

var app = {
  // A mapping id -> color, containing the color to use for each
  // feature not using the default color or the disabled color
  colors: {},
  // The filtered dataset (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) selected on the left menu:
  current_data: [],
  // The full dataset provided (containing all the features at any level in one table)
  // Row without data are expected to be empty or to contain the "NA" string.
  full_dataset: [],
  // The ids of the current feature in use (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) used in the current chart; filtered
  // to not contain feature with empty ratio values within the ratios in use).
  current_ids: []
};

function setDefaultConfig() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  // }, level = 'NUTS1') {
  app.current_config = {
    // The name of the field of the dataset containing the ID of each feature:
    id_field: 'geo',
    // The name of the field of the dataset containing the name of each feature:
    name_field: 'Nom',
    // The name of the field of the dataset containing the population of each feature:
    pop_field: 'POP_AGE_T_2016',
    // The name of the field of the geojson layer containing the ID of each feature
    // (these values should match with the values of the "id_field" in the
    // tabular dataset)
    id_field_geom: 'NUTS1_2016',
    num: ['CHOM_1574_2016'],
    denum: ['ACT_1574_2016'],
    ratio: [variable],
    ratio_pretty_name: ['Taux de chÃ´mage (15-74 ans) (2016)'],
    // The level currently in use:
    current_level: 1,
    // The ID of the region currently in use:
    my_region: code,
    // The name of the region currently in use:
    my_region_pretty_name: app.feature_names[code],
    // How many ratio on the current chart:
    nb_var: 1
  };
  app.colors[app.current_config.my_region] = color_highlight;
}

function setDefaultConfigMenu() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NUTS1';

  document.querySelector('.target_region.square[value="' + code + '"]').classList.add('checked');
  document.querySelector('.target_variable.small_square[value="' + variable + '"]').classList.add('checked');
  document.querySelector('.filter_v.square[filter-value="no_filter"]').classList.add('checked');
  document.querySelector('.territ_level.square[value="' + level + '"]').classList.add('checked');
}

function resetColors() {
  app.colors = {};
  // for (let i = 0, len_i = current_ids.length; i < len_i; i++) {
  //   app.colors[current_ids[i]] = color_countries;
  // }
  app.colors[app.current_config.my_region] = color_highlight;
}

/**
* Function to select the first variable on the left menu
* (triggered after changing region, if no more variable was selected)
*
* @return {void}
*/
function selectFirstAvailableVar() {
  var menu = document.querySelector('#menu');
  var v = menu.querySelectorAll('.target_variable');
  for (var i = 0; i < v.length; i++) {
    if (!v[i].classList.contains('disabled')) {
      v[i].classList.add('checked');
      return v[i].getAttribute('value');
    }
  }
}

/**
* Function to update the availables ratios in the left menu (after changing region)
* If a selected variable is not available anymore it will be deselected.
* If there selected variable (all the previously selected variables are unavailable for this region)
* the first variable on the menu will be selected.
* If the new number of selected feature is inferior to the number of variables on the current
* chart, a new chart (suitable for only 1 variable) will be selected.
*
*
* @param {String} my_region - The ID of the newly selected region.
* @return {Number} - The new number of selected ratios.
*
*/
function updateAvailablesRatios(my_region) {
  var data_my_feature = app.full_dataset.filter(function (ft) {
    return ft[app.current_config.id_field] === my_region;
  })[0];
  var menu = document.querySelector('#menu');
  var lines = menu.querySelectorAll('.target_variable');
  for (var i = 0, nb_lines = lines.length; i < nb_lines; i++) {
    var code_variable = lines[i].getAttribute('value');
    if (data_my_feature[code_variable] !== undefined && data_my_feature[code_variable] !== 'NA') {
      lines[i].classList.remove('disabled');
      lines[i].nextSibling.classList.remove('disabled');
    } else {
      lines[i].classList.remove('checked');
      lines[i].classList.add('disabled');
      lines[i].nextSibling.classList.add('disabled');
    }
  }
  var new_var = menu.querySelectorAll('.target_variable.checked');
  if (new_var.length !== app.current_config.ratio.length) {
    var new_var_names = void 0;
    if (new_var.length === 0) {
      var name = selectFirstAvailableVar();
      new_var_names = [name];
    } else {
      new_var_names = Array.prototype.slice.call(new_var).map(function (elem) {
        return elem.getAttribute('value');
      });
    }
    resetVariables(app, new_var_names);
  }
  return new_var.length;
}

/**
* Create handlers for user event on the left menu and on the map for charts only
* allowing to use 1 variable.
*
* @param {Object} chart - The chart object.
* @param {Object} map_elem - The map object.
* @return {void}
*
*/
function bindUI_chart(chart, map_elem) {
  // User change the study zone:
  d3.selectAll('span.filter_v').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      applyFilter(app, filter_type);
      makeTable(app.current_data, app.current_config);
      chart.changeStudyZone();
      chart.updateCompletude();
    }
  });

  // User change the targeted region:
  d3.selectAll('span.target_region').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      var id_region = this.getAttribute('value');
      changeRegion(app, id_region);
      // Update the availables ratio on the left menu
      // (this may change the current selected ratio(s) as some variables are
      // not available for some features) and fetch the number of selected
      // variables after that:
      var new_nb_var = updateAvailablesRatios(id_region);
      if (new_nb_var >= app.current_config.nb_var) {
        chart.updateChangeRegion();
      } else {
        // If there fewer selected variables than requested by the current chart,
        // redraw the first (default) kind of chart:
        d3.select('span.chart_t1[value="BarChart1"]').dispatch('click');
      }
    }
  });

  // User click on the name of a group of variables
  // to expand or collapse its content:
  d3.selectAll('.name_group_var').on('click', function () {
    var group_var = this.nextSibling;
    if (group_var.style.display === 'none') {
      group_var.style.display = null;
    } else {
      group_var.style.display = 'none';
    }
  });

  // User click to add/remove a variable from the comparison:
  d3.selectAll('span.target_variable').on('click', function () {
    if (this.classList.contains('disabled')) return;
    var nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
      return !!elem.classList.contains('checked');
    }).length;
    // Select a new variable and trigger the appropriate changes on the current chart:
    if (!this.classList.contains('checked')) {
      // We don't want the user to be able to select more than 8 variables simultaneously:
      if (nb_var >= 8) return;
      this.classList.add('checked');
      var code_variable = this.getAttribute('value');
      var name_variable = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      }).name;
      addVariable(app, code_variable);
      makeTable(app.current_data, app.current_config);
      chart.addVariable(code_variable, name_variable);
      nb_var += 1;
    } else {
      // Remove a variable from the selection:
      nb_var -= 1;
      // We don't want to let the user remove the variable if
      // it's the only one selected or if the currently displayed
      // chart need a minimum number of variables:
      if (nb_var < app.current_config.nb_var) {
        return;
      }
      var _code_variable = this.getAttribute('value');
      this.classList.remove('checked');
      removeVariable(app, _code_variable);
      chart.removeVariable(_code_variable);
      makeTable(app.current_data, app.current_config);
    }
    // Update the top menu to display available charts according to the current
    // number of available variables:
    if (nb_var === 1) {
      // Allow all kind of vizu with 1 variable:
      d3.selectAll('.chart_t1').attr('class', 'type_chart chart_t1');
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2 disabled');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    } else if (nb_var === 2) {
      // Allow all kind of vizu with 2 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    } else if (nb_var > 2) {
      // Allow all kind of vizu with 3 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3');
    }
  });

  // Dispatch a click event on the associated checkbox when the text is clicked:
  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section > #header_map');

  header_map_section.select('#img_rect_selec').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').style('display', null);
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_zoom').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(map_elem.zoom_map);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_select').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    }
  });

  if (!map_elem.brush_map) {
    if (chart.handleClickMap) {
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    } else {
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  }

  var header_table_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_table').styles({ display: 'none', margin: 'auto', 'text-align': 'right' });

  header_table_section.append('span').attr('class', 'button_blue').html('CSV').on('click', function () {
    var content = ['id,NumÃ©rateur,DÃ©nominateur,Ratio,Rang\r\n', app.current_data.map(function (d) {
      return [d.id, d.num, d.denum, d.ratio, d.rang].join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'table.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
  });
  bindTopButtons(chart, map_elem);
}

/**
* Function to handle click on the top menu, in order to choose
* the kind of availables representation
*
* @param {Object} chart -
* @param {Object} map_elem -
* @return {void}
*/
function bindTopButtons(chart, map_elem) {
  d3.selectAll('.type_chart').on('click', function () {
    if (this.classList.contains('disabled')) return;
    chart.remove();
    chart = null; // eslint-disable-line no-param-reassign
    unbindUI();
    map_elem.resetZoom();
    app.colors = {};
    var value = this.getAttribute('value');
    if (value === 'BarChart1') {
      console.log('BarChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BarChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'BubbleChart1') {
      console.log('BubbleChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BubbleChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ScatterPlot2') {
      console.log('ScatterPlot2');
      makeTable(app.current_data, app.current_config);
      chart = new ScatterPlot2(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'RadarChart3') {
      console.log('RadarChart3');
      makeTable(app.current_data, app.current_config);
      chart = new RadarChart3(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'SimilarityChart') {
      console.log('SimilarityChart');
      makeTable(app.current_data, app.current_config);
      chart = new SimilarityChart(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    }
    //  else if (value === 'ParallelCoords2') {
    //   console.log('ParallelCoords2');
    //   // makeTable(app.current_data, app.current_config);
    //   chart = new ParallelCoords2(app.current_data);
    //   bindUI_chart(chart, map_elem);
    //   map_elem.bindBrushClick(chart);
    //   chart.bindMap(map_elem);
    // } else if (value === 'BoxPlot1') {
    //   console.log('BoxPlot1');
    //   makeTable(app.current_data, app.current_config);
    //   chart = new BoxPlot1(app.current_data);
    //   bindUI_chart(chart, map_elem);
    //   map_elem.bindBrushClick(chart);
    //   chart.bindMap(map_elem);
    // }
  });
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA.csv').defer(d3.json, 'data/cget-nuts1-3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/remote3035.geojson').defer(d3.json, 'data/template3035.geojson').defer(d3.json, 'data/sea_boxes.geojson').defer(d3.csv, 'data/indicateurs_meta.csv').defer(d3.csv, 'data/nuts2_aggreg.csv').awaitAll(function (error, results) {
    if (error) throw error;

    var _results = slicedToArray(results, 8),
        full_dataset = _results[0],
        nuts1 = _results[1],
        countries = _results[2],
        remote = _results[3],
        template = _results[4],
        seaboxes = _results[5],
        metadata_indicateurs = _results[6],
        agg_n2 = _results[7];

    app.agg_n2 = agg_n2;
    exports.variables_info = prepareVariablesInfo(metadata_indicateurs);
    prepare_dataset(full_dataset, app);
    setDefaultConfig('FRB', 'RT_CHOM_1574', 'NUTS1');
    var features_menu = full_dataset.filter(function (ft) {
      return ft.geo.indexOf('FR') > -1 && +ft.level === app.current_config.current_level;
    });
    createMenu(features_menu, exports.variables_info, study_zones, territorial_mesh);
    bindHelpMenu();
    makeTopMenu();
    makeHeaderChart();
    setDefaultConfigMenu('FRB', 'RT_CHOM_1574', 'NUTS1');
    filterLevelVar(app);
    console.log(app);
    var map_elem = new MapSelect(nuts1, countries, remote, template, seaboxes);
    var chart = new BarChart1(app.current_data);
    makeTable(app.current_data, app.current_config);
    makeHeaderMapSection();
    makeSourceSection();
    makeMapLegend();
    bindUI_chart(chart, map_elem);
    map_elem.bindBrushClick(chart);
    chart.bindMap(map_elem);
  });
}

function bindHelpMenu() {
  var help_buttons_var = document.querySelector('#menu_variables').querySelectorAll('span.i_info');
  Array.prototype.slice.call(help_buttons_var).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var code_variable = this.previousSibling.previousSibling.getAttribute('value');
      var o = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      });
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">Description de l\'indicateur</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + o.methodo.split('\n').join('<br>') + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">' + o.source + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">Date de t\xE9l\xE9chargement de la donn\xE9es : ' + o.last_update + '</p>');
      modal.open();
    };
  });

  var helps_buttons_study_zone = document.querySelector('#menu_studyzone').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_study_zone).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var filter_name = this.previousSibling.previousSibling.getAttribute('filter-value');
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">M\xE9thodologie</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + filter_name + '</p>');
      modal.open();
    };
  });

  var helps_buttons_territ_unit = document.querySelector('#menu_territ_level').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_territ_unit).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var territ_level_name = this.previousSibling.previousSibling.getAttribute('value');
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('\n        <p style="font-family: \'Signika\',sans-serif; color: #4f81bd;font-size: 1.3rem;">Titre</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + territ_level_name + '</p>');
      modal.open();
    };
  });
}

loadData();

exports.app = app;
exports.resetColors = resetColors;
exports.bindTopButtons = bindTopButtons;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
