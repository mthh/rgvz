(function () {
'use strict';

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y$1 = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y$1;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

var debug$1 = createCommonjsModule(function (module, exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = ms;

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms$$1 = curr - (prevTime || curr);
    self.diff = ms$$1;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}
});

var browser$1 = createCommonjsModule(function (module, exports) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug$1;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
});

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

browser$1('app:log');

var svg_bar = d3.select("svg#svg_bar");
var margin = { top: 10, right: 20, bottom: 110, left: 30 };
var margin2 = { top: 430, right: 20, bottom: 30, left: 30 };
var width = +svg_bar.attr("width") - margin.left - margin.right;
var height = +svg_bar.attr("height") - margin.top - margin.bottom;
var height2 = +svg_bar.attr("height") - margin2.top - margin2.bottom;

var svg_map = d3.select("svg#svg_map");
var margin_map = { top: 40, right: 10, bottom: 40, left: 10 };
var width_map = +svg_bar.attr("width") - margin.left - margin.right;
var height_map = +svg_bar.attr("height") - margin.top - margin.bottom;

var x = d3.scaleBand().range([0, width]).padding(0.1);
var x2 = d3.scaleBand().range([0, width]).padding(0.1);
var y = d3.scaleLinear().range([height, 0]);
var y2 = d3.scaleLinear().range([height2, 0]);

var xAxis = d3.axisBottom(x);
var xAxis2 = d3.axisBottom(x2);
var yAxis = d3.axisLeft(y);

var color_countries = 'rgb(147,144,252)';
var color_disabled = 'rgb(214, 214, 214)';

var changeRegion = function changeRegion(id_region) {
  my_region = id_region;
  my_region_pretty_name = app.feature_names[my_region];
  colors$$1 = {};
  colors$$1[my_region] = 'yellow';
  ref_value = ref_data.filter(function (d) {
    return d.id === my_region;
  }).map(function (d) {
    return d.ratio;
  })[0];
  update();
  updateMiniBars();
  updateContext(0, data.length);
  updateMapRegio();
  svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
  svg_map.select('.brush_map').call(brush_map.move, null);
  updateLegend();
};

var my_region = 'FRH';
var my_region_pretty_name = void 0;
var ref_value = void 0;

var id_field = 'NUTS1_2016';
var num = 'EMP_2014';
var denum = 'Y20.64_2014';
var ratio = 'TX_EMP_2014';
var variable_pretty_name = 'Taux d\'emploi (2015)';

var brush_bottom = void 0;
var brush_top = void 0;
var brush_map = void 0;
var zoom = void 0;
var zoom_map = void 0;
var ref_data = void 0;
var data = void 0;
var nbFt = void 0;
var length_dataset = void 0;
var mean_value = void 0;
var focus = void 0;
var context = void 0;
var displayed = void 0;
var current_range = [0, 0];
var current_range_brush = [0, 0];

var current_ranks = void 0;

var current_ids = void 0;
var serie_inversed = false;
var projection = void 0;
var path = void 0;
var nuts1_lyr = void 0;
var g_bar = void 0;
var colors$$1 = {};
colors$$1[my_region] = 'yellow';

loadData();

var comp = function comp(test_value, ref_value) {
  if (test_value < ref_value) {
    return serie_inversed ? 'green' : 'red';
  } else {
    return serie_inversed ? 'red' : 'green';
  }
};

var styles = {
  template: { stroke_width: 0 },
  countries: { stroke_width: 0.5 },
  seaboxes: { stroke_width: 1 },
  remote: { stroke_width: 0.5 },
  seaboxes2: { stroke_width: 1 },
  nuts1: { stroke_width: 0.5 },
  nuts1_no_data: { stroke_width: 0.5 }
};

var app = {};

function prepare_dataset(full_dataset) {
  app.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name:
  app.feature_names = {};
  full_dataset.forEach(function (elem) {
    app.feature_names[elem.geo] = elem.Nom;
  });
}

function filter_no_empty() {
  var data = app.full_dataset.map(function (ft) {
    return {
      id: ft.geo,
      num: +ft[num],
      denum: +ft[denum] / 1000,
      // TX_EMP_2014: (+ft.properties[num] / +ft.properties[denum]) * 100000,
      ratio: +ft[num] / +ft[denum] * 100000
    };
  }).filter(function (ft) {
    if (ft.id === my_region) {
      ref_value = ft.ratio;
    }
    return ft.ratio;
  });
  data.sort(function (a, b) {
    return a.ratio - b.ratio;
  });
  data.forEach(function (d, i) {
    return d.rang = i + 1;
  });
  return data;
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA_aggregated.csv').defer(d3.json, 'data/cget-nuts1-3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/remote3035.geojson').defer(d3.json, 'data/template3035.geojson').defer(d3.json, 'data/sea_boxes.geojson').awaitAll(function (error, results) {
    if (error) throw error;

    var _results = slicedToArray(results, 6),
        full_dataset = _results[0],
        nuts1 = _results[1],
        countries = _results[2],
        remote = _results[3],
        template = _results[4],
        seaboxes = _results[5];

    prepare_dataset(full_dataset);
    var data_no_empty = filter_no_empty();
    my_region_pretty_name = app.feature_names[my_region];
    makeMap(nuts1, countries, remote, template, seaboxes);
    makeChart(data_no_empty);
    makeUI();
    makeSourceSection();
    makeMapLegend();
    makeTable(data_no_empty);
  });
}

function makeTable(data_no_empty) {
  var table = createTableDOM(data_no_empty);
  document.querySelector('#map_section').append(table);
  var dataTable = new DataTable("#myTable");
  var t = document.querySelector('.dataTable-wrapper');
  t.style.marginTop = '20px';
  t.style.display = 'none';
  t.style.fontSize = '0.7em';
  t.querySelector('.dataTable-top').remove();
  Array.from(t.querySelectorAll('span.small')).forEach(function (el) {
    el.onclick = function () {
      el.parentElement.click();
    };
  });
}

function makeUI() {
  d3.select('#bar_section').insert('p', 'svg').attr('class', 'title_menu').style('margin-top', '15px').style('font-size', '0.75em').text('Rang (1 individu)');
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').style('margin-bottom', '0');
  header_bar_section.insert('span').styles({
    'font-family': '\'Signika\', sans-serif',
    'font-weight': '800',
    'font-size': '14px',
    'margin-top': '12px',
    'margin-left': '40px',
    float: 'left'
  }).attr('class', 'title_variable').html(variable_pretty_name);
  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/edit-table-insert-row-above.svg',
    id: 'img_table'
  }).style('margin', '3px').style('float', 'right').on('click', function () {
    if (document.querySelector('.dataTable-wrapper').style.display) {
      document.querySelector('#svg_map').style.display = 'none';
      document.querySelector('#svg_legend').style.display = 'none';
      document.querySelector('#header_map').style.display = 'none';
      document.querySelector('#header_table').style.display = null;
      document.querySelector('.dataTable-wrapper').style.display = null;
      this.style.filter = 'invert(75%)';
    } else {
      document.querySelector('#svg_map').style.display = null;
      document.querySelector('#svg_legend').style.display = null;
      document.querySelector('#header_map').style.display = null;
      document.querySelector('#header_table').style.display = 'none';
      document.querySelector('.dataTable-wrapper').style.display = 'none';
      this.style.filter = null;
    }
  });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/printer.svg',
    id: 'img_printer'
  }).style('margin', '3px').style('float', 'right');

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/gtk-info.svg',
    id: 'img_info'
  }).style('margin', '3px').style('float', 'right');

  d3.selectAll('span.filter_v').on('click', function () {
    if (this.classList.contains('checked')) {
      return;
    } else {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      applyFilter(filter_type);
    }
  });

  d3.selectAll('span.target_region').on('click', function () {
    if (this.classList.contains('checked')) {
      return;
    } else {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      changeRegion(this.getAttribute('value'));
    }
  });

  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_map').style('margin-bottom', '0').style('margin-top', '0').style('margin-left', '10px');

  header_map_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec',
    class: 'active'
  }).styles({
    margin: '3px',
    float: 'left'
  }).on('click', function () {
    if (this.classList.contains('active')) {
      return;
      // this.classList.remove('active');
      // this.style.filter = null;
      // document.getElementById('img_map_zoom').style.filter = 'invert(75%)';
      // document.getElementById('img_map_zoom').classList.add('active');
      // svg_map.on('.zoom', null);
      // svg_map.select('.brush_map').style('display', null);
    } else {
      this.classList.add('active');
      this.style.filter = '';
      document.getElementById('img_map_zoom').style.filter = 'opacity(25%)';
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').style.filter = 'opacity(25%)';
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      svg_map.select('.brush_map').style('display', null);
      nuts1_lyr.selectAll('path').on('click', null);
    }
  });

  header_map_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  }).styles({
    margin: '3px',
    float: 'left',
    filter: 'opacity(25%)'
  }).on('click', function () {
    if (this.classList.contains('active')) {
      return;
      // this.classList.remove('active');
      // this.style.filter = null;
      // document.getElementById('img_rect_selec').style.filter = 'invert(75%)';
      // document.getElementById('img_rect_selec').classList.add('active');
      // svg_map.call(zoom_map);
      // svg_map.select('.brush_map').style('display', 'none');
    } else {
      this.classList.add('active');
      this.style.filter = '';
      document.getElementById('img_rect_selec').style.filter = 'opacity(25%)';
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_select').style.filter = 'opacity(25%)';
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(zoom_map);
      svg_map.select('.brush_map').call(brush_map.move, null);
      svg_map.select('.brush_map').style('display', 'none');
      nuts1_lyr.selectAll('path').on('click', null);
    }
  });

  header_map_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  }).styles({
    margin: '3px',
    float: 'left',
    filter: 'opacity(25%)'
  }).on('click', function () {
    if (this.classList.contains('active')) {
      return;
    } else {
      this.classList.add('active');
      this.style.filter = '';
      document.getElementById('img_rect_selec').style.filter = 'opacity(25%)';
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').style.filter = 'opacity(25%)';
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      svg_map.select('.brush_map').call(brush_map.move, null);
      svg_map.select('.brush_map').style('display', 'none');
      nuts1_lyr.selectAll('path').on('click', function (d, i) {
        var id = d.properties[id_field];
        if (current_ids.indexOf(id) < 0 || id === my_region) return;
        if (colors$$1[id] !== undefined) {
          colors$$1[id] = undefined;
          d3.select(this).attr('fill', color_countries);
        } else {
          // const value = d.properties.ratio;
          // const color = comp(value, ref_value);
          // colors[id] = color;
          // d3.select(this).attr('fill', color);
          d3.select(this).attr('fill', colors$$1[id] = comp(d.properties.ratio, ref_value));
        }
        update();
      });
    }
  });

  var header_table_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_table').style('display', 'none').style('text-align', 'right').style('margin', 'auto');

  header_table_section.append('span').attr('class', 'button_blue').html('CSV').on('click', function () {
    var content = ["id,Numérateur,Dénominateur,Ratio,Rang\r\n", ref_data.map(function (d) {
      return [d.id, d.num, d.denum, d.ratio, d.rang].join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'table.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
  });

  var buttons_under_chart = d3.select('#bar_section').append('div').styles({ padding: '10px', 'text-align': 'center' });

  buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).style('margin', '8px').text('< à la moyenne').on('click', selectBelowMean);

  buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).style('margin', '8px').text('> à la moyenne').on('click', selectAboveMean);

  buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).style('margin', '8px').text('< à ma région').on('click', selectBelowMyRegion);

  buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).style('margin', '8px').text('> à ma région').on('click', selectAboveMyRegion);
}

function makeMap(nuts1, countries, remote, template, seaboxes) {
  projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], template).reflectY(true);

  nuts1.features.forEach(function (ft) {
    return ft.properties.ratio = +ft.properties[num] / +ft.properties[denum] * 100000;
  });
  var no_data_features = nuts1.features.filter(function (ft) {
    return isNaN(ft.properties.ratio);
  });
  nuts1.features = nuts1.features.filter(function (ft) {
    return !isNaN(ft.properties.ratio);
  });

  path = d3.geoPath().projection(projection);
  var layers = svg_map.append('g').attr('id', 'layers');

  zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

  svg_map.call(zoom_map);

  var template_lyr = layers.append('g').attr('id', 'template').attrs({ fill: 'rgb(247, 252, 254)', 'fill-opacity': 1 }).selectAll('path').data(template.features).enter().append("path").attrs({ d: path });

  var countries_lyr = layers.append('g').attrs({ fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' }).attr('id', 'countries').selectAll('path').data(countries.features).enter().append("path").attrs({ d: path });

  var seaboxes_lyr = layers.append('g').attrs({ fill: '#e0faff', 'fill-opacity': 1, stroke: 'black', 'stroke-width': 1 }).attr('id', 'seaboxes').selectAll('path').data(seaboxes.features).enter().append("path").attrs({ d: path });

  var remote_lyr = layers.append('g').attrs({ fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' }).attr('id', 'remote').selectAll('path').data(remote.features).enter().append("path").attrs({ d: path });

  var seaboxes2_lyr = layers.append('g').attrs({ fill: 'none', stroke: 'black', 'stroke-width': 1 }).attr('id', 'seaboxes').selectAll('path').data(seaboxes.features).enter().append("path").attrs({ d: path });

  var no_data_lyr = layers.append('g').attrs({ id: 'nuts1_no_data', 'fill': 'white', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: 'lightgrey' }).selectAll('path').data(no_data_features).enter().append("path").attr('d', path);

  nuts1_lyr = layers.append('g').attrs({ id: 'nuts1', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' });
  nuts1_lyr.selectAll('path').data(nuts1.features).enter().append("path").attr('fill', function (d) {
    return d.properties.NUTS1_2016 !== my_region ? color_countries : 'yellow';
  }).attr('d', path);

  fitLayer();

  brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
    if (!d3.event || !d3.event.selection) return;
    svg_bar.select('.brush_top').call(brush_top.move, null);
    var selection = d3.event.selection;

    var _selection = slicedToArray(selection, 2),
        topleft = _selection[0],
        bottomright = _selection[1];
    // const transform = svg_map.node().__zoom;
    // topleft[0] = (topleft[0] - transform.x) / transform.k;
    // topleft[1] = (topleft[1] - transform.y) / transform.k;
    // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
    // bottomright[1] = (bottomright[1] - transform.y) / transform.k;


    var rect = new Rect(topleft, bottomright);
    colors$$1 = {};
    nuts1_lyr.selectAll('path').attr('fill', function (d, i) {
      var id = d.properties.NUTS1_2016;
      if (id === my_region) {
        colors$$1[id] = 'yellow';
        return 'yellow';
      } else if (current_ids.indexOf(id) < 0) {
        return color_disabled;
      }
      if (!this._pts) {
        this._pts = this.getAttribute('d').slice(1).split('L').map(function (pt) {
          return pt.split(',').map(function (a) {
            return +a;
          });
        });
      }
      var pts = this._pts;
      for (var _i4 = 0, nb_pts = pts.length; _i4 < nb_pts; _i4++) {
        if (rect.contains(pts[_i4])) {
          var value = d.properties.ratio;
          var color = comp(value, ref_value);
          colors$$1[id] = color;
          return color;
        }
      }
      return color_countries;
    });
    focus.selectAll(".bar").style('fill', function (d, i) {
      return colors$$1[d.id] || color_countries;
    });
    var ids = Object.keys(colors$$1);
    var ranks = ids.map(function (d) {
      return current_ids.indexOf(d.id) > -1;
    }).map(function (d) {
      return current_ranks[d];
    });
    if (ranks.length > 1) {
      var c1 = ranks[0] - 1;
      var c2 = ranks[ranks.length - 1];
      if (c1 < current_range[0] || c2 > current_range[1]) {
        current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
        svg_bar.select('.brush_bottom').call(brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
      }
    } else {
      current_range = [0, data.length];
      svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
    }
    // d3.select('#myTable').selectAll('tbody > tr')
    //   .attr('class', function(d, i) { return colors[this.id.split('row_')[1]]; });
  });

  svg_map.append('g').attr('class', 'brush_map').call(brush_map);
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('template'),
      s = .95 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map),
      t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function get_bbox_layer_path(name) {
  var bbox_layer_path = undefined;
  svg_map.select("#" + name).selectAll("path").each(function (d, i) {
    var bbox_path = path.bounds(d);
    if (!bbox_layer_path) bbox_layer_path = bbox_path;else {
      bbox_layer_path[0][0] = bbox_path[0][0] < bbox_layer_path[0][0] ? bbox_path[0][0] : bbox_layer_path[0][0];
      bbox_layer_path[0][1] = bbox_path[0][1] < bbox_layer_path[0][1] ? bbox_path[0][1] : bbox_layer_path[0][1];
      bbox_layer_path[1][0] = bbox_path[1][0] > bbox_layer_path[1][0] ? bbox_path[1][0] : bbox_layer_path[1][0];
      bbox_layer_path[1][1] = bbox_path[1][1] > bbox_layer_path[1][1] ? bbox_path[1][1] : bbox_layer_path[1][1];
    }
  });
  return bbox_layer_path;
}

function makeChart(ref_data) {
  data = [].concat(ref_data);
  data.sort(function (a, b) {
    return a.ratio - b.ratio;
  });
  current_ids = data.map(function (d) {
    return d.id;
  });
  current_ranks = data.map(function (d, i) {
    return i + 1;
  });
  nbFt = data.length;
  mean_value = d3.mean(data.map(function (d) {
    return d.ratio;
  }));
  brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on("brush end", brushed);

  brush_top = d3.brushX().extent([[0, 0], [width, height]]).on("brush end", brushed_top);

  zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
  // .on("zoom", zoomed);

  svg_bar.append("defs").append("clipPath").attr("id", "clip").append("rect").attr("width", width).attr("height", height);

  focus = svg_bar.append("g").attr("class", "focus").attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  context = svg_bar.append("g").attr("class", "context").attr("transform", "translate(" + margin2.left + "," + margin2.top + ")");

  x.domain(data.map(function (ft) {
    return ft.id;
  }));
  y.domain([d3.min(data, function (d) {
    return d.ratio;
  }), d3.max(data, function (d) {
    return d.ratio;
  })]);
  x2.domain(x.domain());
  y2.domain(y.domain());

  focus.append("g").attr("class", "axis axis--x").attr("transform", "translate(0," + height + ")").call(xAxis);

  focus.select('.axis--x').selectAll("text").style("text-anchor", "end").attr("dx", "-.8em").attr("dy", ".15em").attr("transform", "rotate(-65)");

  focus.append("g").attr("class", "axis axis--y").call(yAxis);

  g_bar = focus.append("g");

  var groupe_line_mean = focus.append('g').attr('class', 'mean');
  groupe_line_mean.append('text').attrs({ x: 60, y: y(mean_value) + 20 }).styles({
    'font-family': '\'Signika\', sans-serif',
    'fill': 'red',
    'fill-opacity': '0.8',
    display: 'none'
  }).text('Valeur moyenne');

  groupe_line_mean.append('line').attrs({
    x1: 0,
    x2: width,
    y1: y(mean_value),
    y2: y(mean_value),
    'stroke-dasharray': '10, 5',
    'stroke-width': '2px',
    class: 'mean_line'
  }).style('stroke', 'red');

  // groupe_line_mean.append('line')
  //     .attrs({ x1: 0, x2: width, y1: y(mean_value), y2: y(mean_value), 'stroke-width': '14px' })
  //     .style('stroke', 'transparent')
  //     .on('mouseover', function (){
  //       groupe_line_mean.select('text').style('display', 'initial');
  //     })
  //     .on('mouseout', function () {
  //       groupe_line_mean.select('text').style('display', 'none');
  //     });

  updateMiniBars();

  context.append("g").attr("class", "brush_bottom").call(brush_bottom).call(brush_bottom.move, x.range());

  focus.append("g").attr("class", "brush_top").call(brush_top).call(brush_top.move, null);

  svg_bar.append('text').attrs({ x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + Math.round(data.length / length_dataset * 1000) / 10 + '%');

  svg_bar.append('image').attrs({
    x: width + margin.left + 5,
    y: 385,
    width: 15,
    height: 15,
    'xlink:href': 'reverse_blue.png',
    id: 'img_reverse'
  }).on('click', function () {
    serie_inversed = !serie_inversed;
    if (data[0].ratio < data[data.length - 1].ratio) {
      data.sort(function (a, b) {
        return b.ratio - a.ratio;
      });
    } else {
      data.sort(function (a, b) {
        return a.ratio - b.ratio;
      });
    }
    x.domain(data.slice(current_range[0], current_range[1]).map(function (ft) {
      return ft.id;
    }));
    x2.domain(data.map(function (ft) {
      return ft.id;
    }));
    // svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity
    //     .scale(width / (current_range[1] - current_range[0]))
    //     .translate(-current_range[0], 0));
    update();
    updateMiniBars();
    updateContext(current_range[0], current_range[1]);
    svg_bar.select('.brush_top').call(brush_top.move, null);
    svg_map.select('.brush_map').call(brush_map.move, null);
    svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
  });

  // Prep the tooltip bits, initial display is hidden
  var tooltip = svg_bar.append("g").attr("class", "tooltip").style("display", "none");

  tooltip.append("rect").attr("width", 50).attr("height", 40).attr("fill", "white").style("opacity", 0.5);

  tooltip.append("text").attr('class', 'id_feature').attr("x", 25).attr("dy", "1.2em").style("text-anchor", "middle").attr("font-size", "14px");

  tooltip.append("text").attr('class', 'value_feature').attr("x", 25).attr("dy", "2.4em").style("text-anchor", "middle").attr("font-size", "14px").attr("font-weight", "bold");
}

function updateMapRegio() {
  nuts1_lyr.selectAll('path').attr('fill', function (d, i) {
    return current_ids.indexOf(d.properties[id_field]) > -1 ? colors$$1[d.properties[id_field]] || color_countries : color_disabled;
  });
}

function updateMiniBars() {
  var mini_bars = context.selectAll(".bar").data(data);

  mini_bars.attr("x", function (d) {
    return x2(d.id);
  }).attr("width", x2.bandwidth()).attr("y", function (d) {
    return y2(d.ratio);
  }).attr("height", function (d) {
    return height2 - y2(d.ratio);
  }).style('fill', function (d) {
    return d.id !== my_region ? color_countries : 'yellow';
  });

  mini_bars.enter().insert("rect").attr("class", "bar").attr("x", function (d) {
    return x2(d.id);
  }).attr("width", x2.bandwidth()).attr("y", function (d) {
    return y2(d.ratio);
  }).attr("height", function (d) {
    return height2 - y2(d.ratio);
  }).style('fill', function (d) {
    return d.id !== my_region ? color_countries : 'yellow';
  });
  mini_bars.exit().remove();
  // context.select('.axis--x').remove();
  // context.append("g")
  //   .attr("class", "axis axis--x")
  //   .attr("transform", "translate(0," + height2 + ")")
  //   .call(xAxis2)
  //     .selectAll("text")
  //     .style("text-anchor", "end")
  //     .attr("dx", "-.8em")
  //     .attr("dy", ".15em")
  //     .attr("transform", "rotate(-65)");
}

function update() {
  displayed = 0;

  var bar = g_bar.selectAll(".bar").data(data);

  bar.attr("x", function (d) {
    return x(d.id);
  }).attr("width", x.bandwidth()).attr("y", function (d) {
    return y(d.ratio);
  }).attr("height", function (d) {
    return height - y(d.ratio);
  }).style('fill', function (d) {
    return colors$$1[d.id] || color_countries;
  }).style("display", function (d) {
    var to_display = x(d.id) != null;
    if (to_display) {
      displayed += 1;
      return 'initial';
    }
    return 'none';
  }).on("mouseover", function () {
    svg_bar.select('.tooltip').style('display', null);
  }).on("mouseout", function () {
    svg_bar.select('.tooltip').style('display', 'none');
  }).on("mousemove", function (d) {
    var tooltip = svg_bar.select('.tooltip');
    tooltip.select("text.id_feature").text('' + d.id);
    tooltip.select('text.value_feature').text('' + Math.round(d.ratio));
    tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
  });

  bar.enter().insert("rect", '.mean').attr("class", "bar").attr("x", function (d) {
    return x(d.id);
  }).attr("width", x.bandwidth()).attr("y", function (d) {
    return y(d.ratio);
  }).attr("height", function (d) {
    return height - y(d.ratio);
  });

  bar.exit().remove();

  focus.select('.axis--y').call(yAxis);

  focus.select('.mean_line').attrs({
    y1: y(mean_value),
    y2: y(mean_value)
  });

  var axis_x = focus.select(".axis--x").attr('font-size', function (d) {
    return displayed > 75 ? 6 : 10;
  }).call(xAxis);
  axis_x.selectAll("text").attrs(function (d) {
    if (displayed > 100) {
      return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
    } else if (displayed > 20) {
      return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
    } else {
      return { dx: '0', dy: '0.71em', transform: null };
    }
  }).style('text-anchor', function (d) {
    return displayed > 20 ? 'end' : 'middle';
  });
}

function makeSourceSection() {
  var text_zone = d3.select('#svg_legend').append('text').attrs({ y: 0, 'text-anchor': 'end' }).style('font-size', '11px').style('font-family', '\'Signika\', sans-serif');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Niveau régional : NUTS 1 (version 2016)');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Origine des données : Eurostat, 2016');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Limite administrative: UMS RIATE, CC-BY-SA');
}

function makeMapLegend() {
  var legend_elems = [{ color: 'yellow', text: 'Ma r\xE9gion : ' + my_region_pretty_name }, { color: color_countries, text: 'Autres régions du filtre de comparaison' }, { color: 'green', text: 'Rang plus élevé que ma région' }, { color: 'red', text: 'Rang moins élevé que ma région' }];

  var rect_size = 14;
  var spacing = 4;
  var height = rect_size + spacing;
  var offset = height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').append('g').attr('transform', 'translate(50, 40)').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * height - offset;
    return 'translate(' + tx + ',' + ty + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attr('x', rect_size + spacing).attr('y', rect_size - spacing).text(function (d) {
    return d.text;
  });
}

function updateLegend() {
  d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + my_region_pretty_name);
}

function updateContext(min, max) {
  context.selectAll(".bar").style('fill-opacity', function (_, i) {
    return i >= min && i < max ? '1' : '0.3';
  });
}

function brushed() {
  if (d3.event.sourceEvent && d3.event.sourceEvent.type === "zoom") return; // ignore brush-by-zoom
  var s = d3.event.selection || x2.range();
  current_range = [Math.round(s[0] / (width / nbFt)), Math.round(s[1] / (width / nbFt))];
  x.domain(data.slice(current_range[0], current_range[1]).map(function (ft) {
    return ft.id;
  }));
  svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
  update();
  updateContext(current_range[0], current_range[1]);
  svg_bar.select('.brush_top').call(brush_top.move, null);
  brushed_top();
}

function brushed_top() {
  var d3_event = d3.event;
  if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
    svg_map.select('.brush_map').call(brush_map.move, null);
    var s = d3_event.selection;
    current_range_brush = [current_range[0] + Math.round(s[0] / (width / displayed)) - 1, current_range[0] + Math.round(s[1] / (width / displayed))];
    x.domain(data.slice(current_range_brush[0] + 1, current_range_brush[1]).map(function (ft) {
      return ft.id;
    }));
    colors$$1 = {};
    focus.selectAll(".bar").style('fill', function (d, i) {
      if (d.id === my_region) {
        colors$$1[d.id] = 'yellow';
        return 'yellow';
      } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
        var color = comp(d.ratio, ref_value);
        colors$$1[d.id] = color;
        return color;
      }
      return color_countries;
    });
    updateMapRegio();
    // d3.select('#myTable').selectAll('tbody > tr')
    //   .attr('class', function(d, i) { return colors[this.id.split('row_')[1]]; });
  } else {
    if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
      svg_map.select('.brush_map').call(brush_map.move, null);
      colors$$1 = {};
      colors$$1[my_region] = 'yellow';
      updateMapRegio();
      // nuts1_lyr.selectAll('path')
      //   .attr('fill', (d, i) => current_ids.indexOf(d.properties[id_field]) > -1
      //                             ? (colors[d.properties[id_field]] || color_countries)
      //                             : color_disabled);
    }
    focus.selectAll(".bar").style('fill', function (d, i) {
      return colors$$1[d.id] || color_countries;
    });
    // d3.select('#myTable').selectAll('tbody > tr')
    //   .attr('class', function(d, i) { return this.id === `row_${my_region}` ? 'yellow' : 'white'; });
  }
}

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

function createTableDOM(data, opts) {
  var options = opts || {};
  options.id = options.id || 'myTable';
  var doc = document,
      nb_features = data.length,
      column_names = Object.getOwnPropertyNames(data[0]),
      nb_columns = column_names.length;
  var myTable = doc.createElement('table'),
      headers = doc.createElement('thead'),
      body = doc.createElement('tbody'),
      headers_row = doc.createElement('tr');
  for (var i = 0; i < nb_columns; i++) {
    var cell = doc.createElement('th');
    var col_name = column_names[i];
    if (col_name === 'num') {
      cell.innerHTML = 'Num<br><span class="small">' + num;
    } else if (col_name === 'denum') {
      cell.innerHTML = 'Denum<br><span class="small">' + denum;
    } else if (col_name === 'ratio') {
      cell.innerHTML = 'Ratio<br><span class="small">' + ratio;
    } else if (col_name === 'rang') {
      cell.innerHTML = 'Rang ';
    } else {
      cell.innerHTML = col_name;
    }
    headers_row.appendChild(cell);
  }
  headers.appendChild(headers_row);
  myTable.appendChild(headers);
  for (var _i5 = 0; _i5 < nb_features; _i5++) {
    var row = doc.createElement('tr');
    row.id = 'row_' + data[_i5].id;
    if (data[_i5].id === my_region) {
      row.className = 'yellow';
    }
    for (var j = 0; j < nb_columns; j++) {
      var _cell = doc.createElement('td');
      var _col_name = column_names[j];
      if (_col_name === 'num' || _col_name === 'denum' || _col_name === 'ratio') {
        _cell.innerHTML = Math.round(data[_i5][_col_name] * 100) / 10;
      } else {
        _cell.innerHTML = data[_i5][_col_name];
      }
      row.appendChild(_cell);
    }
    body.appendChild(row);
  }
  myTable.appendChild(body);
  myTable.setAttribute('id', options.id);
  return myTable;
}

function applyFilter(filter_type) {
  if (filter_type === 'no_filter') {
    data = ref_data.slice();
  } else if (filter_type === 'national_FR') {
    data = ref_data.filter(function (d) {
      return d.id.indexOf('FR') > -1;
    });
  } else {
    var a = Math.round(Math.random() * 50);
    var b = Math.round(Math.random() * 101);
    if (a > b) {
      
      var _ref = [b, a];
      a = _ref[0];
      b = _ref[1];
    }data = ref_data.slice(a, b);
    if (data.filter(function (d) {
      return d.id === my_region;
    })[0] === undefined) {
      data.push(ref_data.filter(function (d) {
        return d.id === my_region;
      })[0]);
    }
  }
  current_ids = data.map(function (d) {
    return d.id;
  });
  current_ranks = data.map(function (d, i) {
    return i + 1;
  });
  if (!serie_inversed) {
    data.sort(function (a, b) {
      return a.ratio - b.ratio;
    });
  } else {
    data.sort(function (a, b) {
      return b.ratio - a.ratio;
    });
  }
  colors$$1 = {};
  colors$$1[my_region] = 'yellow';
  nbFt = data.length;
  x.domain(data.map(function (ft) {
    return ft.id;
  }));
  y.domain([d3.min(data, function (d) {
    return d.ratio;
  }) - 2, d3.max(data, function (d) {
    return d.ratio;
  })]);
  x2.domain(x.domain());
  y2.domain(y.domain());
  update();
  updateMiniBars();
  updateContext(0, data.length);
  // brush_bottom.extent(current_range)
  svg_bar.select('.brush_bottom').call(brush_bottom.move, x2.range());
  svg_map.select('.brush_map').call(brush_map.move, null);
  colors$$1 = {};
  colors$$1[my_region] = 'yellow';
  updateMapRegio();
}

function map_zoomed() {
  var transform = d3.event.transform;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style("stroke-width", function () {
    return styles[this.id].stroke_width / transform.k + "px";
  });

  layers.selectAll('g').transition(t).attr("transform", transform);

  svg_map.select('.brush_map').transition(t).attr("transform", transform);
}

function selectBelowMyRegion() {
  var my_rank = data.map(function (d, i) {
    return [d.id, i];
  }).filter(function (d) {
    return d[0] === my_region;
  })[0][1];
  colors$$1 = {};
  colors$$1[my_region] = 'yellow';
  if (!serie_inversed) {
    current_range_brush = [0, my_rank];
    data.filter(function (d, i) {
      return i < my_rank;
    }).map(function (d) {
      return d.id;
    }).forEach(function (ft) {
      colors$$1[ft] = 'red';
    });
  } else {
    current_range_brush = [my_rank, data.length];
    data.filter(function (d, i) {
      return i > my_rank;
    }).map(function (d) {
      return d.id;
    }).forEach(function (ft) {
      colors$$1[ft] = 'green';
    });
  }
  svg_bar.select('.brush_top').call(brush_top.move, current_range_brush.map(function (d) {
    return d * (width / nbFt);
  }));
  updateMapRegio();
}

function selectAboveMyRegion() {
  var my_rank = data.map(function (d, i) {
    return [d.id, i];
  }).filter(function (d) {
    return d[0] === my_region;
  })[0][1];
  colors$$1 = {};
  colors$$1[my_region] = 'yellow';
  if (!serie_inversed) {
    current_range_brush = [my_rank, data.length];
    data.filter(function (d, i) {
      return i > my_rank;
    }).map(function (d) {
      return d.id;
    }).forEach(function (ft) {
      colors$$1[ft] = 'green';
    });
  } else {
    current_range_brush = [0, my_rank];
    data.filter(function (d, i) {
      return i < my_rank;
    }).map(function (d) {
      return d.id;
    }).forEach(function (ft) {
      colors$$1[ft] = 'red';
    });
  }
  svg_bar.select('.brush_top').call(brush_top.move, current_range_brush.map(function (d) {
    return d * (width / nbFt);
  }));
  updateMapRegio();
}

function getMeanRank() {
  var mean_rank = data.map(function (d, i) {
    return [d.ratio, Math.abs(mean_value - d.ratio), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

function selectAboveMean() {
  var mean_rank = getMeanRank();
  colors$$1 = {};
  colors$$1[my_region] = 'yellow';
  if (!serie_inversed) {
    current_range_brush = [mean_rank, data.length];
    data.filter(function (d) {
      return d.ratio > mean_value;
    }).forEach(function (ft) {
      if (ft.ratio > ref_value) colors$$1[ft.id] = 'green';else colors$$1[ft.id] = 'red';
    });
  } else {
    current_range_brush = [0, mean_rank + 1];
    data.filter(function (d) {
      return d.ratio > mean_value;
    }).forEach(function (ft) {
      if (ft.ratio > ref_value) colors$$1[ft.id] = 'red';else colors$$1[ft.id] = 'green';
    });
  }
  colors$$1[my_region] = 'yellow';
  svg_bar.select('.brush_top').call(brush_top.move, current_range_brush.map(function (d) {
    return d * (width / nbFt);
  }));
  updateMapRegio();
}

function selectBelowMean() {
  var mean_rank = getMeanRank();
  colors$$1 = {};
  if (!serie_inversed) {
    current_range_brush = [0, mean_rank];
    data.filter(function (d) {
      return d.ratio < mean_value;
    }).forEach(function (ft) {
      if (ft.ratio < ref_value) colors$$1[ft.id] = 'red';else colors$$1[ft.id] = 'green';
    });
  } else {
    current_range_brush = [mean_rank + 1, data.length];
    data.filter(function (d) {
      return d.ratio < mean_value;
    }).forEach(function (ft) {
      if (ft.ratio < ref_value) colors$$1[ft.id] = 'green';else colors$$1[ft.id] = 'red';
    });
  }
  colors$$1[my_region] = 'yellow';
  svg_bar.select('.brush_top').call(brush_top.move, current_range_brush.map(function (d) {
    return d * (width / nbFt);
  }));
  updateMapRegio();
}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
