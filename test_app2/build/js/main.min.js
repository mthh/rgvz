(function (exports) {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var tingle_min = createCommonjsModule(function (module, exports) {
!function(t,o){"function"==typeof undefined&&undefined.amd?undefined(o):module.exports=o();}(commonjsGlobal,function(){function t(t){var o={onClose:null,onOpen:null,beforeOpen:null,beforeClose:null,stickyFooter:!1,footer:!1,cssClass:[],closeLabel:"Close",closeMethods:["overlay","button","escape"]};this.opts=r({},o,t),this.init();}function o(){this.modalBoxFooter&&(this.modalBoxFooter.style.width=this.modalBox.clientWidth+"px",this.modalBoxFooter.style.left=this.modalBox.offsetLeft+"px");}function e(){this.modal=document.createElement("div"),this.modal.classList.add("tingle-modal"),0!==this.opts.closeMethods.length&&this.opts.closeMethods.indexOf("overlay")!==-1||this.modal.classList.add("tingle-modal--noOverlayClose"),this.modal.style.display="none",this.opts.cssClass.forEach(function(t){"string"==typeof t&&this.modal.classList.add(t);},this),this.opts.closeMethods.indexOf("button")!==-1&&(this.modalCloseBtn=document.createElement("button"),this.modalCloseBtn.classList.add("tingle-modal__close"),this.modalCloseBtnIcon=document.createElement("span"),this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"),this.modalCloseBtnIcon.innerHTML="Ã—",this.modalCloseBtnLabel=document.createElement("span"),this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"),this.modalCloseBtnLabel.innerHTML=this.opts.closeLabel,this.modalCloseBtn.appendChild(this.modalCloseBtnIcon),this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)),this.modalBox=document.createElement("div"),this.modalBox.classList.add("tingle-modal-box"),this.modalBoxContent=document.createElement("div"),this.modalBoxContent.classList.add("tingle-modal-box__content"),this.modalBox.appendChild(this.modalBoxContent),this.opts.closeMethods.indexOf("button")!==-1&&this.modal.appendChild(this.modalCloseBtn),this.modal.appendChild(this.modalBox);}function s(){this.modalBoxFooter=document.createElement("div"),this.modalBoxFooter.classList.add("tingle-modal-box__footer"),this.modalBox.appendChild(this.modalBoxFooter);}function i(){this._events={clickCloseBtn:this.close.bind(this),clickOverlay:l.bind(this),resize:this.checkOverflow.bind(this),keyboardNav:n.bind(this)},this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.addEventListener("click",this._events.clickCloseBtn),this.modal.addEventListener("mousedown",this._events.clickOverlay),window.addEventListener("resize",this._events.resize),document.addEventListener("keydown",this._events.keyboardNav);}function n(t){this.opts.closeMethods.indexOf("escape")!==-1&&27===t.which&&this.isOpen()&&this.close();}function l(t){this.opts.closeMethods.indexOf("overlay")!==-1&&!d(t.target,"tingle-modal")&&t.clientX<this.modal.clientWidth&&this.close();}function d(t,o){for(;(t=t.parentElement)&&!t.classList.contains(o););return t}function a(){this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.removeEventListener("click",this._events.clickCloseBtn),this.modal.removeEventListener("mousedown",this._events.clickOverlay),window.removeEventListener("resize",this._events.resize),document.removeEventListener("keydown",this._events.keyboardNav);}function r(){for(var t=1;t<arguments.length;t++)for(var o in arguments[t])arguments[t].hasOwnProperty(o)&&(arguments[0][o]=arguments[t][o]);return arguments[0]}function h(){var t,o=document.createElement("tingle-test-transition"),e={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in e)if(void 0!==o.style[t])return e[t]}var c=h();return t.prototype.init=function(){this.modal||(e.call(this),i.call(this),document.body.insertBefore(this.modal,document.body.firstChild),this.opts.footer&&this.addFooter());},t.prototype.destroy=function(){null!==this.modal&&(a.call(this),this.modal.parentNode.removeChild(this.modal),this.modal=null);},t.prototype.open=function(){var t=this;"function"==typeof t.opts.beforeOpen&&t.opts.beforeOpen(),this.modal.style.removeProperty?this.modal.style.removeProperty("display"):this.modal.style.removeAttribute("display"),document.body.classList.add("tingle-enabled"),this.setStickyFooter(this.opts.stickyFooter),this.modal.classList.add("tingle-modal--visible"),c?this.modal.addEventListener(c,function o(){"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),t.modal.removeEventListener(c,o,!1);},!1):"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),this.checkOverflow();},t.prototype.isOpen=function(){return!!this.modal.classList.contains("tingle-modal--visible")},t.prototype.close=function(){if("function"==typeof this.opts.beforeClose){var t=this.opts.beforeClose.call(this);if(!t)return}document.body.classList.remove("tingle-enabled"),this.modal.classList.remove("tingle-modal--visible");var o=this;c?this.modal.addEventListener(c,function t(){o.modal.removeEventListener(c,t,!1),o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this);},!1):(o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this));},t.prototype.setContent=function(t){"string"==typeof t?this.modalBoxContent.innerHTML=t:(this.modalBoxContent.innerHTML="",this.modalBoxContent.appendChild(t));},t.prototype.getContent=function(){return this.modalBoxContent},t.prototype.addFooter=function(){s.call(this);},t.prototype.setFooterContent=function(t){this.modalBoxFooter.innerHTML=t;},t.prototype.getFooterContent=function(){return this.modalBoxFooter},t.prototype.setStickyFooter=function(t){this.isOverflow()||(t=!1),t?this.modalBox.contains(this.modalBoxFooter)&&(this.modalBox.removeChild(this.modalBoxFooter),this.modal.appendChild(this.modalBoxFooter),this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"),o.call(this),this.modalBoxContent.style["padding-bottom"]=this.modalBoxFooter.clientHeight+20+"px"):this.modalBoxFooter&&(this.modalBox.contains(this.modalBoxFooter)||(this.modal.removeChild(this.modalBoxFooter),this.modalBox.appendChild(this.modalBoxFooter),this.modalBoxFooter.style.width="auto",this.modalBoxFooter.style.left="",this.modalBoxContent.style["padding-bottom"]="",this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky")));},t.prototype.addFooterBtn=function(t,o,e){var s=document.createElement("button");return s.innerHTML=t,s.addEventListener("click",e),"string"==typeof o&&o.length&&o.split(" ").forEach(function(t){s.classList.add(t);}),this.modalBoxFooter.appendChild(s),s},t.prototype.resize=function(){console.warn("Resize is deprecated and will be removed in version 1.0");},t.prototype.isOverflow=function(){var t=window.innerHeight,o=this.modalBox.clientHeight;return o>=t},t.prototype.checkOverflow=function(){this.modal.classList.contains("tingle-modal--visible")&&(this.isOverflow()?this.modal.classList.add("tingle-modal--overflow"):this.modal.classList.remove("tingle-modal--overflow"),!this.isOverflow()&&this.opts.stickyFooter?this.setStickyFooter(!1):this.isOverflow()&&this.opts.stickyFooter&&(o.call(this),this.setStickyFooter(!0)));},{modal:t}});
});

var alertify = createCommonjsModule(function (module) {
/**
 * alertifyjs 1.11.0 http://alertifyjs.com
 * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.
 * Copyright 2017 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) 
 * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/
( function ( window ) {
    'use strict';
    
    /**
     * Keys enum
     * @type {Object}
     */
    var keys = {
        ENTER: 13,
        ESC: 27,
        F1: 112,
        F12: 123,
        LEFT: 37,
        RIGHT: 39
    };
    /**
     * Default options 
     * @type {Object}
     */
    var defaults = {
        autoReset:true,
        basic:false,
        closable:true,
        closableByDimmer:true,
        frameless:false,
        maintainFocus:true, //global default not per instance, applies to all dialogs
        maximizable:true,
        modal:true,
        movable:true,
        moveBounded:false,
        overflow:true,
        padding: true,
        pinnable:true,
        pinned:true,
        preventBodyShift:false, //global default not per instance, applies to all dialogs
        resizable:true,
        startMaximized:false,
        transition:'pulse',
        notifier:{
            delay:5,
            position:'bottom-right',
            closeButton:false
        },
        glossary:{
            title:'AlertifyJS',
            ok: 'OK',
            cancel: 'Cancel',
            acccpt: 'Accept',
            deny: 'Deny',
            confirm: 'Confirm',
            decline: 'Decline',
            close: 'Close',
            maximize: 'Maximize',
            restore: 'Restore',
        },
        theme:{
            input:'ajs-input',
            ok:'ajs-ok',
            cancel:'ajs-cancel',
        }
    };
    
    //holds open dialogs instances
    var openDialogs = [];

    /**
     * [Helper]  Adds the specified class(es) to the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.
     * 
     * @return {undefined}
     */
    function addClass(element,classNames){
        element.className += ' ' + classNames;
    }
    
    /**
     * [Helper]  Removes the specified class(es) from the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.
     * 
     * @return {undefined}
     */
    function removeClass(element, classNames) {
        var original = element.className.split(' ');
        var toBeRemoved = classNames.split(' ');
        for (var x = 0; x < toBeRemoved.length; x += 1) {
            var index = original.indexOf(toBeRemoved[x]);
            if (index > -1){
                original.splice(index,1);
            }
        }
        element.className = original.join(' ');
    }

    /**
     * [Helper]  Checks if the document is RTL
     *
     * @return {Boolean} True if the document is RTL, false otherwise.
     */
    function isRightToLeft(){
        return window.getComputedStyle(document.body).direction === 'rtl';
    }
    /**
     * [Helper]  Get the document current scrollTop
     *
     * @return {Number} current document scrollTop value
     */
    function getScrollTop(){
        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);
    }

    /**
     * [Helper]  Get the document current scrollLeft
     *
     * @return {Number} current document scrollLeft value
     */
    function getScrollLeft(){
        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);
    }

    /**
    * Helper: clear contents
    *
    */
    function clearContents(element){
        while (element.lastChild) {
            element.removeChild(element.lastChild);
        }
    }
    /**
     * Extends a given prototype by merging properties from base into sub.
     *
     * @sub {Object} sub The prototype being overwritten.
     * @base {Object} base The prototype being written.
     *
     * @return {Object} The extended prototype.
     */
    function copy(src) {
        if(null === src){
            return src;
        }
        var cpy;
        if(Array.isArray(src)){
            cpy = [];
            for(var x=0;x<src.length;x+=1){
                cpy.push(copy(src[x]));
            }
            return cpy;
        }
      
        if(src instanceof Date){
            return new Date(src.getTime());
        }
      
        if(src instanceof RegExp){
            cpy = new RegExp(src.source);
            cpy.global = src.global;
            cpy.ignoreCase = src.ignoreCase;
            cpy.multiline = src.multiline;
            cpy.lastIndex = src.lastIndex;
            return cpy;
        }
        
        if(typeof src === 'object'){
            cpy = {};
            // copy dialog pototype over definition.
            for (var prop in src) {
                if (src.hasOwnProperty(prop)) {
                    cpy[prop] = copy(src[prop]);
                }
            }
            return cpy;
        }
        return src;
    }
    /**
      * Helper: destruct the dialog
      *
      */
    function destruct(instance, initialize){
        //delete the dom and it's references.
        var root = instance.elements.root;
        root.parentNode.removeChild(root);
        delete instance.elements;
        //copy back initial settings.
        instance.settings = copy(instance.__settings);
        //re-reference init function.
        instance.__init = initialize;
        //delete __internal variable to allow re-initialization.
        delete instance.__internal;
    }

    /**
     * Use a closure to return proper event listener method. Try to use
     * `addEventListener` by default but fallback to `attachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    var on = (function () {
        if (document.addEventListener) {
            return function (el, event, fn, useCapture) {
                el.addEventListener(event, fn, useCapture === true);
            };
        } else if (document.attachEvent) {
            return function (el, event, fn) {
                el.attachEvent('on' + event, fn);
            };
        }
    }());

    /**
     * Use a closure to return proper event listener method. Try to use
     * `removeEventListener` by default but fallback to `detachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    var off = (function () {
        if (document.removeEventListener) {
            return function (el, event, fn, useCapture) {
                el.removeEventListener(event, fn, useCapture === true);
            };
        } else if (document.detachEvent) {
            return function (el, event, fn) {
                el.detachEvent('on' + event, fn);
            };
        }
    }());

    /**
     * Prevent default event from firing
     *
     * @param  {Event} event Event object
     * @return {undefined}

    function prevent ( event ) {
        if ( event ) {
            if ( event.preventDefault ) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        }
    }
    */
    var transition = (function () {
        var t, type;
        var supported = false;
        var transitions = {
            'animation'        : 'animationend',
            'OAnimation'       : 'oAnimationEnd oanimationend',
            'msAnimation'      : 'MSAnimationEnd',
            'MozAnimation'     : 'animationend',
            'WebkitAnimation'  : 'webkitAnimationEnd'
        };

        for (t in transitions) {
            if (document.documentElement.style[t] !== undefined) {
                type = transitions[t];
                supported = true;
                break;
            }
        }

        return {
            type: type,
            supported: supported
        };
    }());

    /**
    * Creates event handler delegate that sends the instance as last argument.
    * 
    * @return {Function}    a function wrapper which sends the instance as last argument.
    */
    function delegate(context, method) {
        return function () {
            if (arguments.length > 0) {
                var args = [];
                for (var x = 0; x < arguments.length; x += 1) {
                    args.push(arguments[x]);
                }
                args.push(context);
                return method.apply(context, args);
            }
            return method.apply(context, [null, context]);
        };
    }
    /**
    * Helper for creating a dialog close event.
    * 
    * @return {object}
    */
    function createCloseEvent(index, button) {
        return {
            index: index,
            button: button,
            cancel: false
        };
    }
    /**
    * Helper for dispatching events.
    *
    * @param  {string} evenType The type of the event to disptach.
    * @param  {object} instance The dialog instance disptaching the event.
    *
    * @return   {any}   The result of the invoked function.
    */
    function dispatchEvent(eventType, instance) {
        if ( typeof instance.get(eventType) === 'function' ) {
            return instance.get(eventType).call(instance);
        }
    }


    /**
     * Super class for all dialogs
     *
     * @return {Object}		base dialog prototype
     */
    var dialog = (function () {
        var //holds the list of used keys.
            usedKeys = [],
            //dummy variable, used to trigger dom reflow.
            reflow = null,
            //condition for detecting safari
            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,
            //dialog building blocks
            templates = {
                dimmer:'<div class="ajs-dimmer"></div>',
                /*tab index required to fire click event before body focus*/
                modal: '<div class="ajs-modal" tabindex="0"></div>',
                dialog: '<div class="ajs-dialog" tabindex="0"></div>',
                reset: '<button class="ajs-reset"></button>',
                commands: '<div class="ajs-commands"><button class="ajs-pin"></button><button class="ajs-maximize"></button><button class="ajs-close"></button></div>',
                header: '<div class="ajs-header"></div>',
                body: '<div class="ajs-body"></div>',
                content: '<div class="ajs-content"></div>',
                footer: '<div class="ajs-footer"></div>',
                buttons: { primary: '<div class="ajs-primary ajs-buttons"></div>', auxiliary: '<div class="ajs-auxiliary ajs-buttons"></div>' },
                button: '<button class="ajs-button"></button>',
                resizeHandle: '<div class="ajs-handle"></div>',
            },
            //common class names
            classes = {
                animationIn: 'ajs-in',
                animationOut: 'ajs-out',
                base: 'alertify',
                basic:'ajs-basic',
                capture: 'ajs-capture',
                closable:'ajs-closable',
                fixed: 'ajs-fixed',
                frameless:'ajs-frameless',
                hidden: 'ajs-hidden',
                maximize: 'ajs-maximize',
                maximized: 'ajs-maximized',
                maximizable:'ajs-maximizable',
                modeless: 'ajs-modeless',
                movable: 'ajs-movable',
                noSelection: 'ajs-no-selection',
                noOverflow: 'ajs-no-overflow',
                noPadding:'ajs-no-padding',
                pin:'ajs-pin',
                pinnable:'ajs-pinnable',
                prefix: 'ajs-',
                resizable: 'ajs-resizable',
                restore: 'ajs-restore',
                shake:'ajs-shake',
                unpinned:'ajs-unpinned',
            };

        /**
         * Helper: initializes the dialog instance
         * 
         * @return	{Number}	The total count of currently open modals.
         */
        function initialize(instance){
            
            if(!instance.__internal){

                //no need to expose init after this.
                delete instance.__init;
              
                //keep a copy of initial dialog settings
                if(!instance.__settings){
                    instance.__settings = copy(instance.settings);
                }
                //in case the script was included before body.
                //after first dialog gets initialized, it won't be null anymore!
                if(null === reflow){
                    // set tabindex attribute on body element this allows script to give it
                    // focus after the dialog is closed
                    document.body.setAttribute( 'tabindex', '0' );
                }

                //get dialog buttons/focus setup
                var setup;
                if(typeof instance.setup === 'function'){
                    setup = instance.setup();
                    setup.options = setup.options  || {};
                    setup.focus = setup.focus  || {};
                }else{
                    setup = {
                        buttons:[],
                        focus:{
                            element:null,
                            select:false
                        },
                        options:{
                        }
                    };
                }
                
                //initialize hooks object.
                if(typeof instance.hooks !== 'object'){
                    instance.hooks = {};
                }

                //copy buttons defintion
                var buttonsDefinition = [];
                if(Array.isArray(setup.buttons)){
                    for(var b=0;b<setup.buttons.length;b+=1){
                        var ref  = setup.buttons[b],
                            cpy = {};
                        for (var i in ref) {
                            if (ref.hasOwnProperty(i)) {
                                cpy[i] = ref[i];
                            }
                        }
                        buttonsDefinition.push(cpy);
                    }
                }

                var internal = instance.__internal = {
                    /**
                     * Flag holding the open state of the dialog
                     * 
                     * @type {Boolean}
                     */
                    isOpen:false,
                    /**
                     * Active element is the element that will receive focus after
                     * closing the dialog. It defaults as the body tag, but gets updated
                     * to the last focused element before the dialog was opened.
                     *
                     * @type {Node}
                     */
                    activeElement:document.body,
                    timerIn:undefined,
                    timerOut:undefined,
                    buttons: buttonsDefinition,
                    focus: setup.focus,
                    options: {
                        title: undefined,
                        modal: undefined,
                        basic:undefined,
                        frameless:undefined,
                        pinned: undefined,
                        movable: undefined,
                        moveBounded:undefined,
                        resizable: undefined,
                        autoReset: undefined,
                        closable: undefined,
                        closableByDimmer: undefined,
                        maximizable: undefined,
                        startMaximized: undefined,
                        pinnable: undefined,
                        transition: undefined,
                        padding:undefined,
                        overflow:undefined,
                        onshow:undefined,
                        onclosing:undefined,
                        onclose:undefined,
                        onfocus:undefined,
                        onmove:undefined,
                        onmoved:undefined,
                        onresize:undefined,
                        onresized:undefined,
                        onmaximize:undefined,
                        onmaximized:undefined,
                        onrestore:undefined,
                        onrestored:undefined
                    },
                    resetHandler:undefined,
                    beginMoveHandler:undefined,
                    beginResizeHandler:undefined,
                    bringToFrontHandler:undefined,
                    modalClickHandler:undefined,
                    buttonsClickHandler:undefined,
                    commandsClickHandler:undefined,
                    transitionInHandler:undefined,
                    transitionOutHandler:undefined,
                    destroy:undefined
                };

                var elements = {};
                //root node
                elements.root = document.createElement('div');
                
                elements.root.className = classes.base + ' ' + classes.hidden + ' ';

                elements.root.innerHTML = templates.dimmer + templates.modal;
                
                //dimmer
                elements.dimmer = elements.root.firstChild;

                //dialog
                elements.modal = elements.root.lastChild;
                elements.modal.innerHTML = templates.dialog;
                elements.dialog = elements.modal.firstChild;
                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;

                //reset links
                elements.reset = [];
                elements.reset.push(elements.dialog.firstChild);
                elements.reset.push(elements.dialog.lastChild);
                
                //commands
                elements.commands = {};
                elements.commands.container = elements.reset[0].nextSibling;
                elements.commands.pin = elements.commands.container.firstChild;
                elements.commands.maximize = elements.commands.pin.nextSibling;
                elements.commands.close = elements.commands.maximize.nextSibling;
                
                //header
                elements.header = elements.commands.container.nextSibling;

                //body
                elements.body = elements.header.nextSibling;
                elements.body.innerHTML = templates.content;
                elements.content = elements.body.firstChild;

                //footer
                elements.footer = elements.body.nextSibling;
                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;
                
                //resize handle
                elements.resizeHandle = elements.footer.nextSibling;

                //buttons
                elements.buttons = {};
                elements.buttons.auxiliary = elements.footer.firstChild;
                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;
                elements.buttons.primary.innerHTML = templates.button;
                elements.buttonTemplate = elements.buttons.primary.firstChild;
                //remove button template
                elements.buttons.primary.removeChild(elements.buttonTemplate);
                               
                for(var x=0; x < instance.__internal.buttons.length; x+=1) {
                    var button = instance.__internal.buttons[x];
                    
                    // add to the list of used keys.
                    if(usedKeys.indexOf(button.key) < 0){
                        usedKeys.push(button.key);
                    }

                    button.element = elements.buttonTemplate.cloneNode();
                    button.element.innerHTML = button.text;
                    if(typeof button.className === 'string' &&  button.className !== ''){
                        addClass(button.element, button.className);
                    }
                    for(var key in button.attrs){
                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){
                            button.element.setAttribute(key, button.attrs[key]);
                        }
                    }
                    if(button.scope === 'auxiliary'){
                        elements.buttons.auxiliary.appendChild(button.element);
                    }else{
                        elements.buttons.primary.appendChild(button.element);
                    }
                }
                //make elements pubic
                instance.elements = elements;
                
                //save event handlers delegates
                internal.resetHandler = delegate(instance, onReset);
                internal.beginMoveHandler = delegate(instance, beginMove);
                internal.beginResizeHandler = delegate(instance, beginResize);
                internal.bringToFrontHandler = delegate(instance, bringToFront);
                internal.modalClickHandler = delegate(instance, modalClickHandler);
                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);
                internal.commandsClickHandler = delegate(instance, commandsClickHandler);
                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);
                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);

                //settings
                for(var opKey in internal.options){
                    if(setup.options[opKey] !== undefined){
                        // if found in user options
                        instance.set(opKey, setup.options[opKey]);
                    }else if(alertify.defaults.hasOwnProperty(opKey)) {
                        // else if found in defaults options
                        instance.set(opKey, alertify.defaults[opKey]);
                    }else if(opKey === 'title' ) {
                        // else if title key, use alertify.defaults.glossary
                        instance.set(opKey, alertify.defaults.glossary[opKey]);
                    }
                }

                // allow dom customization
                if(typeof instance.build === 'function'){
                    instance.build();
                }
            }
            
            //add to the end of the DOM tree.
            document.body.appendChild(instance.elements.root);
        }

        /**
         * Helper: maintains scroll position
         *
         */
        var scrollX, scrollY;
        function saveScrollPosition(){
            scrollX = getScrollLeft();
            scrollY = getScrollTop();
        }
        function restoreScrollPosition(){
            window.scrollTo(scrollX, scrollY);
        }

        /**
         * Helper: adds/removes no-overflow class from body
         *
         */
        function ensureNoOverflow(){
            var requiresNoOverflow = 0;
            for(var x=0;x<openDialogs.length;x+=1){
                var instance = openDialogs[x];
                if(instance.isModal() || instance.isMaximized()){
                    requiresNoOverflow+=1;
                }
            }
            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){
                //last open modal or last maximized one
                removeClass(document.body, classes.noOverflow);
                preventBodyShift(false);
            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){
                //first open modal or first maximized one
                preventBodyShift(true);
                addClass(document.body, classes.noOverflow);
            }
        }
        var top = '', topScroll = 0;
        /**
         * Helper: prevents body shift.
         *
         */
        function preventBodyShift(add){
            if(alertify.defaults.preventBodyShift && document.documentElement.scrollHeight > document.documentElement.clientHeight){
                if(add ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){
                    topScroll = scrollY;
                    top = window.getComputedStyle(document.body).top;
                    addClass(document.body, classes.fixed);
                    document.body.style.top = -scrollY + 'px';
                } else {
                    scrollY = topScroll;
                    document.body.style.top = top;
                    removeClass(document.body, classes.fixed);
                    restoreScrollPosition();
                }
            }
        }
		
        /**
         * Sets the name of the transition used to show/hide the dialog
         * 
         * @param {Object} instance The dilog instance.
         *
         */
        function updateTransition(instance, value, oldValue){
            if(typeof oldValue === 'string'){
                removeClass(instance.elements.root,classes.prefix +  oldValue);
            }
            addClass(instance.elements.root, classes.prefix + value);
            reflow = instance.elements.root.offsetWidth;
        }
		
        /**
         * Toggles the dialog display mode
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateDisplayMode(instance){
            if(instance.get('modal')){

                //make modal
                removeClass(instance.elements.root, classes.modeless);

                //only if open
                if(instance.isOpen()){
                    unbindModelessEvents(instance);

                    //in case a pinned modless dialog was made modal while open.
                    updateAbsPositionFix(instance);

                    ensureNoOverflow();
                }
            }else{
                //make modelss
                addClass(instance.elements.root, classes.modeless);

                //only if open
                if(instance.isOpen()){
                    bindModelessEvents(instance);

                    //in case pin/unpin was called while a modal is open
                    updateAbsPositionFix(instance);

                    ensureNoOverflow();
                }
            }
        }

        /**
         * Toggles the dialog basic view mode 
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateBasicMode(instance){
            if (instance.get('basic')) {
                // add class
                addClass(instance.elements.root, classes.basic);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.basic);
            }
        }

        /**
         * Toggles the dialog frameless view mode 
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateFramelessMode(instance){
            if (instance.get('frameless')) {
                // add class
                addClass(instance.elements.root, classes.frameless);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.frameless);
            }
        }
		
        /**
         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.
         *
         * @param {Event} event Focus event
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bringToFront(event, instance){
            
            // Do not bring to front if preceeded by an open modal
            var index = openDialogs.indexOf(instance);
            for(var x=index+1;x<openDialogs.length;x+=1){
                if(openDialogs[x].isModal()){
                    return;
                }
            }
			
            // Bring to front by making it the last child.
            if(document.body.lastChild !== instance.elements.root){
                document.body.appendChild(instance.elements.root);
                //also make sure its at the end of the list
                openDialogs.splice(openDialogs.indexOf(instance),1);
                openDialogs.push(instance);
                setFocus(instance);
            }
			
            return false;
        }
		
        /**
         * Helper: reflects dialogs options updates
         *
         * @param {Object} instance The dilog instance.
         * @param {String} option The updated option name.
         *
         * @return	{undefined}	
         */
        function optionUpdated(instance, option, oldValue, newValue){
            switch(option){
            case 'title':
                instance.setHeader(newValue);
                break;
            case 'modal':
                updateDisplayMode(instance);
                break;
            case 'basic':
                updateBasicMode(instance);
                break;
            case 'frameless':
                updateFramelessMode(instance);
                break;
            case 'pinned':
                updatePinned(instance);
                break;
            case 'closable':
                updateClosable(instance);
                break;
            case 'maximizable':
                updateMaximizable(instance);
                break;
            case 'pinnable':
                updatePinnable(instance);
                break;
            case 'movable':
                updateMovable(instance);
                break;
            case 'resizable':
                updateResizable(instance);
                break;
            case 'transition':
                updateTransition(instance,newValue, oldValue);
                break;
            case 'padding':
                if(newValue){
                    removeClass(instance.elements.root, classes.noPadding);
                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){
                    addClass(instance.elements.root, classes.noPadding);
                }
                break;
            case 'overflow':
                if(newValue){
                    removeClass(instance.elements.root, classes.noOverflow);
                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){
                    addClass(instance.elements.root, classes.noOverflow);
                }
                break;
            case 'transition':
                updateTransition(instance,newValue, oldValue);
                break;
            }

            // internal on option updated event
            if(typeof instance.hooks.onupdate === 'function'){
                instance.hooks.onupdate.call(instance, option, oldValue, newValue);
            }
        }
		
        /**
         * Helper: reflects dialogs options updates
         *
         * @param {Object} instance The dilog instance.
         * @param {Object} obj The object to set/get a value on/from.
         * @param {Function} callback The callback function to call if the key was found.
         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.
         * @param {Object} value Optional, the value associated with the key (in case it was a string).
         * @param {String} option The updated option name.
         *
         * @return	{Object} result object 
         *	The result objects has an 'op' property, indicating of this is a SET or GET operation.
         *		GET: 
         *		- found: a flag indicating if the key was found or not.
         *		- value: the property value.
         *		SET:
         *		- items: a list of key value pairs of the properties being set.
         *				each contains:
         *					- found: a flag indicating if the key was found or not.
         *					- key: the property key.
         *					- value: the property value.
         */
        function update(instance, obj, callback, key, value){
            var result = {op:undefined, items: [] };
            if(typeof value === 'undefined' && typeof key === 'string') {
                //get
                result.op = 'get';
                if(obj.hasOwnProperty(key)){
                    result.found = true;
                    result.value = obj[key];
                }else{
                    result.found = false;
                    result.value = undefined;
                }
            }
            else
            {
                var old;
                //set
                result.op = 'set';
                if(typeof key === 'object'){
                    //set multiple
                    var args = key;
                    for (var prop in args) {
                        if (obj.hasOwnProperty(prop)) {
                            if(obj[prop] !== args[prop]){
                                old = obj[prop];
                                obj[prop] = args[prop];
                                callback.call(instance,prop, old, args[prop]);
                            }
                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});
                        }else{
                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});
                        }
                    }
                } else if (typeof key === 'string'){
                    //set single
                    if (obj.hasOwnProperty(key)) {
                        if(obj[key] !== value){
                            old  = obj[key];
                            obj[key] = value;
                            callback.call(instance,key, old, value);
                        }
                        result.items.push({'key': key, 'value': value , 'found':true});

                    }else{
                        result.items.push({'key': key, 'value': value , 'found':false});
                    }
                } else {
                    //invalid params
                    throw new Error('args must be a string or object');
                }
            }
            return result;
        }


        /**
         * Triggers a close event.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function triggerClose(instance) {
            var found;
            triggerCallback(instance, function (button) {
                return found = (button.invokeOnClose === true);
            });
            //none of the buttons registered as onclose callback
            //close the dialog
            if (!found && instance.isOpen()) {
                instance.close();
            }
        }

        /**
         * Dialogs commands event handler, attached to the dialog commands element.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function commandsClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            switch (target) {
            case instance.elements.commands.pin:
                if (!instance.isPinned()) {
                    pin(instance);
                } else {
                    unpin(instance);
                }
                break;
            case instance.elements.commands.maximize:
                if (!instance.isMaximized()) {
                    maximize(instance);
                } else {
                    restore(instance);
                }
                break;
            case instance.elements.commands.close:
                triggerClose(instance);
                break;
            }
            return false;
        }

        /**
         * Helper: pins the modeless dialog.
         *
         * @param {Object} instance	The dialog instance.
         * 
         * @return {undefined}
         */
        function pin(instance) {
            //pin the dialog
            instance.set('pinned', true);
        }

        /**
         * Helper: unpins the modeless dialog.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function unpin(instance) {
            //unpin the dialog 
            instance.set('pinned', false);
        }


        /**
         * Helper: enlarges the dialog to fill the entire screen.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function maximize(instance) {
            // allow custom `onmaximize` method
            dispatchEvent('onmaximize', instance);
            //maximize the dialog 
            addClass(instance.elements.root, classes.maximized);
            if (instance.isOpen()) {
                ensureNoOverflow();
            }
            // allow custom `onmaximized` method
            dispatchEvent('onmaximized', instance);
        }

        /**
         * Helper: returns the dialog to its former size.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function restore(instance) {
            // allow custom `onrestore` method
            dispatchEvent('onrestore', instance);
            //maximize the dialog 
            removeClass(instance.elements.root, classes.maximized);
            if (instance.isOpen()) {
                ensureNoOverflow();
            }
            // allow custom `onrestored` method
            dispatchEvent('onrestored', instance);
        }

        /**
         * Show or hide the maximize box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updatePinnable(instance) {
            if (instance.get('pinnable')) {
                // add class
                addClass(instance.elements.root, classes.pinnable);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.pinnable);
            }
        }

        /**
         * Helper: Fixes the absolutly positioned modal div position.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function addAbsPositionFix(instance) {
            var scrollLeft = getScrollLeft();
            instance.elements.modal.style.marginTop = getScrollTop() + 'px';
            instance.elements.modal.style.marginLeft = scrollLeft + 'px';
            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';
        }

        /**
         * Helper: Removes the absolutly positioned modal div position fix.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function removeAbsPositionFix(instance) {
            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);
            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);
            instance.elements.modal.style.marginTop = '';
            instance.elements.modal.style.marginLeft = '';
            instance.elements.modal.style.marginRight = '';

            if (instance.isOpen()) {
                var top = 0,
                    left = 0;
                if (instance.elements.dialog.style.top !== '') {
                    top = parseInt(instance.elements.dialog.style.top, 10);
                }
                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';

                if (instance.elements.dialog.style.left !== '') {
                    left = parseInt(instance.elements.dialog.style.left, 10);
                }
                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';
            }
        }
        /**
         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function updateAbsPositionFix(instance) {
            // if modeless and unpinned add fix
            if (!instance.get('modal') && !instance.get('pinned')) {
                addAbsPositionFix(instance);
            } else {
                removeAbsPositionFix(instance);
            }
        }
        /**
         * Toggles the dialog position lock | modeless only.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to make it modal, false otherwise.
         *
         * @return {undefined}
         */
        function updatePinned(instance) {
            if (instance.get('pinned')) {
                removeClass(instance.elements.root, classes.unpinned);
                if (instance.isOpen()) {
                    removeAbsPositionFix(instance);
                }
            } else {
                addClass(instance.elements.root, classes.unpinned);
                if (instance.isOpen() && !instance.isModal()) {
                    addAbsPositionFix(instance);
                }
            }
        }

        /**
         * Show or hide the maximize box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateMaximizable(instance) {
            if (instance.get('maximizable')) {
                // add class
                addClass(instance.elements.root, classes.maximizable);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.maximizable);
            }
        }

        /**
         * Show or hide the close box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateClosable(instance) {
            if (instance.get('closable')) {
                // add class
                addClass(instance.elements.root, classes.closable);
                bindClosableEvents(instance);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.closable);
                unbindClosableEvents(instance);
            }
        }

        // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).
        var cancelClick = false;

        /**
         * Helper: closes the modal dialog when clicking the modal
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function modalClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            if (!cancelClick && target === instance.elements.modal && instance.get('closableByDimmer') === true) {
                triggerClose(instance);
            }
            cancelClick = false;
            return false;
        }

        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).
        var cancelKeyup = false;
        /** 
         * Helper: triggers a button callback
         *
         * @param {Object}		The dilog instance.
         * @param {Function}	Callback to check which button triggered the event.
         *
         * @return {undefined}
         */
        function triggerCallback(instance, check) {
            for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {
                var button = instance.__internal.buttons[idx];
                if (!button.element.disabled && check(button)) {
                    var closeEvent = createCloseEvent(idx, button);
                    if (typeof instance.callback === 'function') {
                        instance.callback.apply(instance, [closeEvent]);
                    }
                    //close the dialog only if not canceled.
                    if (closeEvent.cancel === false) {
                        instance.close();
                    }
                    break;
                }
            }
        }

        /**
         * Clicks event handler, attached to the dialog footer.
         *
         * @param {Event}		DOM event object.
         * @param {Object}		The dilog instance.
         * 
         * @return {undefined}
         */
        function buttonsClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            triggerCallback(instance, function (button) {
                // if this button caused the click, cancel keyup event
                return button.element === target && (cancelKeyup = true);
            });
        }

        /**
         * Keyup event handler, attached to the document.body
         *
         * @param {Event}		DOM event object.
         * @param {Object}		The dilog instance.
         * 
         * @return {undefined}
         */
        function keyupHandler(event) {
            //hitting enter while button has focus will trigger keyup too.
            //ignore if handled by clickHandler
            if (cancelKeyup) {
                cancelKeyup = false;
                return;
            }
            var instance = openDialogs[openDialogs.length - 1];
            var keyCode = event.keyCode;
            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {
                triggerClose(instance);
                return false;
            }else if (usedKeys.indexOf(keyCode) > -1) {
                triggerCallback(instance, function (button) {
                    return button.key === keyCode;
                });
                return false;
            }
        }
        /**
        * Keydown event handler, attached to the document.body
        *
        * @param {Event}		DOM event object.
        * @param {Object}		The dilog instance.
        * 
        * @return {undefined}
        */
        function keydownHandler(event) {
            var instance = openDialogs[openDialogs.length - 1];
            var keyCode = event.keyCode;
            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {
                var buttons = instance.__internal.buttons;
                for (var x = 0; x < buttons.length; x += 1) {
                    if (document.activeElement === buttons[x].element) {
                        switch (keyCode) {
                        case keys.LEFT:
                            buttons[(x || buttons.length) - 1].element.focus();
                            return;
                        case keys.RIGHT:
                            buttons[(x + 1) % buttons.length].element.focus();
                            return;
                        }
                    }
                }
            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {
                event.preventDefault();
                event.stopPropagation();
                triggerCallback(instance, function (button) {
                    return button.key === keyCode;
                });
                return false;
            }
        }


        /**
         * Sets focus to proper dialog element
         *
         * @param {Object} instance The dilog instance.
         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.
         *
         * @return {undefined}
         */
        function setFocus(instance, resetTarget) {
            // reset target has already been determined.
            if (resetTarget) {
                resetTarget.focus();
            } else {
                // current instance focus settings
                var focus = instance.__internal.focus;
                // the focus element.
                var element = focus.element;

                switch (typeof focus.element) {
                // a number means a button index
                case 'number':
                    if (instance.__internal.buttons.length > focus.element) {
                        //in basic view, skip focusing the buttons.
                        if (instance.get('basic') === true) {
                            element = instance.elements.reset[0];
                        } else {
                            element = instance.__internal.buttons[focus.element].element;
                        }
                    }
                    break;
                // a string means querySelector to select from dialog body contents.
                case 'string':
                    element = instance.elements.body.querySelector(focus.element);
                    break;
                // a function should return the focus element.
                case 'function':
                    element = focus.element.call(instance);
                    break;
                }
                
                // if no focus element, default to first reset element.
                if ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {
                    element = instance.elements.reset[0];
                }
                // focus
                if (element && element.focus) {
                    element.focus();
                    // if selectable
                    if (focus.select && element.select) {
                        element.select();
                    }
                }
            }
        }

        /**
         * Focus event handler, attached to document.body and dialogs own reset links.
         * handles the focus for modal dialogs only.
         *
         * @param {Event} event DOM focus event object.
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function onReset(event, instance) {

            // should work on last modal if triggered from document.body 
            if (!instance) {
                for (var x = openDialogs.length - 1; x > -1; x -= 1) {
                    if (openDialogs[x].isModal()) {
                        instance = openDialogs[x];
                        break;
                    }
                }
            }
            // if modal
            if (instance && instance.isModal()) {
                // determine reset target to enable forward/backward tab cycle.
                var resetTarget, target = event.srcElement || event.target;
                var lastResetElement = target === instance.elements.reset[1] || (instance.__internal.buttons.length === 0 && target === document.body);

                // if last reset link, then go to maximize or close
                if (lastResetElement) {
                    if (instance.get('maximizable')) {
                        resetTarget = instance.elements.commands.maximize;
                    } else if (instance.get('closable')) {
                        resetTarget = instance.elements.commands.close;
                    }
                }
                // if no reset target found, try finding the best button
                if (resetTarget === undefined) {
                    if (typeof instance.__internal.focus.element === 'number') {
                        // button focus element, go to first available button
                        if (target === instance.elements.reset[0]) {
                            resetTarget = instance.elements.buttons.auxiliary.firstChild || instance.elements.buttons.primary.firstChild;
                        } else if (lastResetElement) {
                            //restart the cycle by going to first reset link
                            resetTarget = instance.elements.reset[0];
                        }
                    } else {
                        // will reach here when tapping backwards, so go to last child
                        // The focus element SHOULD NOT be a button (logically!).
                        if (target === instance.elements.reset[0]) {
                            resetTarget = instance.elements.buttons.primary.lastChild || instance.elements.buttons.auxiliary.lastChild;
                        }
                    }
                }
                // focus
                setFocus(instance, resetTarget);
            }
        }
        /**
         * Transition in transitionend event handler. 
         *
         * @param {Event}		TransitionEnd event object.
         * @param {Object}		The dilog instance.
         *
         * @return {undefined}
         */
        function handleTransitionInEvent(event, instance) {
            // clear the timer
            clearTimeout(instance.__internal.timerIn);

            // once transition is complete, set focus
            setFocus(instance);

            //restore scroll to prevent document jump
            restoreScrollPosition();

            // allow handling key up after transition ended.
            cancelKeyup = false;

            // allow custom `onfocus` method
            dispatchEvent('onfocus', instance);

            // unbind the event
            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);

            removeClass(instance.elements.root, classes.animationIn);
        }

        /**
         * Transition out transitionend event handler. 
         *
         * @param {Event}		TransitionEnd event object.
         * @param {Object}		The dilog instance.
         *
         * @return {undefined}
         */
        function handleTransitionOutEvent(event, instance) {
            // clear the timer
            clearTimeout(instance.__internal.timerOut);
            // unbind the event
            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);

            // reset move updates
            resetMove(instance);
            // reset resize updates
            resetResize(instance);

            // restore if maximized
            if (instance.isMaximized() && !instance.get('startMaximized')) {
                restore(instance);
            }

            // return focus to the last active element
            if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {
                instance.__internal.activeElement.focus();
                instance.__internal.activeElement = null;
            }
            
            //destory the instance
            if (typeof instance.__internal.destroy === 'function') {
                instance.__internal.destroy.apply(instance);
            }
        }
        /* Controls moving a dialog around */
        //holde the current moving instance
        var movable = null,
            //holds the current X offset when move starts
            offsetX = 0,
            //holds the current Y offset when move starts
            offsetY = 0,
            xProp = 'pageX',
            yProp = 'pageY',
            bounds = null,
            refreshTop = false,
            moveDelegate = null;

        /**
         * Helper: sets the element top/left coordinates
         *
         * @param {Event} event	DOM event object.
         * @param {Node} element The element being moved.
         * 
         * @return {undefined}
         */
        function moveElement(event, element) {
            var left = (event[xProp] - offsetX),
                top  = (event[yProp] - offsetY);

            if(refreshTop){
                top -= document.body.scrollTop;
            }
           
            element.style.left = left + 'px';
            element.style.top = top + 'px';
           
        }
        /**
         * Helper: sets the element top/left coordinates within screen bounds
         *
         * @param {Event} event	DOM event object.
         * @param {Node} element The element being moved.
         * 
         * @return {undefined}
         */
        function moveElementBounded(event, element) {
            var left = (event[xProp] - offsetX),
                top  = (event[yProp] - offsetY);

            if(refreshTop){
                top -= document.body.scrollTop;
            }
            
            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';
            if(refreshTop){
                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';
            }else{
                element.style.top = Math.max(bounds.minTop, top) + 'px';
            }
        }
            

        /**
         * Triggers the start of a move event, attached to the header element mouse down event.
         * Adds no-selection class to the body, disabling selection while moving.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         * 
         * @return {Boolean} false
         */
        function beginMove(event, instance) {
            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {
                var eventSrc, left=0, top=0;
                if (event.type === 'touchstart') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                    xProp = 'clientX';
                    yProp = 'clientY';
                } else if (event.button === 0) {
                    eventSrc = event;
                }

                if (eventSrc) {

                    var element = instance.elements.dialog;
                    addClass(element, classes.capture);

                    if (element.style.left) {
                        left = parseInt(element.style.left, 10);
                    }

                    if (element.style.top) {
                        top = parseInt(element.style.top, 10);
                    }
                    
                    offsetX = eventSrc[xProp] - left;
                    offsetY = eventSrc[yProp] - top;

                    if(instance.isModal()){
                        offsetY += instance.elements.modal.scrollTop;
                    }else if(instance.isPinned()){
                        offsetY -= document.body.scrollTop;
                    }
                    
                    if(instance.get('moveBounded')){
                        var current = element,
                            offsetLeft = -left,
                            offsetTop = -top;
                        
                        //calc offset
                        do {
                            offsetLeft += current.offsetLeft;
                            offsetTop += current.offsetTop;
                        } while (current = current.offsetParent);
                        
                        bounds = {
                            maxLeft : offsetLeft,
                            minLeft : -offsetLeft,
                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,
                            minTop  : -offsetTop
                        };
                        moveDelegate = moveElementBounded;
                    }else{
                        bounds = null;
                        moveDelegate = moveElement;
                    }
                    
                    // allow custom `onmove` method
                    dispatchEvent('onmove', instance);

                    refreshTop = !instance.isModal() && instance.isPinned();
                    movable = instance;
                    moveDelegate(eventSrc, element);
                    addClass(document.body, classes.noSelection);
                    return false;
                }
            }
        }

        /**
         * The actual move handler,  attached to document.body mousemove event.
         *
         * @param {Event} event	DOM event object.
         * 
         * @return {undefined}
         */
        function move(event) {
            if (movable) {
                var eventSrc;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    moveDelegate(eventSrc, movable.elements.dialog);
                }
            }
        }

        /**
         * Triggers the end of a move event,  attached to document.body mouseup event.
         * Removes no-selection class from document.body, allowing selection.
         *
         * @return {undefined}
         */
        function endMove() {
            if (movable) {
                var instance = movable;
                movable = bounds = null;
                removeClass(document.body, classes.noSelection);
                removeClass(instance.elements.dialog, classes.capture);
                // allow custom `onmoved` method
                dispatchEvent('onmoved', instance);
            }
        }

        /**
         * Resets any changes made by moving the element to its original state,
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function resetMove(instance) {
            movable = null;
            var element = instance.elements.dialog;
            element.style.left = element.style.top = '';
        }

        /**
         * Updates the dialog move behavior.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateMovable(instance) {
            if (instance.get('movable')) {
                // add class
                addClass(instance.elements.root, classes.movable);
                if (instance.isOpen()) {
                    bindMovableEvents(instance);
                }
            } else {

                //reset
                resetMove(instance);
                // remove class
                removeClass(instance.elements.root, classes.movable);
                if (instance.isOpen()) {
                    unbindMovableEvents(instance);
                }
            }
        }

        /* Controls moving a dialog around */
        //holde the current instance being resized		
        var resizable = null,
            //holds the staring left offset when resize starts.
            startingLeft = Number.Nan,
            //holds the staring width when resize starts.
            startingWidth = 0,
            //holds the initial width when resized for the first time.
            minWidth = 0,
            //holds the offset of the resize handle.
            handleOffset = 0;

        /**
         * Helper: sets the element width/height and updates left coordinate if neccessary.
         *
         * @param {Event} event	DOM mousemove event object.
         * @param {Node} element The element being moved.
         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.
         * 
         * @return {undefined}
         */
        function resizeElement(event, element, pageRelative) {

            //calculate offsets from 0,0
            var current = element;
            var offsetLeft = 0;
            var offsetTop = 0;
            do {
                offsetLeft += current.offsetLeft;
                offsetTop += current.offsetTop;
            } while (current = current.offsetParent);

            // determine X,Y coordinates.
            var X, Y;
            if (pageRelative === true) {
                X = event.pageX;
                Y = event.pageY;
            } else {
                X = event.clientX;
                Y = event.clientY;
            }
            // rtl handling
            var isRTL = isRightToLeft();
            if (isRTL) {
                // reverse X 
                X = document.body.offsetWidth - X;
                // if has a starting left, calculate offsetRight
                if (!isNaN(startingLeft)) {
                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;
                }
            }

            // set width/height
            element.style.height = (Y - offsetTop + handleOffset) + 'px';
            element.style.width = (X - offsetLeft + handleOffset) + 'px';

            // if the element being resized has a starting left, maintain it.
            // the dialog is centered, divide by half the offset to maintain the margins.
            if (!isNaN(startingLeft)) {
                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;
                if (isRTL) {
                    //negate the diff, why?
                    //when growing it should decrease left
                    //when shrinking it should increase left
                    diff *= -1;
                }
                if (element.offsetWidth > startingWidth) {
                    //growing
                    element.style.left = (startingLeft + diff) + 'px';
                } else if (element.offsetWidth >= minWidth) {
                    //shrinking
                    element.style.left = (startingLeft - diff) + 'px';
                }
            }
        }

        /**
         * Triggers the start of a resize event, attached to the resize handle element mouse down event.
         * Adds no-selection class to the body, disabling selection while moving.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         * 
         * @return {Boolean} false
         */
        function beginResize(event, instance) {
            if (!instance.isMaximized()) {
                var eventSrc;
                if (event.type === 'touchstart') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    // allow custom `onresize` method
                    dispatchEvent('onresize', instance);
                    
                    resizable = instance;
                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;
                    var element = instance.elements.dialog;
                    addClass(element, classes.capture);
                    startingLeft = parseInt(element.style.left, 10);
                    element.style.height = element.offsetHeight + 'px';
                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';
                    element.style.width = (startingWidth = element.offsetWidth) + 'px';

                    if (element.style.maxWidth !== 'none') {
                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
                    }
                    element.style.maxWidth = 'none';
                    addClass(document.body, classes.noSelection);
                    return false;
                }
            }
        }

        /**
         * The actual resize handler,  attached to document.body mousemove event.
         *
         * @param {Event} event	DOM event object.
         * 
         * @return {undefined}
         */
        function resize(event) {
            if (resizable) {
                var eventSrc;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));
                }
            }
        }

        /**
         * Triggers the end of a resize event,  attached to document.body mouseup event.
         * Removes no-selection class from document.body, allowing selection.
         *
         * @return {undefined}
         */
        function endResize() {
            if (resizable) {
                var instance = resizable;
                resizable = null;
                removeClass(document.body, classes.noSelection);
                removeClass(instance.elements.dialog, classes.capture);
                cancelClick = true;
                // allow custom `onresized` method
                dispatchEvent('onresized', instance);
            }
        }

        /**
         * Resets any changes made by resizing the element to its original state.
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function resetResize(instance) {
            resizable = null;
            var element = instance.elements.dialog;
            if (element.style.maxWidth === 'none') {
                //clear inline styles.
                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';
                //reset variables.
                startingLeft = Number.Nan;
                startingWidth = minWidth = handleOffset = 0;
            }
        }


        /**
         * Updates the dialog move behavior.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateResizable(instance) {
            if (instance.get('resizable')) {
                // add class
                addClass(instance.elements.root, classes.resizable);
                if (instance.isOpen()) {
                    bindResizableEvents(instance);
                }
            } else {
                //reset
                resetResize(instance);
                // remove class
                removeClass(instance.elements.root, classes.resizable);
                if (instance.isOpen()) {
                    unbindResizableEvents(instance);
                }
            }
        }

        /**
         * Reset move/resize on window resize.
         *
         * @param {Event} event	window resize event object.
         *
         * @return {undefined}
         */
        function windowResize(/*event*/) {
            for (var x = 0; x < openDialogs.length; x += 1) {
                var instance = openDialogs[x];
                if (instance.get('autoReset')) {
                    resetMove(instance);
                    resetResize(instance);
                }
            }
        }
        /**
         * Bind dialogs events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindEvents(instance) {
            // if first dialog, hook global handlers
            if (openDialogs.length === 1) {
                //global
                on(window, 'resize', windowResize);
                on(document.body, 'keyup', keyupHandler);
                on(document.body, 'keydown', keydownHandler);
                on(document.body, 'focus', onReset);

                //move
                on(document.documentElement, 'mousemove', move);
                on(document.documentElement, 'touchmove', move);
                on(document.documentElement, 'mouseup', endMove);
                on(document.documentElement, 'touchend', endMove);
                //resize
                on(document.documentElement, 'mousemove', resize);
                on(document.documentElement, 'touchmove', resize);
                on(document.documentElement, 'mouseup', endResize);
                on(document.documentElement, 'touchend', endResize);
            }

            // common events
            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
            on(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
            on(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);

            //prevent handling key up when dialog is being opened by a key stroke.
            cancelKeyup = true;
            // hook in transition handler
            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);

            // modelss only events
            if (!instance.get('modal')) {
                bindModelessEvents(instance);
            }

            // resizable
            if (instance.get('resizable')) {
                bindResizableEvents(instance);
            }

            // movable
            if (instance.get('movable')) {
                bindMovableEvents(instance);
            }
        }

        /**
         * Unbind dialogs events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindEvents(instance) {
            // if last dialog, remove global handlers
            if (openDialogs.length === 1) {
                //global
                off(window, 'resize', windowResize);
                off(document.body, 'keyup', keyupHandler);
                off(document.body, 'keydown', keydownHandler);
                off(document.body, 'focus', onReset);
                //move
                off(document.documentElement, 'mousemove', move);
                off(document.documentElement, 'mouseup', endMove);
                //resize
                off(document.documentElement, 'mousemove', resize);
                off(document.documentElement, 'mouseup', endResize);
            }

            // common events
            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
            off(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
            off(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);

            // hook out transition handler
            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);

            // modelss only events
            if (!instance.get('modal')) {
                unbindModelessEvents(instance);
            }

            // movable
            if (instance.get('movable')) {
                unbindMovableEvents(instance);
            }

            // resizable
            if (instance.get('resizable')) {
                unbindResizableEvents(instance);
            }

        }

        /**
         * Bind modeless specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindModelessEvents(instance) {
            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
        }

        /**
         * Unbind modeless specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindModelessEvents(instance) {
            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
        }



        /**
         * Bind movable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindMovableEvents(instance) {
            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
        }

        /**
         * Unbind movable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindMovableEvents(instance) {
            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
        }



        /**
         * Bind resizable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindResizableEvents(instance) {
            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
        }

        /**
         * Unbind resizable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindResizableEvents(instance) {
            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
        }

        /**
         * Bind closable events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindClosableEvents(instance) {
            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
        }

        /**
         * Unbind closable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindClosableEvents(instance) {
            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
        }
        // dialog API
        return {
            __init:initialize,
            /**
             * Check if dialog is currently open
             *
             * @return {Boolean}
             */
            isOpen: function () {
                return this.__internal.isOpen;
            },
            isModal: function (){
                return this.elements.root.className.indexOf(classes.modeless) < 0;
            },
            isMaximized:function(){
                return this.elements.root.className.indexOf(classes.maximized) > -1;
            },
            isPinned:function(){
                return this.elements.root.className.indexOf(classes.unpinned) < 0;
            },
            maximize:function(){
                if(!this.isMaximized()){
                    maximize(this);
                }
                return this;
            },
            restore:function(){
                if(this.isMaximized()){
                    restore(this);
                }
                return this;
            },
            pin:function(){
                if(!this.isPinned()){
                    pin(this);
                }
                return this;
            },
            unpin:function(){
                if(this.isPinned()){
                    unpin(this);
                }
                return this;
            },
            bringToFront:function(){
                bringToFront(null, this);
                return this;
            },
            /**
             * Move the dialog to a specific x/y coordinates
             *
             * @param {Number} x    The new dialog x coordinate in pixels.
             * @param {Number} y    The new dialog y coordinate in pixels.
             *
             * @return {Object} The dialog instance.
             */
            moveTo:function(x,y){
                if(!isNaN(x) && !isNaN(y)){
                    // allow custom `onmove` method
                    dispatchEvent('onmove', this);
                    
                    var element = this.elements.dialog,
                        current = element,
                        offsetLeft = 0,
                        offsetTop = 0;
                    
                    //subtract existing left,top
                    if (element.style.left) {
                        offsetLeft -= parseInt(element.style.left, 10);
                    }
                    if (element.style.top) {
                        offsetTop -= parseInt(element.style.top, 10);
                    }
                    //calc offset
                    do {
                        offsetLeft += current.offsetLeft;
                        offsetTop += current.offsetTop;
                    } while (current = current.offsetParent);

                    //calc left, top
                    var left = (x - offsetLeft);
                    var top  = (y - offsetTop);

                    //// rtl handling
                    if (isRightToLeft()) {
                        left *= -1;
                    }

                    element.style.left = left + 'px';
                    element.style.top = top + 'px';
                    
                    // allow custom `onmoved` method
                    dispatchEvent('onmoved', this);
                }
                return this;
            },
            /**
             * Resize the dialog to a specific width/height (the dialog must be 'resizable').
             * The dialog can be resized to:
             *  A minimum width equal to the initial display width
             *  A minimum height equal to the sum of header/footer heights.
             *
             *
             * @param {Number or String} width    The new dialog width in pixels or in percent.
             * @param {Number or String} height   The new dialog height in pixels or in percent.
             *
             * @return {Object} The dialog instance.
             */
            resizeTo:function(width,height){
                var w = parseFloat(width),
                    h = parseFloat(height),
                    regex = /(\d*\.\d+|\d+)%/;

                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){
                    
                    // allow custom `onresize` method
                    dispatchEvent('onresize', this);
                    
                    if(('' + width).match(regex)){
                        w = w / 100 * document.documentElement.clientWidth ;
                    }

                    if(('' + height).match(regex)){
                        h = h / 100 * document.documentElement.clientHeight;
                    }

                    var element = this.elements.dialog;
                    if (element.style.maxWidth !== 'none') {
                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
                    }
                    element.style.maxWidth = 'none';
                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';
                    element.style.width = w + 'px';
                    element.style.height = h + 'px';
                    
                    // allow custom `onresized` method
                    dispatchEvent('onresized', this);
                }
                return this;
            },
            /**
             * Gets or Sets dialog settings/options 
             *
             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.
             * @param {Object} value Optional, the value associated with the key (in case it was a string).
             *
             * @return {undefined}
             */
            setting : function (key, value) {
                var self = this;
                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);
                if(result.op === 'get'){
                    if(result.found){
                        return result.value;
                    }else if(typeof this.settings !== 'undefined'){
                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;
                    }else{
                        return undefined;
                    }
                }else if(result.op === 'set'){
                    if(result.items.length > 0){
                        var callback = this.settingUpdated || function(){};
                        for(var x=0;x<result.items.length;x+=1){
                            var item = result.items[x];
                            if(!item.found && typeof this.settings !== 'undefined'){
                                update(this, this.settings, callback, item.key, item.value);
                            }
                        }
                    }
                    return this;
                }
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set:function(key, value){
                this.setting(key,value);
                return this;
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get:function(key){
                return this.setting(key);
            },
            /**
            * Sets dialog header
            * @content {string or element}
            *
            * @return {undefined}
            */
            setHeader:function(content){
                if(typeof content === 'string'){
                    clearContents(this.elements.header);
                    this.elements.header.innerHTML = content;
                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){
                    clearContents(this.elements.header);
                    this.elements.header.appendChild(content);
                }
                return this;
            },
            /**
            * Sets dialog contents
            * @content {string or element}
            *
            * @return {undefined}
            */
            setContent:function(content){
                if(typeof content === 'string'){
                    clearContents(this.elements.content);
                    this.elements.content.innerHTML = content;
                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){
                    clearContents(this.elements.content);
                    this.elements.content.appendChild(content);
                }
                return this;
            },
            /**
             * Show the dialog as modal
             *
             * @return {Object} the dialog instance.
             */
            showModal: function(className){
                return this.show(true, className);
            },
            /**
             * Show the dialog
             *
             * @return {Object} the dialog instance.
             */
            show: function (modal, className) {
                
                // ensure initialization
                initialize(this);

                if ( !this.__internal.isOpen ) {

                    // add to open dialogs
                    this.__internal.isOpen = true;
                    openDialogs.push(this);

                    // save last focused element
                    if(alertify.defaults.maintainFocus){
                        this.__internal.activeElement = document.activeElement;
                    }

                    //allow custom dom manipulation updates before showing the dialog.
                    if(typeof this.prepare === 'function'){
                        this.prepare();
                    }

                    bindEvents(this);

                    if(modal !== undefined){
                        this.set('modal', modal);
                    }

                    //save scroll to prevent document jump
                    saveScrollPosition();

                    ensureNoOverflow();

                    // allow custom dialog class on show
                    if(typeof className === 'string' && className !== ''){
                        this.__internal.className = className;
                        addClass(this.elements.root, className);
                    }

                    // maximize if start maximized
                    if ( this.get('startMaximized')) {
                        this.maximize();
                    }else if(this.isMaximized()){
                        restore(this);
                    }

                    updateAbsPositionFix(this);

                    removeClass(this.elements.root, classes.animationOut);
                    addClass(this.elements.root, classes.animationIn);

                    // set 1s fallback in case transition event doesn't fire
                    clearTimeout( this.__internal.timerIn);
                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );

                    if(isSafari){
                        // force desktop safari reflow
                        var root = this.elements.root;
                        root.style.display  = 'none';
                        setTimeout(function(){root.style.display  = 'block';}, 0);
                    }

                    //reflow
                    reflow = this.elements.root.offsetWidth;
                  
                    // show dialog
                    removeClass(this.elements.root, classes.hidden);

                    // internal on show event
                    if(typeof this.hooks.onshow === 'function'){
                        this.hooks.onshow.call(this);
                    }

                    // allow custom `onshow` method
                    dispatchEvent('onshow', this);

                }else{
                    // reset move updates
                    resetMove(this);
                    // reset resize updates
                    resetResize(this);
                    // shake the dialog to indicate its already open
                    addClass(this.elements.dialog, classes.shake);
                    var self = this;
                    setTimeout(function(){
                        removeClass(self.elements.dialog, classes.shake);
                    },200);
                }
                return this;
            },
            /**
             * Close the dialog
             *
             * @return {Object} The dialog instance
             */
            close: function () {
                if (this.__internal.isOpen ) {
                    // custom `onclosing` event
                    if(dispatchEvent('onclosing', this) !== false){

                        unbindEvents(this);

                        removeClass(this.elements.root, classes.animationIn);
                        addClass(this.elements.root, classes.animationOut);

                        // set 1s fallback in case transition event doesn't fire
                        clearTimeout( this.__internal.timerOut );
                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );
                        // hide dialog
                        addClass(this.elements.root, classes.hidden);
                        //reflow
                        reflow = this.elements.modal.offsetWidth;

                        // remove custom dialog class on hide
                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {
                            removeClass(this.elements.root, this.__internal.className);
                        }

                        // internal on close event
                        if(typeof this.hooks.onclose === 'function'){
                            this.hooks.onclose.call(this);
                        }

                        // allow custom `onclose` method
                        dispatchEvent('onclose', this);

                        //remove from open dialogs
                        openDialogs.splice(openDialogs.indexOf(this),1);
                        this.__internal.isOpen = false;

                        ensureNoOverflow();
                    }

                }
                return this;
            },
            /**
             * Close all open dialogs except this.
             *
             * @return {undefined}
             */
            closeOthers:function(){
                alertify.closeAll(this);
                return this;
            },
            /**
             * Destroys this dialog instance
             *
             * @return {undefined}
             */
            destroy:function(){
                if (this.__internal.isOpen ) {
                    //mark dialog for destruction, this will be called on tranistionOut event.
                    this.__internal.destroy = function(){
                        destruct(this, initialize);
                    };
                    //close the dialog to unbind all events.
                    this.close();
                }else{
                    destruct(this, initialize);
                }
                return this;
            },
        };
	} () );
    var notifier = (function () {
        var reflow,
            element,
            openInstances = [],
            classes = {
                base: 'alertify-notifier',
                message: 'ajs-message',
                top: 'ajs-top',
                right: 'ajs-right',
                bottom: 'ajs-bottom',
                left: 'ajs-left',
                center: 'ajs-center',
                visible: 'ajs-visible',
                hidden: 'ajs-hidden',
                close: 'ajs-close'
            };
        /**
         * Helper: initializes the notifier instance
         *
         */
        function initialize(instance) {

            if (!instance.__internal) {
                instance.__internal = {
                    position: alertify.defaults.notifier.position,
                    delay: alertify.defaults.notifier.delay,
                };

                element = document.createElement('DIV');

                updatePosition(instance);
            }

            //add to DOM tree.
            if (element.parentNode !== document.body) {
                document.body.appendChild(element);
            }
        }

        function pushInstance(instance) {
            instance.__internal.pushed = true;
            openInstances.push(instance);
        }
        function popInstance(instance) {
            openInstances.splice(openInstances.indexOf(instance), 1);
            instance.__internal.pushed = false;
        }
        /**
         * Helper: update the notifier instance position
         *
         */
        function updatePosition(instance) {
            element.className = classes.base;
            switch (instance.__internal.position) {
            case 'top-right':
                addClass(element, classes.top + ' ' + classes.right);
                break;
            case 'top-left':
                addClass(element, classes.top + ' ' + classes.left);
                break;
            case 'top-center':
                addClass(element, classes.top + ' ' + classes.center);
                break;
            case 'bottom-left':
                addClass(element, classes.bottom + ' ' + classes.left);
                break;
            case 'bottom-center':
                addClass(element, classes.bottom + ' ' + classes.center);
                break;

            default:
            case 'bottom-right':
                addClass(element, classes.bottom + ' ' + classes.right);
                break;
            }
        }

        /**
        * creates a new notification message
        *
        * @param  {DOMElement} message	The notifier message element
        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.
        * @param  {Function} callback A callback function to be invoked when the message is dismissed.
        *
        * @return {undefined}
        */
        function create(div, callback) {

            function clickDelegate(event, instance) {
                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){
                    instance.dismiss(true);
                }
            }

            function transitionDone(event, instance) {
                // unbind event
                off(instance.element, transition.type, transitionDone);
                // remove the message
                element.removeChild(instance.element);
            }

            function initialize(instance) {
                if (!instance.__internal) {
                    instance.__internal = {
                        pushed: false,
                        delay : undefined,
                        timer: undefined,
                        clickHandler: undefined,
                        transitionEndHandler: undefined,
                        transitionTimeout: undefined
                    };
                    instance.__internal.clickHandler = delegate(instance, clickDelegate);
                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);
                }
                return instance;
            }
            function clearTimers(instance) {
                clearTimeout(instance.__internal.timer);
                clearTimeout(instance.__internal.transitionTimeout);
            }
            return initialize({
                /* notification DOM element*/
                element: div,
                /*
                 * Pushes a notification message
                 * @param {string or DOMElement} content The notification message content
                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.
                 *
                 */
                push: function (_content, _wait) {
                    if (!this.__internal.pushed) {

                        pushInstance(this);
                        clearTimers(this);

                        var content, wait;
                        switch (arguments.length) {
                        case 0:
                            wait = this.__internal.delay;
                            break;
                        case 1:
                            if (typeof (_content) === 'number') {
                                wait = _content;
                            } else {
                                content = _content;
                                wait = this.__internal.delay;
                            }
                            break;
                        case 2:
                            content = _content;
                            wait = _wait;
                            break;
                        }
                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;
                        // set contents
                        if (typeof content !== 'undefined') {
                            this.setContent(content);
                        }
                        // append or insert
                        if (notifier.__internal.position.indexOf('top') < 0) {
                            element.appendChild(this.element);
                        } else {
                            element.insertBefore(this.element, element.firstChild);
                        }
                        reflow = this.element.offsetWidth;
                        addClass(this.element, classes.visible);
                        // attach click event
                        on(this.element, 'click', this.__internal.clickHandler);
                        return this.delay(wait);
                    }
                    return this;
                },
                /*
                 * {Function} callback function to be invoked before dismissing the notification message.
                 * Remarks: A return value === 'false' will cancel the dismissal
                 *
                 */
                ondismiss: function () { },
                /*
                 * {Function} callback function to be invoked when the message is dismissed.
                 *
                 */
                callback: callback,
                /*
                 * Dismisses the notification message
                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.
                 *
                 */
                dismiss: function (clicked) {
                    if (this.__internal.pushed) {
                        clearTimers(this);
                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {
                            //detach click event
                            off(this.element, 'click', this.__internal.clickHandler);
                            // ensure element exists
                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {
                                //transition end or fallback
                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);
                                removeClass(this.element, classes.visible);

                                // custom callback on dismiss
                                if (typeof this.callback === 'function') {
                                    this.callback.call(this, clicked);
                                }
                            }
                            popInstance(this);
                        }
                    }
                    return this;
                },
                /*
                 * Delays the notification message dismissal
                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.
                 *
                 */
                delay: function (wait) {
                    clearTimers(this);
                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;
                    if (this.__internal.delay > 0) {
                        var  self = this;
                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);
                    }
                    return this;
                },
                /*
                 * Sets the notification message contents
                 * @param {string or DOMElement} content The notification message content
                 *
                 */
                setContent: function (content) {
                    if (typeof content === 'string') {
                        clearContents(this.element);
                        this.element.innerHTML = content;
                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {
                        clearContents(this.element);
                        this.element.appendChild(content);
                    }
                    if(this.__internal.closeButton){
                        var close = document.createElement('span');
                        addClass(close, classes.close);
                        close.setAttribute('data-close', true);
                        this.element.appendChild(close);
                    }
                    return this;
                },
                /*
                 * Dismisses all open notifications except this.
                 *
                 */
                dismissOthers: function () {
                    notifier.dismissAll(this);
                    return this;
                }
            });
        }

        //notifier api
        return {
            /**
             * Gets or Sets notifier settings.
             *
             * @param {string} key The setting name
             * @param {Variant} value The setting value.
             *
             * @return {Object}	if the called as a setter, return the notifier instance.
             */
            setting: function (key, value) {
                //ensure init
                initialize(this);

                if (typeof value === 'undefined') {
                    //get
                    return this.__internal[key];
                } else {
                    //set
                    switch (key) {
                    case 'position':
                        this.__internal.position = value;
                        updatePosition(this);
                        break;
                    case 'delay':
                        this.__internal.delay = value;
                        break;
                    }
                }
                return this;
            },
            /**
             * [Alias] Sets dialog settings/options
             */
            set:function(key,value){
                this.setting(key,value);
                return this;
            },
            /**
             * [Alias] Gets dialog settings/options
             */
            get:function(key){
                return this.setting(key);
            },
            /**
             * Creates a new notification message
             *
             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).
             * @param {Function} callback  A callback function to be invoked when the message is dismissed.
             *
             * @return {undefined}
             */
            create: function (type, callback) {
                //ensure notifier init
                initialize(this);
                //create new notification message
                var div = document.createElement('div');
                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ajs-' + type : '');
                return create(div, callback);
            },
            /**
             * Dismisses all open notifications.
             *
             * @param {Object} excpet [optional] The notification object to exclude from dismissal.
             *
             */
            dismissAll: function (except) {
                var clone = openInstances.slice(0);
                for (var x = 0; x < clone.length; x += 1) {
                    var  instance = clone[x];
                    if (except === undefined || except !== instance) {
                        instance.dismiss();
                    }
                }
            }
        };
    })();

    /**
     * Alertify public API
     * This contains everything that is exposed through the alertify object.
     *
     * @return {Object}
     */
    function Alertify() {

        // holds a references of created dialogs
        var dialogs = {};

        /**
         * Extends a given prototype by merging properties from base into sub.
         *
         * @sub {Object} sub The prototype being overwritten.
         * @base {Object} base The prototype being written.
         *
         * @return {Object} The extended prototype.
         */
        function extend(sub, base) {
            // copy dialog pototype over definition.
            for (var prop in base) {
                if (base.hasOwnProperty(prop)) {
                    sub[prop] = base[prop];
                }
            }
            return sub;
        }


        /**
        * Helper: returns a dialog instance from saved dialogs.
        * and initializes the dialog if its not already initialized.
        *
        * @name {String} name The dialog name.
        *
        * @return {Object} The dialog instance.
        */
        function get_dialog(name) {
            var dialog = dialogs[name].dialog;
            //initialize the dialog if its not already initialized.
            if (dialog && typeof dialog.__init === 'function') {
                dialog.__init(dialog);
            }
            return dialog;
        }

        /**
         * Helper:  registers a new dialog definition.
         *
         * @name {String} name The dialog name.
         * @Factory {Function} Factory a function resposible for creating dialog prototype.
         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.
         * @base {String} base the name of another dialog to inherit from.
         *
         * @return {Object} The dialog definition.
         */
        function register(name, Factory, transient, base) {
            var definition = {
                dialog: null,
                factory: Factory
            };

            //if this is based on an existing dialog, create a new definition
            //by applying the new protoype over the existing one.
            if (base !== undefined) {
                definition.factory = function () {
                    return extend(new dialogs[base].factory(), new Factory());
                };
            }

            if (!transient) {
                //create a new definition based on dialog
                definition.dialog = extend(new definition.factory(), dialog);
            }
            return dialogs[name] = definition;
        }

        return {
            /**
             * Alertify defaults
             * 
             * @type {Object}
             */
            defaults: defaults,
            /**
             * Dialogs factory 
             *
             * @param {string}      Dialog name.
             * @param {Function}    A Dialog factory function.
             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.
             * @param {String}      The name of the base type to inherit from.
             */
            dialog: function (name, Factory, transient, base) {

                // get request, create a new instance and return it.
                if (typeof Factory !== 'function') {
                    return get_dialog(name);
                }

                if (this.hasOwnProperty(name)) {
                    throw new Error('alertify.dialog: name already exists');
                }

                // register the dialog
                var definition = register(name, Factory, transient, base);

                if (transient) {

                    // make it public
                    this[name] = function () {
                        //if passed with no params, consider it a get request
                        if (arguments.length === 0) {
                            return definition.dialog;
                        } else {
                            var instance = extend(new definition.factory(), dialog);
                            //ensure init
                            if (instance && typeof instance.__init === 'function') {
                                instance.__init(instance);
                            }
                            instance['main'].apply(instance, arguments);
                            return instance['show'].apply(instance);
                        }
                    };
                } else {
                    // make it public
                    this[name] = function () {
                        //ensure init
                        if (definition.dialog && typeof definition.dialog.__init === 'function') {
                            definition.dialog.__init(definition.dialog);
                        }
                        //if passed with no params, consider it a get request
                        if (arguments.length === 0) {
                            return definition.dialog;
                        } else {
                            var dialog = definition.dialog;
                            dialog['main'].apply(definition.dialog, arguments);
                            return dialog['show'].apply(definition.dialog);
                        }
                    };
                }
            },
            /**
             * Close all open dialogs.
             *
             * @param {Object} excpet [optional] The dialog object to exclude from closing.
             *
             * @return {undefined}
             */
            closeAll: function (except) {
                var clone = openDialogs.slice(0);
                for (var x = 0; x < clone.length; x += 1) {
                    var instance = clone[x];
                    if (except === undefined || except !== instance) {
                        instance.close();
                    }
                }
            },
            /**
             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.
             *
             * @param {string} name The dialog name.
             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.
             * @param {Variant} value Optional, the value associated with the key (in case it was a string).
             *
             * @return {undefined}
             */
            setting: function (name, key, value) {

                if (name === 'notifier') {
                    return notifier.setting(key, value);
                }

                var dialog = get_dialog(name);
                if (dialog) {
                    return dialog.setting(key, value);
                }
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set: function(name,key,value){
                return this.setting(name, key,value);
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get: function(name, key){
                return this.setting(name, key);
            },
            /**
             * Creates a new notification message.
             * If a type is passed, a class name "ajs-{type}" will be added.
             * This allows for custom look and feel for various types of notifications.
             *
             * @param  {String | DOMElement}    [message=undefined]		Message text
             * @param  {String}                 [type='']				Type of log message
             * @param  {String}                 [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}               [callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            notify: function (message, type, wait, callback) {
                return notifier.create(type, callback).push(message, wait);
            },
            /**
             * Creates a new notification message.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            message: function (message, wait, callback) {
                return notifier.create(null, callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'success'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            success: function (message, wait, callback) {
                return notifier.create('success', callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'error'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            error: function (message, wait, callback) {
                return notifier.create('error', callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'warning'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            warning: function (message, wait, callback) {
                return notifier.create('warning', callback).push(message, wait);
            },
            /**
             * Dismisses all open notifications
             *
             * @return {undefined}
             */
            dismissAll: function () {
                notifier.dismissAll();
            }
        };
    }
    var alertify = new Alertify();

    /**
    * Alert dialog definition
    *
    * invoked by:
    *	alertify.alert(message);
    *	alertify.alert(title, message);
    *	alertify.alert(message, onok);
    *	alertify.alert(title, message, onok);
     */
    alertify.dialog('alert', function () {
        return {
            main: function (_title, _message, _onok) {
                var title, message, onok;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    if (typeof _message === 'function') {
                        message = _title;
                        onok = _message;
                    } else {
                        title = _title;
                        message = _message;
                    }
                    break;
                case 3:
                    title = _title;
                    message = _message;
                    onok = _onok;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('onok', onok);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.ok,
                        }
                    ],
                    focus: {
                        element: 0,
                        select: false
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                // nothing
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                this.setContent(message);
            },
            settings: {
                message: undefined,
                onok: undefined,
                label: undefined,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'label':
                    if (this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].element.innerHTML = newValue;
                    }
                    break;
                }
            },
            callback: function (closeEvent) {
                if (typeof this.get('onok') === 'function') {
                    var returnValue = this.get('onok').call(this, closeEvent);
                    if (typeof returnValue !== 'undefined') {
                        closeEvent.cancel = !returnValue;
                    }
                }
            }
        };
    });
    /**
     * Confirm dialog object
     *
     *	alertify.confirm(message);
     *	alertify.confirm(message, onok);
     *	alertify.confirm(message, onok, oncancel);
     *	alertify.confirm(title, message, onok, oncancel);
     */
    alertify.dialog('confirm', function () {

        var autoConfirm = {
            timer: null,
            index: null,
            text: null,
            duration: null,
            task: function (event, self) {
                if (self.isOpen()) {
                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';
                    autoConfirm.duration -= 1;
                    if (autoConfirm.duration === -1) {
                        clearAutoConfirm(self);
                        var button = self.__internal.buttons[autoConfirm.index];
                        var closeEvent = createCloseEvent(autoConfirm.index, button);

                        if (typeof self.callback === 'function') {
                            self.callback.apply(self, [closeEvent]);
                        }
                        //close the dialog.
                        if (closeEvent.close !== false) {
                            self.close();
                        }
                    }
                } else {
                    clearAutoConfirm(self);
                }
            }
        };

        function clearAutoConfirm(self) {
            if (autoConfirm.timer !== null) {
                clearInterval(autoConfirm.timer);
                autoConfirm.timer = null;
                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;
            }
        }

        function startAutoConfirm(self, index, duration) {
            clearAutoConfirm(self);
            autoConfirm.duration = duration;
            autoConfirm.index = index;
            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;
            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);
            autoConfirm.task(null, self);
        }


        return {
            main: function (_title, _message, _onok, _oncancel) {
                var title, message, onok, oncancel;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    message = _title;
                    onok = _message;
                    break;
                case 3:
                    message = _title;
                    onok = _message;
                    oncancel = _onok;
                    break;
                case 4:
                    title = _title;
                    message = _message;
                    onok = _onok;
                    oncancel = _oncancel;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('onok', onok);
                this.set('oncancel', oncancel);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ENTER,
                            className: alertify.defaults.theme.ok,
                        },
                        {
                            text: alertify.defaults.glossary.cancel,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.cancel,
                        }
                    ],
                    focus: {
                        element: 0,
                        select: false
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                //nothing
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                this.setContent(message);
            },
            settings: {
                message: null,
                labels: null,
                onok: null,
                oncancel: null,
                defaultFocus: null,
                reverseButtons: null,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'labels':
                    if ('ok' in newValue && this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].text = newValue.ok;
                        this.__internal.buttons[0].element.innerHTML = newValue.ok;
                    }
                    if ('cancel' in newValue && this.__internal.buttons[1].element) {
                        this.__internal.buttons[1].text = newValue.cancel;
                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;
                    }
                    break;
                case 'reverseButtons':
                    if (newValue === true) {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
                    } else {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
                    }
                    break;
                case 'defaultFocus':
                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;
                    break;
                }
            },
            callback: function (closeEvent) {
                clearAutoConfirm(this);
                var returnValue;
                switch (closeEvent.index) {
                case 0:
                    if (typeof this.get('onok') === 'function') {
                        returnValue = this.get('onok').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                case 1:
                    if (typeof this.get('oncancel') === 'function') {
                        returnValue = this.get('oncancel').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                }
            },
            autoOk: function (duration) {
                startAutoConfirm(this, 0, duration);
                return this;
            },
            autoCancel: function (duration) {
                startAutoConfirm(this, 1, duration);
                return this;
            }
        };
    });
    /**
     * Prompt dialog object
     *
     * invoked by:
     *	alertify.prompt(message);
     *	alertify.prompt(message, value);
     *	alertify.prompt(message, value, onok);
     *	alertify.prompt(message, value, onok, oncancel);
     *	alertify.prompt(title, message, value, onok, oncancel);
     */
    alertify.dialog('prompt', function () {
        var input = document.createElement('INPUT');
        var p = document.createElement('P');
        return {
            main: function (_title, _message, _value, _onok, _oncancel) {
                var title, message, value, onok, oncancel;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    message = _title;
                    value = _message;
                    break;
                case 3:
                    message = _title;
                    value = _message;
                    onok = _value;
                    break;
                case 4:
                    message = _title;
                    value = _message;
                    onok = _value;
                    oncancel = _onok;
                    break;
                case 5:
                    title = _title;
                    message = _message;
                    value = _value;
                    onok = _onok;
                    oncancel = _oncancel;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('value', value);
                this.set('onok', onok);
                this.set('oncancel', oncancel);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ENTER,
                            className: alertify.defaults.theme.ok,
                        },
                        {
                            text: alertify.defaults.glossary.cancel,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.cancel,
                        }
                    ],
                    focus: {
                        element: input,
                        select: true
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                input.className = alertify.defaults.theme.input;
                input.setAttribute('type', 'text');
                input.value = this.get('value');
                this.elements.content.appendChild(p);
                this.elements.content.appendChild(input);
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                if (typeof message === 'string') {
                    clearContents(p);
                    p.innerHTML = message;
                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {
                    clearContents(p);
                    p.appendChild(message);
                }
            },
            settings: {
                message: undefined,
                labels: undefined,
                onok: undefined,
                oncancel: undefined,
                value: '',
                type:'text',
                reverseButtons: undefined,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'value':
                    input.value = newValue;
                    break;
                case 'type':
                    switch (newValue) {
                    case 'text':
                    case 'color':
                    case 'date':
                    case 'datetime-local':
                    case 'email':
                    case 'month':
                    case 'number':
                    case 'password':
                    case 'search':
                    case 'tel':
                    case 'time':
                    case 'week':
                        input.type = newValue;
                        break;
                    default:
                        input.type = 'text';
                        break;
                    }
                    break;
                case 'labels':
                    if (newValue.ok && this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].element.innerHTML = newValue.ok;
                    }
                    if (newValue.cancel && this.__internal.buttons[1].element) {
                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;
                    }
                    break;
                case 'reverseButtons':
                    if (newValue === true) {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
                    } else {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
                    }
                    break;
                }
            },
            callback: function (closeEvent) {
                var returnValue;
                switch (closeEvent.index) {
                case 0:
                    this.settings.value = input.value;
                    if (typeof this.get('onok') === 'function') {
                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                case 1:
                    if (typeof this.get('oncancel') === 'function') {
                        returnValue = this.get('oncancel').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    if(!closeEvent.cancel){
                        input.value = this.settings.value;
                    }
                    break;
                }
            }
        };
    });

    // CommonJS
    {
        module.exports = alertify;
    // AMD
    }

} ( typeof window !== 'undefined' ? window : commonjsGlobal ) );
});

/*
*  Color options (applied on the map and on the chart):
*/
var color_countries = 'rgb(147, 144, 252)'; // Color for features within the study zone but not highlighted
var color_disabled = 'rgb(214, 214, 214)'; // Color for features outside the study zone / without data
var color_sup = 'green'; // Color for selected feature with "better" values than the reference feature
var color_inf = 'red'; // Color for selected feature with "worse" values than the reference feature
var color_highlight = 'yellow'; // Color for the reference feature ("Ma rÃ©gion")
var color_default_dissim = 'darkred'; // Neutral color for selected features when green/red can't be used

/*
*  Misc. options:
*/
var MAX_VARIABLES = 7; // The maximum number of variables that can be selected simultaneously.

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var math_abs = Math.abs;
var math_round = Math.round;
var math_max = Math.max;
var math_sin = Math.sin;
var math_cos = Math.cos;
var math_sqrt = Math.sqrt;
var HALF_PI = Math.PI / 2;

function prepareTooltip(parent_svg_elem) {
  var tooltip = parent_svg_elem.append('g').attr('class', 'tooltip').style('display', 'none');

  tooltip.append('rect').attrs({ x: 15, width: 0, height: 0, fill: 'beige' }).style('opacity', 0.75);

  tooltip.append('text').attrs({ class: 'id_feature', x: 25, dy: '1.2em', 'font-size': '14px' }).style('font-weight', 'bold');

  tooltip.append('text').attrs({
    class: 'value_feature1',
    x: 25,
    dy: '2.4em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature2',
    x: 25,
    dy: '3.5em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature3',
    x: 25,
    dy: '4.6em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature4',
    x: 25,
    dy: '5.7em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature5',
    x: 25,
    dy: '6.8em',
    'font-size': '14px'
  });

  return tooltip;
}

function unbindUI() {
  // Removes the current behavior corresponding to clicking on the left menu:
  d3.selectAll('span.filter_v').on('click', null);
  d3.selectAll('span.target_region').on('click', null);
  d3.selectAll('span.label_chk').on('click', null);

  // Remove the table:
  d3.select('.dataTable-wrapper').remove();

  // Unbind buttons on the top of the map:
  d3.select('#header_map').selectAll('img').on('click', null);

  // Remove the selection menu (or buttons) under the chart:
  d3.select('#bar_section > #menu_selection').remove();

  // Removes the current behavior corresponding to clicking on the top menu:
  d3.selectAll('.type_chart.title_menu').on('click', null);

  // Removes the current behavior corresponding to pressing the Control key:
  document.onkeyup = null;
  document.onkeydown = null;
}

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} test_value - The value to be compared to the value of "my region".
* @param {Number} ref_value - The value of my region.
* @param {Boolean} serie_inversed - Whether the serie is inversed or not in the current chart.
* @return {String} - A string containing the color to be used for this value.
*
*/
var comp = function comp(test_value, ref_value, serie_inversed) {
  if (test_value < ref_value) {
    return serie_inversed ? color_sup : color_inf;
  }
  return serie_inversed ? color_inf : color_sup;
};

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} val1 - The value to be compared to the value of "my region" for the 1st variable.
* @param {Number} val2 - The value to be compared to the value of "my region" for the 2nd variable.
* @param {Number} ref_val1 - The value of my region for he first variable.
* @param {Number} ref_val2 - The value of my region for the second variable.
* @param {Boolean} xInversed - Whether the serie is inversed on the x axis in the current chart.
* @param {Boolean} yInversed - Whether the serie is inversed on the y axis in the current chart.
* @return {String} - A string containing the color to be used for theses values.
*
*/
var comp2 = function comp2(val1, val2, ref_val1, ref_val2, xInversed, yInversed) {
  if (val1 < ref_val1 && !xInversed || val1 > ref_val1 && xInversed) {
    // val1 is inferior:
    if (val2 < ref_val2) {
      return yInversed ? 'rgb(160, 30, 160)' : color_inf;
    }
    return yInversed ? color_inf : 'rgb(160, 30, 160)';
  }
  // val1 is superior :
  if (val2 > ref_val2) {
    return !yInversed ? color_sup : 'orange';
  }
  return !yInversed ? 'orange' : color_sup;
};

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

var PropSizer = function PropSizer(fixed_value, fixed_size) {
  var _this = this;

  this.fixed_value = fixed_value;
  var sqrt = Math.sqrt;
  var abs = Math.abs;
  var PI = Math.PI;
  this.smax = fixed_size * fixed_size * PI;
  this.scale = function (val) {
    return sqrt(abs(val) * _this.smax / _this.fixed_value) / PI;
  };
  // this.get_value = size => ((size * PI) ** 2) / this.smax * this.fixed_value;
  // Use Math pow to support browser without ** operator:
  // eslint-disable-next-line no-restricted-properties
  this.get_value = function (size) {
    return Math.pow(size * PI, 2) / _this.smax * _this.fixed_value;
  };
};

var removeDuplicates = function removeDuplicates(arr) {
  var tmp = [];
  for (var i = 0, len_arr = arr.length; i < len_arr; i++) {
    if (tmp.indexOf(arr[i]) === -1) {
      tmp.push(arr[i]);
    }
  }
  return tmp;
};

var getSvgPathType = function getSvgPathType(path) {
  if (path.indexOf('M ') > -1 && path.indexOf(' L ') > -1) {
    return 2;
  }
  return 1;
};

var svgPathToCoords = function svgPathToCoords(path, type_path) {
  if (type_path === 1) {
    return path.slice(1).split('L').map(function (pt) {
      return pt.split(',').map(function (a) {
        return +a;
      });
    });
  }
  return path.slice(2).split(' L ').map(function (pt) {
    return pt.split(' ').map(function (a) {
      return +a;
    });
  });
};

function computePercentileRank(obj, field_name, result_field_name) {
  var values = obj.map(function (d) {
    return d[field_name];
  });
  var len_values = values.length;
  var getPR = function getPR(v) {
    var count = 0;
    for (var i = 0; i < len_values; i++) {
      if (values[i] <= v) {
        count += 1;
      }
    }
    return 100 * count / len_values;
  };
  for (var ix = 0; ix < len_values; ix++) {
    // eslint-disable-next-line no-param-reassign
    obj[ix][result_field_name] = getPR(values[ix]);
  }
}

var _getPR = function _getPR(v, serie) {
  var count = 0;
  for (var i = 0; i < serie.length; i++) {
    if (serie[i] <= v) {
      count += 1;
    }
  }
  return 100 * count / serie.length;
};

var getMean = function getMean(serie) {
  var nb_values = serie.length;
  var sum = 0;
  for (var i = 0; i < nb_values; i++) {
    sum += serie[i];
  }
  return sum / nb_values;
};

function euclidian_distance(feature1, feature2) {
  var _feature1$geometry$co = slicedToArray(feature1.geometry.coordinates, 2),
      x1 = _feature1$geometry$co[0],
      y1 = _feature1$geometry$co[1];

  var _feature2$geometry$co = slicedToArray(feature2.geometry.coordinates, 2),
      x2 = _feature2$geometry$co[0],
      y2 = _feature2$geometry$co[1];

  var a = x1 - x2;
  var b = y1 - y2;
  return math_sqrt(a * a + b * b);
}

/**
* Function to select the first variable on the left menu
* (triggered after changing region, if no more variable was selected)
*
* @return {void}
*/
function selectFirstAvailableVar() {
  var menu = document.querySelector('#menu');
  var v = menu.querySelectorAll('.target_variable');
  for (var i = 0; i < v.length; i++) {
    if (!v[i].classList.contains('disabled')) {
      v[i].classList.add('checked');
      return v[i].getAttribute('value');
    }
  }
}

function prepareGeomLayerId(layer, id_field) {
  layer.features.forEach(function (ft) {
    // eslint-disable-next-line no-param-reassign
    ft.id = ft.properties[id_field];
  });
}

function getRandom(arr, false_length) {
  return arr[Math.round(Math.random() * (false_length || arr.length))];
}

var createMenu = function createMenu(names, variables, study_zones, territorial_mesh) {
  // First section, regions names:
  var title_section1 = document.createElement('p');
  title_section1.className = 'title_menu';
  title_section1.innerHTML = 'Ma rÃ©gion';
  var section1 = document.createElement('div');
  section1.className = 'box';
  section1.style.overflow = 'auto';
  section1.style.height = '180px';
  for (var i = 0, len_i = names.length; i < len_i; i++) {
    var id = names[i].geo;
    var name = names[i].Nom;
    var entry = document.createElement('p');
    entry.innerHTML = '<span value="' + id + '" class=\'target_region square\'></span><span class="label_chk">' + name + '</span>';
    section1.appendChild(entry);
  }

  // Second section, groups of variables:
  var title_section2 = document.createElement('p');
  title_section2.className = 'title_menu';
  title_section2.innerHTML = 'Indicateurs';
  var section2 = document.createElement('div');
  section2.id = 'menu_variables';
  section2.className = 'box';
  section2.style.overflow = 'auto';
  section2.style.height = '170px';

  // Filter the "variables" variable to fetch the group names :
  var groups_var = removeDuplicates(variables.map(function (d) {
    return d.group;
  }).filter(function (d) {
    return d !== 'Num/dÃ©nom';
  }));

  var _loop = function _loop(_i, _len_i) {
    var gp_name = groups_var[_i];
    var entry = document.createElement('p');
    entry.className = 'name_group_var';
    entry.innerHTML = '<span class=\'square\'></span><span>' + gp_name + '</span>';
    section2.appendChild(entry);
    var div_grp = document.createElement('div');
    div_grp.style.display = _i === 0 ? null : 'none';
    var var_names = variables.filter(function (d) {
      return d.group === gp_name;
    });
    for (var j = 0, len_j = var_names.length; j < len_j; j++) {
      var name_var = var_names[j].name;
      var code_var = var_names[j].ratio;
      var sub_entry = document.createElement('p');
      sub_entry.className = 'small';
      sub_entry.innerHTML = '<span value="' + code_var + '" class="target_variable small_square"></span><span class="label_chk">' + name_var + '</span><span class="i_info">i</span>';
      div_grp.appendChild(sub_entry);
    }
    section2.appendChild(div_grp);
  };

  for (var _i = 0, _len_i = groups_var.length; _i < _len_i; _i++) {
    _loop(_i, _len_i);
  }

  // Third section, study zone:
  var title_section3 = document.createElement('p');
  title_section3.className = 'title_menu';
  title_section3.innerHTML = 'Espace d\'Ã©tude';
  var section3 = document.createElement('div');
  section3.id = 'menu_studyzone';
  section3.className = 'box';
  for (var _i2 = 0, _len_i2 = study_zones.length; _i2 < _len_i2; _i2++) {
    var _entry = document.createElement('p');
    var zone = study_zones[_i2];
    if (zone.id === 'filter_dist') {
      _entry.innerHTML = '<span filter-value="' + zone.id + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span><input value="450" disabled="disabled" style="width: 55px; height: 13px;" type="number" min="0" max="100000" id="dist_filter"></input><span> km</span><span class="i_info">i</span>';
    } else {
      _entry.innerHTML = '<span filter-value="' + zone.id + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span><span class="i_info">i</span>';
    }
    section3.appendChild(_entry);
  }

  // Fourth section:
  var title_section4 = document.createElement('p');
  title_section4.className = 'title_menu';
  title_section4.innerHTML = 'Maillage territorial d\'analyse';
  var section4 = document.createElement('div');
  section4.id = 'menu_territ_level';
  section4.className = 'box';
  for (var _i3 = 0, _len_i3 = territorial_mesh.length; _i3 < _len_i3; _i3++) {
    var _entry2 = document.createElement('p');
    var territ_level = territorial_mesh[_i3];
    _entry2.innerHTML = '<span value="' + territ_level.id + '" class=\'territ_level square\'></span><span class="label_chk">' + territ_level.name + '</span><span class="i_info">i</span>';
    section4.appendChild(_entry2);
  }

  // The actual menu containing these 4 sections:
  var menu = document.getElementById('menu');
  menu.id = 'menu';
  menu.style.width = '340px';
  menu.style.float = 'left';
  menu.appendChild(title_section1);
  menu.appendChild(section1);
  menu.appendChild(title_section2);
  menu.appendChild(section2);
  menu.appendChild(title_section3);
  menu.appendChild(section3);
  menu.appendChild(title_section4);
  menu.appendChild(section4);
};

function makeTopMenu() {
  var top_menu = d3.select('#menutop').styles({ 'font-family': "'Signika', sans-serif", 'font-size': '0.80em', padding: '0.3px' });
  var width_left = document.querySelector('#menu').getBoundingClientRect().width + 25 + 'px';
  var t = document.querySelector('#bar_section').getBoundingClientRect().width;
  var width_central_chart = t + 'px';
  var width_map = document.querySelector('#map_section').getBoundingClientRect().width - 40 + 'px';
  var width_type_comp = (t - 80) / 2 - 2 + 'px';
  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_left, float: 'left', margin: '0 3px' }).html('SÃ‰LECTION');

  var type_chart = top_menu.append('div').attr('class', 'top_section').styles({ width: width_central_chart, float: 'left', margin: '0 3px', 'text-align': 'center' });

  var position = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  position.append('p').attr('class', 'title_type_comp').html('POSITION');

  position.append('span').attrs({ class: 'type_chart chart_t1 selected', value: 'BarChart1' }).html('1 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ScatterPlot2' }).html('2 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t3 disabled', value: 'RadarChart3' }).html('+3 ind.');

  var ressemblance = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  ressemblance.append('p').attr('class', 'title_type_comp').html('RESSEMBLANCES');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t1', value: 'Similarity1plus' }).html('+1 ind.');

  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_map, float: 'left', margin: '0 0 0 20px' }).html('QUELLES RÃ‰GIONS ?');
}

function makeHeaderMapSection() {
  var header_map_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_map').style('margin', '0 37.5px 0 10px');

  header_map_section.insert('img').attrs({
    class: 'map_button active',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  });

  header_map_section.insert('div').attrs({
    id: 'zoom_in',
    class: 'top_half_circle'
  }).styles({
    'font-weight': 'bold',
    float: 'right',
    cursor: 'pointer',
    'text-align': 'center',
    top: '8px',
    position: 'relative',
    color: 'white'
  }).append('span').text('+');

  header_map_section.insert('div').attrs({
    id: 'zoom_out',
    class: 'top_half_circle'
  }).styles({
    'font-weight': 'bold',
    float: 'right',
    cursor: 'pointer',
    'text-align': 'center',
    top: '8px',
    position: 'relative',
    color: 'white'
  }).append('span').text('-');
}

function makeHeaderChart() {
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').attr('id', 'header_chart').style('margin-bottom', '0').style('clear', 'both');

  header_bar_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/edit-table-insert-row-above.svg',
    id: 'img_table'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    var columns = Object.keys(app.current_data[0]);
    var content = [columns.join(','), '\r\n', app.current_data.map(function (d) {
      return columns.map(function (c) {
        return d[c];
      }).join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'Regioviz_export.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
    // if (document.querySelector('.dataTable-wrapper').style.display) {
    //   document.querySelector('#svg_map').style.display = 'none';
    //   document.querySelector('#svg_legend').style.display = 'none';
    //   document.querySelector('#header_map').style.display = 'none';
    //   document.querySelector('#header_table').style.display = null;
    //   document.querySelector('.dataTable-wrapper').style.display = null;
    //   this.style.filter = 'invert(75%)';
    // } else {
    //   document.querySelector('#svg_map').style.display = null;
    //   document.querySelector('#svg_legend').style.display = null;
    //   document.querySelector('#header_map').style.display = null;
    //   document.querySelector('#header_table').style.display = 'none';
    //   document.querySelector('.dataTable-wrapper').style.display = 'none';
    //   this.style.filter = null;
    // }
  });

  header_bar_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/printer.svg',
    id: 'img_printer'
  }).styles({ margin: '3px', float: 'right' });

  header_bar_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/gtk-info.svg',
    id: 'img_info'
  }).styles({ margin: '3px', float: 'right' });
}

var tippy = createCommonjsModule(function (module, exports) {
(function (global, factory) {
	module.exports = factory();
}(commonjsGlobal, (function () { 'use strict';

var Browser = {};

if (typeof window !== 'undefined') {
  Browser.SUPPORTED = 'requestAnimationFrame' in window;
  Browser.SUPPORTS_TOUCH = 'ontouchstart' in window;
  Browser.touch = false;
  Browser.dynamicInputDetection = true;
  // Chrome device/touch emulation can make this dynamic
  Browser.iOS = function () {
    return (/iPhone|iPad|iPod/.test(navigator.userAgent) && !window.MSStream
    );
  };
}

/**
* The global storage array which holds all data reference objects
* from every instance
* This allows us to hide tooltips from all instances, finding the ref when
* clicking on the body, and for followCursor
*/
var Store = [];

/**
* Selector constants used for grabbing elements
*/
var Selectors = {
  POPPER: '.tippy-popper',
  TOOLTIP: '.tippy-tooltip',
  CONTENT: '.tippy-tooltip-content',
  CIRCLE: '[x-circle]',
  ARROW: '[x-arrow]',
  TOOLTIPPED_EL: '[data-tooltipped]',
  CONTROLLER: '[data-tippy-controller]'

  /**
  * The default settings applied to each instance
  */
};var Defaults = {
  html: false,
  position: 'top',
  animation: 'shift',
  animateFill: true,
  arrow: false,
  arrowSize: 'regular',
  delay: 0,
  trigger: 'mouseenter focus',
  duration: 350,
  interactive: false,
  interactiveBorder: 2,
  theme: 'dark',
  size: 'regular',
  distance: 10,
  offset: 0,
  hideOnClick: true,
  multiple: false,
  followCursor: false,
  inertia: false,
  flipDuration: 350,
  sticky: false,
  stickyDuration: 200,
  appendTo: function appendTo() {
    return document.body;
  },
  zIndex: 9999,
  touchHold: false,
  performance: false,
  dynamicTitle: false,
  popperOptions: {}

  /**
  * The keys of the defaults object for reducing down into a new object
  * Used in `getIndividualSettings()`
  */
};var DefaultsKeys = Browser.SUPPORTED && Object.keys(Defaults);

/**
* Hides all poppers
* @param {Object} exclude - refData to exclude if needed
*/
function hideAllPoppers(exclude) {
  Store.forEach(function (refData) {
    var popper = refData.popper,
        tippyInstance = refData.tippyInstance,
        _refData$settings = refData.settings,
        appendTo = _refData$settings.appendTo,
        hideOnClick = _refData$settings.hideOnClick,
        trigger = _refData$settings.trigger;

    // Don't hide already hidden ones

    if (!appendTo.contains(popper)) return;

    // hideOnClick can have the truthy value of 'persistent', so strict check is needed
    var isHideOnClick = hideOnClick === true || trigger.indexOf('focus') !== -1;
    var isNotCurrentRef = !exclude || popper !== exclude.popper;

    if (isHideOnClick && isNotCurrentRef) {
      tippyInstance.hide(popper);
    }
  });
}

var matches = {};

if (typeof Element !== 'undefined') {
  var e = Element.prototype;
  matches = e.matches || e.matchesSelector || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || function (s) {
    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
        i = matches.length;
    while (--i >= 0 && matches.item(i) !== this) {}
    return i > -1;
  };
}

var matches$1 = matches;

/**
* Ponyfill to get the closest parent element
* @param {Element} element - child of parent to be returned
* @param {String} parentSelector - selector to match the parent if found
* @return {Element}
*/
function closest(element, parentSelector) {
  var _closest = Element.prototype.closest || function (selector) {
    var el = this;
    while (el) {
      if (matches$1.call(el, selector)) {
        return el;
      }
      el = el.parentElement;
    }
  };

  return _closest.call(element, parentSelector);
}

/**
* Ponyfill for Array.prototype.find
* @param {Array} arr
* @param {Function} checkFn
* @return item in the array
*/
function find(arr, checkFn) {
  if (Array.prototype.find) {
    return arr.find(checkFn);
  }

  // use `filter` as fallback
  return arr.filter(checkFn)[0];
}

/**
* Adds the needed event listeners
*/
function bindEventListeners() {
  var touchHandler = function touchHandler() {
    Browser.touch = true;

    if (Browser.iOS()) {
      document.body.classList.add('tippy-touch');
    }

    if (Browser.dynamicInputDetection && window.performance) {
      document.addEventListener('mousemove', mousemoveHandler);
    }
  };

  var mousemoveHandler = function () {
    var time = void 0;

    return function () {
      var now = performance.now();

      // Chrome 60+ is 1 mousemove per rAF, use 20ms time difference
      if (now - time < 20) {
        Browser.touch = false;
        document.removeEventListener('mousemove', mousemoveHandler);
        if (!Browser.iOS()) {
          document.body.classList.remove('tippy-touch');
        }
      }

      time = now;
    };
  }();

  var clickHandler = function clickHandler(event) {
    // Simulated events dispatched on the document
    if (!(event.target instanceof Element)) {
      return hideAllPoppers();
    }

    var el = closest(event.target, Selectors.TOOLTIPPED_EL);
    var popper = closest(event.target, Selectors.POPPER);

    if (popper) {
      var ref = find(Store, function (ref) {
        return ref.popper === popper;
      });
      var interactive = ref.settings.interactive;

      if (interactive) return;
    }

    if (el) {
      var _ref = find(Store, function (ref) {
        return ref.el === el;
      });
      var _ref$settings = _ref.settings,
          hideOnClick = _ref$settings.hideOnClick,
          multiple = _ref$settings.multiple,
          trigger = _ref$settings.trigger;

      // Hide all poppers except the one belonging to the element that was clicked IF
      // `multiple` is false AND they are a touch user, OR
      // `multiple` is false AND it's triggered by a click

      if (!multiple && Browser.touch || !multiple && trigger.indexOf('click') !== -1) {
        return hideAllPoppers(_ref);
      }

      // If hideOnClick is not strictly true or triggered by a click don't hide poppers
      if (hideOnClick !== true || trigger.indexOf('click') !== -1) return;
    }

    // Don't trigger a hide for tippy controllers, and don't needlessly run loop
    if (closest(event.target, Selectors.CONTROLLER) || !document.querySelector(Selectors.POPPER)) return;

    hideAllPoppers();
  };

  var blurHandler = function blurHandler(event) {
    var _document = document,
        el = _document.activeElement;

    if (el && el.blur && matches$1.call(el, Selectors.TOOLTIPPED_EL)) {
      el.blur();
    }
  };

  // Hook events
  document.addEventListener('click', clickHandler);
  document.addEventListener('touchstart', touchHandler);
  window.addEventListener('blur', blurHandler);

  if (!Browser.SUPPORTS_TOUCH && (navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0)) {
    document.addEventListener('pointerdown', touchHandler);
  }
}

/**
* To run a single time, once DOM is presumed to be ready
* @return {Boolean} whether the function has run or not
*/
function init() {
  if (init.done) return false;
  init.done = true;

  bindEventListeners();

  return true;
}

/**
* Waits until next repaint to execute a fn
* @param {Function} fn
*/
function defer(fn) {
  window.requestAnimationFrame(function () {
    setTimeout(fn, 0);
  });
}

/**
* Returns the supported prefixed property - only `webkit` is needed, `moz`, `ms` and `o` are obsolete
* @param {String} property
* @return {String} - browser supported prefixed property
*/
function prefix(property) {
  var prefixes = [false, 'webkit'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var _prefix = prefixes[i];
    var prefixedProp = _prefix ? '' + _prefix + upperProp : property;
    if (typeof window.document.body.style[prefixedProp] !== 'undefined') {
      return prefixedProp;
    }
  }

  return null;
}

/**
* Ponyfill for Array.prototype.findIndex
* @param {Array} arr
* @param {Function} checkFn
* @return index of the item in the array
*/
function findIndex(arr, checkFn) {
  if (Array.prototype.findIndex) {
    return arr.findIndex(checkFn);
  }

  // fallback
  return arr.indexOf(find(arr, checkFn));
}

/**
* Removes the title from the tooltipped element, setting `data-original-title`
* appropriately
* @param {Element} el
*/
function removeTitle(el) {
  var title = el.getAttribute('title');

  // Only set `data-original-title` attr if there is a title
  if (title) {
    el.setAttribute('data-original-title', title);
  }

  el.removeAttribute('title');
}

/**
* Determines if an element is visible in the viewport
* @param {Element} el
* @return {Boolean}
*/
function elementIsInViewport(el) {
  var rect = el.getBoundingClientRect();

  return rect.top >= 0 && rect.left >= 0 && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && rect.right <= (window.innerWidth || document.documentElement.clientWidth);
}

/**
* Triggers a document repaint or reflow for CSS transition
* @param {Element} tooltip
* @param {Element} circle
*/
function triggerReflow(tooltip, circle) {
  // Safari needs the specific 'transform' property to be accessed
  circle ? window.getComputedStyle(circle)[prefix('transform')] : window.getComputedStyle(tooltip).opacity;
}

/**
* Modifies elements' class lists
* @param {Element[]} els - Array of elements
* @param {Function} callback
*/
function modifyClassList(els, callback) {
  els.forEach(function (el) {
    if (!el) return;
    callback(el.classList);
  });
}

/**
* Returns inner elements of the popper element
* @param {Element} popper
* @return {Object}
*/
function getInnerElements(popper) {
  return {
    tooltip: popper.querySelector(Selectors.TOOLTIP),
    circle: popper.querySelector(Selectors.CIRCLE),
    content: popper.querySelector(Selectors.CONTENT)
  };
}

/**
* Applies the transition duration to each element
* @param {Element[]} els - Array of elements
* @param {Number} duration
*/
function applyTransitionDuration(els, duration) {
  els.forEach(function (el) {
    if (!el) return;

    var isContent = matches$1.call(el, Selectors.CONTENT);

    var _duration = isContent ? Math.round(duration / 1.3) : duration;

    el.style[prefix('transitionDuration')] = _duration + 'ms';
  });
}

/**
* Determines if a popper is currently visible
* @param {Element} popper
* @return {Boolean}
*/
function isVisible(popper) {
  return popper.style.visibility === 'visible';
}

function noop() {}

function isObjectLiteral(input) {
  return !!input && input.toString() === '[object Object]';
}

/**
* Returns the non-shifted placement (e.g., 'bottom-start' => 'bottom')
* @param {String} placement
* @return {String}
*/
function getCorePlacement(placement) {
  return placement.replace(/-.+/, '');
}

/**
* Mousemove event listener callback method for follow cursor setting
* @param {MouseEvent} e
*/
function followCursorHandler(e) {
  var _this = this;

  var data = find(Store, function (data) {
    return data.el === _this;
  });

  var popper = data.popper,
      offset = data.settings.offset;


  var position = getCorePlacement(popper.getAttribute('x-placement'));
  var halfPopperWidth = Math.round(popper.offsetWidth / 2);
  var halfPopperHeight = Math.round(popper.offsetHeight / 2);
  var viewportPadding = 5;
  var pageWidth = document.documentElement.offsetWidth || document.body.offsetWidth;

  var pageX = e.pageX,
      pageY = e.pageY;


  var x = void 0,
      y = void 0;

  switch (position) {
    case 'top':
      x = pageX - halfPopperWidth + offset;
      y = pageY - 2 * halfPopperHeight;
      break;
    case 'bottom':
      x = pageX - halfPopperWidth + offset;
      y = pageY + 10;
      break;
    case 'left':
      x = pageX - 2 * halfPopperWidth;
      y = pageY - halfPopperHeight + offset;
      break;
    case 'right':
      x = pageX + 5;
      y = pageY - halfPopperHeight + offset;
      break;
  }

  var isRightOverflowing = pageX + viewportPadding + halfPopperWidth + offset > pageWidth;
  var isLeftOverflowing = pageX - viewportPadding - halfPopperWidth + offset < 0;

  // Prevent left/right overflow
  if (position === 'top' || position === 'bottom') {
    if (isRightOverflowing) {
      x = pageWidth - viewportPadding - 2 * halfPopperWidth;
    }

    if (isLeftOverflowing) {
      x = viewportPadding;
    }
  }

  popper.style[prefix('transform')] = 'translate3d(' + x + 'px, ' + y + 'px, 0)';
}

/**
* Returns an array of elements based on the selector input
* @param {String|Element|Element[]} selector
* @return {Element[]}
*/
function getArrayOfElements(selector) {
  if (selector instanceof Element || isObjectLiteral(selector)) {
    return [selector];
  }

  if (selector instanceof NodeList) {
    return [].slice.call(selector);
  }

  if (Array.isArray(selector)) {
    return selector;
  }

  try {
    return [].slice.call(document.querySelectorAll(selector));
  } catch (_) {
    return [];
  }
}

/**
* Prepares the callback functions for `show` and `hide` methods
* @param {Object} data
* @param {Number} duration
* @param {Function} callback - callback function to fire once transitions complete
*/
function onTransitionEnd(data, duration, callback) {
  // Make callback synchronous if duration is 0
  if (!duration) {
    return callback();
  }

  var _getInnerElements = getInnerElements(data.popper),
      tooltip = _getInnerElements.tooltip;

  var transitionendFired = false;

  var listenerCallback = function listenerCallback(e) {
    if (e.target === tooltip && !transitionendFired) {
      transitionendFired = true;
      callback();
    }
  };

  // Fire callback upon transition completion
  tooltip.addEventListener('webkitTransitionEnd', listenerCallback);
  tooltip.addEventListener('transitionend', listenerCallback);

  // Fallback: transitionend listener sometimes may not fire
  clearTimeout(data._transitionendTimeout);
  data._transitionendTimeout = setTimeout(function () {
    if (!transitionendFired) {
      callback();
    }
  }, duration);
}

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.12.4
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var nativeHints = ['native code', '[object MutationObserverConstructor]'];

/**
 * Determine if a function is implemented natively (as opposed to a polyfill).
 * @method
 * @memberof Popper.Utils
 * @argument {Function | undefined} fn the function to check
 * @returns {Boolean}
 */
var isNative = function isNative(fn) {
  return nativeHints.some(function (hint) {
    return (fn || '').toString().indexOf(hint) > -1;
  });
};

var isBrowser = typeof window !== 'undefined';
var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];
var timeoutDuration = 0;
for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
    timeoutDuration = 1;
    break;
  }
}

function microtaskDebounce(fn) {
  var scheduled = false;
  var i = 0;
  var elem = document.createElement('span');

  // MutationObserver provides a mechanism for scheduling microtasks, which
  // are scheduled *before* the next task. This gives us a way to debounce
  // a function but ensure it's called *before* the next paint.
  var observer = new MutationObserver(function () {
    fn();
    scheduled = false;
  });

  observer.observe(elem, { attributes: true });

  return function () {
    if (!scheduled) {
      scheduled = true;
      elem.setAttribute('x-index', i);
      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8
    }
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

// It's common for MutationObserver polyfills to be seen in the wild, however
// these rely on Mutation Events which only occur when an element is connected
// to the DOM. The algorithm used in this module does not use a connected element,
// and so we must ensure that a *native* MutationObserver is available.
var supportsNativeMutationObserver = isBrowser && isNative(window.MutationObserver);

/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/
var debounce = supportsNativeMutationObserver ? microtaskDebounce : taskDebounce;

/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */
function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}

/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */
function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  }
  // NOTE: 1 DOM access here
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}

/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */
function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }
  return element.parentNode || element.host;
}

/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */
function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element || ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1) {
    return window.document.body;
  }

  // Firefox want us to check `-x` and `-y` variations as well

  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}

/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */
function getOffsetParent(element) {
  // NOTE: 1 DOM access here
  var offsetParent = element && element.offsetParent;
  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return window.document.documentElement;
  }

  // .offsetParent will return the closest TD or TABLE in case
  // no offsetParent is present, I hate this job...
  if (['TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }
  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}

/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */
function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}

/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */
function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return window.document.documentElement;
  }

  // Here we make sure to give as "start" the element that comes first in the DOM
  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1;

  // Get common ancestor container
  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer;

  // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  }

  // one of the nodes is inside shadowDOM, find which one
  var element1root = getRoot(element1);
  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}

/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */
function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';

  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = window.document.documentElement;
    var scrollingElement = window.document.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}

/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */
function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}

/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */

function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';

  return +styles['border' + sideA + 'Width'].split('px')[0] + +styles['border' + sideB + 'Width'].split('px')[0];
}

/**
 * Tells if you are running Internet Explorer 10
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean} isIE10
 */
var isIE10 = undefined;

var isIE10$1 = function isIE10$1() {
  if (isIE10 === undefined) {
    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;
  }
  return isIE10;
};

function getSize(axis, body, html, computedStyle, includeScroll) {
  return Math.max(body['offset' + axis], includeScroll ? body['scroll' + axis] : 0, html['client' + axis], html['offset' + axis], includeScroll ? html['scroll' + axis] : 0, isIE10$1() ? html['offset' + axis] + computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')] + computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')] : 0);
}

function getWindowSizes() {
  var includeScroll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  var body = window.document.body;
  var html = window.document.documentElement;
  var computedStyle = isIE10$1() && window.getComputedStyle(html);

  return {
    height: getSize('Height', body, html, computedStyle, includeScroll),
    width: getSize('Width', body, html, computedStyle, includeScroll)
  };
}

var classCallCheck = function classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */
function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}

/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */
function getBoundingClientRect(element) {
  var rect = {};

  // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11
  if (isIE10$1()) {
    try {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } catch (err) {}
  } else {
    rect = element.getBoundingClientRect();
  }

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  };

  // subtract scrollbar size from sizes
  var sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};
  var width = sizes.width || element.clientWidth || result.right - result.left;
  var height = sizes.height || element.clientHeight || result.bottom - result.top;

  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height;

  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons
  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');

    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var isIE10 = isIE10$1();
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);

  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = +styles.borderTopWidth.split('px')[0];
  var borderLeftWidth = +styles.borderLeftWidth.split('px')[0];

  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0;

  // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.
  if (!isIE10 && isHTML) {
    var marginTop = +styles.marginTop.split('px')[0];
    var marginLeft = +styles.marginLeft.split('px')[0];

    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft;

    // Attach marginTop and marginLeft because in some circumstances we may need them
    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var html = window.document.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);

  var scrollTop = getScroll(html);
  var scrollLeft = getScroll(html, 'left');

  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };

  return getClientRect(offset);
}

/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */
function isFixed(element) {
  var nodeName = element.nodeName;
  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }
  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }
  return isFixed(getParentNode(element));
}

/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @returns {Object} Coordinates of the boundaries
 */
function getBoundaries(popper, reference, padding, boundariesElement) {
  // NOTE: 1 DOM access here
  var boundaries = { top: 0, left: 0 };
  var offsetParent = findCommonOffsetParent(popper, reference);

  // Handle viewport case
  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;
    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(popper));
      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = window.document.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = window.document.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent);

    // In case of HTML, we need a different computation
    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(false),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  }

  // Add paddings
  boundaries.left += padding;
  boundaries.top += padding;
  boundaries.right -= padding;
  boundaries.bottom -= padding;

  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;

  return width * height;
}

/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);

  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };

  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });

  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });

  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;

  var variation = placement.split('-')[1];

  return computedPlacement + (variation ? '-' + variation : '');
}

/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */
function getReferenceOffsets(state, popper, reference) {
  var commonOffsetParent = findCommonOffsetParent(popper, reference);
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);
}

/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */
function getOuterSizes(element) {
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
  var y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}

/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */
function getOppositePlacement(placement) {
  var hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}

/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */
function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0];

  // Get popper node sizes
  var popperRect = getOuterSizes(popper);

  // Add position, width and height to our offsets object
  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  };

  // depending by the popper placement we have to compute its offsets slightly differently
  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';

  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;
  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}

/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function find$1(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  }

  // use `filter` to obtain the same behavior of `find`
  return arr.filter(check)[0];
}

/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */
function findIndex$1(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  }

  // use `find` + `indexOf` if `findIndex` isn't supported
  var match = find$1(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}

/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */
function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex$1(modifiers, 'name', ends));

  modifiersToRun.forEach(function (modifier) {
    if (modifier.function) {
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }
    var fn = modifier.function || modifier.fn;
    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);

      data = fn(data, modifier);
    }
  });

  return data;
}

/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */
function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  };

  // compute reference element offsets
  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding);

  // store the computed placement inside `originalPlacement`
  data.originalPlacement = data.placement;

  // compute the popper offsets
  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = 'absolute';

  // run the modifiers
  data = runModifiers(this.modifiers, data);

  // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback
  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}

/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */
function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}

/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */
function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length - 1; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;
    if (typeof window.document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }
  return null;
}

/**
 * Destroy the popper
 * @method
 * @memberof Popper
 */
function destroy() {
  this.state.isDestroyed = true;

  // touch DOM only if `applyStyle` modifier is enabled
  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.left = '';
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners();

  // remove the popper if user explicity asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it
  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }
  return this;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? window : scrollParent;
  target.addEventListener(event, callback, { passive: true });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }
  scrollParents.push(target);
}

/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  window.addEventListener('resize', state.updateBound, { passive: true });

  // Scroll event listener on scroll parents
  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;

  return state;
}

/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */
function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}

/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */
function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  window.removeEventListener('resize', state.updateBound);

  // Remove scroll event listener on scroll parents
  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  });

  // Reset state
  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}

/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger onUpdate callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */
function disableEventListeners() {
  if (this.state.eventsEnabled) {
    window.cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}

/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */
function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}

/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = '';
    // add unit if the value is numeric and is one of the following
    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }
    element.style[prop] = styles[prop] + unit;
  });
}

/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */
function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];
    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */
function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles);

  // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element
  setAttributes(data.instance.popper, data.attributes);

  // if arrowElement is defined and arrowStyles has some properties
  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}

/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper.
 * @param {Object} options - Popper.js options
 */
function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference);

  // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value
  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);

  popper.setAttribute('x-placement', placement);

  // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations
  setStyles(popper, { position: 'absolute' });

  return options;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper;

  // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find$1(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;
  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }
  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;

  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent);

  // Styles
  var styles = {
    position: popper.position
  };

  // floor sides to avoid blurry text
  var offsets = {
    left: Math.floor(popper.left),
    top: Math.floor(popper.top),
    bottom: Math.floor(popper.bottom),
    right: Math.floor(popper.right)
  };

  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right';

  // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed
  var prefixedProperty = getSupportedPropertyName('transform');

  // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.
  var left = void 0,
      top = void 0;
  if (sideA === 'bottom') {
    top = -offsetParentRect.height + offsets.bottom;
  } else {
    top = offsets.top;
  }
  if (sideB === 'right') {
    left = -offsetParentRect.width + offsets.right;
  } else {
    left = offsets.left;
  }
  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  }

  // Attributes
  var attributes = {
    'x-placement': data.placement
  };

  // Update `data` attributes, styles and arrowStyles
  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);

  return data;
}

/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */
function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find$1(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });

  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';
    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }
  return isRequired;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function arrow(data, options) {
  // arrow depends on keepTogether in order to work
  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element;

  // if arrowElement is a string, suppose it's a CSS selector
  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement);

    // if arrowElement is not found, don't run the modifier
    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isVertical = ['left', 'right'].indexOf(placement) !== -1;

  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len];

  //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjuction
  //

  // top/left side
  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  }
  // bottom/right side
  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }

  // compute center of the popper
  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2;

  // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available
  var popperMarginSide = getStyleComputedProperty(data.instance.popper, 'margin' + sideCapitalized).replace('px', '');
  var sideValue = center - getClientRect(data.offsets.popper)[side] - popperMarginSide;

  // prevent arrowElement from being placed not contiguously to its popper
  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);

  data.arrowElement = arrowElement;
  data.offsets.arrow = {};
  data.offsets.arrow[side] = Math.round(sideValue);
  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node

  return data;
}

/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */
function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }
  return variation;
}

/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-right` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */
var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'];

// Get rid of `auto` `auto-start` and `auto-end`
var validPlacements = placements.slice(3);

/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */
function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement);

  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';

  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;
    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;
    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;
    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);

    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference;

    // using floor because the reference offsets may contain decimals we are not going to consider here
    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);

    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);

    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom;

    // flip the variation if required
    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
    var flippedVariation = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom);

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : '');

      // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future
      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));

      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }
  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}

/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */
function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2];

  // If it's not a number it's an operator, I guess
  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;
    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;
      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;
    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }
    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}

/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */
function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0];

  // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one
  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;

  // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)
  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  });

  // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space
  var divider = fragments.indexOf(find$1(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  }

  // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.
  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments];

  // Convert the values with units to absolute pixels to allow our computations
  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op
    // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, [])
    // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  });

  // Loop trough the offsets arrays and execute the operations
  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */
function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var basePlacement = placement.split('-')[0];

  var offsets = void 0;
  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper);

  // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken
  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement);
  options.boundaries = boundaries;

  var order = options.priority;
  var popper = data.offsets.popper;

  var check = {
    primary: function primary(placement) {
      var value = popper[placement];
      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }
      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];
      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }
      return defineProperty({}, mainSide, value);
    }
  };

  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });

  data.offsets.popper = popper;

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1];

  // if shift shiftvariation is specified, run the modifier
  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;

    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';

    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };

    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find$1(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;

  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;

  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;

  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);

  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);

  return data;
}

/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */
var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unitless, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the height.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > More on this [reading this issue](https://github.com/FezVrasta/popper.js/issues/373)
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: offset,
    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * An scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" â€” or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: preventOverflow,
    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],
    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper this makes sure the popper has always a little padding
     * between the edges of its container
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier, can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near eachothers
   * without leaving any gap between the two. Expecially useful when the arrow is
   * enabled and you want to assure it to point to its reference element.
   * It cares only about the first axis, you can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjuction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: arrow,
    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: flip,
    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations).
     */
    behavior: 'flip',
    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,
    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position,
     * the popper will never be placed outside of the defined boundaries
     * (except if keepTogether is enabled)
     */
    boundariesElement: 'viewport'
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,
    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,
    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: computeStyle,
    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: true,
    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',
    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define you own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,
    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,
    /** @prop {ModifierFn} */
    fn: applyStyle,
    /** @prop {Function} */
    onLoad: applyStyleOnLoad,
    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3d transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties.
     */
    gpuAcceleration: undefined
  }
};

/**
 * The `dataObject` is an object containing all the informations used by Popper.js
 * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow, it expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements.
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overriden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass as 3rd argument an object with the same
 * structure of this object, example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */
var Defaults$1 = {
  /**
   * Popper's placement
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Whether events (resize, scroll) are initially enabled
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated, this callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js
   * @prop {modifiers}
   */
  modifiers: modifiers
};

/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */

// Utils
// Methods
var Popper = function () {
  /**
   * Create a new Popper.js instance
   * @class Popper
   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper
   * @param {HTMLElement} popper - The HTML element used as popper.
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    };

    // make update() debounced, so that it only runs at most once-per-tick
    this.update = debounce(this.update.bind(this));

    // with {} we create a new object with the options inside it
    this.options = _extends({}, Popper.Defaults, options);

    // init state
    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    };

    // get reference and popper elements (allow jQuery wrappers)
    this.reference = reference.jquery ? reference[0] : reference;
    this.popper = popper.jquery ? popper[0] : popper;

    // Deep merge modifiers options
    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    });

    // Refactoring modifiers' list (Object => Array)
    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    })
    // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    });

    // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!
    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    });

    // fire the first update to position the popper in the right place
    this.update();

    var eventsEnabled = this.options.eventsEnabled;
    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  }

  // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }

    /**
     * Schedule an update, it will run on the next UI update available
     * @method scheduleUpdate
     * @memberof Popper
     */

    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();

/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */

Popper.Utils = (typeof window !== 'undefined' ? window : commonjsGlobal).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults$1;

/**
* Returns the distance taking into account the default distance due to
* the transform: translate setting in CSS
* @param {Number} distance
* @return {String}
*/
function getOffsetDistanceInPx(distance) {
  return -(distance - Defaults.distance) + 'px';
}

var classCallCheck$1 = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass$1 = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();







var _extends$1 = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/**
* Creates a new popper instance
* @param {Object} data
* @return {Object} - the popper instance
*/
function createPopperInstance(data) {
  var el = data.el,
      popper = data.popper,
      _data$settings = data.settings,
      position = _data$settings.position,
      popperOptions = _data$settings.popperOptions,
      offset = _data$settings.offset,
      distance = _data$settings.distance,
      flipDuration = _data$settings.flipDuration;

  var _getInnerElements = getInnerElements(popper),
      tooltip = _getInnerElements.tooltip;

  var config = _extends$1({
    placement: position
  }, popperOptions || {}, {
    modifiers: _extends$1({}, popperOptions ? popperOptions.modifiers : {}, {
      flip: _extends$1({
        padding: distance + 5 /* 5px from viewport boundary */
      }, popperOptions && popperOptions.modifiers ? popperOptions.modifiers.flip : {}),
      offset: _extends$1({
        offset: offset
      }, popperOptions && popperOptions.modifiers ? popperOptions.modifiers.offset : {})
    }),
    onUpdate: function onUpdate() {
      var styles = tooltip.style;
      styles.top = '';
      styles.bottom = '';
      styles.left = '';
      styles.right = '';
      styles[getCorePlacement(popper.getAttribute('x-placement'))] = getOffsetDistanceInPx(distance);
    }
  });

  // Update the popper's position whenever its content changes
  // Not supported in IE10 unless polyfilled
  if (window.MutationObserver) {
    var styles = popper.style;

    var observer = new MutationObserver(function () {
      styles[prefix('transitionDuration')] = '0ms';
      data.popperInstance.update();
      defer(function () {
        styles[prefix('transitionDuration')] = flipDuration + 'ms';
      });
    });

    observer.observe(popper, {
      childList: true,
      subtree: true,
      characterData: true
    });

    data._mutationObservers.push(observer);
  }

  return new Popper(el, popper, config);
}

/**
* Appends the popper and creates a popper instance if one does not exist
* Also updates its position if need be and enables event listeners
* @param {Object} data -  the element/popper reference data
*/
function mountPopper(data) {
  var el = data.el,
      popper = data.popper,
      _data$settings = data.settings,
      appendTo = _data$settings.appendTo,
      followCursor = _data$settings.followCursor;

  // Already on the DOM

  if (appendTo.contains(popper)) return;

  appendTo.appendChild(popper);

  if (!data.popperInstance) {
    data.popperInstance = createPopperInstance(data);
  } else {
    data.popperInstance.update();
    if (!followCursor || Browser.touch) {
      data.popperInstance.enableEventListeners();
    }
  }

  // Since touch is determined dynamically, followCursor is set on mount
  if (followCursor && !Browser.touch) {
    el.addEventListener('mousemove', followCursorHandler);
    data.popperInstance.disableEventListeners();
  }
}

/**
* Updates a popper's position on each animation frame to make it stick to a moving element
* @param {Object} refData
*/
function makeSticky(refData) {
  var popper = refData.popper,
      popperInstance = refData.popperInstance,
      stickyDuration = refData.settings.stickyDuration;


  var applyTransitionDuration = function applyTransitionDuration() {
    return popper.style[prefix('transitionDuration')] = stickyDuration + 'ms';
  };

  var removeTransitionDuration = function removeTransitionDuration() {
    return popper.style[prefix('transitionDuration')] = '';
  };

  var updatePosition = function updatePosition() {
    popperInstance && popperInstance.scheduleUpdate();

    applyTransitionDuration();

    isVisible(popper) ? window.requestAnimationFrame(updatePosition) : removeTransitionDuration();
  };

  // Wait until Popper's position has been updated initially
  defer(updatePosition);
}

/**
* Returns an object of settings to override global settings
* @param {Element} el - the tooltipped element
* @param {Object} instanceSettings
* @return {Object} - individual settings
*/
function getIndividualSettings(el, instanceSettings) {
  var settings = DefaultsKeys.reduce(function (acc, key) {
    var val = el.getAttribute('data-' + key.toLowerCase()) || instanceSettings[key];

    // Convert strings to booleans
    if (val === 'false') val = false;
    if (val === 'true') val = true;

    // Convert number strings to true numbers
    if (isFinite(val) && !isNaN(parseFloat(val))) {
      val = parseFloat(val);
    }

    // Convert array strings to actual arrays
    if (typeof val === 'string' && val.trim().charAt(0) === '[') {
      val = JSON.parse(val);
    }

    acc[key] = val;

    return acc;
  }, {});

  return _extends$1({}, instanceSettings, settings);
}

/**
* Creates a popper element then returns it
* @param {Number} id - the popper id
* @param {String} title - the tooltip's `title` attribute
* @param {Object} settings - individual settings
* @return {Element} - the popper element
*/
function createPopperElement(id, title, settings) {
  var position = settings.position,
      distance = settings.distance,
      arrow = settings.arrow,
      animateFill = settings.animateFill,
      inertia = settings.inertia,
      animation = settings.animation,
      arrowSize = settings.arrowSize,
      size = settings.size,
      theme = settings.theme,
      html = settings.html,
      zIndex = settings.zIndex,
      interactive = settings.interactive;


  var popper = document.createElement('div');
  popper.setAttribute('class', 'tippy-popper');
  popper.setAttribute('role', 'tooltip');
  popper.setAttribute('aria-hidden', 'true');
  popper.setAttribute('id', 'tippy-tooltip-' + id);
  popper.style.zIndex = zIndex;

  var tooltip = document.createElement('div');
  tooltip.setAttribute('class', 'tippy-tooltip tippy-tooltip--' + size + ' leave');
  tooltip.setAttribute('data-animation', animation);

  theme.split(' ').forEach(function (t) {
    tooltip.classList.add(t + '-theme');
  });

  if (arrow) {
    // Add an arrow
    var _arrow = document.createElement('div');
    _arrow.setAttribute('class', 'arrow-' + arrowSize);
    _arrow.setAttribute('x-arrow', '');
    tooltip.appendChild(_arrow);
  }

  if (animateFill) {
    // Create animateFill circle element for animation
    tooltip.setAttribute('data-animatefill', '');
    var circle = document.createElement('div');
    circle.setAttribute('class', 'leave');
    circle.setAttribute('x-circle', '');
    tooltip.appendChild(circle);
  }

  if (inertia) {
    // Change transition timing function cubic bezier
    tooltip.setAttribute('data-inertia', '');
  }

  if (interactive) {
    tooltip.setAttribute('data-interactive', '');
  }

  // Tooltip content (text or HTML)
  var content = document.createElement('div');
  content.setAttribute('class', 'tippy-tooltip-content');

  if (html) {
    var templateId = void 0;

    if (html instanceof Element) {
      content.appendChild(html);
      templateId = '#' + html.id || 'tippy-html-template';
    } else {
      content.innerHTML = document.getElementById(html.replace('#', '')).innerHTML;
      templateId = html;
    }

    popper.classList.add('html-template');
    interactive && popper.setAttribute('tabindex', '-1');
    tooltip.setAttribute('data-template-id', templateId);
  } else {
    content.innerHTML = title;
  }

  // Init distance. Further updates are made in the popper instance's `onUpdate()` method
  tooltip.style[getCorePlacement(position)] = getOffsetDistanceInPx(distance);

  tooltip.appendChild(content);
  popper.appendChild(tooltip);

  return popper;
}

/**
* Creates a trigger
* @param {Object} event - the custom event specified in the `trigger` setting
* @param {Element} el - tooltipped element
* @param {Object} handlers - the handlers for each listener
* @param {Boolean} touchHold
* @return {Array} - array of listener objects
*/
function createTrigger(event, el, handlers, touchHold) {
  var listeners = [];

  if (event === 'manual') return listeners;

  // Enter
  el.addEventListener(event, handlers.handleTrigger);
  listeners.push({
    event: event,
    handler: handlers.handleTrigger
  });

  // Leave
  if (event === 'mouseenter') {
    if (Browser.SUPPORTS_TOUCH && touchHold) {
      el.addEventListener('touchstart', handlers.handleTrigger);
      listeners.push({
        event: 'touchstart',
        handler: handlers.handleTrigger
      });
      el.addEventListener('touchend', handlers.handleMouseleave);
      listeners.push({
        event: 'touchend',
        handler: handlers.handleMouseleave
      });
    }

    el.addEventListener('mouseleave', handlers.handleMouseleave);
    listeners.push({
      event: 'mouseleave',
      handler: handlers.handleMouseleave
    });
  }

  if (event === 'focus') {
    el.addEventListener('blur', handlers.handleBlur);
    listeners.push({
      event: 'blur',
      handler: handlers.handleBlur
    });
  }

  return listeners;
}

/**
* Determines if the mouse's cursor is outside the interactive border
* @param {MouseEvent} event
* @param {Element} popper
* @param {Object} settings
* @return {Boolean}
*/
function cursorIsOutsideInteractiveBorder(event, popper, settings) {
  if (!popper.getAttribute('x-placement')) return true;

  var x = event.clientX,
      y = event.clientY;
  var interactiveBorder = settings.interactiveBorder,
      distance = settings.distance;


  var rect = popper.getBoundingClientRect();
  var corePosition = getCorePlacement(popper.getAttribute('x-placement'));
  var borderWithDistance = interactiveBorder + distance;

  var exceeds = {
    top: rect.top - y > interactiveBorder,
    bottom: y - rect.bottom > interactiveBorder,
    left: rect.left - x > interactiveBorder,
    right: x - rect.right > interactiveBorder
  };

  switch (corePosition) {
    case 'top':
      exceeds.top = rect.top - y > borderWithDistance;
      break;
    case 'bottom':
      exceeds.bottom = y - rect.bottom > borderWithDistance;
      break;
    case 'left':
      exceeds.left = rect.left - x > borderWithDistance;
      break;
    case 'right':
      exceeds.right = x - rect.right > borderWithDistance;
      break;
  }

  return exceeds.top || exceeds.bottom || exceeds.left || exceeds.right;
}

/**
* Returns relevant listener callbacks for each ref
* @param {Element} el
* @param {Element} popper
* @param {Object} settings
* @return {Object} - relevant listener handlers
*/
function getEventListenerHandlers(el, popper, settings) {
  var _this = this;

  var position = settings.position,
      delay = settings.delay,
      duration = settings.duration,
      interactive = settings.interactive,
      interactiveBorder = settings.interactiveBorder,
      distance = settings.distance,
      hideOnClick = settings.hideOnClick,
      trigger = settings.trigger,
      touchHold = settings.touchHold,
      touchWait = settings.touchWait;


  var showDelay = void 0,
      hideDelay = void 0;

  var clearTimeouts = function clearTimeouts() {
    clearTimeout(showDelay);
    clearTimeout(hideDelay);
  };

  var _show = function _show() {
    clearTimeouts();

    // Not hidden. For clicking when it also has a `focus` event listener
    if (isVisible(popper)) return;

    var _delay = Array.isArray(delay) ? delay[0] : delay;

    if (delay) {
      showDelay = setTimeout(function () {
        return _this.show(popper);
      }, _delay);
    } else {
      _this.show(popper);
    }
  };

  var show = function show(event) {
    return _this.callbacks.wait ? _this.callbacks.wait.call(popper, _show, event) : _show();
  };

  var hide = function hide() {
    clearTimeouts();

    var _delay = Array.isArray(delay) ? delay[1] : delay;

    if (delay) {
      hideDelay = setTimeout(function () {
        return _this.hide(popper);
      }, _delay);
    } else {
      _this.hide(popper);
    }
  };

  var handleTrigger = function handleTrigger(event) {
    var mouseenterTouch = event.type === 'mouseenter' && Browser.SUPPORTS_TOUCH && Browser.touch;

    if (mouseenterTouch && touchHold) return;

    // Toggle show/hide when clicking click-triggered tooltips
    var isClick = event.type === 'click';
    var isNotPersistent = hideOnClick !== 'persistent';

    isClick && isVisible(popper) && isNotPersistent ? hide() : show(event);

    if (mouseenterTouch && Browser.iOS() && el.click) {
      el.click();
    }
  };

  var handleMouseleave = function handleMouseleave(event) {

    // Don't fire 'mouseleave', use the 'touchend'
    if (event.type === 'mouseleave' && Browser.SUPPORTS_TOUCH && Browser.touch && touchHold) {
      return;
    }

    if (interactive) {
      // Temporarily handle mousemove to check if the mouse left somewhere
      // other than its popper
      var handleMousemove = function handleMousemove(event) {

        var triggerHide = function triggerHide() {
          document.body.removeEventListener('mouseleave', hide);
          document.removeEventListener('mousemove', handleMousemove);
          hide();
        };

        var closestTooltippedEl = closest(event.target, Selectors.TOOLTIPPED_EL);

        var isOverPopper = closest(event.target, Selectors.POPPER) === popper;
        var isOverEl = closestTooltippedEl === el;
        var isClickTriggered = trigger.indexOf('click') !== -1;
        var isOverOtherTooltippedEl = closestTooltippedEl && closestTooltippedEl !== el;

        if (isOverOtherTooltippedEl) {
          return triggerHide();
        }

        if (isOverPopper || isOverEl || isClickTriggered) return;

        if (cursorIsOutsideInteractiveBorder(event, popper, settings)) {
          triggerHide();
        }
      };

      document.body.addEventListener('mouseleave', hide);
      document.addEventListener('mousemove', handleMousemove);

      return;
    }

    // If it's not interactive, just hide it
    hide();
  };

  var handleBlur = function handleBlur(event) {
    // Ignore blur on touch devices, if there is no `relatedTarget`, hide
    // If the related target is a popper, ignore
    if (!event.relatedTarget || Browser.touch) return;
    if (closest(event.relatedTarget, Selectors.POPPER)) return;

    hide();
  };

  return {
    handleTrigger: handleTrigger,
    handleMouseleave: handleMouseleave,
    handleBlur: handleBlur
  };
}

/**
* Evaluates/modifies the settings object for appropriate behavior
* @param {Object} settings
* @return {Object} modified/evaluated settings
*/
function evaluateSettings(settings) {
  // animateFill is disabled if an arrow is true
  if (settings.arrow) {
    settings.animateFill = false;
  }

  // reassign appendTo into the result of evaluating appendTo
  // if it's set as a function instead of Element
  if (settings.appendTo && typeof settings.appendTo === 'function') {
    settings.appendTo = settings.appendTo();
  }

  return settings;
}

var idCounter = 1;

/**
* Creates tooltips for all el elements that match the instance's selector
* @param {Element[]} els
* @return {Object[]} Array of ref data objects
*/
function createTooltips(els) {
  var _this = this;

  return els.reduce(function (acc, el) {
    var id = idCounter;

    var settings = _extends$1({}, evaluateSettings(_this.settings.performance ? _this.settings : getIndividualSettings(el, _this.settings)));

    if (typeof settings.html === 'function') settings.html = settings.html(el);

    var html = settings.html,
        trigger = settings.trigger,
        touchHold = settings.touchHold,
        dynamicTitle = settings.dynamicTitle;


    var title = el.getAttribute('title');
    if (!title && !html) return acc;

    el.setAttribute('data-tooltipped', '');
    el.setAttribute('aria-describedby', 'tippy-tooltip-' + id);
    removeTitle(el);

    var popper = createPopperElement(id, title, settings);
    var handlers = getEventListenerHandlers.call(_this, el, popper, settings);

    var listeners = [];

    trigger.trim().split(' ').forEach(function (event) {
      return listeners = listeners.concat(createTrigger(event, el, handlers, touchHold));
    });

    // Add a mutation observer to observe the reference element for `title`
    // attribute changes, then automatically update tooltip content
    var observer = void 0;

    if (dynamicTitle && window.MutationObserver) {
      var _getInnerElements = getInnerElements(popper),
          content = _getInnerElements.content;

      observer = new MutationObserver(function () {
        var title = el.getAttribute('title');
        if (title) {
          content.innerHTML = title;
          removeTitle(el);
        }
      });

      observer.observe(el, { attributes: true });
    }

    acc.push({
      id: id,
      el: el,
      popper: popper,
      settings: settings,
      listeners: listeners,
      tippyInstance: _this,
      _mutationObservers: [observer]
    });

    idCounter++;

    return acc;
  }, []);
}

/* Utility functions */
/* Core library functions */
/**
* @param {String|Element|Element[]} selector
* @param {Object} settings (optional) - the object of settings to be applied to the instance
*/

var Tippy = function () {
  function Tippy(selector) {
    var settings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck$1(this, Tippy);

    // Use default browser tooltip on unsupported browsers
    if (!Browser.SUPPORTED) return;

    init();

    this.state = {
      destroyed: false
    };

    this.selector = selector;

    this.settings = _extends$1({}, Defaults, settings);

    if (settings.show || settings.shown || settings.hide || settings.hidden) {
      console.warn('Callbacks without the `on` prefix are deprecated (with the exception of `wait`).' + ' Use onShow, onShown, onHide, and onHidden instead.');
    }

    this.callbacks = {
      wait: settings.wait,
      show: settings.onShow || settings.show || noop,
      shown: settings.onShown || settings.shown || noop,
      hide: settings.onHide || settings.hide || noop,
      hidden: settings.onHidden || settings.hidden || noop
    };

    this.store = createTooltips.call(this, getArrayOfElements(selector));
    Store.push.apply(Store, this.store);
  }

  /**
  * Returns the reference element's popper element
  * @param {Element} el
  * @return {Element}
  */


  createClass$1(Tippy, [{
    key: 'getPopperElement',
    value: function getPopperElement(el) {
      try {
        return find(this.store, function (data) {
          return data.el === el;
        }).popper;
      } catch (e) {
        console.error('[getPopperElement]: Element passed as the argument does not exist in the instance');
      }
    }

    /**
    * Returns a popper's reference element
    * @param {Element} popper
    * @return {Element}
    */

  }, {
    key: 'getReferenceElement',
    value: function getReferenceElement(popper) {
      try {
        return find(this.store, function (data) {
          return data.popper === popper;
        }).el;
      } catch (e) {
        console.error('[getReferenceElement]: Popper passed as the argument does not exist in the instance');
      }
    }

    /**
    * Returns the reference data object from either the reference element or popper element
    * @param {Element} x (reference element or popper)
    * @return {Object}
    */

  }, {
    key: 'getReferenceData',
    value: function getReferenceData(x) {
      return find(this.store, function (data) {
        return data.el === x || data.popper === x;
      });
    }

    /**
    * Shows a popper
    * @param {Element} popper
    * @param {Number} customDuration (optional)
    */

  }, {
    key: 'show',
    value: function show(popper, customDuration) {
      var _this = this;

      if (this.state.destroyed) return;

      var data = find(this.store, function (data) {
        return data.popper === popper;
      });

      var _getInnerElements = getInnerElements(popper),
          tooltip = _getInnerElements.tooltip,
          circle = _getInnerElements.circle,
          content = _getInnerElements.content;

      // Destroy popper if its reference is no longer on the DOM (excluding refObjs)


      if (!this.selector.refObj && !document.body.contains(data.el)) {
        this.destroy(popper);
        return;
      }

      this.callbacks.show.call(popper);

      var el = data.el,
          _data$settings = data.settings,
          appendTo = _data$settings.appendTo,
          sticky = _data$settings.sticky,
          interactive = _data$settings.interactive,
          followCursor = _data$settings.followCursor,
          flipDuration = _data$settings.flipDuration,
          duration = _data$settings.duration;


      var _duration = customDuration !== undefined ? customDuration : Array.isArray(duration) ? duration[0] : duration;

      // Prevent a transition when popper changes position
      applyTransitionDuration([popper, tooltip, circle], 0);

      mountPopper(data);

      popper.style.visibility = 'visible';
      popper.setAttribute('aria-hidden', 'false');

      // Wait for popper's position to update
      defer(function () {
        if (!isVisible(popper)) return;

        // Sometimes the arrow will not be in the correct position, force another update
        if (!followCursor || Browser.touch) {
          data.popperInstance.update();
          applyTransitionDuration([popper], flipDuration);
        }

        // Re-apply transition durations
        applyTransitionDuration([tooltip, circle], _duration);

        // Make content fade out a bit faster than the tooltip if `animateFill`
        if (circle) content.style.opacity = 1;

        // Interactive tooltips receive a class of 'active'
        interactive && el.classList.add('active');

        // Update popper's position on every animation frame
        sticky && makeSticky(data);

        // Repaint/reflow is required for CSS transition when appending
        triggerReflow(tooltip, circle);

        modifyClassList([tooltip, circle], function (list) {
          list.contains('tippy-notransition') && list.remove('tippy-notransition');
          list.remove('leave');
          list.add('enter');
        });

        // Wait for transitions to complete
        onTransitionEnd(data, _duration, function () {
          if (!isVisible(popper) || data._onShownFired) return;

          // Focus interactive tooltips only
          interactive && popper.focus();
          // Remove transitions from tooltip
          tooltip.classList.add('tippy-notransition');
          // Prevents shown() from firing more than once from early transition cancellations
          data._onShownFired = true;

          _this.callbacks.shown.call(popper);
        });
      });
    }

    /**
    * Hides a popper
    * @param {Element} popper
    * @param {Number} customDuration (optional)
    */

  }, {
    key: 'hide',
    value: function hide(popper, customDuration) {
      var _this2 = this;

      if (this.state.destroyed) return;

      this.callbacks.hide.call(popper);

      var data = find(this.store, function (data) {
        return data.popper === popper;
      });

      var _getInnerElements2 = getInnerElements(popper),
          tooltip = _getInnerElements2.tooltip,
          circle = _getInnerElements2.circle,
          content = _getInnerElements2.content;

      var el = data.el,
          _data$settings2 = data.settings,
          appendTo = _data$settings2.appendTo,
          sticky = _data$settings2.sticky,
          interactive = _data$settings2.interactive,
          followCursor = _data$settings2.followCursor,
          html = _data$settings2.html,
          trigger = _data$settings2.trigger,
          duration = _data$settings2.duration;


      var _duration = customDuration !== undefined ? customDuration : Array.isArray(duration) ? duration[1] : duration;

      data._onShownFired = false;
      interactive && el.classList.remove('active');

      popper.style.visibility = 'hidden';
      popper.setAttribute('aria-hidden', 'true');

      applyTransitionDuration([tooltip, circle, circle ? content : null], _duration);

      if (circle) content.style.opacity = 0;

      modifyClassList([tooltip, circle], function (list) {
        list.contains('tippy-tooltip') && list.remove('tippy-notransition');
        list.remove('enter');
        list.add('leave');
      });

      // Re-focus click-triggered html elements
      // and the tooltipped element IS in the viewport (otherwise it causes unsightly scrolling
      // if the tooltip is closed and the element isn't in the viewport anymore)
      if (html && trigger.indexOf('click') !== -1 && elementIsInViewport(el)) {
        el.focus();
      }

      // Wait for transitions to complete
      onTransitionEnd(data, _duration, function () {
        // `isVisible` is not completely reliable to determine if we shouldn't
        // run the hidden callback, we need to check the computed opacity style.
        // This prevents glitchy behavior of the transition when quickly showing
        // and hiding a tooltip.
        if (isVisible(popper) || !appendTo.contains(popper) || getComputedStyle(tooltip).opacity === '1') return;

        el.removeEventListener('mousemove', followCursorHandler);
        data.popperInstance.disableEventListeners();
        appendTo.removeChild(popper);

        _this2.callbacks.hidden.call(popper);
      });
    }

    /**
    * Updates a popper with new content
    * @param {Element} popper
    */

  }, {
    key: 'update',
    value: function update(popper) {
      if (this.state.destroyed) return;

      var data = find(this.store, function (data) {
        return data.popper === popper;
      });

      var _getInnerElements3 = getInnerElements(popper),
          content = _getInnerElements3.content;

      var el = data.el,
          html = data.settings.html;


      if (html instanceof Element) {
        console.warn('Aborted: update() should not be used if `html` is a DOM element');
        return;
      }

      content.innerHTML = html ? document.getElementById(html.replace('#', '')).innerHTML : el.getAttribute('title') || el.getAttribute('data-original-title');

      if (!html) removeTitle(el);
    }

    /**
    * Destroys a popper
    * @param {Element} popper
    * @param {Boolean} _isLast - private param used by destroyAll to optimize
    */

  }, {
    key: 'destroy',
    value: function destroy(popper, _isLast) {
      var _this3 = this;

      if (this.state.destroyed) return;

      var data = find(this.store, function (data) {
        return data.popper === popper;
      });

      var el = data.el,
          popperInstance = data.popperInstance,
          listeners = data.listeners,
          _mutationObservers = data._mutationObservers;

      // Ensure the popper is hidden

      if (isVisible(popper)) {
        this.hide(popper, 0);
      }

      // Remove Tippy-only event listeners from tooltipped element
      listeners.forEach(function (listener) {
        return el.removeEventListener(listener.event, listener.handler);
      });

      // Restore original title
      el.setAttribute('title', el.getAttribute('data-original-title'));

      el.removeAttribute('data-original-title');
      el.removeAttribute('data-tooltipped');
      el.removeAttribute('aria-describedby');

      popperInstance && popperInstance.destroy();

      _mutationObservers.forEach(function (observer) {
        observer && observer.disconnect();
      });

      // Remove from store
      Store.splice(findIndex(Store, function (data) {
        return data.popper === popper;
      }), 1);

      // Ensure filter is called only once
      if (_isLast === undefined || _isLast) {
        this.store = Store.filter(function (data) {
          return data.tippyInstance === _this3;
        });
      }
    }

    /**
    * Destroys all tooltips created by the instance
    */

  }, {
    key: 'destroyAll',
    value: function destroyAll() {
      var _this4 = this;

      if (this.state.destroyed) return;

      var storeLength = this.store.length;

      this.store.forEach(function (_ref, index) {
        var popper = _ref.popper;

        _this4.destroy(popper, index === storeLength - 1);
      });

      this.store = null;
      this.state.destroyed = true;
    }
  }]);
  return Tippy;
}();

function tippy$2(selector, settings) {
  // Create a virtual object for custom positioning
  if (isObjectLiteral(selector)) {
    selector = {
      refObj: true,
      attributes: selector.attributes || {},
      getBoundingClientRect: selector.getBoundingClientRect,
      clientWidth: selector.clientWidth,
      clientHeight: selector.clientHeight,
      setAttribute: function setAttribute(key, val) {
        selector.attributes[key] = val;
      },
      getAttribute: function getAttribute(key) {
        return selector.attributes[key];
      },
      removeAttribute: function removeAttribute(key) {
        delete selector.attributes[key];
      },
      addEventListener: function addEventListener() {},
      removeEventListener: function removeEventListener() {},
      classList: {
        classNames: {},
        add: function add(key) {
          selector.classList.classNames[key] = true;
        },
        remove: function remove(key) {
          selector.classList.classNames[key] = false;
          return true;
        },
        contains: function contains(key) {
          return !!selector.classList.classNames[key];
        }
      }
    };
  }

  return new Tippy(selector, settings);
}

tippy$2.Browser = Browser;
tippy$2.Defaults = Defaults;
tippy$2.disableDynamicInputDetection = function () {
  return Browser.dynamicInputDetection = false;
};
tippy$2.enableDynamicInputDetection = function () {
  return Browser.dynamicInputDetection = true;
};

return tippy$2;

})));
});

function prepare_dataset(full_dataset, app$$1) {
  app$$1.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name for easier lookup:
  app$$1.feature_names = {};
  full_dataset.forEach(function (elem) {
    app$$1.feature_names[elem.geo] = elem.Nom;
  });
}

/**
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {Array} - The filtered data, containing only the requested variables
*   for the feature of the current study zone,
*    without features containing empty ratios.
*
*/
function filterLevelVar(app$$1) {
  // Fetch the name(s) of the ratio (and associated num and denum variable),
  // the name of the targeted region and the current level :
  var _app$current_config = app$$1.current_config,
      num = _app$current_config.num,
      denum = _app$current_config.denum,
      ratio = _app$current_config.ratio,
      current_level = _app$current_config.current_level,
      id_field = _app$current_config.id_field,
      filter_key = _app$current_config.filter_key,
      name_field = _app$current_config.name_field,
      my_region = _app$current_config.my_region;


  var all_variables = ratio.concat(num).concat(denum);
  // Prepare the data:
  var temp = void 0;
  if (filter_key instanceof Array) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft[current_level] && filter_key.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.filter(function (ft) {
      return ft[id_field] === my_region;
    })[0][filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft[current_level] && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft[current_level];
    });
  }
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      name: ft[name_field]
    };
    for (var i = 0, len_i = all_variables.length; i < len_i; i++) {
      props_feature[all_variables[i]] = +ft[all_variables[i]];
    }
    return props_feature;
  });
  app$$1.current_data = temp;
}

/**
* TODO
*/
function filterLevelGeom(nuts_features) {
  var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'NUTS1';

  return nuts_features.filter(function (d) {
    return !!d.properties[filter];
  });
}

/**
* Function to prepare the global "variables_info" Array of objects from the array
* containing the readed 'metadata.csv' file.
*
* @param {Array} metadata_indicateurs - The array return by d3.csv.
* @return {void}
*
*/
function prepareVariablesInfo(metadata_indicateurs) {
  return metadata_indicateurs.filter(function (ft) {
    return ft['Type statistique'] === 'Ratio';
  }).map(function (ft) {
    return {
      ratio: ft.id,
      num: ft.id1 + '_' + parseInt(ft.AnnÃ©e, 10),
      denum: ft.id2 + '_' + parseInt(ft.AnnÃ©e, 10),
      name: ft.Nom + ' (' + parseInt(ft.AnnÃ©e, 10) + ')',
      unit: '' + ft['UnitÃ©'],
      group: ft['ThÃ¨me'],
      methodo: ft['MÃ©thodologie'],
      source: ft.Source,
      last_update: ft['DerniÃ¨re mise Ã  jour']
    };
  });
}

/**
* Set and apply a new filter (ie. restrict the study zone) on the dataset to be used.
*
* @param {String} filter_type - The name of the filter to use.
* @return {void}
*
*/
function applyFilter(app$$1, filter_type) {
  if (filter_type === 'filter_country') {
    app$$1.current_config.filter_key = 'Pays';
  } else if (filter_type === 'no_filter') {
    app$$1.current_config.filter_key = undefined;
  } else if (filter_type instanceof Array) {
    app$$1.current_config.filter_key = filter_type;
  } else {
    app$$1.current_config.filter_key = 'type_test';
  }
  filterLevelVar(app$$1);
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

// TODO : Doc
function changeRegion(app$$1, id_region, map_elem) {
  app$$1.current_config.my_region = id_region;
  app$$1.current_config.my_region_pretty_name = app$$1.feature_names[app$$1.current_config.my_region];
  if (app$$1.current_config.filter_key instanceof Array) {
    map_elem.computeDistMat();
    app$$1.current_config.filter_key = map_elem.getUnitsWithin(+d3.select('#dist_filter').property('value'));
    filterLevelVar(app$$1);
  } else if (app$$1.current_config.filter_key) {
    filterLevelVar(app$$1);
  }
  // Reset the color to use on the chart/map:
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

/**
*
* @param app -
* @param code_ratio - The code of the variable to be added.
* @return {void}
*/
function addVariable(app$$1, code_ratio) {
  var variable_info = exports.variables_info.filter(function (d) {
    return d.ratio === code_ratio;
  })[0];
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num.push(variable_info.num);
  app$$1.current_config.denum.push(variable_info.denum);
  app$$1.current_config.ratio.push(variable_info.ratio);
  app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  app$$1.current_config.ratio_unit.push(variable_info.unit);
  filterLevelVar(app$$1);
}

/**
*
* @param app -
* @param code_ratio - The code of the variable to be remove.
* @return {void}
*/
function removeVariable(app$$1, code_ratio) {
  var ix = app$$1.current_config.ratio.indexOf(code_ratio);
  app$$1.current_config.num.splice(ix, 1);
  app$$1.current_config.denum.splice(ix, 1);
  app$$1.current_config.ratio.splice(ix, 1);
  app$$1.current_config.ratio_pretty_name.splice(ix, 1);
  app$$1.current_config.ratio_unit.splice(ix, 1);
  filterLevelVar(app$$1);
}

/**
* Reset the current variables in use.
*
* @param app -
* @param codes_ratio -
* @return {void}
*/
function resetVariables(app$$1, codes_ratio) {
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num = [];
  app$$1.current_config.denum = [];
  app$$1.current_config.ratio = [];
  app$$1.current_config.ratio_pretty_name = [];
  app$$1.current_config.ratio_unit = [];

  var _loop = function _loop(i, len) {
    var code_ratio = codes_ratio[i];
    var variable_info = exports.variables_info.filter(function (d) {
      return d.ratio === code_ratio;
    })[0];
    app$$1.current_config.num.push(variable_info.num);
    app$$1.current_config.denum.push(variable_info.denum);
    app$$1.current_config.ratio.push(variable_info.ratio);
    app$$1.current_config.ratio_pretty_name.push(variable_info.name);
    app$$1.current_config.ratio_unit.push(variable_info.unit);
  };

  for (var i = 0, len = codes_ratio.length; i < len; i++) {
    _loop(i, len);
  }
  filterLevelVar(app$$1);
}

/**
* Compute the ratio of available (= not empty) values (the "complÃ©tude") within
* the subset currently in use for all the variables in "vars".
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @param {Array} vars - A list of variable names for which completeness will be calculated.
* @param {String} output - Whether to output the result as a Number or as an Array
* @return {Number or Array} - Number: The ratios of features with available values within
*    the study zone (in %) or, Array : the number of features with available values
*    and the total number of features.
*/
function calcCompletudeSubset(app$$1, vars) {
  var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ratio';
  var _app$current_config2 = app$$1.current_config,
      current_level = _app$current_config2.current_level,
      id_field = _app$current_config2.id_field,
      filter_key = _app$current_config2.filter_key,
      my_region = _app$current_config2.my_region;

  // Compute the length of the dataset (within the "study zone" if any):

  var temp = void 0;
  if (filter_key instanceof Array) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && filter_key.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.find(function (ft) {
      return ft[id_field] === my_region;
    })[filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level];
    });
  }
  var total_length = temp.length;

  // Compute the length of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field]
    };
    for (var i = 0, len_i = vars.length; i < len_i; i++) {
      props_feature[vars[i]] = +ft[vars[i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var filtered_length = temp.length;

  if (!(output === 'ratio')) {
    // Return the number of features with available values within
    // the study zone, and the total number of features of the study zone
    return [filtered_length, total_length];
  }
  // Return the ratio of available values ("complÃ©tude") within
  // the study zone selected by the user:
  return Math.round(filtered_length / total_length * 10000) / 100;
}

/**
* Compute the ratio of population covered by features on which all the variables
* of "vars" are available.
*
* @param {Object} app -The variable containing the global parameters about
*   the current state of the application.
* @param {Array} vars - A list of variable names for which completeness will be calculated.
* @return {Number} - The ratio (in %) of population covered by features for which
*   are available within the study zone.
*
*/
function calcPopCompletudeSubset(app$$1, vars) {
  var _app$current_config3 = app$$1.current_config,
      current_level = _app$current_config3.current_level,
      id_field = _app$current_config3.id_field,
      filter_key = _app$current_config3.filter_key,
      my_region = _app$current_config3.my_region,
      pop_field = _app$current_config3.pop_field;

  // Compute the total population stock of the data (within the "study zone" if any):

  var temp = void 0;
  if (filter_key instanceof Array) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && filter_key.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.find(function (ft) {
      return ft[id_field] === my_region;
    })[filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level];
    });
  }
  var total_pop = 0;
  for (var i = 0, len = temp.length; i < len; i++) {
    total_pop += isNaN(+temp[i][pop_field]) ? 0 : +temp[i][pop_field];
  }
  // Compute the population stock of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      pop: +ft[pop_field]
    };
    for (var _i = 0, len_i = vars.length; _i < len_i; _i++) {
      props_feature[vars[_i]] = +ft[vars[_i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var subset_pop = 0;
  for (var _i2 = 0, _len = temp.length; _i2 < _len; _i2++) {
    subset_pop += isNaN(temp[_i2].pop) ? 0 : temp[_i2].pop;
  }
  // Return the ratio of population values ("complÃ©tude") within
  // the study zone selected by the user:
  return Math.round(subset_pop / total_pop * 10000) / 100;
}
/* eslint-enable no-param-reassign */

var svg_map = d3.select('svg#svg_map');
var margin_map = { top: 0, right: 0, bottom: 0, left: 0 };
var width_map = +svg_map.attr('width') - margin_map.left - margin_map.right;
var height_map = +svg_map.attr('height') - margin_map.top - margin_map.bottom;

var styles = {
  frame: { id: 'frame', fill: '#e9f4fe', 'fill-opacity': 1 },
  countries: { id: 'countries', fill: '#bebecd', 'fill-opacity': 1 },
  boxes: { id: 'boxes', fill: '#e9f4fe', 'fill-opacity': 1 },
  nuts: { id: 'nuts', fill: '#9390fc', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#f7fcfe', 'stroke-opacity': 0.9, target: true },
  countries_remote: { id: 'countries_remote', fill: '#bebecd', 'fill-opacity': 1 },
  cyprus_non_espon_space: { id: 'cyprus_non_espon_space', fill: '#ffffff', 'fill-opacity': 1 },
  borders: { id: 'borders', fill: 'none', 'stroke-width': 1, stroke: '#ffffff' },
  countries_remote_boundaries: { id: 'countries_remote_boundaries', fill: 'none', 'stroke-width': 1, stroke: '#ffffff' },
  coasts: { id: 'coasts', fill: 'none', stroke: '#d2dbef', 'stroke-width': 0.5 },
  coasts_remote: { id: 'coasts_remote', fill: 'none', stroke: '#d2dbef', 'stroke-width': 0.5 },
  boxes2: { id: 'boxes2', stroke: '#7a7a7a', 'stroke-width': 1, fill: 'none' },
  line: { id: 'line', stroke: '#bebecd', 'stroke-width': 1.5, fill: 'none' }
};

var projection = void 0;
var path = void 0;

function get_bbox_layer_path(name) {
  var bbox_layer = [[Infinity, Infinity], [-Infinity, -Infinity]];
  svg_map.select('#' + name).selectAll('path').each(function (d) {
    var bbox_path = path.bounds(d.geometry);
    bbox_layer[0][0] = bbox_path[0][0] < bbox_layer[0][0] ? bbox_path[0][0] : bbox_layer[0][0];
    bbox_layer[0][1] = bbox_path[0][1] < bbox_layer[0][1] ? bbox_path[0][1] : bbox_layer[0][1];
    bbox_layer[1][0] = bbox_path[1][0] > bbox_layer[1][0] ? bbox_path[1][0] : bbox_layer[1][0];
    bbox_layer[1][1] = bbox_path[1][1] > bbox_layer[1][1] ? bbox_path[1][1] : bbox_layer[1][1];
  });
  return bbox_layer;
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('frame');
  var s = 1 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map);
  var t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function map_zoomed() {
  var transform = d3.event ? d3.event.transform : svg_map.node().__zoom;
  if (transform.k < 1) transform.k = 1;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style('stroke-width', function () {
    return styles[this.id]['stroke-width'] / transform.k + 'px';
  });

  layers.selectAll('g').transition(t).attr('transform', transform);

  svg_map.select('.brush_map').transition(t).attr('transform', transform);
}

function interpolateZoom(translate, scale) {
  var node_svg_map = svg_map.node();
  var transform = d3.zoomTransform(node_svg_map);
  return d3.transition().duration(225).tween('zoom', function () {
    var iTranslate = d3.interpolate([transform.x, transform.y], translate);
    var iScale = d3.interpolate(transform.k, scale);
    return function (t_value) {
      node_svg_map.__zoom.k = iScale(t_value);
      var _t = iTranslate(t_value);
      node_svg_map.__zoom.x = _t[0];
      node_svg_map.__zoom.y = _t[1];
      map_zoomed();
    };
  });
}

function zoomClick() {
  var direction = this.id === 'zoom_in' ? 1 : -1,
      factor = 0.1,
      center = [width_map / 2, height_map / 2],
      transform = d3.zoomTransform(svg_map.node()),
      translate = [transform.x, transform.y],
      view = { x: translate[0], y: translate[1], k: transform.k };
  var target_zoom = 1,
      translate0 = [],
      l = [];
  d3.event.preventDefault();
  target_zoom = transform.k * (1 + factor * direction);
  translate0 = [(center[0] - view.x) / view.k, (center[1] - view.y) / view.k];
  view.k = target_zoom;
  l = [translate0[0] * view.k + view.x, translate0[1] * view.k + view.y];
  view.x += center[0] - l[0];
  view.y += center[1] - l[1];
  interpolateZoom([view.x, view.y], view.k);
}

function makeMapLegend(legend_elems, size, translateY) {
  var rect_size = 14;
  var spacing = 4;
  var lgd_height = rect_size + spacing;
  var offset = lgd_height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').attr('height', size).append('g').attr('transform', 'translate(50, ' + translateY + ')').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * lgd_height - offset;
    return 'translate(' + [tx, ty] + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attrs({ x: rect_size + spacing, y: rect_size - spacing }).text(function (d) {
    return d.text;
  });
}

function getLegendElems(type) {
  if (type === 0) {
    return [[{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions de l\'espace d\'Ã©tude' }, { color: color_sup, text: 'Rang plus Ã©levÃ© que ma rÃ©gion' }, { color: color_inf, text: 'Rang moins Ã©levÃ© que ma rÃ©gion' }], '75', '41'];
  } else if (type === 1) {
    return [[{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions de l\'espace d\'Ã©tude' }, { color: color_sup, text: 'Rang plus Ã©levÃ© que ma rÃ©gion (2 indicateurs)' }, { color: color_inf, text: 'Rang moins Ã©levÃ© que ma rÃ©gion (2 indicateurs)' }, { color: null, text: 'Rang plus Ã©levÃ© que ma rÃ©gion (1 indicateur sur 2)' }], '95', '50'];
  }
  return [[{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions de l\'espace d\'Ã©tude' }, { color: color_default_dissim, text: 'RÃ©gions sÃ©lectionnÃ©es pour la comparaison' }], '60', '32'];
}

var MapSelect = function () {
  function MapSelect(nuts, other_layers) {
    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NUTS1';
    classCallCheck(this, MapSelect);

    projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], other_layers.get('frame')).reflectY(true);

    path = d3.geoPath().projection(projection);

    var layers = svg_map.append('g').attr('id', 'layers');
    this.nuts = nuts;
    this.zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

    svg_map.call(this.zoom_map);

    var layer_list = Object.keys(styles);
    for (var i = 0, n_layer = layer_list.length; i < n_layer; i++) {
      var name_lyr = layer_list[i];
      var style_layer = styles[name_lyr];
      if (style_layer.target === true) {
        this.target_layer = layers.append('g').attrs(style_layer);
        this.target_layer.selectAll('path').data(filterLevelGeom(this.nuts.features, filter), function (d) {
          return d.id;
        }).enter().append('path').attr('title', function (d) {
          return d.properties[app.current_config.name_field] + ' (' + d.id + ')';
        }).attr('fill', function (d) {
          return d.id !== app.current_config.my_region ? color_countries : color_highlight;
        }).attr('d', path);
      } else {
        layers.append('g').attrs(style_layer).selectAll('path').data(other_layers.get(name_lyr).features).enter().append('path').attrs({ d: path });
      }
    }

    fitLayer();
    app.type_path = getSvgPathType(this.target_layer.select('path').node().getAttribute('d'));
    this.target_layer.selectAll('path').each(function () {
      this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
    });
    this.tooltips = tippy(this.target_layer.node().querySelectorAll('path'), {
      animation: 'fade',
      duration: 0,
      followCursor: true
      // performance: true,
    });
  }

  createClass(MapSelect, [{
    key: 'updateLevelRegion',
    value: function updateLevelRegion() {
      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'NUTS1';

      this.tooltips.destroyAll();
      var new_selection = filterLevelGeom(this.nuts.features, filter);
      var selection = this.target_layer.selectAll('path').data(new_selection, function (d) {
        return d.id;
      });
      selection.enter().append('path').attrs(function (d) {
        return {
          title: d.properties[app.current_config.name_field] + ' (' + d.id + ')',
          fill: d.id !== app.current_config.my_region ? color_countries : color_highlight,
          d: path
        };
      });
      selection.attr('d', path);
      selection.exit().remove();
      this.resetColors(new_selection.map(function (d) {
        return d.id;
      }));
      this.computeDistMat();
      this.target_layer.selectAll('path').each(function () {
        this._pts = undefined;
      });
      this.tooltips = tippy(this.target_layer.node().querySelectorAll('path'), {
        animation: 'fade',
        duration: 0,
        followCursor: true
        // performance: true,
      });
    }
  }, {
    key: 'resetColors',
    value: function resetColors$$1(current_ids) {
      this.target_layer.selectAll('path').attr('fill', function (d) {
        if (d.id === app.current_config.my_region) {
          return color_highlight;
        } else if (current_ids.indexOf(d.id) > -1) {
          return app.colors[d.id] || color_countries;
        }
        return color_disabled;
      });
    }
  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      svg_map.transition().duration(250).call(this.zoom_map.transform, d3.zoomIdentity);
    }
  }, {
    key: 'updateLegend',
    value: function updateLegend() {
      d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + app.current_config.my_region_pretty_name);
    }
  }, {
    key: 'removeRectBrush',
    value: function removeRectBrush() {
      svg_map.select('.brush_map').call(this.brush_map.move, null);
    }
  }, {
    key: 'callBrush',
    value: function callBrush(selection) {
      svg_map.select('.brush_map').call(this.brush_map.move, selection);
    }
  }, {
    key: 'bindBrushClick',
    value: function bindBrushClick(chart) {
      if (chart.handleClickMap) {
        document.getElementById('img_map_select').classList.remove('disabled');
        document.getElementById('img_map_select').classList.add('active');
      } else {
        document.getElementById('img_map_select').classList.add('disabled');
      }
      if (chart.handle_brush_map) {
        document.getElementById('img_rect_selec').classList.remove('disabled');
        document.getElementById('img_rect_selec').classList.add('active');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.remove('active');
        this.brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
          chart.handle_brush_map(d3.event);
        });
        svg_map.append('g').attr('class', 'brush_map').call(this.brush_map);
      } else {
        document.getElementById('img_rect_selec').classList.remove('active');
        document.getElementById('img_rect_selec').classList.add('disabled');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.add('active');
      }
      if (chart.handleClickMap && !chart.handle_brush_map) {
        this.target_layer.selectAll('path').on('click', function (d) {
          chart.handleClickMap(d, this);
        });
      }
    }
  }, {
    key: 'getUnitsWithin',
    value: function getUnitsWithin(dist_km) {
      var dist = dist_km * 1000;
      if (!this.dist_to_my_region) this.computeDistMat();
      return this.dist_to_my_region.filter(function (d) {
        return d.dist <= dist;
      }).map(function (d) {
        return d.id;
      });
    }
  }, {
    key: 'computeDistMat',
    value: function computeDistMat() {
      var features = Array.prototype.slice.call(this.target_layer.node().querySelectorAll('path'));
      var nb_ft = features.length;
      var my_region_geom = features.find(function (d) {
        return d.__data__.id === app.current_config.my_region;
      }).__data__.geometry;
      var my_region_centroid = turf.centroid(my_region_geom);
      var result_dist = [];
      for (var i = 0; i < nb_ft; i++) {
        var id = features[i].__data__.id;
        var dist = euclidian_distance(my_region_centroid, turf.centroid(features[i].__data__.geometry));
        result_dist.push({ id: id, dist: dist });
      }
      this.dist_to_my_region = result_dist;
    }
  }, {
    key: 'unbindBrushClick',
    value: function unbindBrushClick() {
      this.brush_map = null;
      svg_map.select('.brush_map').remove();
    }
  }, {
    key: 'displayLegend',
    value: function displayLegend() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      d3.selectAll('#svg_legend > g').remove();

      var _getLegendElems = getLegendElems(type),
          _getLegendElems2 = slicedToArray(_getLegendElems, 3),
          elems = _getLegendElems2[0],
          size = _getLegendElems2[1],
          ty = _getLegendElems2[2];

      makeMapLegend(elems, size, ty);
    }
  }]);
  return MapSelect;
}();

function makeSourceSection() {
  var parent = svg_map.node().parentElement;
  var next_elem = svg_map.node().nextSibling;
  var map_bbox = svg_map.node().getBoundingClientRect();
  var elem = document.createElement('p');
  elem.style.fontSize = '9px';
  elem.style.position = 'absolute';
  elem.innerHTML = 'DonnÃ©es : Eurostat, 2016 - Limite administrative: UMS RIATE, CC-BY-SA';
  parent.insertBefore(elem, next_elem);
  var bbox_elem = elem.getBoundingClientRect();
  elem.style.left = map_bbox.right - bbox_elem.width / 2 + 4 + 'px';
  elem.style.top = map_bbox.bottom - map_bbox.height / 2 + 'px';
  elem.className = 'rotate';
}

var TableResumeStat = function () {
  function TableResumeStat(summary_features) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, TableResumeStat);

    var doc = document;
    var nb_features = summary_features.length;
    var column_names = ['Variable', 'Min', 'Moyenne', 'Max', 'Ma rÃ©gion'];
    var nb_columns = column_names.length;
    var container_div = doc.createElement('div');
    var myTable = doc.createElement('table');
    var headers = doc.createElement('thead');
    var table_body = doc.createElement('tbody');
    var headers_row = doc.createElement('tr');
    myTable.className = 'minitable';
    container_div.className = 'minitable_container';
    for (var i = 0; i < nb_columns; i++) {
      var cell = doc.createElement('th');
      cell.innerHTML = column_names[i];
      headers_row.appendChild(cell);
    }
    headers.appendChild(headers_row);
    myTable.appendChild(headers);
    for (var _i = 0; _i < nb_features; _i++) {
      var row = doc.createElement('tr');
      row.id = 'row_' + summary_features[_i].id;
      for (var j = 0; j < nb_columns; j++) {
        var _cell = doc.createElement('td');
        var col_name = column_names[j];
        if (col_name !== 'Variable') {
          _cell.innerHTML = Math.round(summary_features[_i][col_name] * 10) / 10;
        } else {
          _cell.innerHTML = summary_features[_i][col_name];
        }
        row.appendChild(_cell);
      }
      table_body.appendChild(row);
    }
    myTable.appendChild(table_body);
    myTable.setAttribute('id', options.id || 'table_summary');
    container_div.appendChild(myTable);
    document.querySelector('#map_section').appendChild(container_div);
    this.nb_columns = nb_columns;
    this.column_names = column_names;
    this.table_body = table_body;
  }

  createClass(TableResumeStat, [{
    key: 'addFeatures',
    value: function addFeatures(summary_features) {
      for (var i = 0, len = summary_features.length; i < len; i++) {
        this.addFeature(summary_features[i]);
      }
    }
  }, {
    key: 'addFeature',
    value: function addFeature(summary) {
      var row = document.createElement('tr');
      row.id = 'row_' + summary.id;
      for (var j = 0; j < this.nb_columns; j++) {
        var cell = document.createElement('td');
        var col_name = this.column_names[j];
        if (col_name !== 'Variable') {
          cell.innerHTML = Math.round(summary[col_name] * 10) / 10;
        } else {
          cell.innerHTML = summary[col_name];
        }
        row.appendChild(cell);
      }
      this.table_body.appendChild(row);
    }
  }, {
    key: 'removeFeature',
    value: function removeFeature(id_variable) {
      var row = this.table_body.querySelector('tr#row_' + id_variable);
      if (row) row.remove();
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      var rows = this.table_body.querySelectorAll('tr');
      for (var i = rows.length - 1; i > -1; i--) {
        rows[i].remove();
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_body.parentElement.parentElement.remove();
      this.table_body = null;
    }
  }]);
  return TableResumeStat;
}();

var CompletudeSection = function () {
  function CompletudeSection(parent) {
    classCallCheck(this, CompletudeSection);

    this.section = document.createElement('div');
    this.section.className = 'completude_section';
    this.completude_population = document.createElement('p');
    this.completude_features = document.createElement('p');
    this.completude_features.className = 'active';
    this.section.appendChild(this.completude_features);
    this.section.appendChild(this.completude_population);
    var self = this;
    parent.appendChild(this.section);
    this.completude_features.onclick = function () {
      this.classList.remove('active');
      self.completude_population.classList.add('active');
    };
    this.completude_population.onclick = function () {
      this.classList.remove('active');
      self.completude_features.classList.add('active');
    };
  }

  createClass(CompletudeSection, [{
    key: 'update',
    value: function update(value_features, value_pop) {
      this.completude_features.innerHTML = 'Donn\xE9es disponibles pour ' + value_features[0] + '/' + value_features[1] + ' r\xE9gions.';
      this.completude_population.innerHTML = 'Donn\xE9es disponibles pour ' + value_pop + '% de la population de l\'espace d\'\xE9tude.';
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.section.remove();
      this.section = null;
      this.completude_population = null;
      this.completude_features = null;
    }
  }]);
  return CompletudeSection;
}();

var svg_bar = d3.select('svg#svg_bar');
var margin = { top: 10, right: 20, bottom: 100, left: 45 };
var margin2 = { top: 430, right: 20, bottom: 15, left: 45 };
var width = +svg_bar.attr('width') - margin.left - margin.right;
var height = +svg_bar.attr('height') - margin.top - margin.bottom;
var height2 = +svg_bar.attr('height') - margin2.top - margin2.bottom;

var nbFt = void 0;
var current_range_brush = [0, 0];
var current_range = [0, 0];
var displayed = void 0;

function getMeanRank(mean_value, ratio_to_use) {
  var mean_rank = app.current_data.map(function (d, i) {
    return [d[ratio_to_use], math_abs(mean_value - d[ratio_to_use]), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

var BarChart1 = function () {
  function BarChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BarChart1);

    this.brushed = function () {
      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return; // ignore brush-by-zoom
      if (!_this.x) {
        console.log('a');return;
      }
      var s = d3.event.selection || _this.x2.range();
      context_left_handle.attr('x', s[0] - 12);
      context_right_handle.attr('x', s[1] - 7);
      current_range = [math_round(s[0] / (width / nbFt)), math_round(s[1] / (width / nbFt))];
      _this.x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      svg_bar.select('.zoom').call(_this.zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
      _this.update();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(_this.brush_top.move, null);
      // this.brushed_top();
    };

    this.brushed_top = function () {
      if (!_this._focus) {
        console.log('b');return;
      }
      if (!_this.map_elem) {
        console.log('c');return;
      }
      var d3_event = d3.event;
      var ratio_to_use = _this.ratio_to_use;
      var ref_value = _this.ref_value;
      // if (d3_event && d3_event.selection
      //       && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
      if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target) {
        _this.map_elem.removeRectBrush();
        var s = d3_event.selection;
        current_range_brush = [current_range[0] + math_round(s[0] / (width / displayed)) - 1, current_range[0] + math_round(s[1] / (width / displayed))];
        // this.x.domain(this.data.slice(current_range_brush[0] + 1, current_range_brush[1])
        //   .map(ft => ft.id));
        app.colors = {};
        _this._focus.selectAll('.bar').style('fill', function (d, i) {
          if (d.id === app.current_config.my_region) {
            app.colors[d.id] = color_highlight;
            return color_highlight;
          } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
            var color = comp(d[ratio_to_use], ref_value, _this.serie_inversed);
            app.colors[d.id] = color;
            return color;
          }
          return color_countries;
        });
        // this.update();
        if (_this.reset_state_button === true) {
          d3.selectAll('#menu_selection > button').attr('class', 'button_blue');
        }
        _this.updateMapRegio();
      } else {
        if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
          _this.map_elem.removeRectBrush();
          app.colors = {};
          app.colors[app.current_config.my_region] = color_highlight;
          _this.updateMapRegio();
        }
        _this._focus.selectAll('.bar').style('fill', function (d) {
          return app.colors[d.id] || color_countries;
        });
        if (_this.reset_state_button === true) {
          d3.selectAll('#menu_selection > button').attr('class', 'button_blue');
        }
      }
    };

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var x = d3.scaleBand().range([0, width]).padding(0.1),
        x2 = d3.scaleBand().range([0, width]).padding(0.1),
        y = d3.scaleLinear().range([height, 0]),
        y2 = d3.scaleLinear().range([height2, 0]);

    var xAxis = d3.axisBottom(x);
    var xAxis2 = d3.axisBottom(x2);
    var yAxis = d3.axisLeft(y);

    this.x = x;
    this.x2 = x2;
    this.y = y;
    this.y2 = y2;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.xAxis2 = xAxis2;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var ratio_to_use = available_ratios[0];
    this.ratio_to_use = ratio_to_use;
    this.unit = exports.variables_info.find(function (ft) {
      return ft.ratio === ratio_to_use;
    }).unit;
    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    });
    this.data.sort(function (a, b) {
      return a[ratio_to_use] - b[ratio_to_use];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.current_ranks = this.data.map(function (d, i) {
      return i + 1;
    });
    nbFt = this.data.length;
    this.mean_value = getMean(this.data.map(function (d) {
      return d[ratio_to_use];
    }));
    this.ref_value = this.data.filter(function (ft) {
      return ft.id === app.current_config.my_region;
    })[0][ratio_to_use];
    svg_bar.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width, height: height });

    var focus = svg_bar.append('g').attrs({
      class: 'focus',
      transform: 'translate(' + margin.left + ', ' + margin.top + ')'
    });

    var context = svg_bar.append('g').attrs({
      class: 'context',
      transform: 'translate(' + margin2.left + ', ' + margin2.top + ')'
    });

    this._focus = focus;
    this.context = context;

    x.domain(this.current_ids);
    y.domain([0, d3.max(this.data, function (d) {
      return d[ratio_to_use];
    })]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    var brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on('brush end', this.brushed);

    var brush_top = d3.brushX().extent([[0, 0], [width, height]]).on('brush end', this.brushed_top);

    var zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
    // .on("zoom", zoomed);
    this.brush_top = brush_top;
    this.brush_bottom = brush_bottom;
    this.zoom = zoom;

    focus.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height + ')' }).call(xAxis);

    focus.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    focus.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = focus.append('g');

    var groupe_line_mean = focus.append('g').attr('class', 'mean');
    groupe_line_mean.append('text').attrs({ x: 60, y: y(this.mean_value) + 20 }).styles({
      display: 'none',
      fill: 'red',
      'fill-opacity': '0.8',
      'font-family': '\'Signika\', sans-serif'
    }).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10 + ' ' + this.unit);

    groupe_line_mean.append('line').attrs({
      x1: 0,
      x2: width,
      y1: y(this.mean_value),
      y2: y(this.mean_value),
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px',
      class: 'mean_line'
    }).style('stroke', 'red');

    groupe_line_mean.append('line').attrs({ x1: 0, x2: width, y1: y(this.mean_value), y2: y(this.mean_value), 'stroke-width': '14px', class: 'transp_mean_line' }).style('stroke', 'transparent').on('mouseover', function () {
      groupe_line_mean.select('text').style('display', 'initial');
    }).on('mouseout', function () {
      groupe_line_mean.select('text').style('display', 'none');
    });

    this.updateMiniBars();

    var g_brush_bottom = context.append('g').attr('class', 'brush_bottom').call(brush_bottom);

    var context_left_handle = g_brush_bottom.insert('image', '.handle').attrs({
      width: 20,
      height: height2,
      x: x2(this.current_ids[0]) - 12,
      'xlink:href': 'img/left-handle.png'
    });

    var context_right_handle = g_brush_bottom.insert('image', '.handle').attrs({
      width: 20,
      height: height2,
      x: x2(this.current_ids[this.current_ids.length - 1]) - 7,
      'xlink:href': 'img/right-handle.png'
    });

    focus.append('g').attr('class', 'brush_top').call(brush_top).call(brush_top.move, null);

    g_brush_bottom.call(brush_bottom.move, x.range());

    this.completude = new CompletudeSection(svg_bar.node().parentElement);
    this.completude.update(calcCompletudeSubset(app, [this.ratio_to_use], 'array'), calcPopCompletudeSubset(app, [this.ratio_to_use]));

    svg_bar.append('image').attrs({
      x: width + margin.left + 5,
      y: 385,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      // this.data = app.current_data.slice();
      if (!_this.serie_inversed) {
        _this.data.sort(function (a, b) {
          return b[_this.ratio_to_use] - a[_this.ratio_to_use];
        });
      } else {
        _this.data.sort(function (a, b) {
          return a[_this.ratio_to_use] - b[_this.ratio_to_use];
        });
      }
      _this.serie_inversed = !_this.serie_inversed;
      x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      x2.domain(_this.data.map(function (ft) {
        return ft.id;
      }));
      // svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity
      //     .scale(width / (current_range[1] - current_range[0]))
      //     .translate(-current_range[0], 0));
      _this.update();
      // this.updateMiniBars();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(brush_top.move, null);
      _this.map_elem.removeRectBrush();
      svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
    });

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar);

    // Deactivate the brush rect selection on the map + on the chart
    // when he user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', 'none');
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', null);
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Create the menu under the chart allowing to use some useful selections
    // (above or below the mean value and above or below my_region)
    var menu_selection = d3.select('#bar_section').append('div').attr('id', 'menu_selection').styles({ padding: '0 10px 10px 10px', 'text-align': 'center', color: '#4f81bd' });

    menu_selection.append('p').attr('id', 'selection_subtitle').styles({ margin: '10px 0px 2px 0px' }).html('SÃ©lection des rÃ©gions ayant des valeurs...');

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('infÃ©rieures Ã  la moyenne').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectBelowMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('infÃ©rieurs Ã  ma rÃ©gion').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectBelowMyRegion();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('supÃ©rieures Ã  la moyenne').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectAboveMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('supÃ©rieures Ã  ma rÃ©gion').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectAboveMyRegion();
    });

    this.makeTableStat();
  }

  createClass(BarChart1, [{
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, [this.ratio_to_use], 'array'), calcPopCompletudeSubset(app, [this.ratio_to_use]));
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      displayed = 0;
      var ratio_to_use = this.ratio_to_use;
      var self = this;
      var bar = this.g_bar.selectAll('.bar').data(this.data);

      if (this.reset_state_button === true) {
        d3.selectAll('#menu_selection > button').attr('class', 'button_blue');
      }

      bar.attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      }).style('display', function (d) {
        var to_display = _this2.x(d.id) != null;
        if (to_display) {
          displayed += 1;
          return 'initial';
        }
        return 'none';
      }).on('mouseover', function () {
        svg_bar.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar.select('.tooltip');
        tooltip.select('rect').attrs({ width: 0, height: 0 });
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text(math_round(d[self.ratio_to_use] * 10) / 10 + ' ' + self.unit);
        var b = tooltip.node().getBoundingClientRect();
        tooltip.select('rect').attrs({
          width: b.width + 20,
          height: b.height + 7.5
        });
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });

      bar.enter().insert('rect', '.mean').attrs(function (d) {
        return {
          class: 'bar',
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      });

      bar.exit().remove();

      this._focus.select('.axis--y').call(this.yAxis);

      var axis_x = this._focus.select('.axis--x').attr('font-size', function () {
        return displayed > 75 ? 6 : 10;
      }).call(this.xAxis);
      axis_x.selectAll('text').attrs(function () {
        if (displayed > 100) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else if (displayed > 20) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else {
          return { dx: '0', dy: '0.71em', transform: null };
        }
      }).style('text-anchor', function () {
        return displayed > 20 ? 'end' : 'middle';
      });

      this.updateMiniBars();
    }
  }, {
    key: 'updateMiniBars',
    value: function updateMiniBars() {
      var _this3 = this;

      var ratio_to_use = this.ratio_to_use;
      var mini_bars = this.context.selectAll('.bar').data(this.data);

      mini_bars.attrs(function (d) {
        return {
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });

      mini_bars.enter().insert('rect').attrs(function (d) {
        return {
          class: 'bar',
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });
      mini_bars.exit().remove();
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.id) > -1 ? app.colors[d.id] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      } else {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      }
      this.reset_state_button = false;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.map_elem.removeRectBrush();
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      } else {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      }
      this.reset_state_button = false;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.map_elem.removeRectBrush();
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this5 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [mean_rank, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      } else {
        current_range_brush = [0, mean_rank + 1];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.reset_state_button = false;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      this.map_elem.removeRectBrush();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this6 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      app.colors = {};
      if (!this.serie_inversed) {
        current_range_brush = [0, mean_rank];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      } else {
        current_range_brush = [mean_rank + 1, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.reset_state_button = false;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      this.map_elem.removeRectBrush();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var _this7 = this;

      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      var self = this;
      svg_bar.select('.brush_top').call(self.brush_top.move, null);

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      // const transform = svg_map.node().__zoom;
      // topleft[0] = (topleft[0] - transform.x) / transform.k;
      // topleft[1] = (topleft[1] - transform.y) / transform.k;
      // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
      // bottomright[1] = (bottomright[1] - transform.y) / transform.k;
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.id;
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, ref_value, this.serie_inversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self._focus.selectAll('.bar').style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      });
      var ids = Object.keys(app.colors);
      var ranks = ids.map(function (d) {
        return _this7.current_ids.indexOf(d.id) > -1;
      }).map(function (d) {
        return _this7.current_ranks[d];
      });
      if (ranks.length > 1) {
        var c1 = ranks[0] - 1;
        var c2 = ranks[ranks.length - 1];
        if (c1 < current_range[0] || c2 > current_range[1]) {
          current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
          svg_bar.select('.brush_bottom').call(self.brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
        }
      } else {
        current_range = [0, this.data.length];
        svg_bar.select('.brush_bottom').call(self.brush_bottom.move, self.x.range());
      }
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        app.colors[id] = undefined;
        d3.select(parent).attr('fill', color_countries);
      } else {
        var color = comp(d.properties[this.ratio_to_use], this.ref_value, this.serie_inversed);
        app.colors[id] = color;
        d3.select(parent).attr('fill', color);
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value = this.data.find(function (ft) {
          return ft.id === app.current_config.my_region;
        })[this.ratio_to_use];
        this.update();
        this.updateContext(0, this.data.length);
        this.updateMapRegio();
        this.updateTableStats();
        svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x.range());
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
      }
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var y = this.y;
      var ratio_to_use = this.ratio_to_use;
      var grp_mean = this._focus.select('.mean');
      this.mean_value = getMean(this.data.map(function (d) {
        return d[ratio_to_use];
      }));
      grp_mean.select('text').attr('y', y(this.mean_value) + 20).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10 + ' ' + this.unit);
      grp_mean.select('.mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
      grp_mean.select('.transp_mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var ratio_to_use = this.ratio_to_use;
      this.data = app.current_data.filter(function (ft) {
        return !!ft[ratio_to_use];
      });
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.current_ranks = this.data.map(function (d, i) {
        return i + 1;
      });
      if (this.serie_inversed) {
        this.data.sort(function (a, b) {
          return b[ratio_to_use] - a[ratio_to_use];
        });
      } else {
        this.data.sort(function (a, b) {
          return a[ratio_to_use] - b[ratio_to_use];
        });
      }
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      nbFt = this.data.length;
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.x.domain(this.current_ids);
      // const min_serie = d3.min(this.data, d => d[ratio_to_use]);
      var max_serie = d3.max(this.data, function (d) {
        return d[ratio_to_use];
      });
      // const offset_y = (max_serie - min_serie) / 20;
      this.y.domain([
      // min_serie - offset_y, max_serie,
      0, max_serie]);
      this.x2.domain(this.x.domain());
      this.y2.domain(this.y.domain());
      this.updateMeanValue();
      this.update();
      this.updateContext(0, this.data.length);

      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.map_elem.removeRectBrush();
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateTableStats();
      this.updateCompletude();
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.unit = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      }).unit;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this._focus.remove();
      this.context.remove();
      this.selec_var.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.completude.remove();
      this.completude = null;
      svg_bar.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.map_elem.displayLegend(0);
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this8 = this;

      var values = this.data.map(function (d) {
        return d[_this8.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.ref_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BarChart1;
}();

var contextMenu = function () {
  function contextMenu(items) {
    classCallCheck(this, contextMenu);

    if (items) {
      this.setItems(items);
    } else {
      this.items = [];
    }
  }

  createClass(contextMenu, [{
    key: 'addItem',
    value: function addItem(item) {
      this.items.push({
        name: item.name,
        action: item.action
      });
    }
  }, {
    key: 'removeItem',
    value: function removeItem(name) {
      for (var i = this.items.length - 1; i > 0; i--) {
        if (this.items[i].name === name) {
          this.items.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: 'setItems',
    value: function setItems(items) {
      this.items = [];
      for (var i = 0, nb_items = items.length; i < nb_items; i++) {
        if (items[i].name && items[i].action) {
          this.addItem(items[i]);
        }
      }
    }
  }, {
    key: 'showMenu',
    value: function showMenu(event, parent, items, position) {
      var _this = this;

      if (event.preventDefault) event.preventDefault();
      if (event.stopPropagation) event.stopPropagation();
      if (this.DOMobj) {
        this.hideMenu();
        return;
      }
      if (items) {
        this.setItems(items);
      }

      this.initMenu(parent);
      if (!position) {
        this.DOMobj.style.top = event.clientY + document.body.scrollTop + 'px';
        this.DOMobj.style.left = event.clientX + 'px';
      } else {
        this.DOMobj.style.top = position[1] + 'px';
        this.DOMobj.style.left = position[0] + 'px';
      }
      this.displayed = true;
      setTimeout(function () {
        document.addEventListener('click', function () {
          return _this.hideMenu();
        });
      }, 150);
    }
  }, {
    key: 'hideMenu',
    value: function hideMenu() {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      this.displayed = false;
      document.removeEventListener('click', this.hideMenu);
    }
  }, {
    key: 'initMenu',
    value: function initMenu(parent) {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      var self = this;
      var menu = document.createElement('div');
      var list = document.createElement('ul');
      menu.className = 'context-menu';
      menu.appendChild(list);
      for (var i = 0, nb_item = this.items.length; i < nb_item; i++) {
        var item = document.createElement('li');
        item.setAttribute('data-index', i);
        item.innerHTML = '<span class="context-menu-item-name">' + this.items[i].name + '</span>';
        list.appendChild(item);
        item.onclick = function () {
          var ix = this.getAttribute('data-index');
          self.items[ix].action();
        };
      }
      this.DOMobj = menu;
      parent.appendChild(menu);
    }
  }]);
  return contextMenu;
}();

var svg_bar$1 = d3.select('#svg_bar');
var margin$1 = { top: 20, right: 20, bottom: 40, left: 40 };

var width$1 = +svg_bar$1.attr('width') - margin$1.left - margin$1.right;
var height$1 = +svg_bar$1.attr('height') - margin$1.top - margin$1.bottom;

/** Class representing a scatterplot */
var ScatterPlot2 = function () {
  /**
   * Create a the scatterplot on the `svg_bar` svg element previously defined
   * @param {Array} ref_data - A reference to the subset of the dataset to be used
   * to create the scatterplot (should contain at least two field flagged as ratio
   * in the `app.current_config.ratio` Object).
   */
  function ScatterPlot2(ref_data) {
    var _this = this;

    classCallCheck(this, ScatterPlot2);

    this.brushed = function () {
      if (d3.event && !d3.event.selection) {
        if (d3.event.type === 'end' && d3.event.sourceEvent.type === 'mouseup') {
          _this.map_elem.removeRectBrush();
        }
        app.colors = {};
        app.colors[app.current_config.my_region] = color_highlight;
        _this.updateLight();
        _this.updateMapRegio();
        return;
      }

      resetColors();
      // const self = this;

      var _d3$event$selection = slicedToArray(d3.event.selection, 2),
          topleft = _d3$event$selection[0],
          bottomright = _d3$event$selection[1];

      var range_x = [_this.x.invert(topleft[0]), _this.x.invert(bottomright[0])];
      var range_y = [_this.y.invert(bottomright[1]), _this.y.invert(topleft[1])];
      if (_this.xInversed) range_x.reverse();
      if (_this.yInversed) range_y.reverse();
      var t1 = void 0;
      var t2 = void 0;
      if (_this.type === 'value') {
        t1 = _this.variable1;
        t2 = _this.variable2;
      } else {
        t1 = _this.rank_variable1;
        t2 = _this.rank_variable2;
      }

      for (var i = 0, len_i = _this.data.length; i < len_i; i++) {
        var ft = _this.data[i];
        if (ft[t1] > range_x[0] && ft[t1] < range_x[1] && ft[t2] > range_y[0] && ft[t2] < range_y[1]) {
          app.colors[ft.id] = comp2(ft[_this.variable1], ft[_this.variable2], _this.ref_value1, _this.ref_value2, _this.xInversed, _this.yInversed);
        }
      }
      app.colors[app.current_config.my_region] = color_highlight;
      _this.updateLight();
      _this.updateMapRegio();
      _this.map_elem.removeRectBrush();
    };

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var self = this;
    this.type = 'value';
    this.variable1 = app.current_config.ratio[0];
    this.variable2 = app.current_config.ratio[1];
    this.rank_variable1 = 'pr_' + this.variable1;
    this.rank_variable2 = 'pr_' + this.variable2;
    this.unit1 = exports.variables_info.find(function (ft) {
      return ft.ratio === _this.variable1;
    }).unit;
    this.unit2 = exports.variables_info.find(function (ft) {
      return ft.ratio === _this.variable2;
    }).unit;
    this.pretty_name1 = app.current_config.ratio_pretty_name[0];
    this.pretty_name2 = app.current_config.ratio_pretty_name[1];
    this.data = ref_data.filter(function (ft) {
      return !!ft[_this.variable1] && !!ft[_this.variable2];
    }).map(function (d) {
      var res = { id: d.id };
      res[_this.variable1] = d[_this.variable1];
      res[_this.variable2] = d[_this.variable2];
      return res;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors(this.current_ids);
    this.nbFt = this.data.length;
    computePercentileRank(this.data, this.variable1, this.rank_variable1);
    computePercentileRank(this.data, this.variable2, this.rank_variable2);

    this.x = d3.scaleLinear().range([0, width$1]).nice();
    this.y = d3.scaleLinear().range([height$1, 0]).nice();
    this.xAxis = d3.axisBottom(this.x).ticks(12);
    this.yAxis = d3.axisLeft(this.y).ticks(12 * height$1 / width$1);
    this.xAxis2 = d3.axisBottom(this.x).ticks(12);
    this.yAxis2 = d3.axisLeft(this.y).ticks(12 * height$1 / width$1);

    this.brush = d3.brush().extent([[0, 0], [width$1, height$1]]).on('brush end', this.brushed);

    this.xInversed = false;
    this.yInversed = false;
    this.ref_value1 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable1];
    this.ref_value2 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable2];

    this.plot = svg_bar$1.append('g').attr('transform', 'translate(' + [margin$1.left, margin$1.top] + ')');

    this.plot.append('defs').append('svg:clipPath').attr('id', 'clip').append('svg:rect').attrs({
      width: width$1,
      height: height$1,
      x: 0,
      y: 0
    });

    this.scatter = this.plot.append('g').attr('id', 'scatterplot').attr('clip-path', 'url(#clip)');

    this.scatter.append('g').attr('class', 'brush').call(this.brush);

    this.makeGrid();

    var groupe_line_mean = this.plot.append('g').attr('clip-path', 'url(#clip)').attr('class', 'mean');
    groupe_line_mean.append('line').attr('clip-path', 'url(#clip)').attrs({
      id: 'mean_x',
      x1: this.x(this.mean_variable1),
      x2: this.x(this.mean_variable1),
      y1: 0,
      y2: width$1,
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).style('stroke', 'red');
    groupe_line_mean.append('line').style('stroke', 'red').attrs({
      id: 'mean_y',
      x1: 0,
      x2: width$1,
      y1: this.y(this.mean_variable2),
      y2: this.y(this.mean_variable2),
      'clip-path': 'url(#clip)',
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    });

    this.plot.append('g').attrs({
      class: 'x axis', id: 'axis--x', transform: 'translate(0, ' + height$1 + ')'
    }).call(this.xAxis);

    this.plot.append('g').attrs({ class: 'y axis', id: 'axis--y', opacity: 0.9 }).call(this.yAxis);

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(this.plot);

    this.prepareTitleAxis();

    svg_bar$1.append('image').attrs({
      x: margin$1.left + width$1 / 2 - 20 - svg_bar$1.select('#title-axis-x').node().getBoundingClientRect().width / 2,
      y: margin$1.top + height$1 + margin$1.bottom / 2 - 2.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_x'
    }).on('click', function () {
      _this.xInversed = !_this.xInversed;
      // for (let i = 0; i < this.nbFt; i++) {
      //   self.data[i][self.rank_variable1] = 100 - self.data[i][self.rank_variable1];
      // }

      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    svg_bar$1.append('image').attrs({
      x: margin$1.left / 2 - 20,
      y: margin$1.top + height$1 / 2 + svg_bar$1.select('#title-axis-y').node().getBoundingClientRect().height / 2 + 5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_y'
    }).on('click', function () {
      _this.yInversed = !_this.yInversed;
      // for (let i = 0; i < this.nbFt; i++) {
      //   this.data[i][this.rank_variable2] = 100 - this.data[i][this.rank_variable2];
      // }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    this.completude = new CompletudeSection(svg_bar$1.node().parentElement);
    this.completude.update(calcCompletudeSubset(app, [this.variable1, this.variable2], 'array'), calcPopCompletudeSubset(app, [this.variable1, this.variable2]));

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    var menu_selection = d3.select(svg_bar$1.node().parentElement).append('div').attr('id', 'menu_selection').styles({ position: 'relative', 'text-align': 'center' });

    var chart_type = menu_selection.append('p');

    chart_type.append('span').attrs({
      id: 'ind_raw_values',
      class: 'choice_ind active'
    }).text('Valeurs brutes');

    chart_type.append('span').attrs({
      id: 'ind_ranks',
      class: 'choice_ind'
    }).text('Valeurs de rang');

    this.bindMenu();
    // this.update();
    this.makeTableStat();
  }

  /**
   * Create the underlying grey grid
   */


  createClass(ScatterPlot2, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#scatterplot').attrs({
        class: 'grid grid-x', transform: 'translate(0, ' + height$1 + ')'
      }).call(this.xAxis2.tickSize(-height$1).tickFormat(''));
      this.plot.insert('g', '#scatterplot').attr('class', 'grid grid-y').call(this.yAxis2.tickSize(-width$1).tickFormat(''));
    }
  }, {
    key: 'updateAxisGrid',
    value: function updateAxisGrid() {
      this.plot.select('.grid-x').transition().duration(125).call(this.xAxis2.tickSize(-height$1).tickFormat(''));
      this.plot.select('.grid-y').transition().duration(125).call(this.yAxis2.tickSize(-width$1).tickFormat(''));
      this.plot.select('#axis--x').transition().duration(125).call(this.xAxis);
      this.plot.select('#axis--y').transition().duration(125).call(this.yAxis);
      this.plot.selectAll('.grid').selectAll('line').attr('stroke', 'lightgray');
    }

    /**
     * Create the title of the X and Y axis with the associated context menu
     * displayed when they are clicked and allowing to select an other variable
     * for this axis.
     */

  }, {
    key: 'prepareTitleAxis',
    value: function prepareTitleAxis() {
      var _this2 = this;

      var self = this;
      this.menuX = new contextMenu();
      this.menuY = new contextMenu();
      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableY(elem);
          }
        };
      });

      svg_bar$1.append('text').attrs({
        id: 'title-axis-x',
        x: margin$1.left + width$1 / 2,
        y: margin$1.top + height$1 + margin$1.bottom / 2 + 10
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable1).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuY.displayed) {
          self.menuY.hideMenu();
        }
        self.menuX.showMenu(d3.event, document.body, self.itemsX, [bbox.left - 20, bbox.top + 20]);
      });

      svg_bar$1.append('text').attrs({
        id: 'title-axis-y',
        x: margin$1.left / 2,
        y: margin$1.top + height$1 / 2 - 10,
        transform: 'rotate(-90, ' + margin$1.left / 2 + ', ' + (margin$1.top + height$1 / 2) + ')'
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable2).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuX.displayed) {
          self.menuX.hideMenu();
        }
        self.menuY.showMenu(d3.event, document.body, self.itemsY, [bbox.left, bbox.bottom + 10]);
      });
    }
  }, {
    key: 'updateLight',
    value: function updateLight() {
      var default_color = 'gray';
      this.scatter.selectAll('.dot').transition().duration(125).styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this3 = this;

      var self = this;
      var data = self.data;

      if (this.type === 'rank') {
        var rank_variable1 = this.rank_variable1;
        var rank_variable2 = this.rank_variable2;
        var range_x = this.xInversed ? d3.extent(this.data, function (d) {
          return d[rank_variable1];
        }).reverse() : d3.extent(this.data, function (d) {
          return d[rank_variable1];
        });
        var range_y = this.yInversed ? d3.extent(this.data, function (d) {
          return d[rank_variable2];
        }).reverse() : d3.extent(this.data, function (d) {
          return d[rank_variable2];
        });
        var serie_x = this.data.map(function (d) {
          return d[_this3.variable1];
        });
        var serie_y = this.data.map(function (d) {
          return d[_this3.variable2];
        });
        this.x.domain(range_x).nice();
        this.y.domain(range_y).nice();
        this.mean_variable1 = _getPR(getMean(serie_x), serie_x);
        this.mean_variable2 = _getPR(getMean(serie_y), serie_y);

        var x = this.x;
        var y = this.y;
        var default_color = 'gray';

        var dots = this.scatter.selectAll('.dot').data(data, function (d) {
          return d.id;
        });

        dots.transition().duration(125).attrs(function (d) {
          return {
            r: 5,
            cx: x(d[rank_variable1]),
            cy: y(d[rank_variable2])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || default_color
          };
        });

        dots.enter().insert('circle').transition().duration(125).styles(function (d) {
          return {
            fill: app.colors[d.id] || default_color
          };
        }).attrs(function (d) {
          return {
            r: 5,
            cx: x(d[rank_variable1]),
            cy: y(d[rank_variable2]),
            class: 'dot'
          };
        }).on('end', function () {
          _this3.scatter.selectAll('.dot').on('mouseover.tooltip', function () {
            svg_bar$1.select('.tooltip').style('display', null);
          }).on('mousemove.tooltip', function (d) {
            var tooltip = svg_bar$1.select('.tooltip').attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 35] + ')');
            tooltip.select('rect').attrs({ width: 0, height: 0 });
            tooltip.select('text.id_feature').text('' + d.id);
            tooltip.select('text.value_feature1').text(self.variable1 + ' (rang) : ' + Math.round(d[self.rank_variable1] * 10) / 10 + '/100');
            tooltip.select('text.value_feature2').text(self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10 + ' ' + self.unit1);
            tooltip.select('text.value_feature3').text(self.variable2 + ' (rang) : ' + Math.round(d[self.rank_variable2] * 10) / 10 + '/100');
            tooltip.select('text.value_feature4').text(self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10 + ' ' + self.unit2);
            var b = tooltip.node().getBoundingClientRect();
            tooltip.select('rect').attrs({ width: b.width + 20, height: b.height + 7.5 });
          }).on('mouseout.tooltip', function () {
            svg_bar$1.select('.tooltip').style('display', 'none');
          });
        });
        dots.exit().transition().duration(125).remove();
      } else if (this.type === 'value') {
        var variable1 = this.variable1;
        var variable2 = this.variable2;
        var _serie_x = this.data.map(function (d) {
          return d[variable1];
        });
        var _serie_y = this.data.map(function (d) {
          return d[variable2];
        });
        var _range_x = this.xInversed ? d3.extent(_serie_x).reverse() : d3.extent(_serie_x);
        var _range_y = this.yInversed ? d3.extent(_serie_y).reverse() : d3.extent(_serie_y);
        this.x.domain(_range_x).nice();
        this.y.domain(_range_y).nice();
        this.mean_variable1 = getMean(_serie_x);
        this.mean_variable2 = getMean(_serie_y);

        var _x = this.x;
        var _y = this.y;
        var _default_color = 'gray';

        this.plot.select('#axis--x').transition().duration(125).call(this.xAxis);
        this.plot.select('#axis--y').transition().duration(125).call(this.yAxis);

        var _dots = this.scatter.selectAll('.dot').data(data, function (d) {
          return d.id;
        });

        _dots.transition().duration(125).attrs(function (d) {
          return {
            r: 5,
            cx: _x(d[variable1]),
            cy: _y(d[variable2])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || _default_color
          };
        });

        _dots.enter().insert('circle').transition().duration(125).styles(function (d) {
          return {
            fill: app.colors[d.id] || _default_color
          };
        }).attrs(function (d) {
          return {
            r: 5,
            cx: _x(d[variable1]),
            cy: _y(d[variable2]),
            class: 'dot'
          };
        }).on('end', function () {
          _this3.scatter.selectAll('.dot').on('mouseover.tooltip', function () {
            svg_bar$1.select('.tooltip').style('display', null);
          }).on('mousemove.tooltip', function (d) {
            var tooltip = svg_bar$1.select('.tooltip').attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 35] + ')');
            tooltip.select('rect').attrs({ width: 0, height: 0 });
            tooltip.select('text.id_feature').text('' + d.id);
            tooltip.select('text.value_feature1').text(self.variable1 + ' (rang) : ' + Math.round(d[self.rank_variable1] * 10) / 10 + '/100');
            tooltip.select('text.value_feature2').text(self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10 + ' ' + self.unit1);
            tooltip.select('text.value_feature3').text(self.variable2 + ' (rang) : ' + Math.round(d[self.rank_variable2] * 10) / 10 + '/100');
            tooltip.select('text.value_feature4').text(self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10 + ' ' + self.unit2);
            var b = tooltip.node().getBoundingClientRect();
            tooltip.select('rect').attrs({ width: b.width + 20, height: b.height + 7.5 });
          }).on('mouseout.tooltip', function () {
            svg_bar$1.select('.tooltip').style('display', 'none');
          });
        });

        _dots.exit().transition().duration(125).remove();
      }
      this.updateMeanValue();
      this.updateAxisGrid();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, [this.variable1, this.variable2], 'array'), calcPopCompletudeSubset(app, [this.variable1, this.variable2]));
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.id) > -1 ? app.colors[d.id] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      svg_bar$1.select('.brush').call(this.brush.move, null);
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.id;
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value1 = d.properties[self.variable1];
            var value2 = d.properties[self.variable2];
            var color = comp2(value1, value2, self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self.updateLight();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value1 = d.properties[this.variable1];
        var value2 = d.properties[this.variable2];
        var color = comp2(value1, value2, this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
      }
      this.updateLight();
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var _this5 = this;

      if (this.type === 'value') {
        this.mean_variable1 = getMean(this.data.map(function (d) {
          return d[_this5.variable1];
        }));
        this.mean_variable2 = getMean(this.data.map(function (d) {
          return d[_this5.variable2];
        }));
      } else if (this.type === 'rank') {
        this.mean_variable1 = _getPR(getMean(this.data.map(function (d) {
          return d[_this5.variable1];
        })), this.data.map(function (d) {
          return d[_this5.variable1];
        }));
        this.mean_variable2 = _getPR(getMean(this.data.map(function (d) {
          return d[_this5.variable2];
        })), this.data.map(function (d) {
          return d[_this5.variable2];
        }));
      }
      var grp_mean = this.plot.select('g.mean');
      grp_mean.select('#mean_x').transition().duration(125).attrs({
        x1: this.x(this.mean_variable1),
        x2: this.x(this.mean_variable1)
      });
      grp_mean.select('#mean_y').transition().duration(125).attrs({
        y1: this.y(this.mean_variable2),
        y2: this.y(this.mean_variable2)
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value1 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable1];
        this.ref_value2 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable2];
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
        this.map_elem.resetColors(this.current_ids);
        this.update();
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this6 = this;

      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this6.variable1] && !!ft[_this6.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this6.variable1] = d[_this6.variable1];
        res[_this6.variable2] = d[_this6.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);

      this.xInversed = false;
      this.yInversed = false;
      var tmp_my_region = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0];
      this.ref_value1 = tmp_my_region[this.variable1];
      this.ref_value2 = tmp_my_region[this.variable2];

      this.map_elem.removeRectBrush();
      this.updateItemsCtxMenu();
      this.updateMapRegio();
      this.updateTableStat();
      this.updateCompletude();
      this.update();
    }
  }, {
    key: 'changeVariableX',
    value: function changeVariableX(code_variable) {
      var _this7 = this;

      this.variable1 = code_variable;
      this.rank_variable1 = 'pr_' + this.variable1;
      var var_info = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      });
      this.pretty_name1 = var_info.name;
      this.unit1 = var_info.unit;
      svg_bar$1.select('#title-axis-x').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this7.variable1] && !!ft[_this7.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this7.variable1] = d[_this7.variable1];
        res[_this7.variable2] = d[_this7.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value1 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable1];
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'changeVariableY',
    value: function changeVariableY(code_variable) {
      var _this8 = this;

      this.variable2 = code_variable;
      this.rank_variable2 = 'pr_' + this.variable2;
      var var_info = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      });
      this.pretty_name2 = var_info.name;
      this.unit2 = var_info.unit;
      svg_bar$1.select('#title-axis-y').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this8.variable1] && !!ft[_this8.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this8.variable1] = d[_this8.variable1];
        res[_this8.variable2] = d[_this8.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value2 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable2];
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'updateItemsCtxMenu',
    value: function updateItemsCtxMenu() {
      var _this9 = this;

      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this9.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this9.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this9.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this9.changeVariableY(elem);
          }
        };
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this10 = this;

      this.itemsX.push({
        name: code_variable,
        action: function action() {
          return _this10.changeVariableX(code_variable);
        }
      });
      this.itemsY.push({
        name: code_variable,
        action: function action() {
          return _this10.changeVariableY(code_variable);
        }
      });
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this11 = this;

      // Remove the variable from the X and Y list of items:
      for (var i = this.itemsX.length - 1; i > -1; i--) {
        if (this.itemsX[i].name === code_variable) {
          this.itemsX.splice(i, 1);
          break;
        }
      }
      for (var _i = this.itemsY.length - 1; _i > -1; _i--) {
        if (this.itemsY[_i].name === code_variable) {
          this.itemsY.splice(_i, 1);
          break;
        }
      }

      // If the variable to remove was currently used for drawing this chart,
      // set a new variable for this axis and redraw the chart:
      if (code_variable === this.variable1) {
        var new_var_x = this.itemsX.filter(function (ft) {
          return ft.name !== _this11.variable2;
        })[0].name;
        this.changeVariableX(new_var_x);
      } else if (code_variable === this.variable2) {
        var new_var_y = this.itemsY.filter(function (ft) {
          return ft.name !== _this11.variable1;
        })[0].name;
        this.changeVariableY(new_var_y);
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.completude.remove();
      this.completude = null;
      svg_bar$1.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.displayLegend(1);
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');

      menu.select('#ind_raw_values').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.type = 'value';
        this.classList.add('active');
        menu.select('#ind_ranks').attr('class', 'choice_ind');
        // self.g_bar.selectAll('g').remove();
        self.update();
      });

      menu.select('#ind_ranks').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.type = 'rank';
        this.classList.add('active');
        menu.select('#ind_raw_values').attr('class', 'choice_ind');
        // self.g_bar.selectAll('rect').remove();
        self.update();
      });
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this12 = this;

      var values1 = this.data.map(function (d) {
        return d[_this12.variable1];
      });
      var values2 = this.data.map(function (d) {
        return d[_this12.variable2];
      });
      var features = [{
        Min: d3.min(values1),
        Max: d3.max(values1),
        Moyenne: getMean(values1),
        id: this.variable1,
        Variable: this.variable1,
        'Ma rÃ©gion': this.ref_value1
      }, {
        Min: d3.min(values2),
        Max: d3.max(values2),
        Moyenne: getMean(values2),
        id: this.variable2,
        Variable: this.variable2,
        'Ma rÃ©gion': this.ref_value2
      }];
      return features;
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return ScatterPlot2;
}();

var svg_bar$2 = d3.select('#svg_bar');
var margin$2 = { top: 70, right: 70, bottom: 80, left: 70 };

var width$2 = +svg_bar$2.attr('width') - margin$2.left - margin$2.right;
var height$2 = +svg_bar$2.attr('height') - margin$2.top - margin$2.bottom;

var wrap = function wrap(_text, _width) {
  _text.each(function () {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        lineHeight = 1.4,
        x = +text.attr('x'),
        dy = parseFloat(text.attr('dy')); // ems
    var y = +text.attr('y');
    var line = [];
    var lineNumber = 0;
    if (y > height$2 / 2 - 35) {
      y -= 40;
    }
    var tspan = text.text(null).append('tspan').attr('x', x).attr('y', y).attr('dy', dy + 'em');
    var word = words.pop();
    while (word) {
      line.push(word);
      tspan.text(line.join(' '));
      if (tspan.node().getComputedTextLength() > _width) {
        line.pop();
        tspan.text(line.join(' '));
        line = [word];
        tspan = text.append('tspan').attr('x', x).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
      }
      word = words.pop();
    }
  });
};

var move = function move(array, from, to) {
  array.splice(to, 0, array.splice(from, 1)[0]);
  return array;
};

var swap = function swap(array, ix1, ix2) {
  // eslint-disable-line no-param-reassign
  var _ref = [array[ix2], array[ix1]];
  array[ix1] = _ref[0];
  array[ix2] = _ref[1];
  return array;
};

var prepare_data_radar_default = function prepare_data_radar_default(data, variables) {
  // Prepare the data for "My RÃ©gion":
  var v_my_region = data.find(function (d) {
    return d.id === app.current_config.my_region;
  });
  var ojb_my_region = {
    name: app.current_config.my_region,
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    ojb_my_region.axes.push({
      axis: t, value: v_my_region[_v]
    });
  });
  return ojb_my_region;
};

var prepare_data_radar_ft = function prepare_data_radar_ft(data, variables, ft) {
  var ft_values = data.find(function (d) {
    return d.id === ft;
  });
  if (!ft_values) {
    return null;
  }
  var obj = {
    name: ft,
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    obj.axes.push({
      axis: t, value: ft_values[_v]
    });
  });
  return obj;
};

var RadarChart3 = function () {
  function RadarChart3(data, options) {
    var _this = this;

    classCallCheck(this, RadarChart3);

    var cfg = {
      w: width$2 - 20, // Width of the circle
      h: height$2 - 20, // Height of the circle
      margin: margin$2, // The margins of the SVG
      levels: 10, // How many levels or inner circles should there be drawn
      maxValue: 100, // What is the value that the biggest circle will represent
      labelFactor: 1.3, // How much farther than the radius of the outer circle should the labels be placed
      wrapWidth: 95, // The number of pixels after which a label needs to be given a new line
      opacityArea: 0.10, // The opacity of the area of the blob
      dotRadius: 4, // The size of the colored circles of each blog
      opacityCircles: 0.1, // The opacity of the circles of each blob
      strokeWidth: 2, // The width of the stroke around each blob
      roundStrokes: true, // If true the area and stroke will follow a round path (cardinal-closed)
      color: d3.scaleOrdinal([color_highlight].concat(d3.schemeCategory10)), // Color function,
      format: '.2', // The format string to be used by d3.format
      unit: '%', // The unit to display after the number on the axis and point tooltips (like $, â‚¬, %, etc)
      legend: false,
      allowInverseData: true
    };
    this.cfg = cfg;
    // Put all of the options into a variable called cfg
    if (typeof options !== 'undefined') {
      var opts_key = Object.keys(options);
      for (var i = 0, len_i = opts_key.length; i < len_i; i++) {
        var k = opts_key[i];
        if (typeof options[k] !== 'undefined') {
          cfg[k] = options[k];
        }
      }
    }

    this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (cfg.w / 2 + cfg.margin.left) + ',' + (cfg.h / 2 + cfg.margin.top) + ')');

    this.prepareData(data);
    this.drawAxisGrid();
    this.drawArea();
    this.handleLegend();

    this.completude = new CompletudeSection(svg_bar$2.node().parentElement);
    // Compute the "complÃ©tude" value for these ratios:
    this.completude.update(calcCompletudeSubset(app, this.variables, 'array'), calcPopCompletudeSubset(app, this.variables));

    if (cfg.allowInverseData) {
      this.inverse_data = function (field) {
        var data_length = _this.data.length;
        if (!field) {
          for (var _i = 0; _i < data_length; _i++) {
            var ax = _this.data[_i].axes;
            for (var j = 0; j < ax.length; j++) {
              ax[j].value = 100 - ax[j].value;
            }
          }
        } else {
          for (var _i2 = 0; _i2 < data_length; _i2++) {
            var _ax = _this.data[_i2].axes;
            for (var _j = 0; _j < _ax.length; _j++) {
              if (_ax[_j].axis === field) {
                _ax[_j].value = 100 - _ax[_j].value;
              }
            }
          }
        }
        _this.update();
      };
    }
    this.makeTableStat();
  }

  createClass(RadarChart3, [{
    key: 'add_element',
    value: function add_element(elem) {
      var _this2 = this;

      var n_axis = elem.axes.map(function (i) {
        return i.axis;
      });
      if (!(JSON.stringify(n_axis) === JSON.stringify(this.allAxis))) {
        throw new Error('Expected element with same axes name than existing data.');
      }
      this.data.push(elem);
      this.displayed_ids.push(elem.name);
      for (var j = 0; j < this.data.length; j++) {
        var on_axes = [];
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          on_axes.push(this.data[j].name);
        }
      }

      var self = this;
      var cfg = this.cfg;
      var n = this.data.length - 1;
      var blobWrapper = this.g.insert('g', '.radarCircleWrapper').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', this.radarLine(elem.axes)).style('fill', cfg.color(n)).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        self.g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.3);
      }).on('mouseout', function () {
        // Bring back all blobs
        self.g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });
      // .on('click', function () {
      //   const p = this.parentElement;
      //   if (p.previousSibling.className !== 'tooltip') {
      //     const group = g.node();
      //     group.insertBefore(p, group.querySelector('.tooltip'));
      //     const new_order = [];
      //     g.selectAll('.radarWrapper').each(d => new_order.push(d.name));
      //     new_order.reverse();
      //     updateLegend(new_order);
      //   }
      // });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', this.radarLine(elem.axes)).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', cfg.color(n)).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(elem.axes).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', cfg.color(n)).style('fill-opacity', 0.8);

      blobWrapper.node().__data__ = elem;

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = this.g.insert('g', '.tooltip').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarCircleWrapper');

      blobCircleWrapper.node().__data__ = elem;

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(elem.axes).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        self.g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(self.Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        self.g.select('.tooltip').transition().style('display', 'none').text('');
      });
    }
  }, {
    key: 'changeOrder',
    value: function changeOrder() {
      this.data = this.data.slice(1, this.data.length).concat(this.data.slice(0, 1));
      this.update();
    }
  }, {
    key: 'prepareData',
    value: function prepareData(data) {
      var _this3 = this;

      // Set the minimum number of variables to keep selected for this kind of chart:
      app.current_config.nb_var = 3;
      this.variables = app.current_config.ratio;
      this.ref_data = data.slice().filter(function (ft) {
        return _this3.variables.map(function (v) {
          return !!ft[v];
        }).every(function (d) {
          return d === true;
        });
      });
      this.rank_variables = this.variables.map(function (d) {
        return 'pr_' + d;
      });
      this.variables.forEach(function (d, i) {
        computePercentileRank(_this3.ref_data, d, _this3.rank_variables[i]);
      });
      this.data = [prepare_data_radar_default(this.ref_data, this.variables)];
      this.displayed_ids = this.data.map(function (d) {
        return d.name;
      });
      this.current_ids = this.ref_data.map(function (d) {
        return d.id;
      });
      this.id_my_region = app.current_config.my_region;

      // If the supplied maxValue is smaller than the actual one, replace by the max in the data
      var maxValue = 0;
      for (var j = 0; j < this.data.length; j++) {
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          if (this.data[j].axes[i].value > maxValue) {
            maxValue = this.data[j].axes[i].value;
          }
        }
      }

      this.maxValue = math_max(this.cfg.maxValue, maxValue);
      this.allAxis = this.data[0].axes.map(function (i) {
        return i.axis;
      }); // Names of each axis
      this.total = this.allAxis.length; // The number of different axes
      this.radius = Math.min(this.cfg.w / 2, this.cfg.h / 2); // Radius of the outermost circle
      this.Format = d3.format(this.cfg.format); // Formatting
      this.angleSlice = Math.PI * 2 / this.total; // The width in radians of each "slice"
      // Scale for the radius
      this.rScale = d3.scaleLinear().range([0, this.radius]).domain([0, this.maxValue]);
      // The radial line function
      this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
        return _this3.rScale(d.value);
      }).angle(function (d, i) {
        return i * _this3.angleSlice;
      });
    }
  }, {
    key: 'drawAxisGrid',
    value: function drawAxisGrid() {
      var self = this;
      var cfg = this.cfg;
      var g = this.g;
      var radius = this.radius;
      var maxValue = this.maxValue;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      var labelClicked = function labelClicked() {
        var ix = +this.id;
        if (ix + 1 === self.allAxis.length) {
          for (var i = 0; i < self.data.length; i++) {
            swap(self.data[i].axes, ix, 0);
          }
        } else {
          var new_ix = ix + 1;
          for (var _i3 = 0; _i3 < self.data.length; _i3++) {
            move(self.data[_i3].axes, ix, new_ix);
          }
        }
        self.update();
      };

      var labelCtxMenu = function labelCtxMenu(label) {
        d3.event.stopPropagation();
        d3.event.preventDefault();
        self.inverse_data(label);
      };

      var axisGrid = g.append('g').attr('class', 'axisWrapper');

      // Draw the background circles
      axisGrid.selectAll('.levels').data(d3.range(1, cfg.levels + 1).reverse()).enter().append('circle').attrs(function (d) {
        return {
          class: 'gridCircle',
          r: radius / cfg.levels * d
        };
      }).styles(function (d) {
        if (d === 5) {
          return {
            fill: '#CDCDCD',
            stroke: 'rgb(245, 138, 138)',
            'stroke-dasharray': '5, 5',
            'fill-opacity': cfg.opacityCircles,
            filter: 'url(#glow)'
          };
        }
        return {
          fill: '#CDCDCD',
          stroke: '#CDCDCD',
          'fill-opacity': cfg.opacityCircles,
          filter: 'url(#glow)'
        };
      });

      // // Text indicating at what % each level is
      // axisGrid.selectAll('.axisLabel')
      //   .data(d3.range(1, (cfg.levels + 1)).reverse())
      //   .enter().append('text')
      //   .attr('class', 'axisLabel')
      //   .attr('x', 4)
      //   .attr('y', d => -d * radius / cfg.levels)
      //   .attr('dy', '0.4em')
      //   .style('font-size', '10px')
      //   .attr('fill', '#737373')
      //   .text(d => Format(maxValue * d / cfg.levels) + cfg.unit);

      // Create the straight lines radiating outward from the center
      var axis = axisGrid.selectAll('.axis').data(this.allAxis).enter().append('g').attr('class', 'axis');
      // Append the lines
      axis.append('line').attr('x1', 0).attr('y1', 0).attr('x2', function (d, i) {
        return rScale(maxValue * 1.1) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y2', function (d, i) {
        return rScale(maxValue * 1.1) * math_sin(angleSlice * i - HALF_PI);
      }).attr('class', 'line').style('stroke', 'white').style('stroke-width', '2px');

      // Append the labels at each axis
      axis.append('text').attr('class', 'legend').style('font-size', '11px').attr('id', function (d, i) {
        return i;
      }).attr('text-anchor', 'middle').attr('dy', '0.35em').attr('x', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI);
      }).text(function (d) {
        return d;
      }).on('click', labelClicked).on('contextmenu', cfg.allowInverseData ? labelCtxMenu : null).call(wrap, cfg.wrapWidth);

      // Filter for the outside glow
      var filter = g.append('defs').append('filter').attr('id', 'glow');
      filter.append('feGaussianBlur').attr('stdDeviation', '2.5').attr('result', 'coloredBlur');
      var feMerge = filter.append('feMerge');
      feMerge.append('feMergeNode').attr('in', 'coloredBlur');
      feMerge.append('feMergeNode').attr('in', 'SourceGraphic');

      this.axisGrid = axisGrid;
    }
  }, {
    key: 'handleLegend',
    value: function handleLegend() {
      var cfg = this.cfg;
      if (cfg.legend !== false && _typeof(cfg.legend) === 'object') {
        var names = this.data.map(function (el) {
          return el.name;
        });
        if (cfg.legend.title) {
          this.legendZone.append('text').attr('class', 'title').attr('transform', 'translate(0, -20)').attr('x', cfg.w - 70).attr('y', 10).attr('font-size', '12px').attr('fill', '#404040').text(cfg.legend.title);
        }
        var legend = this.legendZone.selectAll('g').data(names);
        var legendEnter = legend.enter().append('g');

        // Create rectangles markers
        legendEnter.append('rect').attrs(function (d, i) {
          return {
            x: cfg.w - 65,
            y: i * 20,
            width: 10,
            height: 10
          };
        }).style('fill', function (d) {
          return cfg.color(d);
        });

        // Create labels
        legendEnter.append('text').attrs(function (d, i) {
          return {
            x: cfg.w - 52,
            y: i * 20 + 9,
            fill: '#737373',
            'font-size': '11px'
          };
        }).text(function (d) {
          return d;
        });

        legend.merge(legendEnter).selectAll('rect').attr('y', function (d, i) {
          return i * 20;
        }).style('fill', function (d) {
          return cfg.color(d);
        });

        legend.merge(legendEnter).selectAll('text').attrs(function (d, i) {
          return {
            x: cfg.w - 52,
            y: i * 20 + 9
          };
        }).text(function (d) {
          return d;
        });

        legend.exit().remove();
      }
    }
  }, {
    key: 'drawArea',
    value: function drawArea() {
      var _this4 = this;

      var cfg = this.cfg;
      var g = this.g;
      var Format = this.Format;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      // Create a wrapper for the blobs
      var blobWrapper = g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('fill', function (d, i) {
        return cfg.color(i);
      }).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0.1);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.7);
      }).on('mouseout', function () {
        g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', function (d, i) {
        return cfg.color(i);
      }).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', cfg.color(0)).style('fill-opacity', 0.8);

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarCircleWrapper');

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        g.select('.tooltip').transition().style('display', 'none').text('');
      });

      var tooltip = g.append('text').attrs({ class: 'tooltip', x: 0, y: 0, dy: '0.35em', 'text-anchor': 'middle' }).styles({ 'font-size': '12px', display: 'none' });

      this.legendZone = svg_bar$2.append('g').attrs({
        id: 'legendZone',
        class: 'legend',
        transform: 'translate(' + cfg.legend.translateX + ',' + (cfg.legend.translateY + 20) + ')'
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this5 = this;

      var rScale = this.rScale;
      var maxValue = this.maxValue;
      var cfg = this.cfg;
      var angleSlice = this.angleSlice;
      // console.log(this.current_ids);
      // if (new_data) {
      //   const new_axis = new_data[0].axes.map(elem => elem.axis);
      //   if (!(JSON.stringify(new_axis) === JSON.stringify(this.allAxis))) {
      //     throw new Error('Expected element with same axes name than existing data.');
      //   }
      //   this.data = new_data;
      //   this.allAxis = new_axis;
      // } else {
      this.allAxis = this.data[0].axes.map(function (elem) {
        return elem.axis;
      });
      // }
      var update_axis = this.axisGrid.selectAll('.axis').data(this.allAxis);

      var t = this.g.selectAll('.radarWrapper').transition().duration(225);
      // .on('end', () => {
      //   parent.selectAll('text.legend')
      //     .text(d => d)
      //     .call(wrap, cfg.wrapWidth);
      //   // wrap(parent.selectAll('text.legend'), cfg.wrapWidth);
      // });
      update_axis.select('text.legend').attrs(function (d, i) {
        return {
          id: i,
          x: rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI),
          y: rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI)
        };
      }).text(function (d) {
        return d;
      }).call(wrap, cfg.wrapWidth);

      var update_blobWrapper = this.g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      });

      update_blobWrapper.select('.radarArea').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      update_blobWrapper.select('.radarStroke').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      var circle = update_blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      });
      circle.transition(t).attrs(function (d, i) {
        return {
          cx: rScale(d.value) * math_cos(angleSlice * i - HALF_PI),
          cy: rScale(d.value) * math_sin(angleSlice * i - HALF_PI)
        };
      }).styles(function (d, i) {
        return {
          fill: cfg.color(i),
          'fill-opacity': 0.8
        };
      });

      var update_blobCircleWrapper = this.g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      });

      var invisibleCircle = update_blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      });
      invisibleCircle.transition(t).attrs(function (d, i) {
        return {
          cx: rScale(d.value) * math_cos(angleSlice * i - HALF_PI),
          cy: rScale(d.value) * math_sin(angleSlice * i - HALF_PI)
        };
      });
    }
  }, {
    key: 'round_stroke',
    value: function round_stroke(val) {
      var _this6 = this;

      if (val === undefined) {
        return this.cfg.roundStrokes;
      } else if (val !== this.cfg.roundStrokes) {
        this.cfg.roundStrokes = val;
        this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
          return _this6.rScale(d.value);
        }).angle(function (d, i) {
          return i * _this6.angleSlice;
        });
        this.update();
      }
      return val;
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.map_elem.displayLegend(2);
      this.updateMapRegio();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.completude.remove();
      this.completude = null;
      svg_bar$2.html('');
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this7 = this;

      var old_my_region = this.id_my_region;
      var other_features = this.displayed_ids.filter(function (d) {
        return d !== old_my_region;
      });
      this.g.remove();
      this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.id_my_region = app.current_config.my_region;
      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this7.ref_data, _this7.variables, id);
        _this7.add_element(a);
      });
      this.updateMapRegio();
      this.updateCompletude();
      this.updateTableStat();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this8 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this8.id_my_region;
      });
      this.g.remove();
      this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this8.ref_data, _this8.variables, id);
        _this8.add_element(a);
      });
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this9 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this9.id_my_region;
      });
      this.g.remove();
      this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this9.ref_data, _this9.variables, id);
        _this9.add_element(a);
      });
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this10 = this;

      var all_values = this.variables.map(function (v) {
        return _this10.ref_data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.ref_data.find(function (d) {
        return d.id === _this10.id_my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this10.variables[i],
          Variable: _this10.variables[i],
          'Ma rÃ©gion': my_region[_this10.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === this.id_my_region) return;
      if (this.displayed_ids.indexOf(id) < 0) {
        var a = prepare_data_radar_ft(this.ref_data, this.variables, id);
        this.add_element(a);
        this.update();
      } else {
        this.g.selectAll('#' + id + '.radarWrapper').remove();
        this.g.selectAll('#' + id + '.radarCircleWrapper').remove();
        var ix = this.data.map(function (_d, i) {
          return [i, _d.name === id];
        }).find(function (_d) {
          return _d[1] === true;
        })[0];
        this.data.splice(ix, 1);
        this.displayed_ids = this.data.map(function (_d) {
          return _d.name;
        });
        this.update();
      }
      this.updateMapRegio();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, this.variables, 'array'), calcPopCompletudeSubset(app, this.variables));
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this11 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return d.id === _this11.id_my_region ? color_highlight : _this11.current_ids.indexOf(d.id) > -1 ? _this11.displayed_ids.indexOf(d.id) > -1 ? color_default_dissim : color_countries : color_disabled;
      });
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return RadarChart3;
}();

var svg_bar$3 = d3.select('#svg_bar');
var margin$3 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$3 = +svg_bar$3.attr('width') - margin$3.left - margin$3.right;
var height$3 = +svg_bar$3.attr('height') - margin$3.top - margin$3.bottom;

var Similarity1plus = function () {
  function Similarity1plus(ref_data) {
    var _this = this;

    classCallCheck(this, Similarity1plus);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    this.ratios = app.current_config.ratio;
    this.nums = app.current_config.num;
    this.data = ref_data.filter(function (ft) {
      return _this.ratios.map(function (v) {
        return !!ft[v];
      }).every(function (v) {
        return v === true;
      });
    }).slice();
    this.my_region = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    });
    this.data.forEach(function (ft) {
      _this.ratios.forEach(function (v) {
        // eslint-disable-next-line no-param-reassign
        ft['dist_' + v] = math_abs(+ft[v] - +_this.my_region[v]);
      });
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.highlight_selection = [];
    this.serie_inversed = false;
    this.draw_group = svg_bar$3.append('g').attr('transform', 'translate(' + margin$3.left + ', ' + margin$3.top + ')');

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$3);

    this.completude = new CompletudeSection(svg_bar$3.node().parentElement);
    this.completude.update(calcCompletudeSubset(app, this.ratios, 'array'), calcPopCompletudeSubset(app, this.ratios));

    // Create the button allowing to choose
    // if the colors are inversed
    // (like green/red for superior/inferior regions)
    svg_bar$3.append('image').attrs({
      x: width$3 + margin$3.left + 5,
      y: 232.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      _this.serie_inversed = !_this.serie_inversed;
      _this.applySelection(_this.highlight_selection.length);
    });

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var selection_close = d3.select(svg_bar$3.node().parentElement).append('div').attr('id', 'menu_selection').styles({ position: 'relative', color: '#4f81bd', 'text-align': 'center' }).append('p');

    selection_close.append('span').html('SÃ©lection des');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).style('margin-left', '1px').style('color', '#4f81bd').property('value', 5);
    selection_close.append('span').html('rÃ©gions les plus proches');

    this.bindMenu();
    this.makeTableStat();
  }

  createClass(Similarity1plus, [{
    key: 'applySelection',
    value: function applySelection(nb) {
      var _this2 = this;

      app.colors = {};
      if (nb > 0) {
        this.highlight_selection = this.data.map(function (ft) {
          // eslint-disable-next-line no-restricted-properties
          var global_dist = math_sqrt(_this2.ratios.map(function (v) {
            return 'dist_' + v;
          }).map(function (v) {
            return Math.pow(ft[v], 2);
          }).reduce(function (a, b) {
            return a + b;
          }));
          var obj = {
            id: ft.id,
            dist: global_dist
          };
          _this2.ratios.forEach(function (v) {
            obj[v] = ft[v];
          });
          return obj;
        });
        this.highlight_selection.sort(function (a, b) {
          return a.dist - b.dist;
        });
        this.highlight_selection = this.highlight_selection.slice(1, nb + 1);
      } else {
        this.highlight_selection = [];
      }
      this.removeLines();
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'update',
    value: function update() {
      var _this3 = this;

      var self = this;
      var data = self.data;
      var highlight_selection = self.highlight_selection;
      var nb_variables = self.ratios.length;
      var offset = height$3 / nb_variables + 1;
      var height_to_use = offset / 2;

      var _loop = function _loop(i) {
        var ratio_name = self.ratios[i];
        var num_name = self.nums[i];
        var my_region_value = self.my_region[ratio_name];
        var ratio_values = _this3.data.map(function (d) {
          return d[ratio_name];
        });
        var g = _this3.draw_group.select('#' + ratio_name);
        var axis = _this3.draw_group.select('g.axis--x.' + ratio_name);
        if (!g.node()) {
          g = _this3.draw_group.append('g').attrs({
            id: ratio_name,
            num: num_name,
            class: 'grp_var'
          });
          axis = g.append('g').attrs({
            class: 'axis axis--x ' + ratio_name,
            transform: 'translate(0, 10)'
          });
          g.append('text').attrs({
            x: 15,
            y: -7.5,
            fill: '#4f81bd',
            'font-size': '11px',
            'font-weight': 'bold',
            'font-family': '"Signika",sans-serif'
          }).text(ratio_name);
        }
        g.attr('transform', 'translate(0, ' + height_to_use + ')');
        var _min = void 0;
        var _max = void 0;
        _this3.data.sort(function (a, b) {
          return b['dist_' + ratio_name] - a['dist_' + ratio_name];
        });
        if (highlight_selection.length > 0) {
          var dist_axis = Math.max(math_abs(my_region_value - +d3.min(highlight_selection, function (d) {
            return d[ratio_name];
          })), math_abs(+d3.max(highlight_selection, function (d) {
            return d[ratio_name];
          }) - my_region_value));
          var margin_min_max = math_round(dist_axis) / 8;
          _min = my_region_value - dist_axis - margin_min_max;
          _max = my_region_value + dist_axis + margin_min_max;
          // if (_min > _max) { [_min, _max] = [_max, _min]; }
        } else {
          var _dist_axis = Math.max(math_abs(my_region_value - d3.min(ratio_values)), math_abs(d3.max(ratio_values) - my_region_value));
          var _margin_min_max = math_round(_dist_axis) / 8;
          _min = my_region_value - _dist_axis - _margin_min_max;
          _max = my_region_value + _dist_axis + _margin_min_max;
        }
        _this3.highlight_selection.forEach(function (elem) {
          app.colors[elem.id] = comp(elem[ratio_name], my_region_value, _this3.serie_inversed);
        });

        app.colors[app.current_config.my_region] = color_highlight;
        var prop_sizer = new PropSizer(d3.max(data, function (d) {
          return d[num_name];
        }), 30);
        var xScale = d3.scaleLinear().domain([_min, _max]).range([0, width$3]);

        axis.transition().duration(125).call(d3.axisBottom(xScale));

        var bubbles = g.selectAll('.bubble').data(data, function (d) {
          return d.id;
        });

        bubbles.transition().duration(125).attrs(function (d) {
          var x_value = xScale(d[ratio_name]);
          if (x_value > width$3) x_value = width$3 + 200;else if (x_value < 0) x_value = -200;
          return {
            cx: x_value,
            cy: 10,
            r: 7.5
            // r: prop_sizer.scale(d[num_name]),
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || color_countries,
            'fill-opacity': d.id === app.current_config.my_region ? 1 : app.colors[d.id] ? 0.7 : 0.1,
            stroke: 'darkgray',
            'stroke-width': 0.75,
            'stroke-opacity': 0.75
          };
        });

        bubbles.enter().insert('circle').styles(function (d) {
          return {
            fill: app.colors[d.id] || color_countries,
            'fill-opacity': d.id === app.current_config.my_region ? 1 : app.colors[d.id] ? 0.7 : 0.1,
            stroke: 'darkgray',
            'stroke-width': 0.75,
            'stroke-opacity': 0.75
          };
        }).transition().duration(125).attrs(function (d) {
          var x_value = xScale(d[ratio_name]);
          if (x_value > width$3) x_value = width$3 + 200;else if (x_value < 0) x_value = -200;
          return {
            id: d.id,
            class: 'bubble',
            cx: x_value,
            cy: 10,
            r: 7.5
            // r: prop_sizer.scale(d[num_name]),
          };
        });

        bubbles.exit().transition().duration(125).remove();
        height_to_use += offset;
      };

      for (var i = 0; i < nb_variables; i++) {
        _loop(i);
      }
      setTimeout(function () {
        _this3.makeTooltips();
      }, 125);
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, this.ratios, 'array'), calcPopCompletudeSubset(app, this.ratios));
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var _id = d.id;
        if (_id === app.current_config.my_region) {
          return color_highlight;
        } else if (_this4.current_ids.indexOf(_id) > -1) {
          if (app.colors[_id]) return color_default_dissim;
          return color_countries;
        }
        return color_disabled;
      });
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var _this5 = this;

      var to_display = false;
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:
        var id_to_remove = this.highlight_selection.map(function (ft, i) {
          return ft.id === id ? i : null;
        }).filter(function (ft) {
          return ft;
        })[0];
        this.highlight_selection.splice(id_to_remove, 1);
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        app.colors[id] = color_default_dissim;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_default_dissim);
        // Add the clicked feature on the colored selection on the chart:
        // eslint-disable-next-line no-restricted-properties
        var global_dist = math_sqrt(this.ratios.map(function (v) {
          return 'dist_' + v;
        }).map(function (v) {
          return Math.pow(+d.properties[v], 2);
        }).reduce(function (a, b) {
          return a + b;
        }));
        var obj = {
          id: id,
          dist: global_dist
        };
        this.ratios.forEach(function (v) {
          obj[v] = +d.properties[v];
        });
        this.highlight_selection.push(obj);
        to_display = true;
      }
      this.highlight_selection.sort(function (a, b) {
        return a.dist - b.dist;
      });
      this.removeLines();
      this.update();
      if (to_display) setTimeout(function () {
        _this5.displayLine(id);
      }, 150);
    }
  }, {
    key: 'makeTooltips',
    value: function makeTooltips() {
      var self = this;
      this.draw_group.selectAll('g.grp_var').selectAll('circle').on('mouseover', function () {
        svg_bar$3.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar$3.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar$3.select('.tooltip');
        var ratio_n = this.parentElement.id;
        var num_n = this.parentElement.getAttribute('num');
        var ty = +this.parentElement.getAttribute('transform').split('translate(0, ')[1].split(')')[0];
        tooltip.select('rect').attrs({ width: 0, height: 0 });
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('Ratio: ' + Math.round(d[ratio_n] * 10) / 10);
        tooltip.select('text.value_feature2').text('Stock: ' + Math.round(d[num_n] * 10) / 10);
        var b = tooltip.node().getBoundingClientRect();
        tooltip.select('rect').attrs({
          width: b.width + 20,
          height: b.height + 7.5
        });
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 + ty] + ')');
      }).on('click', function (d) {
        if (this.style.fill !== color_countries) self.displayLine(d.id);
      });
    }
  }, {
    key: 'displayLine',
    value: function displayLine(id_region) {
      if (this.ratios.length === 1) return;
      var coords = [];
      svg_bar$3.selectAll('.grp_var').selectAll('#' + id_region + '.bubble').each(function () {
        var ty = +this.parentElement.getAttribute('transform').split('translate(0, ')[1].replace(')', '');
        coords.push([this.cx.baseVal.value, this.cy.baseVal.value + ty]);
      });

      var l = this.draw_group.append('path').datum(coords).attrs({
        class: 'regio_line',
        fill: 'none',
        stroke: 'steelblue',
        'stroke-linejoin': 'round',
        'stroke-linecap': 'round',
        'stroke-width': 1.5,
        d: d3.line().x(function (_d) {
          return _d[0];
        }).y(function (_d) {
          return _d[1];
        })
      });
      setTimeout(function () {
        l.remove();
      }, 5000);
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      var _this6 = this;

      this.removeLines();
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.map_elem.updateLegend();
        this.my_region = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        });
        this.data.forEach(function (ft) {
          _this6.ratios.forEach(function (v) {
            // eslint-disable-next-line no-param-reassign
            ft['dist_' + v] = math_abs(+ft[v] - +_this6.my_region[v]);
          });
        });
        this.updateTableStat();
        this.update();
        this.updateMapRegio();
        // this.applySelection(this.highlight_selection.length);
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this7 = this;

      this.removeLines();
      this.map_elem.updateLegend();
      this.ratios = app.current_config.ratio;
      this.nums = app.current_config.num;
      this.data = app.current_data.filter(function (ft) {
        return _this7.ratios.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      this.my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      this.data.forEach(function (ft) {
        _this7.ratios.forEach(function (v) {
          // eslint-disable-next-line no-param-reassign
          ft['dist_' + v] = math_abs(+ft[v] - +_this7.my_region[v]);
        });
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      var temp = this.highlight_selection.length;
      this.highlight_selection = [];
      this.updateTableStat();
      this.updateCompletude();
      this.applySelection(temp);
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this8 = this;

      this.removeLines();
      this.ratios = app.current_config.ratio.slice();
      this.nums = app.current_config.num.slice();
      this.data = app.current_data.filter(function (ft) {
        return _this8.ratios.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      this.my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      this.data.forEach(function (ft) {
        _this8.ratios.forEach(function (v) {
          // eslint-disable-next-line no-param-reassign
          ft['dist_' + v] = math_abs(+ft[v] - +_this8.my_region[v]);
        });
      });
      this.highlight_selection = this.highlight_selection.map(function (d) {
        var obj = Object.assign(d, {});
        var ft = _this8.data.find(function (elem) {
          return elem.id === obj.id;
        });
        if (!ft) return undefined;
        _this8.ratios.forEach(function (v) {
          obj[v] = +ft[v];
          obj['dist_' + v] = +ft['dist_' + v];
        });
        return obj;
      }).filter(function (d) {
        return !!d;
      });
      // And use it immediatly:
      this.updateTableStat();
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this9 = this;

      this.removeLines();
      this.ratios = app.current_config.ratio.slice();
      this.nums = app.current_config.num.slice();
      this.data = app.current_data.filter(function (ft) {
        return _this9.ratios.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      this.my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });

      this.draw_group.select('g#' + code_variable).remove();
      // And use it immediatly:
      this.updateTableStat();
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        // self.map_elem.removeRectBrush();
        var value = +this.value;
        if (value < 1) {
          this.value = 1;
          return;
        }
        self.applySelection(value);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);
    }
  }, {
    key: 'removeLines',
    value: function removeLines() {
      this.draw_group.selectAll('.regio_line').remove();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.table_stats.remove();
      this.table_stats = null;
      this.completude.remove();
      this.completude = null;
      svg_bar$3.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.map_elem.displayLegend(2);
      this.applySelection(5);
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this10 = this;

      var ratios = this.ratios;
      var all_values = ratios.map(function (v) {
        return _this10.data.map(function (d) {
          return +d[v];
        });
      });
      var my_region = this.my_region;
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this10.ratios[i],
          Variable: _this10.ratios[i],
          'Ma rÃ©gion': my_region[_this10.ratios[i]]
        };
      });
      return features;
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return Similarity1plus;
}();

// import debug from 'debug';
exports.variables_info = void 0;

var study_zones = [{ id: 'no_filter', name: 'UE28' }, { id: 'filter_country', name: 'Filtre national (France)' },
// { id: 'filter_param2', name: 'Espace de comparaison nÂ°2' },
{ id: 'filter_dist', name: 'RÃ©gion dans un rayon de ' }];

var territorial_mesh = [{ id: 'NUTS1', name: 'NUTS1' }, { id: 'NUTS_decision', name: 'NUTS1/2 (niveau de dÃ©cision)' }];

var app = {
  // A mapping id -> color, containing the color to use for each
  // feature not using the default color or the disabled color
  colors: {},
  // The filtered dataset (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) selected on the left menu:
  current_data: [],
  // The full dataset provided (containing all the features at any level in one table)
  // Row without data are expected to be empty or to contain the "NA" string.
  full_dataset: [],
  // The ids of the current feature in use (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) used in the current chart; filtered
  // to not contain feature with empty ratio values within the ratios in use).
  current_ids: []
};

function setDefaultConfig() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  // }, level = 'NUTS1') {
  app.current_config = {
    // The name of the field of the dataset containing the ID of each feature:
    id_field: 'geo',
    // The name of the field of the dataset containing the name of each feature:
    name_field: 'Nom',
    // The name of the field of the dataset containing the population of each feature:
    pop_field: 'POP_AGE_T_2016',
    // The name of the field of the geojson layer containing the ID of each feature
    // (these values should match with the values of the "id_field" in the
    // tabular dataset)
    id_field_geom: 'id',
    num: ['CHOM_1574_2016'],
    denum: ['ACT_1574_2016'],
    ratio: [variable],
    ratio_pretty_name: ['Taux de chÃ´mage (15-74 ans) (2016)'],
    ratio_unit: ['%'],
    // The level currently in use:
    current_level: 'NUTS1',
    // The ID of the region currently in use:
    my_region: code,
    // The name of the region currently in use:
    my_region_pretty_name: app.feature_names[code],
    // How many ratio on the current chart:
    nb_var: 1
  };
  app.colors[app.current_config.my_region] = color_highlight;
}

function setDefaultConfigMenu() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NUTS1';

  document.querySelector('.target_region.square[value="' + code + '"]').classList.add('checked');
  document.querySelector('.target_variable.small_square[value="' + variable + '"]').classList.add('checked');
  document.querySelector('.filter_v.square[filter-value="no_filter"]').classList.add('checked');
  document.querySelector('.territ_level.square[value="' + level + '"]').classList.add('checked');
}

function resetColors() {
  app.colors = {};
  // for (let i = 0, len_i = current_ids.length; i < len_i; i++) {
  //   app.colors[current_ids[i]] = color_countries;
  // }
  app.colors[app.current_config.my_region] = color_highlight;
}

/**
* Function to update the availables ratios in the left menu (after changing region)
* If a selected variable is not available anymore it will be deselected.
* If there selected variable (all the previously selected variables are unavailable for this region)
* the first variable on the menu will be selected.
* If the new number of selected feature is inferior to the number of variables on the current
* chart, a new chart (suitable for only 1 variable) will be selected.
*
*
* @param {String} my_region - The ID of the newly selected region.
* @return {Number} - The new number of selected ratios.
*
*/
function updateAvailableRatios(my_region) {
  var data_my_feature = app.full_dataset.filter(function (ft) {
    return ft[app.current_config.id_field] === my_region;
  })[0];
  var menu = document.querySelector('#menu');
  var lines = menu.querySelectorAll('.target_variable');
  for (var i = 0, nb_lines = lines.length; i < nb_lines; i++) {
    var code_variable = lines[i].getAttribute('value');
    if (data_my_feature[code_variable] !== undefined && data_my_feature[code_variable] !== 'NA') {
      lines[i].classList.remove('disabled');
      lines[i].nextSibling.classList.remove('disabled');
    } else {
      lines[i].classList.remove('checked');
      lines[i].classList.add('disabled');
      lines[i].nextSibling.classList.add('disabled');
    }
  }
  var new_var = menu.querySelectorAll('.target_variable.checked');
  if (new_var.length !== app.current_config.ratio.length) {
    var new_var_names = void 0;
    if (new_var.length === 0) {
      var name = selectFirstAvailableVar();
      new_var_names = [name];
    } else {
      new_var_names = Array.prototype.slice.call(new_var).map(function (elem) {
        return elem.getAttribute('value');
      });
    }
    resetVariables(app, new_var_names);
  }
  return new_var.length;
}

/**
*
*
*
*
*/
function updateAvailableCharts(nb_var) {
  if (nb_var === 1) {
    // Allow all kind of vizu with 1 variable:
    d3.selectAll('.chart_t1').each(function () {
      this.classList.remove('disabled');
    });
    d3.selectAll('.chart_t2, .chart_t3').each(function () {
      this.classList.add('disabled');
    });
  } else if (nb_var === 2) {
    // Allow all kind of vizu with 2 variables:
    d3.selectAll('.chart_t1, .chart_t2').each(function () {
      this.classList.remove('disabled');
    });
    d3.selectAll('.chart_t3').each(function () {
      this.classList.add('disabled');
    });
  } else if (nb_var > 2) {
    // Allow all kind of vizu with 3 variables:
    d3.selectAll('.chart_t1, .chart_t2, .chart_t3').each(function () {
      this.classList.remove('disabled');
    });
  }
}

/**
* Create handlers for user event on the left menu and on the map for charts only
* allowing to use 1 variable.
*
* @param {Object} chart - The chart object.
* @param {Object} map_elem - The map object.
* @return {void}
*
*/
function bindUI_chart(chart, map_elem) {
  // User change the study zone:
  d3.selectAll('span.filter_v').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      if (filter_type === 'filter_dist') {
        var input_elem = document.getElementById('dist_filter');
        input_elem.removeAttribute('disabled');
        var dist = +input_elem.value;
        var ids = map_elem.getUnitsWithin(dist);
        applyFilter(app, ids);
      } else {
        document.getElementById('dist_filter').setAttribute('disabled', 'disabled');
        applyFilter(app, filter_type);
      }
      // makeTable(app.current_data, app.current_config);
      chart.changeStudyZone();
      chart.updateCompletude();
    }
  });

  d3.select('#dist_filter').on('change, keyup', function () {
    var ids = map_elem.getUnitsWithin(+this.value);
    applyFilter(app, ids);
    // makeTable(app.current_data, app.current_config);
    chart.changeStudyZone();
    chart.updateCompletude();
  });

  // User change the targeted region:
  d3.selectAll('span.target_region').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      var id_region = this.getAttribute('value');
      var old_nb_var = app.current_config.ratio.length;
      changeRegion(app, id_region, map_elem);
      // Update the availables ratio on the left menu
      // (this may change the current selected ratio(s) as some variables are
      // not available for some features) and fetch the number of selected
      // variables after that:
      var new_nb_var = updateAvailableRatios(id_region);
      updateAvailableCharts(new_nb_var);
      if (new_nb_var >= app.current_config.nb_var) {
        if (old_nb_var === new_nb_var) {
          chart.updateChangeRegion();
        } else {
          d3.select('span.type_chart.selected').dispatch('click');
          alertify.warning('Une variable prÃ©cÃ©demment sÃ©lectionnÃ©e n\'est pas disponible pour cette rÃ©gion.');
        }
      } else {
        // If there fewer selected variables than requested by the current chart,
        // redraw the first (default) kind of chart:
        d3.select('span.chart_t1[value="BarChart1"]').dispatch('click');
        alertify.warning('Des variables sÃ©lectionnÃ©es sont indisponibles pour cette rÃ©gion. Un changement de reprÃ©sentation est nÃ©cessaire.');
      }
    }
  });

  // User click on the name of a group of variables
  // to expand or collapse its content:
  d3.selectAll('.name_group_var').on('click', function () {
    var group_var = this.nextSibling;
    if (group_var.style.display === 'none') {
      group_var.style.display = null;
    } else {
      group_var.style.display = 'none';
    }
  });

  // User click to add/remove a variable from the comparison:
  d3.selectAll('span.target_variable').on('click', function () {
    if (this.classList.contains('disabled')) return;
    var nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
      return !!elem.classList.contains('checked');
    }).length;
    // Select a new variable and trigger the appropriate changes on the current chart:
    if (!this.classList.contains('checked')) {
      // We don't want the user to be able to select more than
      // MAX_VARIABLES (default = 7) variables simultaneously:
      if (nb_var >= MAX_VARIABLES) {
        alertify.warning('Le nombre maximal de variables sÃ©lectionnÃ©es est atteint.');
        return;
      }
      this.classList.add('checked');
      var code_variable = this.getAttribute('value');
      var name_variable = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      }).name;
      addVariable(app, code_variable);
      // makeTable(app.current_data, app.current_config);
      chart.addVariable(code_variable, name_variable);
      nb_var += 1;
    } else {
      // Remove a variable from the selection:
      nb_var -= 1;
      // We don't want to let the user remove the variable if
      // it's the only one selected or if the currently displayed
      // chart need a minimum number of variables:
      if (nb_var < app.current_config.nb_var) {
        return;
      }
      var _code_variable = this.getAttribute('value');
      this.classList.remove('checked');
      removeVariable(app, _code_variable);
      chart.removeVariable(_code_variable);
      // makeTable(app.current_data, app.current_config);
    }
    // Update the top menu to display available charts according to the current
    // number of available variables:
    updateAvailableCharts(nb_var);
  });

  d3.selectAll('span.territ_level').on('click', function () {
    if (!this.classList.contains('checked')) {
      // Reset the study zone :
      d3.select('span.filter_v[filter-value="no_filter"]').dispatch('click');
      d3.selectAll('span.territ_level').attr('class', 'territ_level square');
      this.classList.add('checked');
      var level_value = this.getAttribute('value');
      app.current_config.current_level = level_value;
      filterLevelVar(app);
      resetColors();
      map_elem.updateLevelRegion(level_value);
      map_elem.unbindBrushClick();
      map_elem.bindBrushClick(chart);
      chart.changeStudyZone();
    }
  });

  // Dispatch a click event on the associated checkbox when the text is clicked:
  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section > #header_map');

  header_map_section.select('#img_rect_selec').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').style('display', null);
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_zoom').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(map_elem.zoom_map);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_select').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    }
  });

  header_map_section.select('#zoom_in').on('click', zoomClick);

  header_map_section.select('#zoom_out').on('click', zoomClick);

  if (!map_elem.brush_map) {
    if (chart.handleClickMap) {
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    } else {
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  }

  // const header_table_section = d3.select('#map_section')
  //     .insert('p', 'svg')
  //     .attr('id', 'header_table')
  //     .styles({ display: 'none', margin: 'auto', 'text-align': 'right' });

  // header_table_section.append('span')
  //   .attr('class', 'button_blue')
  //   .html('CSV')
  //   .on('click', () => {
  //     const columns = Object.keys(app.current_data[0]);
  //     const content = [
  //       'id,NumÃ©rateur,DÃ©nominateur,Ratio,Rang\r\n',
  //       app.current_data.map(d => columns.map(c => d[c]).join(',')).join('\r\n'),
  //     ].join('');
  //     const elem = document.createElement('a');
  //     elem.setAttribute('href', `data:text/plain;charset=utf-8,${encodeURIComponent(content)}`);
  //     elem.setAttribute('download', 'Regioviz_export.csv');
  //     elem.style.display = 'none';
  //     document.body.appendChild(elem);
  //     elem.click();
  //     document.body.removeChild(elem);
  //   });
  bindTopButtons(chart, map_elem);
}

/**
* Function to handle click on the top menu, in order to choose
* the kind of availables representation
*
* @param {Object} chart -
* @param {Object} map_elem -
* @return {void}
*/
function bindTopButtons(chart, map_elem) {
  d3.selectAll('.type_chart').on('click', function () {
    if (this.classList.contains('disabled')) return;
    // if (this.classList.contains('selected')) return;
    document.querySelector('.type_chart.selected').classList.remove('selected');
    this.classList.add('selected');
    chart.remove();
    chart = null; // eslint-disable-line no-param-reassign
    unbindUI();
    map_elem.resetZoom();
    app.colors = {};
    var value = this.getAttribute('value');
    if (value === 'BarChart1') {
      console.log('BarChart1');
      // makeTable(app.current_data, app.current_config);
      chart = new BarChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ScatterPlot2') {
      console.log('ScatterPlot2');
      // makeTable(app.current_data, app.current_config);
      chart = new ScatterPlot2(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'RadarChart3') {
      console.log('RadarChart3');
      // makeTable(app.current_data, app.current_config);
      chart = new RadarChart3(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'Similarity1plus') {
      console.log('Similarity1plus');
      // makeTable(app.current_data, app.current_config);
      chart = new Similarity1plus(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    }
  });
}

function bindHelpMenu() {
  var help_buttons_var = document.querySelector('#menu_variables').querySelectorAll('span.i_info');
  Array.prototype.slice.call(help_buttons_var).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var code_variable = this.previousSibling.previousSibling.getAttribute('value');
      var o = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      });
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">Description de l\'indicateur</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + o.methodo.split('\n').join('<br>') + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">' + o.source + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">Date de t\xE9l\xE9chargement de la donn\xE9es : ' + o.last_update + '</p>');
      modal.open();
    };
  });

  var helps_buttons_study_zone = document.querySelector('#menu_studyzone').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_study_zone).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var filter_name = this.previousSibling.previousSibling.getAttribute('filter-value');
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">M\xE9thodologie</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + filter_name + '</p>');
      modal.open();
    };
  });

  var helps_buttons_territ_unit = document.querySelector('#menu_territ_level').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_territ_unit).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var territ_level_name = this.previousSibling.previousSibling.getAttribute('value');
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('\n        <p style="font-family: \'Signika\',sans-serif; color: #4f81bd;font-size: 1.3rem;">Titre</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + territ_level_name + '</p>');
      modal.open();
    };
  });
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA.csv').defer(d3.json, 'data/CGET_nuts_all3035.geojson').defer(d3.json, 'data/borders3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/countries-remote3035.geojson').defer(d3.json, 'data/coasts3035.geojson').defer(d3.json, 'data/coasts-remote3035.geojson').defer(d3.json, 'data/cyprus_non_espon_space3035.geojson').defer(d3.json, 'data/countries-remote-boundaries3035.geojson').defer(d3.json, 'data/frame3035.geojson').defer(d3.json, 'data/boxes3035.geojson').defer(d3.json, 'data/line3035.geojson').defer(d3.csv, 'data/indicateurs_meta.csv').awaitAll(function (error, results) {
    if (error) throw error;
    document.body.classList.remove('loading');
    document.querySelector('.spinner').remove();

    var _results = slicedToArray(results, 13),
        full_dataset = _results[0],
        nuts = _results[1],
        borders = _results[2],
        countries = _results[3],
        countries_remote = _results[4],
        coasts = _results[5],
        coasts_remote = _results[6],
        cyprus_non_espon_space = _results[7],
        countries_remote_boundaries = _results[8],
        frame = _results[9],
        boxes = _results[10],
        line = _results[11],
        metadata_indicateurs = _results[12];

    alertify.set('notifier', 'position', 'bottom-left');
    var features_menu = full_dataset.filter(function (ft) {
      return ft.geo.indexOf('FR') > -1 && +ft.level === 1;
    });
    var start_region = getRandom(features_menu.map(function (d) {
      return d.geo;
    }), 13);
    var start_variable = getRandom(['RT_CHOM_1574', 'RT_EMP_2564', 'RT_ENSSUP_2564', 'RT_REV', 'RT_VA_TERT', 'RT_PIB_HAB']);

    exports.variables_info = prepareVariablesInfo(metadata_indicateurs);
    prepare_dataset(full_dataset, app);
    setDefaultConfig(start_region, start_variable, 'NUTS1');
    prepareGeomLayerId(nuts, app.current_config.id_field_geom);
    createMenu(features_menu, exports.variables_info, study_zones, territorial_mesh);
    bindHelpMenu();
    makeTopMenu();
    makeHeaderChart();
    setDefaultConfigMenu(start_region, start_variable, 'NUTS1');
    filterLevelVar(app);
    var other_layers = new Map([['borders', borders], ['boxes', boxes], ['countries', countries], ['countries_remote', countries_remote], ['coasts', coasts], ['coasts_remote', coasts_remote], ['cyprus_non_espon_space', cyprus_non_espon_space], ['countries_remote_boundaries', countries_remote_boundaries], ['frame', frame], ['line', line], ['boxes2', boxes]]);
    var map_elem = new MapSelect(nuts, other_layers);
    var chart = new BarChart1(app.current_data);
    // makeTable(app.current_data, app.current_config);
    makeHeaderMapSection();
    makeSourceSection();
    bindUI_chart(chart, map_elem);
    map_elem.bindBrushClick(chart);
    chart.bindMap(map_elem);
  });
}

loadData();

exports.app = app;
exports.resetColors = resetColors;
exports.bindTopButtons = bindTopButtons;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
