(function (exports) {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var tingle_min = createCommonjsModule(function (module, exports) {
!function(t,o){"function"==typeof undefined&&undefined.amd?undefined(o):module.exports=o();}(commonjsGlobal,function(){function t(t){var o={onClose:null,onOpen:null,beforeOpen:null,beforeClose:null,stickyFooter:!1,footer:!1,cssClass:[],closeLabel:"Close",closeMethods:["overlay","button","escape"]};this.opts=r({},o,t),this.init();}function o(){this.modalBoxFooter&&(this.modalBoxFooter.style.width=this.modalBox.clientWidth+"px",this.modalBoxFooter.style.left=this.modalBox.offsetLeft+"px");}function e(){this.modal=document.createElement("div"),this.modal.classList.add("tingle-modal"),0!==this.opts.closeMethods.length&&this.opts.closeMethods.indexOf("overlay")!==-1||this.modal.classList.add("tingle-modal--noOverlayClose"),this.modal.style.display="none",this.opts.cssClass.forEach(function(t){"string"==typeof t&&this.modal.classList.add(t);},this),this.opts.closeMethods.indexOf("button")!==-1&&(this.modalCloseBtn=document.createElement("button"),this.modalCloseBtn.classList.add("tingle-modal__close"),this.modalCloseBtnIcon=document.createElement("span"),this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"),this.modalCloseBtnIcon.innerHTML="Ã—",this.modalCloseBtnLabel=document.createElement("span"),this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"),this.modalCloseBtnLabel.innerHTML=this.opts.closeLabel,this.modalCloseBtn.appendChild(this.modalCloseBtnIcon),this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)),this.modalBox=document.createElement("div"),this.modalBox.classList.add("tingle-modal-box"),this.modalBoxContent=document.createElement("div"),this.modalBoxContent.classList.add("tingle-modal-box__content"),this.modalBox.appendChild(this.modalBoxContent),this.opts.closeMethods.indexOf("button")!==-1&&this.modal.appendChild(this.modalCloseBtn),this.modal.appendChild(this.modalBox);}function s(){this.modalBoxFooter=document.createElement("div"),this.modalBoxFooter.classList.add("tingle-modal-box__footer"),this.modalBox.appendChild(this.modalBoxFooter);}function i(){this._events={clickCloseBtn:this.close.bind(this),clickOverlay:l.bind(this),resize:this.checkOverflow.bind(this),keyboardNav:n.bind(this)},this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.addEventListener("click",this._events.clickCloseBtn),this.modal.addEventListener("mousedown",this._events.clickOverlay),window.addEventListener("resize",this._events.resize),document.addEventListener("keydown",this._events.keyboardNav);}function n(t){this.opts.closeMethods.indexOf("escape")!==-1&&27===t.which&&this.isOpen()&&this.close();}function l(t){this.opts.closeMethods.indexOf("overlay")!==-1&&!d(t.target,"tingle-modal")&&t.clientX<this.modal.clientWidth&&this.close();}function d(t,o){for(;(t=t.parentElement)&&!t.classList.contains(o););return t}function a(){this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.removeEventListener("click",this._events.clickCloseBtn),this.modal.removeEventListener("mousedown",this._events.clickOverlay),window.removeEventListener("resize",this._events.resize),document.removeEventListener("keydown",this._events.keyboardNav);}function r(){for(var t=1;t<arguments.length;t++)for(var o in arguments[t])arguments[t].hasOwnProperty(o)&&(arguments[0][o]=arguments[t][o]);return arguments[0]}function h(){var t,o=document.createElement("tingle-test-transition"),e={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in e)if(void 0!==o.style[t])return e[t]}var c=h();return t.prototype.init=function(){this.modal||(e.call(this),i.call(this),document.body.insertBefore(this.modal,document.body.firstChild),this.opts.footer&&this.addFooter());},t.prototype.destroy=function(){null!==this.modal&&(a.call(this),this.modal.parentNode.removeChild(this.modal),this.modal=null);},t.prototype.open=function(){var t=this;"function"==typeof t.opts.beforeOpen&&t.opts.beforeOpen(),this.modal.style.removeProperty?this.modal.style.removeProperty("display"):this.modal.style.removeAttribute("display"),document.body.classList.add("tingle-enabled"),this.setStickyFooter(this.opts.stickyFooter),this.modal.classList.add("tingle-modal--visible"),c?this.modal.addEventListener(c,function o(){"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),t.modal.removeEventListener(c,o,!1);},!1):"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),this.checkOverflow();},t.prototype.isOpen=function(){return!!this.modal.classList.contains("tingle-modal--visible")},t.prototype.close=function(){if("function"==typeof this.opts.beforeClose){var t=this.opts.beforeClose.call(this);if(!t)return}document.body.classList.remove("tingle-enabled"),this.modal.classList.remove("tingle-modal--visible");var o=this;c?this.modal.addEventListener(c,function t(){o.modal.removeEventListener(c,t,!1),o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this);},!1):(o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this));},t.prototype.setContent=function(t){"string"==typeof t?this.modalBoxContent.innerHTML=t:(this.modalBoxContent.innerHTML="",this.modalBoxContent.appendChild(t));},t.prototype.getContent=function(){return this.modalBoxContent},t.prototype.addFooter=function(){s.call(this);},t.prototype.setFooterContent=function(t){this.modalBoxFooter.innerHTML=t;},t.prototype.getFooterContent=function(){return this.modalBoxFooter},t.prototype.setStickyFooter=function(t){this.isOverflow()||(t=!1),t?this.modalBox.contains(this.modalBoxFooter)&&(this.modalBox.removeChild(this.modalBoxFooter),this.modal.appendChild(this.modalBoxFooter),this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"),o.call(this),this.modalBoxContent.style["padding-bottom"]=this.modalBoxFooter.clientHeight+20+"px"):this.modalBoxFooter&&(this.modalBox.contains(this.modalBoxFooter)||(this.modal.removeChild(this.modalBoxFooter),this.modalBox.appendChild(this.modalBoxFooter),this.modalBoxFooter.style.width="auto",this.modalBoxFooter.style.left="",this.modalBoxContent.style["padding-bottom"]="",this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky")));},t.prototype.addFooterBtn=function(t,o,e){var s=document.createElement("button");return s.innerHTML=t,s.addEventListener("click",e),"string"==typeof o&&o.length&&o.split(" ").forEach(function(t){s.classList.add(t);}),this.modalBoxFooter.appendChild(s),s},t.prototype.resize=function(){console.warn("Resize is deprecated and will be removed in version 1.0");},t.prototype.isOverflow=function(){var t=window.innerHeight,o=this.modalBox.clientHeight;return o>=t},t.prototype.checkOverflow=function(){this.modal.classList.contains("tingle-modal--visible")&&(this.isOverflow()?this.modal.classList.add("tingle-modal--overflow"):this.modal.classList.remove("tingle-modal--overflow"),!this.isOverflow()&&this.opts.stickyFooter?this.setStickyFooter(!1):this.isOverflow()&&this.opts.stickyFooter&&(o.call(this),this.setStickyFooter(!0)));},{modal:t}});
});

var alertify = createCommonjsModule(function (module) {
/**
 * alertifyjs 1.11.0 http://alertifyjs.com
 * AlertifyJS is a javascript framework for developing pretty browser dialogs and notifications.
 * Copyright 2017 Mohammad Younes <Mohammad@alertifyjs.com> (http://alertifyjs.com) 
 * Licensed under GPL 3 <https://opensource.org/licenses/gpl-3.0>*/
( function ( window ) {
    'use strict';
    
    /**
     * Keys enum
     * @type {Object}
     */
    var keys = {
        ENTER: 13,
        ESC: 27,
        F1: 112,
        F12: 123,
        LEFT: 37,
        RIGHT: 39
    };
    /**
     * Default options 
     * @type {Object}
     */
    var defaults = {
        autoReset:true,
        basic:false,
        closable:true,
        closableByDimmer:true,
        frameless:false,
        maintainFocus:true, //global default not per instance, applies to all dialogs
        maximizable:true,
        modal:true,
        movable:true,
        moveBounded:false,
        overflow:true,
        padding: true,
        pinnable:true,
        pinned:true,
        preventBodyShift:false, //global default not per instance, applies to all dialogs
        resizable:true,
        startMaximized:false,
        transition:'pulse',
        notifier:{
            delay:5,
            position:'bottom-right',
            closeButton:false
        },
        glossary:{
            title:'AlertifyJS',
            ok: 'OK',
            cancel: 'Cancel',
            acccpt: 'Accept',
            deny: 'Deny',
            confirm: 'Confirm',
            decline: 'Decline',
            close: 'Close',
            maximize: 'Maximize',
            restore: 'Restore',
        },
        theme:{
            input:'ajs-input',
            ok:'ajs-ok',
            cancel:'ajs-cancel',
        }
    };
    
    //holds open dialogs instances
    var openDialogs = [];

    /**
     * [Helper]  Adds the specified class(es) to the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be added to the class attribute of the element.
     * 
     * @return {undefined}
     */
    function addClass(element,classNames){
        element.className += ' ' + classNames;
    }
    
    /**
     * [Helper]  Removes the specified class(es) from the element.
     *
     * @element {node}      The element
     * @className {string}  One or more space-separated classes to be removed from the class attribute of the element.
     * 
     * @return {undefined}
     */
    function removeClass(element, classNames) {
        var original = element.className.split(' ');
        var toBeRemoved = classNames.split(' ');
        for (var x = 0; x < toBeRemoved.length; x += 1) {
            var index = original.indexOf(toBeRemoved[x]);
            if (index > -1){
                original.splice(index,1);
            }
        }
        element.className = original.join(' ');
    }

    /**
     * [Helper]  Checks if the document is RTL
     *
     * @return {Boolean} True if the document is RTL, false otherwise.
     */
    function isRightToLeft(){
        return window.getComputedStyle(document.body).direction === 'rtl';
    }
    /**
     * [Helper]  Get the document current scrollTop
     *
     * @return {Number} current document scrollTop value
     */
    function getScrollTop(){
        return ((document.documentElement && document.documentElement.scrollTop) || document.body.scrollTop);
    }

    /**
     * [Helper]  Get the document current scrollLeft
     *
     * @return {Number} current document scrollLeft value
     */
    function getScrollLeft(){
        return ((document.documentElement && document.documentElement.scrollLeft) || document.body.scrollLeft);
    }

    /**
    * Helper: clear contents
    *
    */
    function clearContents(element){
        while (element.lastChild) {
            element.removeChild(element.lastChild);
        }
    }
    /**
     * Extends a given prototype by merging properties from base into sub.
     *
     * @sub {Object} sub The prototype being overwritten.
     * @base {Object} base The prototype being written.
     *
     * @return {Object} The extended prototype.
     */
    function copy(src) {
        if(null === src){
            return src;
        }
        var cpy;
        if(Array.isArray(src)){
            cpy = [];
            for(var x=0;x<src.length;x+=1){
                cpy.push(copy(src[x]));
            }
            return cpy;
        }
      
        if(src instanceof Date){
            return new Date(src.getTime());
        }
      
        if(src instanceof RegExp){
            cpy = new RegExp(src.source);
            cpy.global = src.global;
            cpy.ignoreCase = src.ignoreCase;
            cpy.multiline = src.multiline;
            cpy.lastIndex = src.lastIndex;
            return cpy;
        }
        
        if(typeof src === 'object'){
            cpy = {};
            // copy dialog pototype over definition.
            for (var prop in src) {
                if (src.hasOwnProperty(prop)) {
                    cpy[prop] = copy(src[prop]);
                }
            }
            return cpy;
        }
        return src;
    }
    /**
      * Helper: destruct the dialog
      *
      */
    function destruct(instance, initialize){
        //delete the dom and it's references.
        var root = instance.elements.root;
        root.parentNode.removeChild(root);
        delete instance.elements;
        //copy back initial settings.
        instance.settings = copy(instance.__settings);
        //re-reference init function.
        instance.__init = initialize;
        //delete __internal variable to allow re-initialization.
        delete instance.__internal;
    }

    /**
     * Use a closure to return proper event listener method. Try to use
     * `addEventListener` by default but fallback to `attachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    var on = (function () {
        if (document.addEventListener) {
            return function (el, event, fn, useCapture) {
                el.addEventListener(event, fn, useCapture === true);
            };
        } else if (document.attachEvent) {
            return function (el, event, fn) {
                el.attachEvent('on' + event, fn);
            };
        }
    }());

    /**
     * Use a closure to return proper event listener method. Try to use
     * `removeEventListener` by default but fallback to `detachEvent` for
     * unsupported browser. The closure simply ensures that the test doesn't
     * happen every time the method is called.
     *
     * @param    {Node}     el    Node element
     * @param    {String}   event Event type
     * @param    {Function} fn    Callback of event
     * @return   {Function}
     */
    var off = (function () {
        if (document.removeEventListener) {
            return function (el, event, fn, useCapture) {
                el.removeEventListener(event, fn, useCapture === true);
            };
        } else if (document.detachEvent) {
            return function (el, event, fn) {
                el.detachEvent('on' + event, fn);
            };
        }
    }());

    /**
     * Prevent default event from firing
     *
     * @param  {Event} event Event object
     * @return {undefined}

    function prevent ( event ) {
        if ( event ) {
            if ( event.preventDefault ) {
                event.preventDefault();
            } else {
                event.returnValue = false;
            }
        }
    }
    */
    var transition = (function () {
        var t, type;
        var supported = false;
        var transitions = {
            'animation'        : 'animationend',
            'OAnimation'       : 'oAnimationEnd oanimationend',
            'msAnimation'      : 'MSAnimationEnd',
            'MozAnimation'     : 'animationend',
            'WebkitAnimation'  : 'webkitAnimationEnd'
        };

        for (t in transitions) {
            if (document.documentElement.style[t] !== undefined) {
                type = transitions[t];
                supported = true;
                break;
            }
        }

        return {
            type: type,
            supported: supported
        };
    }());

    /**
    * Creates event handler delegate that sends the instance as last argument.
    * 
    * @return {Function}    a function wrapper which sends the instance as last argument.
    */
    function delegate(context, method) {
        return function () {
            if (arguments.length > 0) {
                var args = [];
                for (var x = 0; x < arguments.length; x += 1) {
                    args.push(arguments[x]);
                }
                args.push(context);
                return method.apply(context, args);
            }
            return method.apply(context, [null, context]);
        };
    }
    /**
    * Helper for creating a dialog close event.
    * 
    * @return {object}
    */
    function createCloseEvent(index, button) {
        return {
            index: index,
            button: button,
            cancel: false
        };
    }
    /**
    * Helper for dispatching events.
    *
    * @param  {string} evenType The type of the event to disptach.
    * @param  {object} instance The dialog instance disptaching the event.
    *
    * @return   {any}   The result of the invoked function.
    */
    function dispatchEvent(eventType, instance) {
        if ( typeof instance.get(eventType) === 'function' ) {
            return instance.get(eventType).call(instance);
        }
    }


    /**
     * Super class for all dialogs
     *
     * @return {Object}		base dialog prototype
     */
    var dialog = (function () {
        var //holds the list of used keys.
            usedKeys = [],
            //dummy variable, used to trigger dom reflow.
            reflow = null,
            //condition for detecting safari
            isSafari = window.navigator.userAgent.indexOf('Safari') > -1 && window.navigator.userAgent.indexOf('Chrome') < 0,
            //dialog building blocks
            templates = {
                dimmer:'<div class="ajs-dimmer"></div>',
                /*tab index required to fire click event before body focus*/
                modal: '<div class="ajs-modal" tabindex="0"></div>',
                dialog: '<div class="ajs-dialog" tabindex="0"></div>',
                reset: '<button class="ajs-reset"></button>',
                commands: '<div class="ajs-commands"><button class="ajs-pin"></button><button class="ajs-maximize"></button><button class="ajs-close"></button></div>',
                header: '<div class="ajs-header"></div>',
                body: '<div class="ajs-body"></div>',
                content: '<div class="ajs-content"></div>',
                footer: '<div class="ajs-footer"></div>',
                buttons: { primary: '<div class="ajs-primary ajs-buttons"></div>', auxiliary: '<div class="ajs-auxiliary ajs-buttons"></div>' },
                button: '<button class="ajs-button"></button>',
                resizeHandle: '<div class="ajs-handle"></div>',
            },
            //common class names
            classes = {
                animationIn: 'ajs-in',
                animationOut: 'ajs-out',
                base: 'alertify',
                basic:'ajs-basic',
                capture: 'ajs-capture',
                closable:'ajs-closable',
                fixed: 'ajs-fixed',
                frameless:'ajs-frameless',
                hidden: 'ajs-hidden',
                maximize: 'ajs-maximize',
                maximized: 'ajs-maximized',
                maximizable:'ajs-maximizable',
                modeless: 'ajs-modeless',
                movable: 'ajs-movable',
                noSelection: 'ajs-no-selection',
                noOverflow: 'ajs-no-overflow',
                noPadding:'ajs-no-padding',
                pin:'ajs-pin',
                pinnable:'ajs-pinnable',
                prefix: 'ajs-',
                resizable: 'ajs-resizable',
                restore: 'ajs-restore',
                shake:'ajs-shake',
                unpinned:'ajs-unpinned',
            };

        /**
         * Helper: initializes the dialog instance
         * 
         * @return	{Number}	The total count of currently open modals.
         */
        function initialize(instance){
            
            if(!instance.__internal){

                //no need to expose init after this.
                delete instance.__init;
              
                //keep a copy of initial dialog settings
                if(!instance.__settings){
                    instance.__settings = copy(instance.settings);
                }
                //in case the script was included before body.
                //after first dialog gets initialized, it won't be null anymore!
                if(null === reflow){
                    // set tabindex attribute on body element this allows script to give it
                    // focus after the dialog is closed
                    document.body.setAttribute( 'tabindex', '0' );
                }

                //get dialog buttons/focus setup
                var setup;
                if(typeof instance.setup === 'function'){
                    setup = instance.setup();
                    setup.options = setup.options  || {};
                    setup.focus = setup.focus  || {};
                }else{
                    setup = {
                        buttons:[],
                        focus:{
                            element:null,
                            select:false
                        },
                        options:{
                        }
                    };
                }
                
                //initialize hooks object.
                if(typeof instance.hooks !== 'object'){
                    instance.hooks = {};
                }

                //copy buttons defintion
                var buttonsDefinition = [];
                if(Array.isArray(setup.buttons)){
                    for(var b=0;b<setup.buttons.length;b+=1){
                        var ref  = setup.buttons[b],
                            cpy = {};
                        for (var i in ref) {
                            if (ref.hasOwnProperty(i)) {
                                cpy[i] = ref[i];
                            }
                        }
                        buttonsDefinition.push(cpy);
                    }
                }

                var internal = instance.__internal = {
                    /**
                     * Flag holding the open state of the dialog
                     * 
                     * @type {Boolean}
                     */
                    isOpen:false,
                    /**
                     * Active element is the element that will receive focus after
                     * closing the dialog. It defaults as the body tag, but gets updated
                     * to the last focused element before the dialog was opened.
                     *
                     * @type {Node}
                     */
                    activeElement:document.body,
                    timerIn:undefined,
                    timerOut:undefined,
                    buttons: buttonsDefinition,
                    focus: setup.focus,
                    options: {
                        title: undefined,
                        modal: undefined,
                        basic:undefined,
                        frameless:undefined,
                        pinned: undefined,
                        movable: undefined,
                        moveBounded:undefined,
                        resizable: undefined,
                        autoReset: undefined,
                        closable: undefined,
                        closableByDimmer: undefined,
                        maximizable: undefined,
                        startMaximized: undefined,
                        pinnable: undefined,
                        transition: undefined,
                        padding:undefined,
                        overflow:undefined,
                        onshow:undefined,
                        onclosing:undefined,
                        onclose:undefined,
                        onfocus:undefined,
                        onmove:undefined,
                        onmoved:undefined,
                        onresize:undefined,
                        onresized:undefined,
                        onmaximize:undefined,
                        onmaximized:undefined,
                        onrestore:undefined,
                        onrestored:undefined
                    },
                    resetHandler:undefined,
                    beginMoveHandler:undefined,
                    beginResizeHandler:undefined,
                    bringToFrontHandler:undefined,
                    modalClickHandler:undefined,
                    buttonsClickHandler:undefined,
                    commandsClickHandler:undefined,
                    transitionInHandler:undefined,
                    transitionOutHandler:undefined,
                    destroy:undefined
                };

                var elements = {};
                //root node
                elements.root = document.createElement('div');
                
                elements.root.className = classes.base + ' ' + classes.hidden + ' ';

                elements.root.innerHTML = templates.dimmer + templates.modal;
                
                //dimmer
                elements.dimmer = elements.root.firstChild;

                //dialog
                elements.modal = elements.root.lastChild;
                elements.modal.innerHTML = templates.dialog;
                elements.dialog = elements.modal.firstChild;
                elements.dialog.innerHTML = templates.reset + templates.commands + templates.header + templates.body + templates.footer + templates.resizeHandle + templates.reset;

                //reset links
                elements.reset = [];
                elements.reset.push(elements.dialog.firstChild);
                elements.reset.push(elements.dialog.lastChild);
                
                //commands
                elements.commands = {};
                elements.commands.container = elements.reset[0].nextSibling;
                elements.commands.pin = elements.commands.container.firstChild;
                elements.commands.maximize = elements.commands.pin.nextSibling;
                elements.commands.close = elements.commands.maximize.nextSibling;
                
                //header
                elements.header = elements.commands.container.nextSibling;

                //body
                elements.body = elements.header.nextSibling;
                elements.body.innerHTML = templates.content;
                elements.content = elements.body.firstChild;

                //footer
                elements.footer = elements.body.nextSibling;
                elements.footer.innerHTML = templates.buttons.auxiliary + templates.buttons.primary;
                
                //resize handle
                elements.resizeHandle = elements.footer.nextSibling;

                //buttons
                elements.buttons = {};
                elements.buttons.auxiliary = elements.footer.firstChild;
                elements.buttons.primary = elements.buttons.auxiliary.nextSibling;
                elements.buttons.primary.innerHTML = templates.button;
                elements.buttonTemplate = elements.buttons.primary.firstChild;
                //remove button template
                elements.buttons.primary.removeChild(elements.buttonTemplate);
                               
                for(var x=0; x < instance.__internal.buttons.length; x+=1) {
                    var button = instance.__internal.buttons[x];
                    
                    // add to the list of used keys.
                    if(usedKeys.indexOf(button.key) < 0){
                        usedKeys.push(button.key);
                    }

                    button.element = elements.buttonTemplate.cloneNode();
                    button.element.innerHTML = button.text;
                    if(typeof button.className === 'string' &&  button.className !== ''){
                        addClass(button.element, button.className);
                    }
                    for(var key in button.attrs){
                        if(key !== 'className' && button.attrs.hasOwnProperty(key)){
                            button.element.setAttribute(key, button.attrs[key]);
                        }
                    }
                    if(button.scope === 'auxiliary'){
                        elements.buttons.auxiliary.appendChild(button.element);
                    }else{
                        elements.buttons.primary.appendChild(button.element);
                    }
                }
                //make elements pubic
                instance.elements = elements;
                
                //save event handlers delegates
                internal.resetHandler = delegate(instance, onReset);
                internal.beginMoveHandler = delegate(instance, beginMove);
                internal.beginResizeHandler = delegate(instance, beginResize);
                internal.bringToFrontHandler = delegate(instance, bringToFront);
                internal.modalClickHandler = delegate(instance, modalClickHandler);
                internal.buttonsClickHandler = delegate(instance, buttonsClickHandler);
                internal.commandsClickHandler = delegate(instance, commandsClickHandler);
                internal.transitionInHandler = delegate(instance, handleTransitionInEvent);
                internal.transitionOutHandler = delegate(instance, handleTransitionOutEvent);

                //settings
                for(var opKey in internal.options){
                    if(setup.options[opKey] !== undefined){
                        // if found in user options
                        instance.set(opKey, setup.options[opKey]);
                    }else if(alertify.defaults.hasOwnProperty(opKey)) {
                        // else if found in defaults options
                        instance.set(opKey, alertify.defaults[opKey]);
                    }else if(opKey === 'title' ) {
                        // else if title key, use alertify.defaults.glossary
                        instance.set(opKey, alertify.defaults.glossary[opKey]);
                    }
                }

                // allow dom customization
                if(typeof instance.build === 'function'){
                    instance.build();
                }
            }
            
            //add to the end of the DOM tree.
            document.body.appendChild(instance.elements.root);
        }

        /**
         * Helper: maintains scroll position
         *
         */
        var scrollX, scrollY;
        function saveScrollPosition(){
            scrollX = getScrollLeft();
            scrollY = getScrollTop();
        }
        function restoreScrollPosition(){
            window.scrollTo(scrollX, scrollY);
        }

        /**
         * Helper: adds/removes no-overflow class from body
         *
         */
        function ensureNoOverflow(){
            var requiresNoOverflow = 0;
            for(var x=0;x<openDialogs.length;x+=1){
                var instance = openDialogs[x];
                if(instance.isModal() || instance.isMaximized()){
                    requiresNoOverflow+=1;
                }
            }
            if(requiresNoOverflow === 0 && document.body.className.indexOf(classes.noOverflow) >= 0){
                //last open modal or last maximized one
                removeClass(document.body, classes.noOverflow);
                preventBodyShift(false);
            }else if(requiresNoOverflow > 0 && document.body.className.indexOf(classes.noOverflow) < 0){
                //first open modal or first maximized one
                preventBodyShift(true);
                addClass(document.body, classes.noOverflow);
            }
        }
        var top = '', topScroll = 0;
        /**
         * Helper: prevents body shift.
         *
         */
        function preventBodyShift(add){
            if(alertify.defaults.preventBodyShift && document.documentElement.scrollHeight > document.documentElement.clientHeight){
                if(add ){//&& openDialogs[openDialogs.length-1].elements.dialog.clientHeight <= document.documentElement.clientHeight){
                    topScroll = scrollY;
                    top = window.getComputedStyle(document.body).top;
                    addClass(document.body, classes.fixed);
                    document.body.style.top = -scrollY + 'px';
                } else {
                    scrollY = topScroll;
                    document.body.style.top = top;
                    removeClass(document.body, classes.fixed);
                    restoreScrollPosition();
                }
            }
        }
		
        /**
         * Sets the name of the transition used to show/hide the dialog
         * 
         * @param {Object} instance The dilog instance.
         *
         */
        function updateTransition(instance, value, oldValue){
            if(typeof oldValue === 'string'){
                removeClass(instance.elements.root,classes.prefix +  oldValue);
            }
            addClass(instance.elements.root, classes.prefix + value);
            reflow = instance.elements.root.offsetWidth;
        }
		
        /**
         * Toggles the dialog display mode
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateDisplayMode(instance){
            if(instance.get('modal')){

                //make modal
                removeClass(instance.elements.root, classes.modeless);

                //only if open
                if(instance.isOpen()){
                    unbindModelessEvents(instance);

                    //in case a pinned modless dialog was made modal while open.
                    updateAbsPositionFix(instance);

                    ensureNoOverflow();
                }
            }else{
                //make modelss
                addClass(instance.elements.root, classes.modeless);

                //only if open
                if(instance.isOpen()){
                    bindModelessEvents(instance);

                    //in case pin/unpin was called while a modal is open
                    updateAbsPositionFix(instance);

                    ensureNoOverflow();
                }
            }
        }

        /**
         * Toggles the dialog basic view mode 
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateBasicMode(instance){
            if (instance.get('basic')) {
                // add class
                addClass(instance.elements.root, classes.basic);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.basic);
            }
        }

        /**
         * Toggles the dialog frameless view mode 
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function updateFramelessMode(instance){
            if (instance.get('frameless')) {
                // add class
                addClass(instance.elements.root, classes.frameless);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.frameless);
            }
        }
		
        /**
         * Helper: Brings the modeless dialog to front, attached to modeless dialogs.
         *
         * @param {Event} event Focus event
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bringToFront(event, instance){
            
            // Do not bring to front if preceeded by an open modal
            var index = openDialogs.indexOf(instance);
            for(var x=index+1;x<openDialogs.length;x+=1){
                if(openDialogs[x].isModal()){
                    return;
                }
            }
			
            // Bring to front by making it the last child.
            if(document.body.lastChild !== instance.elements.root){
                document.body.appendChild(instance.elements.root);
                //also make sure its at the end of the list
                openDialogs.splice(openDialogs.indexOf(instance),1);
                openDialogs.push(instance);
                setFocus(instance);
            }
			
            return false;
        }
		
        /**
         * Helper: reflects dialogs options updates
         *
         * @param {Object} instance The dilog instance.
         * @param {String} option The updated option name.
         *
         * @return	{undefined}	
         */
        function optionUpdated(instance, option, oldValue, newValue){
            switch(option){
            case 'title':
                instance.setHeader(newValue);
                break;
            case 'modal':
                updateDisplayMode(instance);
                break;
            case 'basic':
                updateBasicMode(instance);
                break;
            case 'frameless':
                updateFramelessMode(instance);
                break;
            case 'pinned':
                updatePinned(instance);
                break;
            case 'closable':
                updateClosable(instance);
                break;
            case 'maximizable':
                updateMaximizable(instance);
                break;
            case 'pinnable':
                updatePinnable(instance);
                break;
            case 'movable':
                updateMovable(instance);
                break;
            case 'resizable':
                updateResizable(instance);
                break;
            case 'transition':
                updateTransition(instance,newValue, oldValue);
                break;
            case 'padding':
                if(newValue){
                    removeClass(instance.elements.root, classes.noPadding);
                }else if(instance.elements.root.className.indexOf(classes.noPadding) < 0){
                    addClass(instance.elements.root, classes.noPadding);
                }
                break;
            case 'overflow':
                if(newValue){
                    removeClass(instance.elements.root, classes.noOverflow);
                }else if(instance.elements.root.className.indexOf(classes.noOverflow) < 0){
                    addClass(instance.elements.root, classes.noOverflow);
                }
                break;
            case 'transition':
                updateTransition(instance,newValue, oldValue);
                break;
            }

            // internal on option updated event
            if(typeof instance.hooks.onupdate === 'function'){
                instance.hooks.onupdate.call(instance, option, oldValue, newValue);
            }
        }
		
        /**
         * Helper: reflects dialogs options updates
         *
         * @param {Object} instance The dilog instance.
         * @param {Object} obj The object to set/get a value on/from.
         * @param {Function} callback The callback function to call if the key was found.
         * @param {String|Object} key A string specifying a propery name or a collection of key value pairs.
         * @param {Object} value Optional, the value associated with the key (in case it was a string).
         * @param {String} option The updated option name.
         *
         * @return	{Object} result object 
         *	The result objects has an 'op' property, indicating of this is a SET or GET operation.
         *		GET: 
         *		- found: a flag indicating if the key was found or not.
         *		- value: the property value.
         *		SET:
         *		- items: a list of key value pairs of the properties being set.
         *				each contains:
         *					- found: a flag indicating if the key was found or not.
         *					- key: the property key.
         *					- value: the property value.
         */
        function update(instance, obj, callback, key, value){
            var result = {op:undefined, items: [] };
            if(typeof value === 'undefined' && typeof key === 'string') {
                //get
                result.op = 'get';
                if(obj.hasOwnProperty(key)){
                    result.found = true;
                    result.value = obj[key];
                }else{
                    result.found = false;
                    result.value = undefined;
                }
            }
            else
            {
                var old;
                //set
                result.op = 'set';
                if(typeof key === 'object'){
                    //set multiple
                    var args = key;
                    for (var prop in args) {
                        if (obj.hasOwnProperty(prop)) {
                            if(obj[prop] !== args[prop]){
                                old = obj[prop];
                                obj[prop] = args[prop];
                                callback.call(instance,prop, old, args[prop]);
                            }
                            result.items.push({ 'key': prop, 'value': args[prop], 'found':true});
                        }else{
                            result.items.push({ 'key': prop, 'value': args[prop], 'found':false});
                        }
                    }
                } else if (typeof key === 'string'){
                    //set single
                    if (obj.hasOwnProperty(key)) {
                        if(obj[key] !== value){
                            old  = obj[key];
                            obj[key] = value;
                            callback.call(instance,key, old, value);
                        }
                        result.items.push({'key': key, 'value': value , 'found':true});

                    }else{
                        result.items.push({'key': key, 'value': value , 'found':false});
                    }
                } else {
                    //invalid params
                    throw new Error('args must be a string or object');
                }
            }
            return result;
        }


        /**
         * Triggers a close event.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function triggerClose(instance) {
            var found;
            triggerCallback(instance, function (button) {
                return found = (button.invokeOnClose === true);
            });
            //none of the buttons registered as onclose callback
            //close the dialog
            if (!found && instance.isOpen()) {
                instance.close();
            }
        }

        /**
         * Dialogs commands event handler, attached to the dialog commands element.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function commandsClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            switch (target) {
            case instance.elements.commands.pin:
                if (!instance.isPinned()) {
                    pin(instance);
                } else {
                    unpin(instance);
                }
                break;
            case instance.elements.commands.maximize:
                if (!instance.isMaximized()) {
                    maximize(instance);
                } else {
                    restore(instance);
                }
                break;
            case instance.elements.commands.close:
                triggerClose(instance);
                break;
            }
            return false;
        }

        /**
         * Helper: pins the modeless dialog.
         *
         * @param {Object} instance	The dialog instance.
         * 
         * @return {undefined}
         */
        function pin(instance) {
            //pin the dialog
            instance.set('pinned', true);
        }

        /**
         * Helper: unpins the modeless dialog.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function unpin(instance) {
            //unpin the dialog 
            instance.set('pinned', false);
        }


        /**
         * Helper: enlarges the dialog to fill the entire screen.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function maximize(instance) {
            // allow custom `onmaximize` method
            dispatchEvent('onmaximize', instance);
            //maximize the dialog 
            addClass(instance.elements.root, classes.maximized);
            if (instance.isOpen()) {
                ensureNoOverflow();
            }
            // allow custom `onmaximized` method
            dispatchEvent('onmaximized', instance);
        }

        /**
         * Helper: returns the dialog to its former size.
         *
         * @param {Object} instance	The dilog instance.
         * 
         * @return {undefined}
         */
        function restore(instance) {
            // allow custom `onrestore` method
            dispatchEvent('onrestore', instance);
            //maximize the dialog 
            removeClass(instance.elements.root, classes.maximized);
            if (instance.isOpen()) {
                ensureNoOverflow();
            }
            // allow custom `onrestored` method
            dispatchEvent('onrestored', instance);
        }

        /**
         * Show or hide the maximize box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updatePinnable(instance) {
            if (instance.get('pinnable')) {
                // add class
                addClass(instance.elements.root, classes.pinnable);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.pinnable);
            }
        }

        /**
         * Helper: Fixes the absolutly positioned modal div position.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function addAbsPositionFix(instance) {
            var scrollLeft = getScrollLeft();
            instance.elements.modal.style.marginTop = getScrollTop() + 'px';
            instance.elements.modal.style.marginLeft = scrollLeft + 'px';
            instance.elements.modal.style.marginRight = (-scrollLeft) + 'px';
        }

        /**
         * Helper: Removes the absolutly positioned modal div position fix.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function removeAbsPositionFix(instance) {
            var marginTop = parseInt(instance.elements.modal.style.marginTop, 10);
            var marginLeft = parseInt(instance.elements.modal.style.marginLeft, 10);
            instance.elements.modal.style.marginTop = '';
            instance.elements.modal.style.marginLeft = '';
            instance.elements.modal.style.marginRight = '';

            if (instance.isOpen()) {
                var top = 0,
                    left = 0;
                if (instance.elements.dialog.style.top !== '') {
                    top = parseInt(instance.elements.dialog.style.top, 10);
                }
                instance.elements.dialog.style.top = (top + (marginTop - getScrollTop())) + 'px';

                if (instance.elements.dialog.style.left !== '') {
                    left = parseInt(instance.elements.dialog.style.left, 10);
                }
                instance.elements.dialog.style.left = (left + (marginLeft - getScrollLeft())) + 'px';
            }
        }
        /**
         * Helper: Adds/Removes the absolutly positioned modal div position fix based on its pinned setting.
         *
         * @param {Object} instance The dialog instance.
         *
         * @return {undefined}
         */
        function updateAbsPositionFix(instance) {
            // if modeless and unpinned add fix
            if (!instance.get('modal') && !instance.get('pinned')) {
                addAbsPositionFix(instance);
            } else {
                removeAbsPositionFix(instance);
            }
        }
        /**
         * Toggles the dialog position lock | modeless only.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to make it modal, false otherwise.
         *
         * @return {undefined}
         */
        function updatePinned(instance) {
            if (instance.get('pinned')) {
                removeClass(instance.elements.root, classes.unpinned);
                if (instance.isOpen()) {
                    removeAbsPositionFix(instance);
                }
            } else {
                addClass(instance.elements.root, classes.unpinned);
                if (instance.isOpen() && !instance.isModal()) {
                    addAbsPositionFix(instance);
                }
            }
        }

        /**
         * Show or hide the maximize box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateMaximizable(instance) {
            if (instance.get('maximizable')) {
                // add class
                addClass(instance.elements.root, classes.maximizable);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.maximizable);
            }
        }

        /**
         * Show or hide the close box.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateClosable(instance) {
            if (instance.get('closable')) {
                // add class
                addClass(instance.elements.root, classes.closable);
                bindClosableEvents(instance);
            } else {
                // remove class
                removeClass(instance.elements.root, classes.closable);
                unbindClosableEvents(instance);
            }
        }

        // flag to cancel click event if already handled by end resize event (the mousedown, mousemove, mouseup sequence fires a click event.).
        var cancelClick = false;

        /**
         * Helper: closes the modal dialog when clicking the modal
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function modalClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            if (!cancelClick && target === instance.elements.modal && instance.get('closableByDimmer') === true) {
                triggerClose(instance);
            }
            cancelClick = false;
            return false;
        }

        // flag to cancel keyup event if already handled by click event (pressing Enter on a focusted button).
        var cancelKeyup = false;
        /** 
         * Helper: triggers a button callback
         *
         * @param {Object}		The dilog instance.
         * @param {Function}	Callback to check which button triggered the event.
         *
         * @return {undefined}
         */
        function triggerCallback(instance, check) {
            for (var idx = 0; idx < instance.__internal.buttons.length; idx += 1) {
                var button = instance.__internal.buttons[idx];
                if (!button.element.disabled && check(button)) {
                    var closeEvent = createCloseEvent(idx, button);
                    if (typeof instance.callback === 'function') {
                        instance.callback.apply(instance, [closeEvent]);
                    }
                    //close the dialog only if not canceled.
                    if (closeEvent.cancel === false) {
                        instance.close();
                    }
                    break;
                }
            }
        }

        /**
         * Clicks event handler, attached to the dialog footer.
         *
         * @param {Event}		DOM event object.
         * @param {Object}		The dilog instance.
         * 
         * @return {undefined}
         */
        function buttonsClickHandler(event, instance) {
            var target = event.srcElement || event.target;
            triggerCallback(instance, function (button) {
                // if this button caused the click, cancel keyup event
                return button.element === target && (cancelKeyup = true);
            });
        }

        /**
         * Keyup event handler, attached to the document.body
         *
         * @param {Event}		DOM event object.
         * @param {Object}		The dilog instance.
         * 
         * @return {undefined}
         */
        function keyupHandler(event) {
            //hitting enter while button has focus will trigger keyup too.
            //ignore if handled by clickHandler
            if (cancelKeyup) {
                cancelKeyup = false;
                return;
            }
            var instance = openDialogs[openDialogs.length - 1];
            var keyCode = event.keyCode;
            if (instance.__internal.buttons.length === 0 && keyCode === keys.ESC && instance.get('closable') === true) {
                triggerClose(instance);
                return false;
            }else if (usedKeys.indexOf(keyCode) > -1) {
                triggerCallback(instance, function (button) {
                    return button.key === keyCode;
                });
                return false;
            }
        }
        /**
        * Keydown event handler, attached to the document.body
        *
        * @param {Event}		DOM event object.
        * @param {Object}		The dilog instance.
        * 
        * @return {undefined}
        */
        function keydownHandler(event) {
            var instance = openDialogs[openDialogs.length - 1];
            var keyCode = event.keyCode;
            if (keyCode === keys.LEFT || keyCode === keys.RIGHT) {
                var buttons = instance.__internal.buttons;
                for (var x = 0; x < buttons.length; x += 1) {
                    if (document.activeElement === buttons[x].element) {
                        switch (keyCode) {
                        case keys.LEFT:
                            buttons[(x || buttons.length) - 1].element.focus();
                            return;
                        case keys.RIGHT:
                            buttons[(x + 1) % buttons.length].element.focus();
                            return;
                        }
                    }
                }
            }else if (keyCode < keys.F12 + 1 && keyCode > keys.F1 - 1 && usedKeys.indexOf(keyCode) > -1) {
                event.preventDefault();
                event.stopPropagation();
                triggerCallback(instance, function (button) {
                    return button.key === keyCode;
                });
                return false;
            }
        }


        /**
         * Sets focus to proper dialog element
         *
         * @param {Object} instance The dilog instance.
         * @param {Node} [resetTarget=undefined] DOM element to reset focus to.
         *
         * @return {undefined}
         */
        function setFocus(instance, resetTarget) {
            // reset target has already been determined.
            if (resetTarget) {
                resetTarget.focus();
            } else {
                // current instance focus settings
                var focus = instance.__internal.focus;
                // the focus element.
                var element = focus.element;

                switch (typeof focus.element) {
                // a number means a button index
                case 'number':
                    if (instance.__internal.buttons.length > focus.element) {
                        //in basic view, skip focusing the buttons.
                        if (instance.get('basic') === true) {
                            element = instance.elements.reset[0];
                        } else {
                            element = instance.__internal.buttons[focus.element].element;
                        }
                    }
                    break;
                // a string means querySelector to select from dialog body contents.
                case 'string':
                    element = instance.elements.body.querySelector(focus.element);
                    break;
                // a function should return the focus element.
                case 'function':
                    element = focus.element.call(instance);
                    break;
                }
                
                // if no focus element, default to first reset element.
                if ((typeof element === 'undefined' || element === null) && instance.__internal.buttons.length === 0) {
                    element = instance.elements.reset[0];
                }
                // focus
                if (element && element.focus) {
                    element.focus();
                    // if selectable
                    if (focus.select && element.select) {
                        element.select();
                    }
                }
            }
        }

        /**
         * Focus event handler, attached to document.body and dialogs own reset links.
         * handles the focus for modal dialogs only.
         *
         * @param {Event} event DOM focus event object.
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function onReset(event, instance) {

            // should work on last modal if triggered from document.body 
            if (!instance) {
                for (var x = openDialogs.length - 1; x > -1; x -= 1) {
                    if (openDialogs[x].isModal()) {
                        instance = openDialogs[x];
                        break;
                    }
                }
            }
            // if modal
            if (instance && instance.isModal()) {
                // determine reset target to enable forward/backward tab cycle.
                var resetTarget, target = event.srcElement || event.target;
                var lastResetElement = target === instance.elements.reset[1] || (instance.__internal.buttons.length === 0 && target === document.body);

                // if last reset link, then go to maximize or close
                if (lastResetElement) {
                    if (instance.get('maximizable')) {
                        resetTarget = instance.elements.commands.maximize;
                    } else if (instance.get('closable')) {
                        resetTarget = instance.elements.commands.close;
                    }
                }
                // if no reset target found, try finding the best button
                if (resetTarget === undefined) {
                    if (typeof instance.__internal.focus.element === 'number') {
                        // button focus element, go to first available button
                        if (target === instance.elements.reset[0]) {
                            resetTarget = instance.elements.buttons.auxiliary.firstChild || instance.elements.buttons.primary.firstChild;
                        } else if (lastResetElement) {
                            //restart the cycle by going to first reset link
                            resetTarget = instance.elements.reset[0];
                        }
                    } else {
                        // will reach here when tapping backwards, so go to last child
                        // The focus element SHOULD NOT be a button (logically!).
                        if (target === instance.elements.reset[0]) {
                            resetTarget = instance.elements.buttons.primary.lastChild || instance.elements.buttons.auxiliary.lastChild;
                        }
                    }
                }
                // focus
                setFocus(instance, resetTarget);
            }
        }
        /**
         * Transition in transitionend event handler. 
         *
         * @param {Event}		TransitionEnd event object.
         * @param {Object}		The dilog instance.
         *
         * @return {undefined}
         */
        function handleTransitionInEvent(event, instance) {
            // clear the timer
            clearTimeout(instance.__internal.timerIn);

            // once transition is complete, set focus
            setFocus(instance);

            //restore scroll to prevent document jump
            restoreScrollPosition();

            // allow handling key up after transition ended.
            cancelKeyup = false;

            // allow custom `onfocus` method
            dispatchEvent('onfocus', instance);

            // unbind the event
            off(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);

            removeClass(instance.elements.root, classes.animationIn);
        }

        /**
         * Transition out transitionend event handler. 
         *
         * @param {Event}		TransitionEnd event object.
         * @param {Object}		The dilog instance.
         *
         * @return {undefined}
         */
        function handleTransitionOutEvent(event, instance) {
            // clear the timer
            clearTimeout(instance.__internal.timerOut);
            // unbind the event
            off(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);

            // reset move updates
            resetMove(instance);
            // reset resize updates
            resetResize(instance);

            // restore if maximized
            if (instance.isMaximized() && !instance.get('startMaximized')) {
                restore(instance);
            }

            // return focus to the last active element
            if (alertify.defaults.maintainFocus && instance.__internal.activeElement) {
                instance.__internal.activeElement.focus();
                instance.__internal.activeElement = null;
            }
            
            //destory the instance
            if (typeof instance.__internal.destroy === 'function') {
                instance.__internal.destroy.apply(instance);
            }
        }
        /* Controls moving a dialog around */
        //holde the current moving instance
        var movable = null,
            //holds the current X offset when move starts
            offsetX = 0,
            //holds the current Y offset when move starts
            offsetY = 0,
            xProp = 'pageX',
            yProp = 'pageY',
            bounds = null,
            refreshTop = false,
            moveDelegate = null;

        /**
         * Helper: sets the element top/left coordinates
         *
         * @param {Event} event	DOM event object.
         * @param {Node} element The element being moved.
         * 
         * @return {undefined}
         */
        function moveElement(event, element) {
            var left = (event[xProp] - offsetX),
                top  = (event[yProp] - offsetY);

            if(refreshTop){
                top -= document.body.scrollTop;
            }
           
            element.style.left = left + 'px';
            element.style.top = top + 'px';
           
        }
        /**
         * Helper: sets the element top/left coordinates within screen bounds
         *
         * @param {Event} event	DOM event object.
         * @param {Node} element The element being moved.
         * 
         * @return {undefined}
         */
        function moveElementBounded(event, element) {
            var left = (event[xProp] - offsetX),
                top  = (event[yProp] - offsetY);

            if(refreshTop){
                top -= document.body.scrollTop;
            }
            
            element.style.left = Math.min(bounds.maxLeft, Math.max(bounds.minLeft, left)) + 'px';
            if(refreshTop){
                element.style.top = Math.min(bounds.maxTop, Math.max(bounds.minTop, top)) + 'px';
            }else{
                element.style.top = Math.max(bounds.minTop, top) + 'px';
            }
        }
            

        /**
         * Triggers the start of a move event, attached to the header element mouse down event.
         * Adds no-selection class to the body, disabling selection while moving.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         * 
         * @return {Boolean} false
         */
        function beginMove(event, instance) {
            if (resizable === null && !instance.isMaximized() && instance.get('movable')) {
                var eventSrc, left=0, top=0;
                if (event.type === 'touchstart') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                    xProp = 'clientX';
                    yProp = 'clientY';
                } else if (event.button === 0) {
                    eventSrc = event;
                }

                if (eventSrc) {

                    var element = instance.elements.dialog;
                    addClass(element, classes.capture);

                    if (element.style.left) {
                        left = parseInt(element.style.left, 10);
                    }

                    if (element.style.top) {
                        top = parseInt(element.style.top, 10);
                    }
                    
                    offsetX = eventSrc[xProp] - left;
                    offsetY = eventSrc[yProp] - top;

                    if(instance.isModal()){
                        offsetY += instance.elements.modal.scrollTop;
                    }else if(instance.isPinned()){
                        offsetY -= document.body.scrollTop;
                    }
                    
                    if(instance.get('moveBounded')){
                        var current = element,
                            offsetLeft = -left,
                            offsetTop = -top;
                        
                        //calc offset
                        do {
                            offsetLeft += current.offsetLeft;
                            offsetTop += current.offsetTop;
                        } while (current = current.offsetParent);
                        
                        bounds = {
                            maxLeft : offsetLeft,
                            minLeft : -offsetLeft,
                            maxTop  : document.documentElement.clientHeight - element.clientHeight - offsetTop,
                            minTop  : -offsetTop
                        };
                        moveDelegate = moveElementBounded;
                    }else{
                        bounds = null;
                        moveDelegate = moveElement;
                    }
                    
                    // allow custom `onmove` method
                    dispatchEvent('onmove', instance);

                    refreshTop = !instance.isModal() && instance.isPinned();
                    movable = instance;
                    moveDelegate(eventSrc, element);
                    addClass(document.body, classes.noSelection);
                    return false;
                }
            }
        }

        /**
         * The actual move handler,  attached to document.body mousemove event.
         *
         * @param {Event} event	DOM event object.
         * 
         * @return {undefined}
         */
        function move(event) {
            if (movable) {
                var eventSrc;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    moveDelegate(eventSrc, movable.elements.dialog);
                }
            }
        }

        /**
         * Triggers the end of a move event,  attached to document.body mouseup event.
         * Removes no-selection class from document.body, allowing selection.
         *
         * @return {undefined}
         */
        function endMove() {
            if (movable) {
                var instance = movable;
                movable = bounds = null;
                removeClass(document.body, classes.noSelection);
                removeClass(instance.elements.dialog, classes.capture);
                // allow custom `onmoved` method
                dispatchEvent('onmoved', instance);
            }
        }

        /**
         * Resets any changes made by moving the element to its original state,
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function resetMove(instance) {
            movable = null;
            var element = instance.elements.dialog;
            element.style.left = element.style.top = '';
        }

        /**
         * Updates the dialog move behavior.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateMovable(instance) {
            if (instance.get('movable')) {
                // add class
                addClass(instance.elements.root, classes.movable);
                if (instance.isOpen()) {
                    bindMovableEvents(instance);
                }
            } else {

                //reset
                resetMove(instance);
                // remove class
                removeClass(instance.elements.root, classes.movable);
                if (instance.isOpen()) {
                    unbindMovableEvents(instance);
                }
            }
        }

        /* Controls moving a dialog around */
        //holde the current instance being resized		
        var resizable = null,
            //holds the staring left offset when resize starts.
            startingLeft = Number.Nan,
            //holds the staring width when resize starts.
            startingWidth = 0,
            //holds the initial width when resized for the first time.
            minWidth = 0,
            //holds the offset of the resize handle.
            handleOffset = 0;

        /**
         * Helper: sets the element width/height and updates left coordinate if neccessary.
         *
         * @param {Event} event	DOM mousemove event object.
         * @param {Node} element The element being moved.
         * @param {Boolean} pinned A flag indicating if the element being resized is pinned to the screen.
         * 
         * @return {undefined}
         */
        function resizeElement(event, element, pageRelative) {

            //calculate offsets from 0,0
            var current = element;
            var offsetLeft = 0;
            var offsetTop = 0;
            do {
                offsetLeft += current.offsetLeft;
                offsetTop += current.offsetTop;
            } while (current = current.offsetParent);

            // determine X,Y coordinates.
            var X, Y;
            if (pageRelative === true) {
                X = event.pageX;
                Y = event.pageY;
            } else {
                X = event.clientX;
                Y = event.clientY;
            }
            // rtl handling
            var isRTL = isRightToLeft();
            if (isRTL) {
                // reverse X 
                X = document.body.offsetWidth - X;
                // if has a starting left, calculate offsetRight
                if (!isNaN(startingLeft)) {
                    offsetLeft = document.body.offsetWidth - offsetLeft - element.offsetWidth;
                }
            }

            // set width/height
            element.style.height = (Y - offsetTop + handleOffset) + 'px';
            element.style.width = (X - offsetLeft + handleOffset) + 'px';

            // if the element being resized has a starting left, maintain it.
            // the dialog is centered, divide by half the offset to maintain the margins.
            if (!isNaN(startingLeft)) {
                var diff = Math.abs(element.offsetWidth - startingWidth) * 0.5;
                if (isRTL) {
                    //negate the diff, why?
                    //when growing it should decrease left
                    //when shrinking it should increase left
                    diff *= -1;
                }
                if (element.offsetWidth > startingWidth) {
                    //growing
                    element.style.left = (startingLeft + diff) + 'px';
                } else if (element.offsetWidth >= minWidth) {
                    //shrinking
                    element.style.left = (startingLeft - diff) + 'px';
                }
            }
        }

        /**
         * Triggers the start of a resize event, attached to the resize handle element mouse down event.
         * Adds no-selection class to the body, disabling selection while moving.
         *
         * @param {Event} event	DOM event object.
         * @param {Object} instance The dilog instance.
         * 
         * @return {Boolean} false
         */
        function beginResize(event, instance) {
            if (!instance.isMaximized()) {
                var eventSrc;
                if (event.type === 'touchstart') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    // allow custom `onresize` method
                    dispatchEvent('onresize', instance);
                    
                    resizable = instance;
                    handleOffset = instance.elements.resizeHandle.offsetHeight / 2;
                    var element = instance.elements.dialog;
                    addClass(element, classes.capture);
                    startingLeft = parseInt(element.style.left, 10);
                    element.style.height = element.offsetHeight + 'px';
                    element.style.minHeight = instance.elements.header.offsetHeight + instance.elements.footer.offsetHeight + 'px';
                    element.style.width = (startingWidth = element.offsetWidth) + 'px';

                    if (element.style.maxWidth !== 'none') {
                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
                    }
                    element.style.maxWidth = 'none';
                    addClass(document.body, classes.noSelection);
                    return false;
                }
            }
        }

        /**
         * The actual resize handler,  attached to document.body mousemove event.
         *
         * @param {Event} event	DOM event object.
         * 
         * @return {undefined}
         */
        function resize(event) {
            if (resizable) {
                var eventSrc;
                if (event.type === 'touchmove') {
                    event.preventDefault();
                    eventSrc = event.targetTouches[0];
                } else if (event.button === 0) {
                    eventSrc = event;
                }
                if (eventSrc) {
                    resizeElement(eventSrc, resizable.elements.dialog, !resizable.get('modal') && !resizable.get('pinned'));
                }
            }
        }

        /**
         * Triggers the end of a resize event,  attached to document.body mouseup event.
         * Removes no-selection class from document.body, allowing selection.
         *
         * @return {undefined}
         */
        function endResize() {
            if (resizable) {
                var instance = resizable;
                resizable = null;
                removeClass(document.body, classes.noSelection);
                removeClass(instance.elements.dialog, classes.capture);
                cancelClick = true;
                // allow custom `onresized` method
                dispatchEvent('onresized', instance);
            }
        }

        /**
         * Resets any changes made by resizing the element to its original state.
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function resetResize(instance) {
            resizable = null;
            var element = instance.elements.dialog;
            if (element.style.maxWidth === 'none') {
                //clear inline styles.
                element.style.maxWidth = element.style.minWidth = element.style.width = element.style.height = element.style.minHeight = element.style.left = '';
                //reset variables.
                startingLeft = Number.Nan;
                startingWidth = minWidth = handleOffset = 0;
            }
        }


        /**
         * Updates the dialog move behavior.
         *
         * @param {Object} instance The dilog instance.
         * @param {Boolean} on True to add the behavior, removes it otherwise.
         *
         * @return {undefined}
         */
        function updateResizable(instance) {
            if (instance.get('resizable')) {
                // add class
                addClass(instance.elements.root, classes.resizable);
                if (instance.isOpen()) {
                    bindResizableEvents(instance);
                }
            } else {
                //reset
                resetResize(instance);
                // remove class
                removeClass(instance.elements.root, classes.resizable);
                if (instance.isOpen()) {
                    unbindResizableEvents(instance);
                }
            }
        }

        /**
         * Reset move/resize on window resize.
         *
         * @param {Event} event	window resize event object.
         *
         * @return {undefined}
         */
        function windowResize(/*event*/) {
            for (var x = 0; x < openDialogs.length; x += 1) {
                var instance = openDialogs[x];
                if (instance.get('autoReset')) {
                    resetMove(instance);
                    resetResize(instance);
                }
            }
        }
        /**
         * Bind dialogs events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindEvents(instance) {
            // if first dialog, hook global handlers
            if (openDialogs.length === 1) {
                //global
                on(window, 'resize', windowResize);
                on(document.body, 'keyup', keyupHandler);
                on(document.body, 'keydown', keydownHandler);
                on(document.body, 'focus', onReset);

                //move
                on(document.documentElement, 'mousemove', move);
                on(document.documentElement, 'touchmove', move);
                on(document.documentElement, 'mouseup', endMove);
                on(document.documentElement, 'touchend', endMove);
                //resize
                on(document.documentElement, 'mousemove', resize);
                on(document.documentElement, 'touchmove', resize);
                on(document.documentElement, 'mouseup', endResize);
                on(document.documentElement, 'touchend', endResize);
            }

            // common events
            on(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
            on(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
            on(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
            on(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);

            //prevent handling key up when dialog is being opened by a key stroke.
            cancelKeyup = true;
            // hook in transition handler
            on(instance.elements.dialog, transition.type, instance.__internal.transitionInHandler);

            // modelss only events
            if (!instance.get('modal')) {
                bindModelessEvents(instance);
            }

            // resizable
            if (instance.get('resizable')) {
                bindResizableEvents(instance);
            }

            // movable
            if (instance.get('movable')) {
                bindMovableEvents(instance);
            }
        }

        /**
         * Unbind dialogs events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindEvents(instance) {
            // if last dialog, remove global handlers
            if (openDialogs.length === 1) {
                //global
                off(window, 'resize', windowResize);
                off(document.body, 'keyup', keyupHandler);
                off(document.body, 'keydown', keydownHandler);
                off(document.body, 'focus', onReset);
                //move
                off(document.documentElement, 'mousemove', move);
                off(document.documentElement, 'mouseup', endMove);
                //resize
                off(document.documentElement, 'mousemove', resize);
                off(document.documentElement, 'mouseup', endResize);
            }

            // common events
            off(instance.elements.commands.container, 'click', instance.__internal.commandsClickHandler);
            off(instance.elements.footer, 'click', instance.__internal.buttonsClickHandler);
            off(instance.elements.reset[0], 'focus', instance.__internal.resetHandler);
            off(instance.elements.reset[1], 'focus', instance.__internal.resetHandler);

            // hook out transition handler
            on(instance.elements.dialog, transition.type, instance.__internal.transitionOutHandler);

            // modelss only events
            if (!instance.get('modal')) {
                unbindModelessEvents(instance);
            }

            // movable
            if (instance.get('movable')) {
                unbindMovableEvents(instance);
            }

            // resizable
            if (instance.get('resizable')) {
                unbindResizableEvents(instance);
            }

        }

        /**
         * Bind modeless specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindModelessEvents(instance) {
            on(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
        }

        /**
         * Unbind modeless specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindModelessEvents(instance) {
            off(instance.elements.dialog, 'focus', instance.__internal.bringToFrontHandler, true);
        }



        /**
         * Bind movable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindMovableEvents(instance) {
            on(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
            on(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
        }

        /**
         * Unbind movable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindMovableEvents(instance) {
            off(instance.elements.header, 'mousedown', instance.__internal.beginMoveHandler);
            off(instance.elements.header, 'touchstart', instance.__internal.beginMoveHandler);
        }



        /**
         * Bind resizable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindResizableEvents(instance) {
            on(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
            on(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
        }

        /**
         * Unbind resizable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindResizableEvents(instance) {
            off(instance.elements.resizeHandle, 'mousedown', instance.__internal.beginResizeHandler);
            off(instance.elements.resizeHandle, 'touchstart', instance.__internal.beginResizeHandler);
        }

        /**
         * Bind closable events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function bindClosableEvents(instance) {
            on(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
        }

        /**
         * Unbind closable specific events
         *
         * @param {Object} instance The dilog instance.
         *
         * @return {undefined}
         */
        function unbindClosableEvents(instance) {
            off(instance.elements.modal, 'click', instance.__internal.modalClickHandler);
        }
        // dialog API
        return {
            __init:initialize,
            /**
             * Check if dialog is currently open
             *
             * @return {Boolean}
             */
            isOpen: function () {
                return this.__internal.isOpen;
            },
            isModal: function (){
                return this.elements.root.className.indexOf(classes.modeless) < 0;
            },
            isMaximized:function(){
                return this.elements.root.className.indexOf(classes.maximized) > -1;
            },
            isPinned:function(){
                return this.elements.root.className.indexOf(classes.unpinned) < 0;
            },
            maximize:function(){
                if(!this.isMaximized()){
                    maximize(this);
                }
                return this;
            },
            restore:function(){
                if(this.isMaximized()){
                    restore(this);
                }
                return this;
            },
            pin:function(){
                if(!this.isPinned()){
                    pin(this);
                }
                return this;
            },
            unpin:function(){
                if(this.isPinned()){
                    unpin(this);
                }
                return this;
            },
            bringToFront:function(){
                bringToFront(null, this);
                return this;
            },
            /**
             * Move the dialog to a specific x/y coordinates
             *
             * @param {Number} x    The new dialog x coordinate in pixels.
             * @param {Number} y    The new dialog y coordinate in pixels.
             *
             * @return {Object} The dialog instance.
             */
            moveTo:function(x,y){
                if(!isNaN(x) && !isNaN(y)){
                    // allow custom `onmove` method
                    dispatchEvent('onmove', this);
                    
                    var element = this.elements.dialog,
                        current = element,
                        offsetLeft = 0,
                        offsetTop = 0;
                    
                    //subtract existing left,top
                    if (element.style.left) {
                        offsetLeft -= parseInt(element.style.left, 10);
                    }
                    if (element.style.top) {
                        offsetTop -= parseInt(element.style.top, 10);
                    }
                    //calc offset
                    do {
                        offsetLeft += current.offsetLeft;
                        offsetTop += current.offsetTop;
                    } while (current = current.offsetParent);

                    //calc left, top
                    var left = (x - offsetLeft);
                    var top  = (y - offsetTop);

                    //// rtl handling
                    if (isRightToLeft()) {
                        left *= -1;
                    }

                    element.style.left = left + 'px';
                    element.style.top = top + 'px';
                    
                    // allow custom `onmoved` method
                    dispatchEvent('onmoved', this);
                }
                return this;
            },
            /**
             * Resize the dialog to a specific width/height (the dialog must be 'resizable').
             * The dialog can be resized to:
             *  A minimum width equal to the initial display width
             *  A minimum height equal to the sum of header/footer heights.
             *
             *
             * @param {Number or String} width    The new dialog width in pixels or in percent.
             * @param {Number or String} height   The new dialog height in pixels or in percent.
             *
             * @return {Object} The dialog instance.
             */
            resizeTo:function(width,height){
                var w = parseFloat(width),
                    h = parseFloat(height),
                    regex = /(\d*\.\d+|\d+)%/;

                if(!isNaN(w) && !isNaN(h) && this.get('resizable') === true){
                    
                    // allow custom `onresize` method
                    dispatchEvent('onresize', this);
                    
                    if(('' + width).match(regex)){
                        w = w / 100 * document.documentElement.clientWidth ;
                    }

                    if(('' + height).match(regex)){
                        h = h / 100 * document.documentElement.clientHeight;
                    }

                    var element = this.elements.dialog;
                    if (element.style.maxWidth !== 'none') {
                        element.style.minWidth = (minWidth = element.offsetWidth) + 'px';
                    }
                    element.style.maxWidth = 'none';
                    element.style.minHeight = this.elements.header.offsetHeight + this.elements.footer.offsetHeight + 'px';
                    element.style.width = w + 'px';
                    element.style.height = h + 'px';
                    
                    // allow custom `onresized` method
                    dispatchEvent('onresized', this);
                }
                return this;
            },
            /**
             * Gets or Sets dialog settings/options 
             *
             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.
             * @param {Object} value Optional, the value associated with the key (in case it was a string).
             *
             * @return {undefined}
             */
            setting : function (key, value) {
                var self = this;
                var result = update(this, this.__internal.options, function(k,o,n){ optionUpdated(self,k,o,n); }, key, value);
                if(result.op === 'get'){
                    if(result.found){
                        return result.value;
                    }else if(typeof this.settings !== 'undefined'){
                        return update(this, this.settings, this.settingUpdated || function(){}, key, value).value;
                    }else{
                        return undefined;
                    }
                }else if(result.op === 'set'){
                    if(result.items.length > 0){
                        var callback = this.settingUpdated || function(){};
                        for(var x=0;x<result.items.length;x+=1){
                            var item = result.items[x];
                            if(!item.found && typeof this.settings !== 'undefined'){
                                update(this, this.settings, callback, item.key, item.value);
                            }
                        }
                    }
                    return this;
                }
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set:function(key, value){
                this.setting(key,value);
                return this;
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get:function(key){
                return this.setting(key);
            },
            /**
            * Sets dialog header
            * @content {string or element}
            *
            * @return {undefined}
            */
            setHeader:function(content){
                if(typeof content === 'string'){
                    clearContents(this.elements.header);
                    this.elements.header.innerHTML = content;
                }else if (content instanceof window.HTMLElement && this.elements.header.firstChild !== content){
                    clearContents(this.elements.header);
                    this.elements.header.appendChild(content);
                }
                return this;
            },
            /**
            * Sets dialog contents
            * @content {string or element}
            *
            * @return {undefined}
            */
            setContent:function(content){
                if(typeof content === 'string'){
                    clearContents(this.elements.content);
                    this.elements.content.innerHTML = content;
                }else if (content instanceof window.HTMLElement && this.elements.content.firstChild !== content){
                    clearContents(this.elements.content);
                    this.elements.content.appendChild(content);
                }
                return this;
            },
            /**
             * Show the dialog as modal
             *
             * @return {Object} the dialog instance.
             */
            showModal: function(className){
                return this.show(true, className);
            },
            /**
             * Show the dialog
             *
             * @return {Object} the dialog instance.
             */
            show: function (modal, className) {
                
                // ensure initialization
                initialize(this);

                if ( !this.__internal.isOpen ) {

                    // add to open dialogs
                    this.__internal.isOpen = true;
                    openDialogs.push(this);

                    // save last focused element
                    if(alertify.defaults.maintainFocus){
                        this.__internal.activeElement = document.activeElement;
                    }

                    //allow custom dom manipulation updates before showing the dialog.
                    if(typeof this.prepare === 'function'){
                        this.prepare();
                    }

                    bindEvents(this);

                    if(modal !== undefined){
                        this.set('modal', modal);
                    }

                    //save scroll to prevent document jump
                    saveScrollPosition();

                    ensureNoOverflow();

                    // allow custom dialog class on show
                    if(typeof className === 'string' && className !== ''){
                        this.__internal.className = className;
                        addClass(this.elements.root, className);
                    }

                    // maximize if start maximized
                    if ( this.get('startMaximized')) {
                        this.maximize();
                    }else if(this.isMaximized()){
                        restore(this);
                    }

                    updateAbsPositionFix(this);

                    removeClass(this.elements.root, classes.animationOut);
                    addClass(this.elements.root, classes.animationIn);

                    // set 1s fallback in case transition event doesn't fire
                    clearTimeout( this.__internal.timerIn);
                    this.__internal.timerIn = setTimeout( this.__internal.transitionInHandler, transition.supported ? 1000 : 100 );

                    if(isSafari){
                        // force desktop safari reflow
                        var root = this.elements.root;
                        root.style.display  = 'none';
                        setTimeout(function(){root.style.display  = 'block';}, 0);
                    }

                    //reflow
                    reflow = this.elements.root.offsetWidth;
                  
                    // show dialog
                    removeClass(this.elements.root, classes.hidden);

                    // internal on show event
                    if(typeof this.hooks.onshow === 'function'){
                        this.hooks.onshow.call(this);
                    }

                    // allow custom `onshow` method
                    dispatchEvent('onshow', this);

                }else{
                    // reset move updates
                    resetMove(this);
                    // reset resize updates
                    resetResize(this);
                    // shake the dialog to indicate its already open
                    addClass(this.elements.dialog, classes.shake);
                    var self = this;
                    setTimeout(function(){
                        removeClass(self.elements.dialog, classes.shake);
                    },200);
                }
                return this;
            },
            /**
             * Close the dialog
             *
             * @return {Object} The dialog instance
             */
            close: function () {
                if (this.__internal.isOpen ) {
                    // custom `onclosing` event
                    if(dispatchEvent('onclosing', this) !== false){

                        unbindEvents(this);

                        removeClass(this.elements.root, classes.animationIn);
                        addClass(this.elements.root, classes.animationOut);

                        // set 1s fallback in case transition event doesn't fire
                        clearTimeout( this.__internal.timerOut );
                        this.__internal.timerOut = setTimeout( this.__internal.transitionOutHandler, transition.supported ? 1000 : 100 );
                        // hide dialog
                        addClass(this.elements.root, classes.hidden);
                        //reflow
                        reflow = this.elements.modal.offsetWidth;

                        // remove custom dialog class on hide
                        if (typeof this.__internal.className !== 'undefined' && this.__internal.className !== '') {
                            removeClass(this.elements.root, this.__internal.className);
                        }

                        // internal on close event
                        if(typeof this.hooks.onclose === 'function'){
                            this.hooks.onclose.call(this);
                        }

                        // allow custom `onclose` method
                        dispatchEvent('onclose', this);

                        //remove from open dialogs
                        openDialogs.splice(openDialogs.indexOf(this),1);
                        this.__internal.isOpen = false;

                        ensureNoOverflow();
                    }

                }
                return this;
            },
            /**
             * Close all open dialogs except this.
             *
             * @return {undefined}
             */
            closeOthers:function(){
                alertify.closeAll(this);
                return this;
            },
            /**
             * Destroys this dialog instance
             *
             * @return {undefined}
             */
            destroy:function(){
                if (this.__internal.isOpen ) {
                    //mark dialog for destruction, this will be called on tranistionOut event.
                    this.__internal.destroy = function(){
                        destruct(this, initialize);
                    };
                    //close the dialog to unbind all events.
                    this.close();
                }else{
                    destruct(this, initialize);
                }
                return this;
            },
        };
	} () );
    var notifier = (function () {
        var reflow,
            element,
            openInstances = [],
            classes = {
                base: 'alertify-notifier',
                message: 'ajs-message',
                top: 'ajs-top',
                right: 'ajs-right',
                bottom: 'ajs-bottom',
                left: 'ajs-left',
                center: 'ajs-center',
                visible: 'ajs-visible',
                hidden: 'ajs-hidden',
                close: 'ajs-close'
            };
        /**
         * Helper: initializes the notifier instance
         *
         */
        function initialize(instance) {

            if (!instance.__internal) {
                instance.__internal = {
                    position: alertify.defaults.notifier.position,
                    delay: alertify.defaults.notifier.delay,
                };

                element = document.createElement('DIV');

                updatePosition(instance);
            }

            //add to DOM tree.
            if (element.parentNode !== document.body) {
                document.body.appendChild(element);
            }
        }

        function pushInstance(instance) {
            instance.__internal.pushed = true;
            openInstances.push(instance);
        }
        function popInstance(instance) {
            openInstances.splice(openInstances.indexOf(instance), 1);
            instance.__internal.pushed = false;
        }
        /**
         * Helper: update the notifier instance position
         *
         */
        function updatePosition(instance) {
            element.className = classes.base;
            switch (instance.__internal.position) {
            case 'top-right':
                addClass(element, classes.top + ' ' + classes.right);
                break;
            case 'top-left':
                addClass(element, classes.top + ' ' + classes.left);
                break;
            case 'top-center':
                addClass(element, classes.top + ' ' + classes.center);
                break;
            case 'bottom-left':
                addClass(element, classes.bottom + ' ' + classes.left);
                break;
            case 'bottom-center':
                addClass(element, classes.bottom + ' ' + classes.center);
                break;

            default:
            case 'bottom-right':
                addClass(element, classes.bottom + ' ' + classes.right);
                break;
            }
        }

        /**
        * creates a new notification message
        *
        * @param  {DOMElement} message	The notifier message element
        * @param  {Number} wait   Time (in ms) to wait before the message is dismissed, a value of 0 means keep open till clicked.
        * @param  {Function} callback A callback function to be invoked when the message is dismissed.
        *
        * @return {undefined}
        */
        function create(div, callback) {

            function clickDelegate(event, instance) {
                if(!instance.__internal.closeButton || event.target.getAttribute('data-close') === 'true'){
                    instance.dismiss(true);
                }
            }

            function transitionDone(event, instance) {
                // unbind event
                off(instance.element, transition.type, transitionDone);
                // remove the message
                element.removeChild(instance.element);
            }

            function initialize(instance) {
                if (!instance.__internal) {
                    instance.__internal = {
                        pushed: false,
                        delay : undefined,
                        timer: undefined,
                        clickHandler: undefined,
                        transitionEndHandler: undefined,
                        transitionTimeout: undefined
                    };
                    instance.__internal.clickHandler = delegate(instance, clickDelegate);
                    instance.__internal.transitionEndHandler = delegate(instance, transitionDone);
                }
                return instance;
            }
            function clearTimers(instance) {
                clearTimeout(instance.__internal.timer);
                clearTimeout(instance.__internal.transitionTimeout);
            }
            return initialize({
                /* notification DOM element*/
                element: div,
                /*
                 * Pushes a notification message
                 * @param {string or DOMElement} content The notification message content
                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.
                 *
                 */
                push: function (_content, _wait) {
                    if (!this.__internal.pushed) {

                        pushInstance(this);
                        clearTimers(this);

                        var content, wait;
                        switch (arguments.length) {
                        case 0:
                            wait = this.__internal.delay;
                            break;
                        case 1:
                            if (typeof (_content) === 'number') {
                                wait = _content;
                            } else {
                                content = _content;
                                wait = this.__internal.delay;
                            }
                            break;
                        case 2:
                            content = _content;
                            wait = _wait;
                            break;
                        }
                        this.__internal.closeButton = alertify.defaults.notifier.closeButton;
                        // set contents
                        if (typeof content !== 'undefined') {
                            this.setContent(content);
                        }
                        // append or insert
                        if (notifier.__internal.position.indexOf('top') < 0) {
                            element.appendChild(this.element);
                        } else {
                            element.insertBefore(this.element, element.firstChild);
                        }
                        reflow = this.element.offsetWidth;
                        addClass(this.element, classes.visible);
                        // attach click event
                        on(this.element, 'click', this.__internal.clickHandler);
                        return this.delay(wait);
                    }
                    return this;
                },
                /*
                 * {Function} callback function to be invoked before dismissing the notification message.
                 * Remarks: A return value === 'false' will cancel the dismissal
                 *
                 */
                ondismiss: function () { },
                /*
                 * {Function} callback function to be invoked when the message is dismissed.
                 *
                 */
                callback: callback,
                /*
                 * Dismisses the notification message
                 * @param {Boolean} clicked A flag indicating if the dismissal was caused by a click.
                 *
                 */
                dismiss: function (clicked) {
                    if (this.__internal.pushed) {
                        clearTimers(this);
                        if (!(typeof this.ondismiss === 'function' && this.ondismiss.call(this) === false)) {
                            //detach click event
                            off(this.element, 'click', this.__internal.clickHandler);
                            // ensure element exists
                            if (typeof this.element !== 'undefined' && this.element.parentNode === element) {
                                //transition end or fallback
                                this.__internal.transitionTimeout = setTimeout(this.__internal.transitionEndHandler, transition.supported ? 1000 : 100);
                                removeClass(this.element, classes.visible);

                                // custom callback on dismiss
                                if (typeof this.callback === 'function') {
                                    this.callback.call(this, clicked);
                                }
                            }
                            popInstance(this);
                        }
                    }
                    return this;
                },
                /*
                 * Delays the notification message dismissal
                 * @param {Number} wait The time (in seconds) to wait before the message is dismissed, a value of 0 means keep open till clicked.
                 *
                 */
                delay: function (wait) {
                    clearTimers(this);
                    this.__internal.delay = typeof wait !== 'undefined' && !isNaN(+wait) ? +wait : notifier.__internal.delay;
                    if (this.__internal.delay > 0) {
                        var  self = this;
                        this.__internal.timer = setTimeout(function () { self.dismiss(); }, this.__internal.delay * 1000);
                    }
                    return this;
                },
                /*
                 * Sets the notification message contents
                 * @param {string or DOMElement} content The notification message content
                 *
                 */
                setContent: function (content) {
                    if (typeof content === 'string') {
                        clearContents(this.element);
                        this.element.innerHTML = content;
                    } else if (content instanceof window.HTMLElement && this.element.firstChild !== content) {
                        clearContents(this.element);
                        this.element.appendChild(content);
                    }
                    if(this.__internal.closeButton){
                        var close = document.createElement('span');
                        addClass(close, classes.close);
                        close.setAttribute('data-close', true);
                        this.element.appendChild(close);
                    }
                    return this;
                },
                /*
                 * Dismisses all open notifications except this.
                 *
                 */
                dismissOthers: function () {
                    notifier.dismissAll(this);
                    return this;
                }
            });
        }

        //notifier api
        return {
            /**
             * Gets or Sets notifier settings.
             *
             * @param {string} key The setting name
             * @param {Variant} value The setting value.
             *
             * @return {Object}	if the called as a setter, return the notifier instance.
             */
            setting: function (key, value) {
                //ensure init
                initialize(this);

                if (typeof value === 'undefined') {
                    //get
                    return this.__internal[key];
                } else {
                    //set
                    switch (key) {
                    case 'position':
                        this.__internal.position = value;
                        updatePosition(this);
                        break;
                    case 'delay':
                        this.__internal.delay = value;
                        break;
                    }
                }
                return this;
            },
            /**
             * [Alias] Sets dialog settings/options
             */
            set:function(key,value){
                this.setting(key,value);
                return this;
            },
            /**
             * [Alias] Gets dialog settings/options
             */
            get:function(key){
                return this.setting(key);
            },
            /**
             * Creates a new notification message
             *
             * @param {string} type The type of notification message (simply a CSS class name 'ajs-{type}' to be added).
             * @param {Function} callback  A callback function to be invoked when the message is dismissed.
             *
             * @return {undefined}
             */
            create: function (type, callback) {
                //ensure notifier init
                initialize(this);
                //create new notification message
                var div = document.createElement('div');
                div.className = classes.message + ((typeof type === 'string' && type !== '') ? ' ajs-' + type : '');
                return create(div, callback);
            },
            /**
             * Dismisses all open notifications.
             *
             * @param {Object} excpet [optional] The notification object to exclude from dismissal.
             *
             */
            dismissAll: function (except) {
                var clone = openInstances.slice(0);
                for (var x = 0; x < clone.length; x += 1) {
                    var  instance = clone[x];
                    if (except === undefined || except !== instance) {
                        instance.dismiss();
                    }
                }
            }
        };
    })();

    /**
     * Alertify public API
     * This contains everything that is exposed through the alertify object.
     *
     * @return {Object}
     */
    function Alertify() {

        // holds a references of created dialogs
        var dialogs = {};

        /**
         * Extends a given prototype by merging properties from base into sub.
         *
         * @sub {Object} sub The prototype being overwritten.
         * @base {Object} base The prototype being written.
         *
         * @return {Object} The extended prototype.
         */
        function extend(sub, base) {
            // copy dialog pototype over definition.
            for (var prop in base) {
                if (base.hasOwnProperty(prop)) {
                    sub[prop] = base[prop];
                }
            }
            return sub;
        }


        /**
        * Helper: returns a dialog instance from saved dialogs.
        * and initializes the dialog if its not already initialized.
        *
        * @name {String} name The dialog name.
        *
        * @return {Object} The dialog instance.
        */
        function get_dialog(name) {
            var dialog = dialogs[name].dialog;
            //initialize the dialog if its not already initialized.
            if (dialog && typeof dialog.__init === 'function') {
                dialog.__init(dialog);
            }
            return dialog;
        }

        /**
         * Helper:  registers a new dialog definition.
         *
         * @name {String} name The dialog name.
         * @Factory {Function} Factory a function resposible for creating dialog prototype.
         * @transient {Boolean} transient True to create a new dialog instance each time the dialog is invoked, false otherwise.
         * @base {String} base the name of another dialog to inherit from.
         *
         * @return {Object} The dialog definition.
         */
        function register(name, Factory, transient, base) {
            var definition = {
                dialog: null,
                factory: Factory
            };

            //if this is based on an existing dialog, create a new definition
            //by applying the new protoype over the existing one.
            if (base !== undefined) {
                definition.factory = function () {
                    return extend(new dialogs[base].factory(), new Factory());
                };
            }

            if (!transient) {
                //create a new definition based on dialog
                definition.dialog = extend(new definition.factory(), dialog);
            }
            return dialogs[name] = definition;
        }

        return {
            /**
             * Alertify defaults
             * 
             * @type {Object}
             */
            defaults: defaults,
            /**
             * Dialogs factory 
             *
             * @param {string}      Dialog name.
             * @param {Function}    A Dialog factory function.
             * @param {Boolean}     Indicates whether to create a singleton or transient dialog.
             * @param {String}      The name of the base type to inherit from.
             */
            dialog: function (name, Factory, transient, base) {

                // get request, create a new instance and return it.
                if (typeof Factory !== 'function') {
                    return get_dialog(name);
                }

                if (this.hasOwnProperty(name)) {
                    throw new Error('alertify.dialog: name already exists');
                }

                // register the dialog
                var definition = register(name, Factory, transient, base);

                if (transient) {

                    // make it public
                    this[name] = function () {
                        //if passed with no params, consider it a get request
                        if (arguments.length === 0) {
                            return definition.dialog;
                        } else {
                            var instance = extend(new definition.factory(), dialog);
                            //ensure init
                            if (instance && typeof instance.__init === 'function') {
                                instance.__init(instance);
                            }
                            instance['main'].apply(instance, arguments);
                            return instance['show'].apply(instance);
                        }
                    };
                } else {
                    // make it public
                    this[name] = function () {
                        //ensure init
                        if (definition.dialog && typeof definition.dialog.__init === 'function') {
                            definition.dialog.__init(definition.dialog);
                        }
                        //if passed with no params, consider it a get request
                        if (arguments.length === 0) {
                            return definition.dialog;
                        } else {
                            var dialog = definition.dialog;
                            dialog['main'].apply(definition.dialog, arguments);
                            return dialog['show'].apply(definition.dialog);
                        }
                    };
                }
            },
            /**
             * Close all open dialogs.
             *
             * @param {Object} excpet [optional] The dialog object to exclude from closing.
             *
             * @return {undefined}
             */
            closeAll: function (except) {
                var clone = openDialogs.slice(0);
                for (var x = 0; x < clone.length; x += 1) {
                    var instance = clone[x];
                    if (except === undefined || except !== instance) {
                        instance.close();
                    }
                }
            },
            /**
             * Gets or Sets dialog settings/options. if the dialog is transient, this call does nothing.
             *
             * @param {string} name The dialog name.
             * @param {String|Object} key A string specifying a propery name or a collection of key/value pairs.
             * @param {Variant} value Optional, the value associated with the key (in case it was a string).
             *
             * @return {undefined}
             */
            setting: function (name, key, value) {

                if (name === 'notifier') {
                    return notifier.setting(key, value);
                }

                var dialog = get_dialog(name);
                if (dialog) {
                    return dialog.setting(key, value);
                }
            },
            /**
             * [Alias] Sets dialog settings/options 
             */
            set: function(name,key,value){
                return this.setting(name, key,value);
            },
            /**
             * [Alias] Gets dialog settings/options 
             */
            get: function(name, key){
                return this.setting(name, key);
            },
            /**
             * Creates a new notification message.
             * If a type is passed, a class name "ajs-{type}" will be added.
             * This allows for custom look and feel for various types of notifications.
             *
             * @param  {String | DOMElement}    [message=undefined]		Message text
             * @param  {String}                 [type='']				Type of log message
             * @param  {String}                 [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}               [callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            notify: function (message, type, wait, callback) {
                return notifier.create(type, callback).push(message, wait);
            },
            /**
             * Creates a new notification message.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            message: function (message, wait, callback) {
                return notifier.create(null, callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'success'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            success: function (message, wait, callback) {
                return notifier.create('success', callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'error'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            error: function (message, wait, callback) {
                return notifier.create('error', callback).push(message, wait);
            },
            /**
             * Creates a new notification message of type 'warning'.
             *
             * @param  {String}		[message=undefined]		Message text
             * @param  {String}     [wait='']				Time (in seconds) to wait before auto-close
             * @param  {Function}	[callback=undefined]	A callback function to be invoked when the log is closed.
             *
             * @return {Object} Notification object.
             */
            warning: function (message, wait, callback) {
                return notifier.create('warning', callback).push(message, wait);
            },
            /**
             * Dismisses all open notifications
             *
             * @return {undefined}
             */
            dismissAll: function () {
                notifier.dismissAll();
            }
        };
    }
    var alertify = new Alertify();

    /**
    * Alert dialog definition
    *
    * invoked by:
    *	alertify.alert(message);
    *	alertify.alert(title, message);
    *	alertify.alert(message, onok);
    *	alertify.alert(title, message, onok);
     */
    alertify.dialog('alert', function () {
        return {
            main: function (_title, _message, _onok) {
                var title, message, onok;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    if (typeof _message === 'function') {
                        message = _title;
                        onok = _message;
                    } else {
                        title = _title;
                        message = _message;
                    }
                    break;
                case 3:
                    title = _title;
                    message = _message;
                    onok = _onok;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('onok', onok);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.ok,
                        }
                    ],
                    focus: {
                        element: 0,
                        select: false
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                // nothing
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                this.setContent(message);
            },
            settings: {
                message: undefined,
                onok: undefined,
                label: undefined,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'label':
                    if (this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].element.innerHTML = newValue;
                    }
                    break;
                }
            },
            callback: function (closeEvent) {
                if (typeof this.get('onok') === 'function') {
                    var returnValue = this.get('onok').call(this, closeEvent);
                    if (typeof returnValue !== 'undefined') {
                        closeEvent.cancel = !returnValue;
                    }
                }
            }
        };
    });
    /**
     * Confirm dialog object
     *
     *	alertify.confirm(message);
     *	alertify.confirm(message, onok);
     *	alertify.confirm(message, onok, oncancel);
     *	alertify.confirm(title, message, onok, oncancel);
     */
    alertify.dialog('confirm', function () {

        var autoConfirm = {
            timer: null,
            index: null,
            text: null,
            duration: null,
            task: function (event, self) {
                if (self.isOpen()) {
                    self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text + ' (&#8207;' + autoConfirm.duration + '&#8207;) ';
                    autoConfirm.duration -= 1;
                    if (autoConfirm.duration === -1) {
                        clearAutoConfirm(self);
                        var button = self.__internal.buttons[autoConfirm.index];
                        var closeEvent = createCloseEvent(autoConfirm.index, button);

                        if (typeof self.callback === 'function') {
                            self.callback.apply(self, [closeEvent]);
                        }
                        //close the dialog.
                        if (closeEvent.close !== false) {
                            self.close();
                        }
                    }
                } else {
                    clearAutoConfirm(self);
                }
            }
        };

        function clearAutoConfirm(self) {
            if (autoConfirm.timer !== null) {
                clearInterval(autoConfirm.timer);
                autoConfirm.timer = null;
                self.__internal.buttons[autoConfirm.index].element.innerHTML = autoConfirm.text;
            }
        }

        function startAutoConfirm(self, index, duration) {
            clearAutoConfirm(self);
            autoConfirm.duration = duration;
            autoConfirm.index = index;
            autoConfirm.text = self.__internal.buttons[index].element.innerHTML;
            autoConfirm.timer = setInterval(delegate(self, autoConfirm.task), 1000);
            autoConfirm.task(null, self);
        }


        return {
            main: function (_title, _message, _onok, _oncancel) {
                var title, message, onok, oncancel;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    message = _title;
                    onok = _message;
                    break;
                case 3:
                    message = _title;
                    onok = _message;
                    oncancel = _onok;
                    break;
                case 4:
                    title = _title;
                    message = _message;
                    onok = _onok;
                    oncancel = _oncancel;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('onok', onok);
                this.set('oncancel', oncancel);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ENTER,
                            className: alertify.defaults.theme.ok,
                        },
                        {
                            text: alertify.defaults.glossary.cancel,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.cancel,
                        }
                    ],
                    focus: {
                        element: 0,
                        select: false
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                //nothing
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                this.setContent(message);
            },
            settings: {
                message: null,
                labels: null,
                onok: null,
                oncancel: null,
                defaultFocus: null,
                reverseButtons: null,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'labels':
                    if ('ok' in newValue && this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].text = newValue.ok;
                        this.__internal.buttons[0].element.innerHTML = newValue.ok;
                    }
                    if ('cancel' in newValue && this.__internal.buttons[1].element) {
                        this.__internal.buttons[1].text = newValue.cancel;
                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;
                    }
                    break;
                case 'reverseButtons':
                    if (newValue === true) {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
                    } else {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
                    }
                    break;
                case 'defaultFocus':
                    this.__internal.focus.element = newValue === 'ok' ? 0 : 1;
                    break;
                }
            },
            callback: function (closeEvent) {
                clearAutoConfirm(this);
                var returnValue;
                switch (closeEvent.index) {
                case 0:
                    if (typeof this.get('onok') === 'function') {
                        returnValue = this.get('onok').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                case 1:
                    if (typeof this.get('oncancel') === 'function') {
                        returnValue = this.get('oncancel').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                }
            },
            autoOk: function (duration) {
                startAutoConfirm(this, 0, duration);
                return this;
            },
            autoCancel: function (duration) {
                startAutoConfirm(this, 1, duration);
                return this;
            }
        };
    });
    /**
     * Prompt dialog object
     *
     * invoked by:
     *	alertify.prompt(message);
     *	alertify.prompt(message, value);
     *	alertify.prompt(message, value, onok);
     *	alertify.prompt(message, value, onok, oncancel);
     *	alertify.prompt(title, message, value, onok, oncancel);
     */
    alertify.dialog('prompt', function () {
        var input = document.createElement('INPUT');
        var p = document.createElement('P');
        return {
            main: function (_title, _message, _value, _onok, _oncancel) {
                var title, message, value, onok, oncancel;
                switch (arguments.length) {
                case 1:
                    message = _title;
                    break;
                case 2:
                    message = _title;
                    value = _message;
                    break;
                case 3:
                    message = _title;
                    value = _message;
                    onok = _value;
                    break;
                case 4:
                    message = _title;
                    value = _message;
                    onok = _value;
                    oncancel = _onok;
                    break;
                case 5:
                    title = _title;
                    message = _message;
                    value = _value;
                    onok = _onok;
                    oncancel = _oncancel;
                    break;
                }
                this.set('title', title);
                this.set('message', message);
                this.set('value', value);
                this.set('onok', onok);
                this.set('oncancel', oncancel);
                return this;
            },
            setup: function () {
                return {
                    buttons: [
                        {
                            text: alertify.defaults.glossary.ok,
                            key: keys.ENTER,
                            className: alertify.defaults.theme.ok,
                        },
                        {
                            text: alertify.defaults.glossary.cancel,
                            key: keys.ESC,
                            invokeOnClose: true,
                            className: alertify.defaults.theme.cancel,
                        }
                    ],
                    focus: {
                        element: input,
                        select: true
                    },
                    options: {
                        maximizable: false,
                        resizable: false
                    }
                };
            },
            build: function () {
                input.className = alertify.defaults.theme.input;
                input.setAttribute('type', 'text');
                input.value = this.get('value');
                this.elements.content.appendChild(p);
                this.elements.content.appendChild(input);
            },
            prepare: function () {
                //nothing
            },
            setMessage: function (message) {
                if (typeof message === 'string') {
                    clearContents(p);
                    p.innerHTML = message;
                } else if (message instanceof window.HTMLElement && p.firstChild !== message) {
                    clearContents(p);
                    p.appendChild(message);
                }
            },
            settings: {
                message: undefined,
                labels: undefined,
                onok: undefined,
                oncancel: undefined,
                value: '',
                type:'text',
                reverseButtons: undefined,
            },
            settingUpdated: function (key, oldValue, newValue) {
                switch (key) {
                case 'message':
                    this.setMessage(newValue);
                    break;
                case 'value':
                    input.value = newValue;
                    break;
                case 'type':
                    switch (newValue) {
                    case 'text':
                    case 'color':
                    case 'date':
                    case 'datetime-local':
                    case 'email':
                    case 'month':
                    case 'number':
                    case 'password':
                    case 'search':
                    case 'tel':
                    case 'time':
                    case 'week':
                        input.type = newValue;
                        break;
                    default:
                        input.type = 'text';
                        break;
                    }
                    break;
                case 'labels':
                    if (newValue.ok && this.__internal.buttons[0].element) {
                        this.__internal.buttons[0].element.innerHTML = newValue.ok;
                    }
                    if (newValue.cancel && this.__internal.buttons[1].element) {
                        this.__internal.buttons[1].element.innerHTML = newValue.cancel;
                    }
                    break;
                case 'reverseButtons':
                    if (newValue === true) {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[0].element);
                    } else {
                        this.elements.buttons.primary.appendChild(this.__internal.buttons[1].element);
                    }
                    break;
                }
            },
            callback: function (closeEvent) {
                var returnValue;
                switch (closeEvent.index) {
                case 0:
                    this.settings.value = input.value;
                    if (typeof this.get('onok') === 'function') {
                        returnValue = this.get('onok').call(this, closeEvent, this.settings.value);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    break;
                case 1:
                    if (typeof this.get('oncancel') === 'function') {
                        returnValue = this.get('oncancel').call(this, closeEvent);
                        if (typeof returnValue !== 'undefined') {
                            closeEvent.cancel = !returnValue;
                        }
                    }
                    if(!closeEvent.cancel){
                        input.value = this.settings.value;
                    }
                    break;
                }
            }
        };
    });

    // CommonJS
    {
        module.exports = alertify;
    // AMD
    }

} ( typeof window !== 'undefined' ? window : commonjsGlobal ) );
});

/*
*  Color options (applied on the map and on the chart):
*/
var color_countries = 'rgb(147, 144, 252)'; // Color for features within the study zone but not highlighted
var color_disabled = '#bebecd'; // Color for features outside the study zone / without data
var color_sup = 'green'; // Color for selected feature with "better" values than the reference feature
var color_inf = 'red'; // Color for selected feature with "worse" values than the reference feature
var color_highlight = 'yellow'; // Color for the reference feature ("Ma rÃ©gion")
var color_default_dissim = 'darkred'; // Neutral color for selected features when green/red can't be used

/*
*  Misc. options:
*/
var MAX_VARIABLES = 7; // The maximum number of variables that can be selected simultaneously.
var RATIO_WH_MAP = 0.879;

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var math_abs = Math.abs;
var math_round = Math.round;
var math_max = Math.max;
var math_sin = Math.sin;
var math_cos = Math.cos;
var math_sqrt = Math.sqrt;
var HALF_PI = Math.PI / 2;

var getElementsFromPoint = function getElementsFromPoint(x, y) {
  return document.elementsFromPoint ? Array.prototype.slice.call(document.elementsFromPoint(x, y)) : document.msElementsFromPoint ? Array.prototype.slice.call(document.msElementsFromPoint(x, y)) : null;
};

function prepareTooltip2(parent, before) {
  var classname = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'tooltip';

  var t = parent.select('.tooltip');
  if (t.node()) {
    return t;
  }
  var tooltip = parent.insert('div', before).attr('class', classname).style('display', 'none');

  tooltip.append('p').attr('class', 'title');
  tooltip.append('p').attr('class', 'content');

  return tooltip;
}

var Tooltipsify = function Tooltipsify(selector) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var opts = {
    parent: options.parent || document.body,
    className: options.className || 'tooltip-black',
    dataAttr: options.dataAttr || 'title-tooltip',
    timeout: options.timeout || 5
  };
  var elems = d3.selectAll(selector);
  if (elems._groups[0].length === 0) return;

  var tooltip_parent = d3.select(opts.parent).select('.' + opts.className);
  var tooltip = void 0;
  var t = void 0;

  if (!tooltip_parent.node()) {
    tooltip_parent = d3.select(opts.parent).insert('div').attr('class', opts.className).style('display', 'none');
    tooltip = tooltip_parent.append('p').attr('class', 'content');
  } else {
    tooltip = tooltip_parent.select('.content');
  }

  elems.on('mouseover', function () {
    clearTimeout(t);
    tooltip_parent.style('display', null);
  }).on('mouseout', function () {
    clearTimeout(t);
    t = setTimeout(function () {
      tooltip_parent.style('display', 'none');
    }, opts.timeout);
  }).on('mousemove mousedown', function (d) {
    clearTimeout(t);
    tooltip.html(this.getAttribute(opts.dataAttr));
    var b = tooltip.node().getBoundingClientRect();
    tooltip_parent.styles({
      display: null,
      left: d3.event.pageX - 5 + 'px',
      top: d3.event.pageY - b.height - 15 + 'px' });
  });
};

function unbindUI() {
  // Removes the current behavior corresponding to clicking on the left menu:
  d3.selectAll('span.filter_v').on('click', null);
  d3.selectAll('span.target_region').on('click', null);
  d3.selectAll('span.label_chk').on('click', null);

  // Remove the table:
  d3.select('.dataTable-wrapper').remove();

  // Unbind buttons on the top of the map:
  d3.select('#header_map').selectAll('img').on('click', null);

  // Remove the selection menu (or buttons) under the chart:
  d3.select('#bar_section > #menu_selection').remove();

  // Removes the current behavior corresponding to clicking on the top menu:
  d3.selectAll('.type_chart.title_menu').on('click', null);

  // Removes the current behavior corresponding to pressing the Control key:
  document.onkeyup = null;
  document.onkeydown = null;
}

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} test_value - The value to be compared to the value of "my region".
* @param {Number} ref_value - The value of my region.
* @param {Boolean} serie_inversed - Whether the serie is inversed or not in the current chart.
* @return {String} - A string containing the color to be used for this value.
*
*/
var comp = function comp(test_value, ref_value, serie_inversed) {
  if (test_value < ref_value) {
    return serie_inversed ? color_sup : color_inf;
  }
  return serie_inversed ? color_inf : color_sup;
};

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} val1 - The value to be compared to the value of "my region" for the 1st variable.
* @param {Number} val2 - The value to be compared to the value of "my region" for the 2nd variable.
* @param {Number} ref_val1 - The value of my region for he first variable.
* @param {Number} ref_val2 - The value of my region for the second variable.
* @param {Boolean} xInversed - Whether the serie is inversed on the x axis in the current chart.
* @param {Boolean} yInversed - Whether the serie is inversed on the y axis in the current chart.
* @return {String} - A string containing the color to be used for theses values.
*
*/
var comp2 = function comp2(val1, val2, ref_val1, ref_val2, xInversed, yInversed) {
  if (val1 < ref_val1 && !xInversed || val1 > ref_val1 && xInversed) {
    // val1 is inferior:
    if (val2 < ref_val2) {
      return yInversed ? 'rgb(160, 30, 160)' : color_inf;
    }
    return yInversed ? color_inf : 'rgb(160, 30, 160)';
  }
  // val1 is superior :
  if (val2 > ref_val2) {
    return !yInversed ? color_sup : 'orange';
  }
  return !yInversed ? 'orange' : color_sup;
};

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

var PropSizer = function PropSizer(fixed_value, fixed_size) {
  var _this = this;

  this.fixed_value = fixed_value;
  var sqrt = Math.sqrt;
  var abs = Math.abs;
  var PI = Math.PI;
  this.smax = fixed_size * fixed_size * PI;
  this.scale = function (val) {
    return sqrt(abs(val) * _this.smax / _this.fixed_value) / PI;
  };
  // this.get_value = size => ((size * PI) ** 2) / this.smax * this.fixed_value;
  // Use Math pow to support browser without ** operator:
  // eslint-disable-next-line no-restricted-properties
  this.get_value = function (size) {
    return Math.pow(size * PI, 2) / _this.smax * _this.fixed_value;
  };
};

var removeDuplicates = function removeDuplicates(arr) {
  var tmp = [];
  for (var i = 0, len_arr = arr.length; i < len_arr; i++) {
    if (tmp.indexOf(arr[i]) === -1) {
      tmp.push(arr[i]);
    }
  }
  return tmp;
};

var getSvgPathType = function getSvgPathType(path) {
  if (path.indexOf('M ') > -1 && path.indexOf(' L ') > -1) {
    return 2;
  }
  return 1;
};

var svgPathToCoords = function svgPathToCoords(path, type_path) {
  if (type_path === 1) {
    return path.slice(1).split('L').map(function (pt) {
      return pt.split(',').map(function (a) {
        return +a;
      });
    });
  }
  return path.slice(2).split(' L ').map(function (pt) {
    return pt.split(' ').map(function (a) {
      return +a;
    });
  });
};

function computePercentileRank(obj, field_name, result_field_name) {
  var values = obj.map(function (d) {
    return d[field_name];
  });
  var len_values = values.length;
  var getPR = function getPR(v) {
    var count = 0;
    for (var i = 0; i < len_values; i++) {
      if (values[i] <= v) {
        count += 1;
      }
    }
    // return 100 * count / len_values;
    return 100 * (count - 1) / (len_values - 1);
  };
  for (var ix = 0; ix < len_values; ix++) {
    // eslint-disable-next-line no-param-reassign
    obj[ix][result_field_name] = getPR(values[ix]);
  }
}

var _getPR = function _getPR(v, serie) {
  var count = 0;
  for (var i = 0; i < serie.length; i++) {
    if (serie[i] <= v) {
      count += 1;
    }
  }
  // return 100 * count / serie.length;
  return 100 * (count - 1) / (serie.length - 1);
};

var getMean = function getMean(serie) {
  var nb_values = serie.length;
  var sum = 0;
  for (var i = 0; i < nb_values; i++) {
    sum += serie[i];
  }
  return sum / nb_values;
};

function euclidian_distance(feature1, feature2) {
  var _feature1$geometry$co = slicedToArray(feature1.geometry.coordinates, 2),
      x1 = _feature1$geometry$co[0],
      y1 = _feature1$geometry$co[1];

  var _feature2$geometry$co = slicedToArray(feature2.geometry.coordinates, 2),
      x2 = _feature2$geometry$co[0],
      y2 = _feature2$geometry$co[1];

  var a = x1 - x2;
  var b = y1 - y2;
  return math_sqrt(a * a + b * b);
}

/**
* Function to select the first variable on the left menu
* (triggered after changing region, if no more variable was selected)
*
* @return {void}
*/
function selectFirstAvailableVar() {
  var menu = document.querySelector('#menu');
  var v = menu.querySelectorAll('.target_variable');
  for (var i = 0; i < v.length; i++) {
    if (!v[i].classList.contains('disabled')) {
      v[i].classList.add('checked');
      return v[i].getAttribute('value');
    }
  }
}

function prepareGeomLayerId(layer, id_field) {
  layer.features.forEach(function (ft) {
    // eslint-disable-next-line no-param-reassign
    ft.id = ft.properties[id_field];
  });
}

function getRandom(arr, false_length) {
  return arr[Math.round(Math.random() * (false_length || arr.length))];
}

var createMenu = function createMenu(names, variables, study_zones, territorial_mesh) {
  // First section, regions names:
  var title_section1 = document.createElement('p');
  title_section1.className = 'title_menu';
  title_section1.innerHTML = 'Ma rÃ©gion';
  var section1 = document.createElement('div');
  section1.className = 'box';
  section1.style.overflow = 'auto';
  section1.style.height = '15%';
  for (var i = 0, len_i = names.length; i < len_i; i++) {
    var id = names[i].id;
    var name = names[i].name;
    var entry = document.createElement('p');
    entry.innerHTML = '<span value="' + id + '" class=\'target_region square\'></span><span class="label_chk">' + name + '</span>';
    section1.appendChild(entry);
  }

  // Second section, groups of variables:
  var title_section2 = document.createElement('p');
  title_section2.className = 'title_menu';
  title_section2.innerHTML = 'Indicateurs';
  var section2 = document.createElement('div');
  section2.id = 'menu_variables';
  section2.className = 'box';
  section2.style.overflow = 'auto';
  section2.style.height = '25%';

  // Filter the "variables" variable to fetch the group names :
  var groups_var = removeDuplicates(variables.map(function (d) {
    return d.group;
  }).filter(function (d) {
    return d !== 'Num/dÃ©nom';
  }));

  var _loop = function _loop(_i, _len_i) {
    var gp_name = groups_var[_i];
    var entry = document.createElement('p');
    entry.className = 'name_group_var';

    entry.innerHTML = _i === 0 ? '<span class=\'arrow arrow_right\'></span><span>' + gp_name + '</span>' : '<span class=\'arrow arrow_down\'></span><span>' + gp_name + '</span>';
    section2.appendChild(entry);
    var div_grp = document.createElement('div');
    div_grp.style.display = _i === 0 ? null : 'none';
    var var_names = variables.filter(function (d) {
      return d.group === gp_name;
    });
    for (var j = 0, len_j = var_names.length; j < len_j; j++) {
      var name_var = var_names[j].name;
      var code_var = var_names[j].id;
      var sub_entry = document.createElement('p');
      sub_entry.className = 'small';
      sub_entry.innerHTML = '<span value="' + code_var + '" class="target_variable small_square"></span><span class="label_chk">' + name_var + '</span><span class="i_info">i</span>';
      div_grp.appendChild(sub_entry);
    }
    section2.appendChild(div_grp);
  };

  for (var _i = 0, _len_i = groups_var.length; _i < _len_i; _i++) {
    _loop(_i, _len_i);
  }

  // Third section, study zone:
  var title_section3 = document.createElement('p');
  title_section3.className = 'title_menu';
  title_section3.innerHTML = 'Espace d\'Ã©tude';
  var section3 = document.createElement('div');
  section3.id = 'menu_studyzone';
  section3.className = 'box';
  section3.style.overflow = 'auto';
  section3.style.maxHeight = '25%';
  for (var _i2 = 0, _len_i2 = study_zones.length; _i2 < _len_i2; _i2++) {
    var _entry = document.createElement('p');
    var zone = study_zones[_i2];
    if (zone.id === 'filter_dist') {
      _entry.innerHTML = '<span filter-value="' + zone.id + '" display_level="' + zone.display_level + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span><input value="450" disabled="disabled" style="width: 55px; height: 13px;" type="number" min="0" max="100000" id="dist_filter"></input><span> km</span><span class="i_info">i</span>';
    } else {
      _entry.innerHTML = '<span filter-value="' + zone.id + '" display_level="' + zone.display_level + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span><span class="i_info">i</span>';
    }
    section3.appendChild(_entry);
  }
  // Fourth section:
  var title_section4 = document.createElement('p');
  title_section4.className = 'title_menu';
  title_section4.innerHTML = 'Maillage territorial d\'analyse';
  var section4 = document.createElement('div');
  section4.id = 'menu_territ_level';
  section4.className = 'box';
  section4.style.overflow = 'auto';
  section4.style.maxHeight = '20%';
  for (var _i3 = 0, _len_i3 = territorial_mesh.length; _i3 < _len_i3; _i3++) {
    var _entry2 = document.createElement('p');
    var territ_level = territorial_mesh[_i3];
    _entry2.innerHTML = '<span value="' + territ_level.id + '" class=\'territ_level square\'></span><span class="label_chk">' + territ_level.name + '</span><span class="i_info">i</span>';
    section4.appendChild(_entry2);
  }

  var section5 = document.createElement('div');
  section4.id = 'menu_territ_level';
  section4.className = 'box';
  section4.style.overflow = 'auto';
  section4.style.maxHeight = '20%';
  var img1 = document.createElement('img');
  img1.src = 'img/logo_riate.png';
  img1.style.margin = '0px 3px';
  var img2 = document.createElement('img');
  img2.src = 'img/logo_cget.png';
  img2.style.margin = '0px 3px';
  var blabla = document.createElement('span');
  blabla.style.verticalAlign = 'super';
  blabla.style.fontSize = '0.5em';
  blabla.innerHTML = '<a style="margin: 0 4px;" href="#">CrÃ©dits</a><a style="margin: 0 4px;" href="#">Plus d\'informations</a>';
  section5.appendChild(img1);
  section5.appendChild(img2);
  section5.appendChild(blabla);

  // The actual menu containing these 4 sections:
  var menu = document.getElementById('menu');
  menu.id = 'menu';
  menu.style.float = 'left';
  menu.appendChild(title_section1);
  menu.appendChild(section1);
  menu.appendChild(title_section2);
  menu.appendChild(section2);
  menu.appendChild(title_section3);
  menu.appendChild(section3);
  menu.appendChild(title_section4);
  menu.appendChild(section4);
  menu.appendChild(section5);
};

function makeTopMenu() {
  var top_menu = d3.select('#menutop').styles({ 'font-family': "'Signika', sans-serif", 'font-size': '0.80em', 'text-align': 'center' });
  var width_left = document.querySelector('#menu').getBoundingClientRect().width + 25 + 'px';
  var width_central_chart = document.querySelector('#bar_section').getBoundingClientRect().width + 'px';
  var width_map = document.querySelector('#map_section').getBoundingClientRect().width - 40 + 'px';

  top_menu.append('div').attrs({ class: 'title_section t1' }).html('SÃ‰LECTION');

  var type_chart = top_menu.append('div').attr('class', 'top_section t2').style('display', 'flex');

  var position = type_chart.append('div').attr('class', 'type_comparaison');

  position.append('p').attr('class', 'title_type_comp').html('POSITION');

  position.append('span').attrs({ class: 'type_chart chart_t1 selected', value: 'BarChart1' }).html('1 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ScatterPlot2' }).html('2 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t3 disabled', value: 'RadarChart3' }).html('+3 ind.');

  var ressemblance = type_chart.append('div').attr('class', 'type_comparaison');

  ressemblance.append('p').attr('class', 'title_type_comp').html('RESSEMBLANCES');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t1', value: 'Similarity1plus' }).html('+1 ind.');

  top_menu.append('div').attrs({ class: 'title_section t3' }).html('QUELLES RÃ‰GIONS ?');
}

function makeHeaderMapSection() {
  var header_map_section = d3.select('#map_section').insert('div', '#svg_map').attr('id', 'header_map');

  header_map_section.append('div').attrs({ class: 'filter_info', title: 'Espace d\'Ã©tude' });

  var completude_section = header_map_section.append('div').attrs({ class: 'completude_section', title: 'ComplÃ©tude de l\'information' });

  completude_section.append('p').attr('id', 'completude_features');

  completude_section.append('p').attr('id', 'completude_population');

  header_map_section.insert('img').attrs({
    class: 'map_button active',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  });

  header_map_section.insert('div').attrs({
    id: 'zoom_in',
    class: 'top_half_circle'
  }).append('span').text('+');

  header_map_section.insert('div').attrs({
    id: 'zoom_out',
    class: 'top_half_circle'
  }).append('span').text('-');
}

function makeHeaderChart() {
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').attr('id', 'header_chart').style('margin-bottom', '0').style('clear', 'both');

  header_bar_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/picto_download2.png',
    id: 'img_table'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    var columns = Object.keys(app.current_data[0]);
    var content = [columns.join(','), '\r\n', app.current_data.map(function (d) {
      return columns.map(function (c) {
        return d[c];
      }).join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'Regioviz_export.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
    // if (document.querySelector('.dataTable-wrapper').style.display) {
    //   document.querySelector('#svg_map').style.display = 'none';
    //   document.querySelector('#svg_legend').style.display = 'none';
    //   document.querySelector('#header_map').style.display = 'none';
    //   document.querySelector('#header_table').style.display = null;
    //   document.querySelector('.dataTable-wrapper').style.display = null;
    //   this.style.filter = 'invert(75%)';
    // } else {
    //   document.querySelector('#svg_map').style.display = null;
    //   document.querySelector('#svg_legend').style.display = null;
    //   document.querySelector('#header_map').style.display = null;
    //   document.querySelector('#header_table').style.display = 'none';
    //   document.querySelector('.dataTable-wrapper').style.display = 'none';
    //   this.style.filter = null;
    // }
  });

  header_bar_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/picto_report2.png',
    id: 'img_printer'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    var content = '<div id="prep_rapport"><h3>Rapport en cours de pr\xE9paration...</h3>\n<div class="spinner"><div class="cube1"></div><div class="cube2"></div></div></div>';
    // eslint-disable-next-line new-cap
    var modal = new tingle_min.modal({
      stickyFooter: false,
      closeMethods: ['overlay', 'escape'],
      closeLabel: 'Close',
      onOpen: function onOpen() {
        document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
      },
      onClose: function onClose() {
        modal.destroy();
      }
    });
    modal.setContent(content);
    modal.open();
    setTimeout(function () {
      modal.setContent('<div id="prep_rapport">\n<p><a class="buttonDownload" href="#">T\xE9l\xE9charger</a> <a class="buttonDownload" href="#">Ouvrir</a></p></div>');
    }, 2500);
  });

  header_bar_section.insert('img').attrs({
    width: 20,
    height: 20,
    src: 'img/picto_information2.png',
    id: 'img_info'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    var help_message = app.chart.getHelpMessage().split('\n').join('<br>');
    // eslint-disable-next-line new-cap
    var modal = new tingle_min.modal({
      stickyFooter: false,
      closeMethods: ['overlay', 'button', 'escape'],
      closeLabel: 'Close',
      onOpen: function onOpen() {
        document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
      },
      onClose: function onClose() {
        modal.destroy();
      }
    });
    modal.setContent(help_message);
    modal.open();
  });
}

function prepare_dataset(full_dataset, app$$1) {
  app$$1.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name for easier lookup:
  app$$1.feature_names = {};
  full_dataset.forEach(function (elem) {
    app$$1.feature_names[elem.id] = elem.name;
  });
}

/**
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {Array} - The filtered data, containing only the requested variables
*   for the feature of the current study zone,
*    without features containing empty ratios.
*
*/
function filterLevelVar(app$$1) {
  // Fetch the name(s) of the ratio (and associated num and denum variable),
  // the name of the targeted region and the current level :
  var _app$current_config = app$$1.current_config,
      num = _app$current_config.num,
      denum = _app$current_config.denum,
      ratio = _app$current_config.ratio,
      current_level = _app$current_config.current_level,
      id_field = _app$current_config.id_field,
      filter_key = _app$current_config.filter_key,
      name_field = _app$current_config.name_field,
      my_region = _app$current_config.my_region;


  var all_variables = ratio.concat(num).concat(denum);
  // Prepare the data:
  var temp = void 0;
  if (filter_key instanceof Array) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft[current_level] && filter_key.indexOf(ft[id_field]) > -1;
    });
    app$$1.current_config.my_category = null;
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.filter(function (ft) {
      return ft[id_field] === my_region;
    })[0][filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft[current_level] && ft[filter_key] === my_category;
    });
    app$$1.current_config.my_category = my_category;
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft[current_level];
    });
    app$$1.current_config.my_category = null;
  }
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      name: ft[name_field]
    };
    for (var i = 0, len_i = all_variables.length; i < len_i; i++) {
      props_feature[all_variables[i]] = +ft[all_variables[i]];
    }
    return props_feature;
  });
  app$$1.current_data = temp;
}

/**
* TODO
*/
function filterLevelGeom(nuts_features) {
  var filter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'N1';

  return nuts_features.filter(function (d) {
    return d.properties[filter] === 1;
  });
}

/**
* Function to prepare the global "variables_info" Array of objects from the array
* containing the readed 'metadata.csv' file.
*
* @param {Array} metadata_indicateurs - The array returned by d3.csv.
* @return {void}
*
*/
function prepareVariablesInfo(metadata_indicateurs) {
  metadata_indicateurs.filter(function (ft) {
    return ft.Regioviz_item === 'Indicateur' || ft.Regioviz_item === 'Stock';
  }).forEach(function (ft) {
    variables_info.push({
      id: ft.id,
      id1: '' + ft.id1,
      id2: '' + ft.id2,
      name: ft.Name + ' (' + parseInt(ft.Year, 10) + ')',
      unit: '' + ft.Unit,
      group: ft.Theme,
      methodo: ft.Methodology,
      source: ft.Data_source,
      last_update: ft.Last_update,
      formula: ft.Formula
    });
  });
  metadata_indicateurs.filter(function (ft) {
    return ft.Regioviz_item === 'Study Area';
  }).forEach(function (ft) {
    study_zones.push({
      name: ft.Name, id: ft.id, display_level: ft.Theme, methodology: ft.Methodology
    });
  });
  metadata_indicateurs.filter(function (ft) {
    return ft.Regioviz_item === 'Territorial division';
  }).forEach(function (ft) {
    territorial_mesh.push({ name: ft.Name, id: ft.id, methodology: ft.Methodology });
  });
}

/**
* Set and apply a new filter (ie. restrict the study zone) on the dataset to be used.
*
* @param {String} filter_type - The name of the filter to use.
* @return {void}
*
*/
function applyFilter(app$$1, filter_type) {
  if (filter_type === 'filter_country') {
    app$$1.current_config.filter_key = 'Pays';
  } else if (filter_type === 'no_filter') {
    app$$1.current_config.filter_key = undefined;
  } else if (filter_type instanceof Array) {
    app$$1.current_config.filter_key = filter_type;
  } else {
    app$$1.current_config.filter_key = filter_type;
  }
  filterLevelVar(app$$1);
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

// TODO : Doc
function changeRegion(app$$1, id_region, map_elem) {
  app$$1.current_config.my_region = id_region;
  app$$1.current_config.my_region_pretty_name = app$$1.feature_names[app$$1.current_config.my_region];
  if (app$$1.current_config.filter_key instanceof Array) {
    map_elem.computeDistMat();
    app$$1.current_config.filter_key = map_elem.getUnitsWithin(+d3.select('#dist_filter').property('value'));
    filterLevelVar(app$$1);
  } else if (app$$1.current_config.filter_key) {
    filterLevelVar(app$$1);
  }
  // Reset the color to use on the chart/map:
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

/**
*
* @param app -
* @param code_ratio - The code of the variable to be added.
* @return {void}
*/
function addVariable(app$$1, code_ratio) {
  var variable_info = variables_info.filter(function (d) {
    return d.id === code_ratio;
  })[0];
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num.push(variable_info.id1);
  app$$1.current_config.denum.push(variable_info.id2);
  app$$1.current_config.ratio.push(variable_info.id);
  app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  app$$1.current_config.ratio_unit.push(variable_info.unit);
  filterLevelVar(app$$1);
}

/**
*
* @param app -
* @param code_ratio - The code of the variable to be remove.
* @return {void}
*/
function removeVariable(app$$1, code_ratio) {
  var ix = app$$1.current_config.ratio.indexOf(code_ratio);
  app$$1.current_config.num.splice(ix, 1);
  app$$1.current_config.denum.splice(ix, 1);
  app$$1.current_config.ratio.splice(ix, 1);
  app$$1.current_config.ratio_pretty_name.splice(ix, 1);
  app$$1.current_config.ratio_unit.splice(ix, 1);
  filterLevelVar(app$$1);
}

/**
* Reset the current variables in use.
*
* @param app -
* @param codes_ratio -
* @return {void}
*/
function resetVariables(app$$1, codes_ratio) {
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num = [];
  app$$1.current_config.denum = [];
  app$$1.current_config.ratio = [];
  app$$1.current_config.ratio_pretty_name = [];
  app$$1.current_config.ratio_unit = [];

  var _loop = function _loop(i, len) {
    var code_ratio = codes_ratio[i];
    var variable_info = variables_info.filter(function (d) {
      return d.id === code_ratio;
    })[0];
    app$$1.current_config.num.push(variable_info.id1);
    app$$1.current_config.denum.push(variable_info.id2);
    app$$1.current_config.ratio.push(variable_info.id);
    app$$1.current_config.ratio_pretty_name.push(variable_info.name);
    app$$1.current_config.ratio_unit.push(variable_info.unit);
  };

  for (var i = 0, len = codes_ratio.length; i < len; i++) {
    _loop(i, len);
  }
  filterLevelVar(app$$1);
}

/**
* Compute the ratio of available (= not empty) values (the "complÃ©tude") within
* the subset currently in use for all the variables in "vars".
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @param {Array} vars - A list of variable names for which completeness will be calculated.
* @param {String} output - Whether to output the result as a Number or as an Array
* @return {Number or Array} - Number: The ratios of features with available values within
*    the study zone (in %) or, Array : the number of features with available values
*    and the total number of features.
*/
function calcCompletudeSubset(app$$1, vars) {
  var output = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'ratio';
  var _app$current_config2 = app$$1.current_config,
      current_level = _app$current_config2.current_level,
      id_field = _app$current_config2.id_field,
      filter_key = _app$current_config2.filter_key,
      my_region = _app$current_config2.my_region;

  // Compute the length of the dataset (within the "study zone" if any):

  var temp = void 0;
  if (filter_key instanceof Array) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && filter_key.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.find(function (ft) {
      return ft[id_field] === my_region;
    })[filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level];
    });
  }
  var total_length = temp.length;

  // Compute the length of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field]
    };
    for (var i = 0, len_i = vars.length; i < len_i; i++) {
      props_feature[vars[i]] = +ft[vars[i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var filtered_length = temp.length;

  if (!(output === 'ratio')) {
    // Return the number of features with available values within
    // the study zone, and the total number of features of the study zone
    return [filtered_length, total_length];
  }
  // Return the ratio of available values ("complÃ©tude") within
  // the study zone selected by the user:
  return Math.round(filtered_length / total_length * 10000) / 100;
}

/**
* Compute the ratio of population covered by features on which all the variables
* of "vars" are available.
*
* @param {Object} app -The variable containing the global parameters about
*   the current state of the application.
* @param {Array} vars - A list of variable names for which completeness will be calculated.
* @return {Number} - The ratio (in %) of population covered by features for which
*   are available within the study zone.
*
*/
function calcPopCompletudeSubset(app$$1, vars) {
  var _app$current_config3 = app$$1.current_config,
      current_level = _app$current_config3.current_level,
      id_field = _app$current_config3.id_field,
      filter_key = _app$current_config3.filter_key,
      my_region = _app$current_config3.my_region,
      pop_field = _app$current_config3.pop_field;

  // Compute the total population stock of the data (within the "study zone" if any):

  var temp = void 0;
  if (filter_key instanceof Array) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && filter_key.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.find(function (ft) {
      return ft[id_field] === my_region;
    })[filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level] && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return !!+ft[current_level];
    });
  }
  var total_pop = 0;
  for (var i = 0, len = temp.length; i < len; i++) {
    total_pop += isNaN(+temp[i][pop_field]) ? 0 : +temp[i][pop_field];
  }
  // Compute the population stock of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      pop: +ft[pop_field]
    };
    for (var _i = 0, len_i = vars.length; _i < len_i; _i++) {
      props_feature[vars[_i]] = +ft[vars[_i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var subset_pop = 0;
  for (var _i2 = 0, _len = temp.length; _i2 < _len; _i2++) {
    subset_pop += isNaN(temp[_i2].pop) ? 0 : temp[_i2].pop;
  }
  // Return the ratio of population values ("complÃ©tude") within
  // the study zone selected by the user:
  return Math.round(subset_pop / total_pop * 10000) / 100;
}
/* eslint-enable no-param-reassign */

var svg_map = d3.select('svg#svg_map');
var bbox_svg = svg_map.node().getBoundingClientRect();
var width_map = +bbox_svg.width;
var height_map = width_map * (1 / RATIO_WH_MAP);
svg_map.attr('height', height_map + 'px');

var styles = {
  frame: { id: 'frame', fill: '#e9f4fe', 'fill-opacity': 1 },
  countries: { id: 'countries', fill: '#d6d6d6', 'fill-opacity': 1 },
  boxes: { id: 'boxes', fill: '#e9f4fe', 'fill-opacity': 1 },
  nuts: { id: 'nuts', fill: '#9390fc', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#f7fcfe', 'stroke-opacity': 0.9, target: true },
  countries_remote: { id: 'countries_remote', fill: '#d6d6d6', 'fill-opacity': 1 },
  cyprus_non_espon_space: { id: 'cyprus_non_espon_space', fill: '#ffffff', 'fill-opacity': 1 },
  borders: { id: 'borders', fill: 'none', 'stroke-width': 1, stroke: '#ffffff' },
  countries_remote_boundaries: { id: 'countries_remote_boundaries', fill: 'none', 'stroke-width': 1, stroke: '#ffffff' },
  coasts: { id: 'coasts', fill: 'none', stroke: '#d2dbef', 'stroke-width': 0.5 },
  coasts_remote: { id: 'coasts_remote', fill: 'none', stroke: '#d2dbef', 'stroke-width': 0.5 },
  boxes2: { id: 'boxes2', stroke: '#7a7a7a', 'stroke-width': 1, fill: 'none' },
  line: { id: 'line', stroke: '#d6d6d6', 'stroke-width': 1.5, fill: 'none' }
};

var projection = void 0;
var path = void 0;

function get_bbox_layer_path(name) {
  var bbox_layer = [[Infinity, Infinity], [-Infinity, -Infinity]];
  svg_map.select('#' + name).selectAll('path').each(function (d) {
    var bbox_path = path.bounds(d.geometry);
    bbox_layer[0][0] = bbox_path[0][0] < bbox_layer[0][0] ? bbox_path[0][0] : bbox_layer[0][0];
    bbox_layer[0][1] = bbox_path[0][1] < bbox_layer[0][1] ? bbox_path[0][1] : bbox_layer[0][1];
    bbox_layer[1][0] = bbox_path[1][0] > bbox_layer[1][0] ? bbox_path[1][0] : bbox_layer[1][0];
    bbox_layer[1][1] = bbox_path[1][1] > bbox_layer[1][1] ? bbox_path[1][1] : bbox_layer[1][1];
  });
  return bbox_layer;
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('frame');
  var s = 1 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map);
  var t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function map_zoomed() {
  var transform = d3.event ? d3.event.transform : svg_map.node().__zoom;
  if (transform.k < 1) transform.k = 1;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style('stroke-width', function () {
    return styles[this.id]['stroke-width'] / transform.k + 'px';
  });

  layers.selectAll('g').transition(t).attr('transform', transform);

  svg_map.select('.brush_map').transition(t).attr('transform', transform);
}

function interpolateZoom(translate, scale) {
  var node_svg_map = svg_map.node();
  var transform = d3.zoomTransform(node_svg_map);
  return d3.transition().duration(225).tween('zoom', function () {
    var iTranslate = d3.interpolate([transform.x, transform.y], translate);
    var iScale = d3.interpolate(transform.k, scale);
    return function (t_value) {
      node_svg_map.__zoom.k = iScale(t_value);
      var _t = iTranslate(t_value);
      node_svg_map.__zoom.x = _t[0];
      node_svg_map.__zoom.y = _t[1];
      map_zoomed();
    };
  });
}

function zoomClick() {
  var direction = this.id === 'zoom_in' ? 1 : -1,
      factor = 0.1,
      center = [width_map / 2, height_map / 2],
      transform = d3.zoomTransform(svg_map.node()),
      translate = [transform.x, transform.y],
      view = { x: translate[0], y: translate[1], k: transform.k };
  var target_zoom = 1,
      translate0 = [],
      l = [];
  d3.event.preventDefault();
  target_zoom = transform.k * (1 + factor * direction);
  translate0 = [(center[0] - view.x) / view.k, (center[1] - view.y) / view.k];
  view.k = target_zoom;
  l = [translate0[0] * view.k + view.x, translate0[1] * view.k + view.y];
  view.x += center[0] - l[0];
  view.y += center[1] - l[1];
  interpolateZoom([view.x, view.y], view.k);
}

function makeMapLegend(legend_elems, size, translateY) {
  var rect_size = 14;
  var spacing = 4;
  var lgd_height = rect_size + spacing;
  var offset = lgd_height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').attr('height', size).append('g').attr('transform', 'translate(50, ' + translateY + ')').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * lgd_height - offset;
    return 'translate(' + [tx, ty] + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attrs({ x: rect_size + spacing, y: rect_size - spacing }).text(function (d) {
    return d.text;
  });

  if (legend_elems[legend_elems.length - 1].color instanceof Array) {
    var elems = grp_lgd.selectAll('g.legend')._groups[0];
    var last_elem = d3.select(elems[elems.length - 1]);
    last_elem.append('polygon').attr('points', '0,0 ' + rect_size + ',' + rect_size + ' 0,' + rect_size).style('fill', last_elem.node().__data__.color[0]);
    last_elem.append('polygon').attr('points', '0,0 ' + rect_size + ',0 ' + rect_size + ',' + rect_size).style('fill', last_elem.node().__data__.color[1]);
  }
}

function getLegendElems(type) {
  if (type === 0) {
    return [[{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions de l\'espace d\'Ã©tude' }, { color: color_sup, text: 'Rang plus Ã©levÃ© que ma rÃ©gion' }, { color: color_inf, text: 'Rang moins Ã©levÃ© que ma rÃ©gion' }], '75', '41'];
  } else if (type === 1) {
    return [[{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions de l\'espace d\'Ã©tude' }, { color: color_sup, text: 'Rang plus Ã©levÃ© que ma rÃ©gion (2 indicateurs)' }, { color: color_inf, text: 'Rang moins Ã©levÃ© que ma rÃ©gion (2 indicateurs)' }, { color: ['orange', 'rgb(160, 30, 160)'], text: 'Rang plus Ã©levÃ© que ma rÃ©gion (1 indicateur sur 2)' }], '95', '50'];
  }
  return [[{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions de l\'espace d\'Ã©tude, sÃ©lectionnables pour la comparaison' }], '60', '22.5'];
}

var MapSelect = function () {
  function MapSelect(nuts, other_layers) {
    var filter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'N1';
    classCallCheck(this, MapSelect);

    app.mapDrawRatio = app.ratioToWide;
    projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], other_layers.get('frame')).reflectY(true);

    path = d3.geoPath().projection(projection);

    var layers = svg_map.append('g').attr('id', 'layers').attr('transform', 'scale(1)');
    this.nuts = nuts;
    this.zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

    svg_map.call(this.zoom_map);

    var layer_list = Object.keys(styles);
    for (var i = 0, n_layer = layer_list.length; i < n_layer; i++) {
      var name_lyr = layer_list[i];
      var style_layer = styles[name_lyr];
      if (style_layer.target === true) {
        this.target_layer = layers.append('g').attrs(style_layer);
        this.target_layer.selectAll('path').data(filterLevelGeom(this.nuts.features, filter), function (d) {
          return d.id;
        }).enter().append('path').attr('class', 'tg_ft').attr('title', function (d) {
          return d.properties[app.current_config.name_field] + ' (' + d.id + ')';
        }).attr('fill', function (d) {
          return d.id !== app.current_config.my_region ? color_countries : color_highlight;
        }).attr('d', path);
      } else {
        layers.append('g').attrs(style_layer).selectAll('path').data(other_layers.get(name_lyr).features).enter().append('path').attrs({ d: path });
      }
    }
    this.layers = layers;
    fitLayer();
    app.type_path = getSvgPathType(this.target_layer.select('path').node().getAttribute('d'));
    this.target_layer.selectAll('path').each(function () {
      this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
    });
    this.tooltip = prepareTooltip2(d3.select(svg_map.node().parentElement), null, 'tooltip_map');
    this.bindTooltips();
  }

  createClass(MapSelect, [{
    key: 'updateLevelRegion',
    value: function updateLevelRegion() {
      var filter = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'N1';

      var new_selection = filterLevelGeom(this.nuts.features, filter);
      var selection = this.target_layer.selectAll('path').data(new_selection, function (d) {
        return d.id;
      });
      selection.enter().append('path').attrs(function (d) {
        return {
          title: d.properties[app.current_config.name_field] + ' (' + d.id + ')',
          fill: d.id !== app.current_config.my_region ? color_countries : color_highlight,
          d: path
        };
      });
      selection.attr('d', path);
      selection.exit().remove();
      this.resetColors(new_selection.map(function (d) {
        return d.id;
      }));
      this.computeDistMat();
      this.target_layer.selectAll('path').each(function () {
        this._pts = undefined;
      });
      this.bindTooltips();
    }
  }, {
    key: 'bindTooltips',
    value: function bindTooltips() {
      var _this = this;

      var self = this;
      this.target_layer.selectAll('path').on('mouseover', function () {
        // clearTimeout(t);
        _this.tooltip.style('display', null);
      }).on('mouseout', function () {
        // clearTimeout(t);
        // t = setTimeout(() => {
        _this.tooltip.style('display', 'none');
        // }, 250);
      }).on('mousemove mousedown', function () {
        // clearTimeout(t);
        self.tooltip.select('.title').html(this.getAttribute('title'));
        var b = self.tooltip.select('.title').node().getBoundingClientRect();
        var left = d3.event.pageX < window.innerWidth - (b.width + 20) ? d3.event.pageX - 5 : d3.event.pageX - b.width;
        self.tooltip.styles({
          display: null,
          left: left + 'px',
          top: d3.event.pageY - b.height - 20 + 'px' });
      });
    }
  }, {
    key: 'resetColors',
    value: function resetColors$$1(current_ids) {
      this.target_layer.selectAll('path').attr('fill', function (d) {
        if (d.id === app.current_config.my_region) {
          return color_highlight;
        } else if (current_ids.indexOf(d.id) > -1) {
          return app.colors[d.id] || color_countries;
        }
        return color_disabled;
      });
    }
  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      svg_map.transition().duration(250).call(this.zoom_map.transform, d3.zoomIdentity);
    }
  }, {
    key: 'updateLegend',
    value: function updateLegend() {
      d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + app.current_config.my_region_pretty_name);
    }
  }, {
    key: 'removeRectBrush',
    value: function removeRectBrush() {
      svg_map.select('.brush_map').call(this.brush_map.move, null);
    }
  }, {
    key: 'callBrush',
    value: function callBrush(selection) {
      svg_map.select('.brush_map').call(this.brush_map.move, selection);
    }
  }, {
    key: 'bindBrushClick',
    value: function bindBrushClick(chart) {
      if (chart.handleClickMap) {
        document.getElementById('img_map_select').classList.remove('disabled');
        document.getElementById('img_map_select').classList.add('active');
      } else {
        document.getElementById('img_map_select').classList.add('disabled');
      }
      if (chart.handle_brush_map) {
        var self = this;
        document.getElementById('img_rect_selec').classList.remove('disabled');
        document.getElementById('img_rect_selec').classList.add('active');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.remove('active');
        this.brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
          chart.handle_brush_map(d3.event);
        });
        svg_map.append('g').attr('class', 'brush_map').call(this.brush_map);

        svg_map.select('.brush_map').on('mousemove mousedown', function () {
          var elems = getElementsFromPoint(d3.event.pageX, d3.event.pageY);
          var elem = elems.find(function (e) {
            return e.className.baseVal === 'tg_ft';
          });
          if (elem) {
            var new_click_event = new MouseEvent('mousemove', {
              pageX: d3.event.pageX,
              pageY: d3.event.pageY,
              clientX: d3.event.clientX,
              clientY: d3.event.clientY,
              bubbles: true,
              cancelable: true,
              view: window });
            elem.dispatchEvent(new_click_event);
          } else {
            self.tooltip.style('display', 'none');
          }
        }).on('mouseout', function () {
          self.tooltip.style('display', 'none');
        });
      } else {
        document.getElementById('img_rect_selec').classList.remove('active');
        document.getElementById('img_rect_selec').classList.add('disabled');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.add('active');
      }
      if (chart.handleClickMap && !chart.handle_brush_map) {
        this.target_layer.selectAll('path').on('click', function (d) {
          chart.handleClickMap(d, this);
        });
      }
    }
  }, {
    key: 'getUnitsWithin',
    value: function getUnitsWithin(dist_km) {
      var dist = dist_km * 1000;
      if (!this.dist_to_my_region) this.computeDistMat();
      return this.dist_to_my_region.filter(function (d) {
        return d.dist <= dist;
      }).map(function (d) {
        return d.id;
      });
    }
  }, {
    key: 'computeDistMat',
    value: function computeDistMat() {
      var features = Array.prototype.slice.call(this.target_layer.node().querySelectorAll('path'));
      var nb_ft = features.length;
      var my_region_geom = features.find(function (d) {
        return d.__data__.id === app.current_config.my_region;
      }).__data__.geometry;
      var my_region_centroid = turf.centroid(my_region_geom);
      var result_dist = [];
      for (var i = 0; i < nb_ft; i++) {
        var id = features[i].__data__.id;
        var dist = euclidian_distance(my_region_centroid, turf.centroid(features[i].__data__.geometry));
        result_dist.push({ id: id, dist: dist });
      }
      this.dist_to_my_region = result_dist;
    }
  }, {
    key: 'unbindBrushClick',
    value: function unbindBrushClick() {
      this.brush_map = null;
      svg_map.select('.brush_map').remove();
    }
  }, {
    key: 'displayLegend',
    value: function displayLegend() {
      var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

      d3.selectAll('#svg_legend > g').remove();

      var _getLegendElems = getLegendElems(type),
          _getLegendElems2 = slicedToArray(_getLegendElems, 3),
          elems = _getLegendElems2[0],
          size = _getLegendElems2[1],
          ty = _getLegendElems2[2];

      makeMapLegend(elems, size, ty);
    }
  }]);
  return MapSelect;
}();

function makeSourceSection() {
  var parent = svg_map.node().parentElement;
  var elem = document.createElement('p');
  elem.style.fontSize = '0.45em';
  elem.style.position = 'relative';
  elem.innerHTML = 'DonnÃ©es : Eurostat (tÃ©lÃ©chargement : Oct. 2017)- Limite administrative: UMS RIATE, CC-BY-SA';
  parent.insertBefore(elem, parent.querySelector('#header_map'));
  elem.style.left = '49%';
  elem.style.paddingLeft = '2em';
  elem.style.top = '32%';
  elem.style.margin = 'auto';
  elem.style.width = '100%';
  elem.className = 'rotate';
}

var TableResumeStat = function () {
  function TableResumeStat(summary_features) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, TableResumeStat);

    var doc = document;
    var nb_features = summary_features.length;
    var column_names = ['Variable', 'Min', 'Moy', 'Med', 'Max', 'Ma rÃ©gion'];
    var nb_columns = column_names.length;
    var container_div = doc.createElement('div');
    var myTable = doc.createElement('table');
    var headers = doc.createElement('thead');
    var table_body = doc.createElement('tbody');
    var headers_row = doc.createElement('tr');
    myTable.className = 'minitable';
    container_div.className = 'minitable_container';
    for (var i = 0; i < nb_columns; i++) {
      var cell = doc.createElement('th');
      cell.innerHTML = ['Variable', 'Ma rÃ©gion'].indexOf(column_names[i]) > -1 ? column_names[i] : column_names[i] + '.';
      headers_row.appendChild(cell);
    }
    headers.appendChild(headers_row);
    myTable.appendChild(headers);
    for (var _i = 0; _i < nb_features; _i++) {
      var row = doc.createElement('tr');
      row.id = 'row_' + summary_features[_i].id;
      for (var j = 0; j < nb_columns; j++) {
        var _cell = doc.createElement('td');
        var col_name = column_names[j];
        if (col_name !== 'Variable') {
          _cell.innerHTML = Math.round(summary_features[_i][col_name] * 10) / 10;
        } else {
          _cell.innerHTML = summary_features[_i][col_name];
        }
        row.appendChild(_cell);
      }
      table_body.appendChild(row);
    }
    myTable.appendChild(table_body);
    myTable.setAttribute('id', options.id || 'table_summary');
    container_div.appendChild(myTable);
    document.querySelector('#map_section').appendChild(container_div);
    this.nb_columns = nb_columns;
    this.column_names = column_names;
    this.table_body = table_body;
  }

  createClass(TableResumeStat, [{
    key: 'addFeatures',
    value: function addFeatures(summary_features) {
      for (var i = 0, len = summary_features.length; i < len; i++) {
        this.addFeature(summary_features[i]);
      }
    }
  }, {
    key: 'addFeature',
    value: function addFeature(summary) {
      var row = document.createElement('tr');
      row.id = 'row_' + summary.id;
      for (var j = 0; j < this.nb_columns; j++) {
        var cell = document.createElement('td');
        var col_name = this.column_names[j];
        if (col_name !== 'Variable') {
          cell.innerHTML = Math.round(summary[col_name] * 10) / 10;
        } else {
          cell.innerHTML = summary[col_name];
        }
        row.appendChild(cell);
      }
      this.table_body.appendChild(row);
    }
  }, {
    key: 'removeFeature',
    value: function removeFeature(id_variable) {
      var row = this.table_body.querySelector('tr#row_' + id_variable);
      if (row) row.remove();
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      var rows = this.table_body.querySelectorAll('tr');
      for (var i = rows.length - 1; i > -1; i--) {
        rows[i].remove();
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_body.parentElement.parentElement.remove();
      this.table_body = null;
    }
  }]);
  return TableResumeStat;
}();

var CompletudeSection = function () {
  function CompletudeSection() {
    classCallCheck(this, CompletudeSection);

    this.completude_population = document.querySelector('.completude_section > #completude_population');
    this.completude_features = document.querySelector('.completude_section > #completude_features');
    this.completude_features.className = 'active';
    this.completude_population.className = '';
    var self = this;
    this.completude_features.onclick = function () {
      this.classList.remove('active');
      self.completude_population.classList.add('active');
    };
    this.completude_population.onclick = function () {
      this.classList.remove('active');
      self.completude_features.classList.add('active');
    };
  }

  createClass(CompletudeSection, [{
    key: 'update',
    value: function update(value_features, value_pop) {
      this.completude_features.innerHTML = 'Donn\xE9es disponibles pour ' + value_features[0] + '/' + value_features[1] + ' r\xE9gions.';
      this.completude_population.innerHTML = 'Donn\xE9es disponibles pour ' + value_pop + '% de la population de l\'espace d\'\xE9tude.';
    }

    // remove() {
    //   this.section.remove();
    //   this.section = null;
    //   this.completude_population = null;
    //   this.completude_features = null;
    // }

  }]);
  return CompletudeSection;
}();

// export default class CompletudeSection {
//   constructor(parent, before) {
//     this.section = document.createElement('div');
//     this.section.className = 'completude_section';
//     this.category_filter = document.createElement('p');
//     this.completude_population = document.createElement('p');
//     this.completude_features = document.createElement('p');
//     this.completude_features.className = 'active';
//     this.category_filter.style.display = 'initial';
//     this.section.appendChild(this.completude_features);
//     this.section.appendChild(this.completude_population);
//     this.section.appendChild(this.category_filter);
//     const self = this;
//     parent.insertBefore(this.section, before);
//     this.completude_features.onclick = function () {
//       this.classList.remove('active');
//       self.completude_population.classList.add('active');
//     };
//     this.completude_population.onclick = function () {
//       this.classList.remove('active');
//       self.completude_features.classList.add('active');
//     };
//   }
//
//   update(value_features, value_pop) {
//     this.completude_features.innerHTML = `DonnÃ©es disponibles pour ${value_features[0]}/${value_features[1]} rÃ©gions.`;
//     this.completude_population.innerHTML = `DonnÃ©es disponibles pour ${value_pop}% de la population de l'espace d'Ã©tude.`;
//   }
//
//   updateFilterInfo(value) {
//     this.category_filter.innerHTML = value;
//   }
//
//   remove() {
//     this.section.remove();
//     this.section = null;
//     this.completude_population = null;
//     this.completude_features = null;
//   }
// }

var svg_bar = d3.select('svg#svg_bar');
var margin = { top: 10, right: 20, bottom: 100, left: 45 };
var margin2 = { top: 430, right: 20, bottom: 15, left: 45 };
var bbox_svg$1 = svg_bar.node().getBoundingClientRect();
var width = +bbox_svg$1.width - margin.left - margin.right;
var height = +bbox_svg$1.height - margin.top - margin.bottom;
var height2 = +bbox_svg$1.height - margin2.top - margin2.bottom;
var svg_container = void 0;

var nbFt = void 0;
var current_range_brush = [0, 0];
var current_range = [0, 0];
var displayed = void 0;

function updateDimensions() {
  svg_bar = d3.select('svg#svg_bar');
  bbox_svg$1 = svg_bar.node().getBoundingClientRect();
  margin = { top: 10, right: 20, bottom: 500 * app.ratioToWide / 5, left: 45 };
  margin2 = { top: 500 * app.ratioToWide * 0.86, right: 20, bottom: 500 * app.ratioToWide / 40, left: 45 };
  width = +bbox_svg$1.width - margin.left - margin.right;
  height = 500 * app.ratioToWide - margin.top - margin.bottom;
  svg_bar.attr('height', 500 * app.ratioToWide + 'px');
  height2 = 500 * app.ratioToWide - margin2.top - margin2.bottom;
  svg_container = svg_bar.append('g').attr('class', 'container');
}

function getMeanRank(mean_value, ratio_to_use) {
  var mean_rank = app.current_data.map(function (d, i) {
    return [d[ratio_to_use], math_abs(mean_value - d[ratio_to_use]), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

var t = void 0;

var BarChart1 = function () {
  function BarChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BarChart1);

    this.brushed = function () {
      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return; // ignore brush-by-zoom
      if (!_this.x) {
        console.log('a');return;
      }
      var s = d3.event.selection || _this.x2.range();
      context_left_handle.attr('x', s[0] - 12);
      context_right_handle.attr('x', s[1] - 7);
      current_range = [math_round(s[0] / (width / nbFt)), math_round(s[1] / (width / nbFt))];
      _this.x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      svg_container.select('.zoom').call(_this.zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
      _this.update();
      _this.updateContext(current_range[0], current_range[1]);
      svg_container.select('.brush_top').call(_this.brush_top.move, null);
      // this.brushed_top();
    };

    this.brushed_top = function () {
      if (!_this._focus || !_this.map_elem) return;

      var d3_event = d3.event;
      var ratio_to_use = _this.ratio_to_use;
      var ref_value = _this.ref_value;

      // const elems = document.elementsFromPoint(d3_event.sourceEvent.pageX, d3_event.sourceEvent.pageY);
      // const elem = elems.find(e => e.className.baseVal === 'bar');
      // if (elem) {
      //   const new_click_event = new MouseEvent('mousedown', {
      //     pageX: d3_event.sourceEvent.pageX,
      //     pageY: d3_event.sourceEvent.pageY,
      //     clientX: d3_event.sourceEvent.clientX,
      //     clientY: d3_event.sourceEvent.clientY,
      //     bubbles: true,
      //     cancelable: true,
      //     view: window
      //   });
      //   elem.dispatchEvent(new_click_event);
      // } else {
      clearTimeout(t);
      t = setTimeout(function () {
        _this.tooltip.style('display', 'none');
      }, 5);
      // }

      // if (d3_event && d3_event.selection
      //       && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
      if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target) {
        _this.map_elem.removeRectBrush();
        var s = d3_event.selection;
        current_range_brush = [current_range[0] + math_round(s[0] / (width / displayed)) - 1, current_range[0] + math_round(s[1] / (width / displayed))];
        // this.x.domain(this.data.slice(current_range_brush[0] + 1, current_range_brush[1])
        //   .map(ft => ft.id));
        app.colors = {};
        _this._focus.selectAll('.bar').style('fill', function (d, i) {
          if (d.id === app.current_config.my_region) {
            app.colors[d.id] = color_highlight;
            return color_highlight;
          } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
            var color = comp(d[ratio_to_use], ref_value, _this.serie_inversed);
            app.colors[d.id] = color;
            return color;
          }
          return color_countries;
        });
        // this.update();
        if (_this.reset_state_button === true) {
          d3.selectAll('#menu_selection > button').attr('class', 'button_blue');
        }
        _this.updateMapRegio();
      } else {
        if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
          _this.map_elem.removeRectBrush();
          app.colors = {};
          app.colors[app.current_config.my_region] = color_highlight;
          _this.updateMapRegio();
        }
        _this._focus.selectAll('.bar').style('fill', function (d) {
          return app.colors[d.id] || color_countries;
        });
        if (_this.reset_state_button === true) {
          d3.selectAll('#menu_selection > button').attr('class', 'button_blue');
        }
      }
    };
    updateDimensions();
    app.chartDrawRatio = app.ratioToWide;
    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var x = d3.scaleBand().range([0, width]).padding(0.1),
        x2 = d3.scaleBand().range([0, width]).padding(0.1),
        y = d3.scaleLinear().range([height, 0]),
        y2 = d3.scaleLinear().range([height2, 0]);

    var xAxis = d3.axisBottom(x);
    var xAxis2 = d3.axisBottom(x2);
    var yAxis = d3.axisLeft(y);

    this.x = x;
    this.x2 = x2;
    this.y = y;
    this.y2 = y2;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.xAxis2 = xAxis2;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var ratio_to_use = available_ratios[0];
    this.ratio_to_use = ratio_to_use;
    this.unit = variables_info.find(function (ft) {
      return ft.id === ratio_to_use;
    }).unit;
    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    });
    this.data.sort(function (a, b) {
      return a[ratio_to_use] - b[ratio_to_use];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.current_ranks = this.data.map(function (d, i) {
      return i + 1;
    });
    nbFt = this.data.length;
    this.mean_value = getMean(this.data.map(function (d) {
      return d[ratio_to_use];
    }));
    this.ref_value = this.data.filter(function (ft) {
      return ft.id === app.current_config.my_region;
    })[0][ratio_to_use];
    svg_container.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width, height: height });

    var focus = svg_container.append('g').attrs({
      class: 'focus',
      transform: 'translate(' + margin.left + ', ' + margin.top + ')'
    });

    var context = svg_container.append('g').attrs({
      class: 'context',
      transform: 'translate(' + margin2.left + ', ' + margin2.top + ')'
    });

    this._focus = focus;
    this.context = context;

    x.domain(this.current_ids);
    y.domain([0, d3.max(this.data, function (d) {
      return d[ratio_to_use];
    })]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    var brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on('brush end', this.brushed);

    var brush_top = d3.brushX().extent([[0, 0], [width, height]]).on('brush end', this.brushed_top);

    var zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
    // .on("zoom", zoomed);
    this.brush_top = brush_top;
    this.brush_bottom = brush_bottom;
    this.zoom = zoom;

    focus.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height + ')' }).call(xAxis);

    focus.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    focus.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = focus.append('g');

    var g_brush_top = focus.append('g').attr('class', 'brush_top').call(brush_top);

    var g_brush_bottom = context.append('g').attr('class', 'brush_bottom').call(brush_bottom);

    var groupe_line_mean = focus.append('g').attr('class', 'mean');
    // groupe_line_mean.append('text')
    //   .attrs({ x: 60, y: y(this.mean_value) + 20 })
    //   .styles({
    //     display: 'none',
    //     fill: 'red',
    //     'fill-opacity': '0.8',
    //     'font-family': '\'Signika\', sans-serif',
    //   })
    //   .text(`Valeur moyenne : ${Math.round(this.mean_value * 10) / 10} ${this.unit}`);

    groupe_line_mean.append('line').attrs({
      x1: 0,
      x2: width,
      y1: y(this.mean_value),
      y2: y(this.mean_value),
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px',
      class: 'mean_line'
    }).style('stroke', 'red');

    groupe_line_mean.append('line').attrs({ x1: 0, x2: width, y1: y(this.mean_value), y2: y(this.mean_value), 'stroke-width': '14px', class: 'transp_mean_line' }).style('stroke', 'transparent').on('mouseover', function () {
      clearTimeout(t);
      _this.tooltip.style('display', null).select('.title').attr('class', 'title red');
    }).on('mouseout', function () {
      clearTimeout(t);
      t = setTimeout(function () {
        _this.tooltip.style('display', 'none').select('.title').attr('class', 'title');
      }, 250);
    }).on('mousemove mousedown', function (d) {
      clearTimeout(t);
      var content = ['Moyenne de l\'espace d\'Ã©tude'];
      var _h = 65;
      if (app.current_config.my_category) {
        content.push('<br>', ' (', app.current_config.my_category, ')');
        _h += 20;
      }
      self.tooltip.select('.title').attr('class', 'title red').html(content.join(''));
      self.tooltip.select('.content').html(['Valeur : ', Math.round(self.mean_value * 10) / 10, ' ', self.unit].join(''));
      self.tooltip.styles({
        display: null,
        left: d3.event.pageX - 5 + 'px',
        top: d3.event.pageY - _h + 'px' });
    });

    this.updateMiniBars();

    var context_left_handle = g_brush_bottom.insert('image', '.handle').attrs({
      width: 20,
      height: height2,
      x: x2(this.current_ids[0]) - 12,
      'xlink:href': 'img/left-handle.png'
    });

    var context_right_handle = g_brush_bottom.insert('image', '.handle').attrs({
      width: 20,
      height: height2,
      x: x2(this.current_ids[this.current_ids.length - 1]) - 7,
      'xlink:href': 'img/right-handle.png'
    });

    g_brush_top.call(brush_top.move, null);
    g_brush_bottom.call(brush_bottom.move, x.range());

    this.completude = new CompletudeSection();
    this.completude.update(calcCompletudeSubset(app, [this.ratio_to_use], 'array'), calcPopCompletudeSubset(app, [this.ratio_to_use]));

    svg_container.append('image').attrs({
      x: width + margin.left + 5,
      y: 385,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      // this.data = app.current_data.slice();
      if (!_this.serie_inversed) {
        _this.data.sort(function (a, b) {
          return b[_this.ratio_to_use] - a[_this.ratio_to_use];
        });
      } else {
        _this.data.sort(function (a, b) {
          return a[_this.ratio_to_use] - b[_this.ratio_to_use];
        });
      }
      _this.current_ids = _this.data.map(function (d) {
        return d.id;
      });
      _this.serie_inversed = !_this.serie_inversed;
      x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      x2.domain(_this.data.map(function (ft) {
        return ft.id;
      }));
      // svg_container.select(".zoom").call(zoom.transform, d3.zoomIdentity
      //     .scale(width / (current_range[1] - current_range[0]))
      //     .translate(-current_range[0], 0));
      _this.update();
      // this.updateMiniBars();
      _this.updateContext(current_range[0], current_range[1]);
      svg_container.select('.brush_top').call(brush_top.move, null);
      _this.map_elem.removeRectBrush();
      svg_container.select('.brush_bottom').call(brush_bottom.move, x.range());
    });

    // Prepare the tooltip displayed on mouseover:
    this.tooltip = prepareTooltip2(d3.select(svg_bar.node().parentElement), null);

    // Deactivate the brush rect selection on the map + on the chart
    // when he user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_container.select('.brush_top').selectAll('.selection, .overlay').style('display', 'none');
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_container.select('.brush_top').selectAll('.selection, .overlay').style('display', null);
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-size': '0.8em',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    var _loop = function _loop(i, len_i) {
      var code_variable = available_ratios[i];
      var name_variable = app.current_config.ratio_pretty_name[i];
      var unit = variables_info.find(function (ft) {
        return ft.id === code_variable;
      }).unit;
      var year = name_variable.match(/\([^)]*\)$/)[0];
      var unit_year = '' + year.slice(0, 1) + unit + ', ' + year.slice(1, 6);

      _this.selec_var.append('option').attr('value', 'v_' + code_variable).text(name_variable.replace(year, unit_year));
    };

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      _loop(i, len_i);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value.slice(2);
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Create the menu under the chart allowing to use some useful selections
    // (above or below the mean value and above or below my_region)
    var menu_selection = d3.select('#bar_section').append('div').attr('id', 'menu_selection').styles({ padding: '0 10px 10px 10px', 'text-align': 'center', color: '#4f81bd' });

    menu_selection.append('p').attr('id', 'selection_subtitle').styles({ margin: '10px 0px 2px 0px' }).html('SÃ©lection des rÃ©gions ayant des valeurs...');

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('infÃ©rieures Ã  la moyenne').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectBelowMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('infÃ©rieurs Ã  ma rÃ©gion').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectBelowMyRegion();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('supÃ©rieures Ã  la moyenne').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectAboveMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('supÃ©rieures Ã  ma rÃ©gion').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectAboveMyRegion();
    });

    this.makeTableStat();
  }

  createClass(BarChart1, [{
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, [this.ratio_to_use], 'array'), calcPopCompletudeSubset(app, [this.ratio_to_use]));
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      displayed = 0;
      var ratio_to_use = this.ratio_to_use;
      var self = this;
      var bar = this.g_bar.selectAll('.bar').data(this.data);

      if (this.reset_state_button === true) {
        d3.selectAll('#menu_selection > button').attr('class', 'button_blue');
      }

      bar.attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      }).style('display', function (d) {
        var to_display = _this2.x(d.id) != null;
        if (to_display) {
          displayed += 1;
          return 'initial';
        }
        return 'none';
      });

      bar.enter().insert('rect', '.mean').attrs(function (d) {
        return {
          class: 'bar',
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      });

      bar.exit().remove();

      this._focus.select('.axis--y').call(this.yAxis);

      var axis_x = this._focus.select('.axis--x').attr('font-size', function () {
        return displayed > 75 ? 6 : 10;
      }).call(this.xAxis);
      axis_x.selectAll('text').attrs(function () {
        if (displayed > 100) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else if (displayed > 20) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else {
          return { dx: '0', dy: '0.71em', transform: null };
        }
      }).style('text-anchor', function () {
        return displayed > 20 ? 'end' : 'middle';
      });

      this.g_bar.selectAll('.bar').on('mouseover', function () {
        clearTimeout(t);
        _this2.tooltip.style('display', null).select('.title').attr('class', 'title');
      }).on('mouseout', function () {
        clearTimeout(t);
        t = setTimeout(function () {
          _this2.tooltip.style('display', 'none').select('.title').attr('class', 'title');
        }, 250);
      }).on('mousemove mousedown', function (d) {
        clearTimeout(t);
        self.tooltip.select('.title').attr('class', 'title').html(['<b>', d.name, ' (', d.id, ')', '</b>'].join(''));
        self.tooltip.select('.content').html([self.ratio_to_use, ' : ', math_round(d[self.ratio_to_use] * 10) / 10, ' ', self.unit, '<br>', 'Rang : ', self.current_ids.indexOf(d.id) + 1, '/', self.current_ids.length].join(''));
        self.tooltip.styles({
          display: null,
          left: d3.event.pageX - 5 + 'px',
          top: d3.event.pageY - 85 + 'px' });
      });

      svg_container.select('.brush_top').on('mousemove mousedown', function () {
        var elems = getElementsFromPoint(d3.event.pageX, d3.event.pageY);
        var elem = elems.find(function (e) {
          return e.className.baseVal === 'bar' || e.className.baseVal === 'transp_mean_line';
        });
        if (elem) {
          var new_click_event = new MouseEvent('mousemove', {
            pageX: d3.event.pageX,
            pageY: d3.event.pageY,
            clientX: d3.event.clientX,
            clientY: d3.event.clientY,
            bubbles: true,
            cancelable: true,
            view: window });
          elem.dispatchEvent(new_click_event);
        } else {
          clearTimeout(t);
          t = setTimeout(function () {
            self.tooltip.style('display', 'none');
          }, 250);
        }
      }).on('mouseout', function () {
        clearTimeout(t);
        t = setTimeout(function () {
          self.tooltip.style('display', 'none');
        }, 250);
      });

      this.updateMiniBars();
    }
  }, {
    key: 'updateMiniBars',
    value: function updateMiniBars() {
      var _this3 = this;

      var ratio_to_use = this.ratio_to_use;
      var mini_bars = this.context.selectAll('.bar').data(this.data);

      mini_bars.attrs(function (d) {
        return {
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });

      mini_bars.enter().insert('rect').attrs(function (d) {
        return {
          class: 'bar',
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });
      mini_bars.exit().remove();
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.id) > -1 ? app.colors[d.id] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      } else {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      }
      this.reset_state_button = false;
      svg_container.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_container.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.map_elem.removeRectBrush();
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      } else {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      }
      this.reset_state_button = false;
      svg_container.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.map_elem.removeRectBrush();
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this5 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [mean_rank, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      } else {
        current_range_brush = [0, mean_rank + 1];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.reset_state_button = false;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      this.map_elem.removeRectBrush();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this6 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      app.colors = {};
      if (!this.serie_inversed) {
        current_range_brush = [0, mean_rank];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      } else {
        current_range_brush = [mean_rank + 1, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.reset_state_button = false;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      this.map_elem.removeRectBrush();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
      this.reset_state_button = true;
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var _this7 = this;

      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      this.map_elem.tooltip.style('display', 'none');
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      var self = this;
      svg_bar.select('.brush_top').call(self.brush_top.move, null);

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      // const transform = svg_map.node().__zoom;
      // topleft[0] = (topleft[0] - transform.x) / transform.k;
      // topleft[1] = (topleft[1] - transform.y) / transform.k;
      // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
      // bottomright[1] = (bottomright[1] - transform.y) / transform.k;
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.id;
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, ref_value, this.serie_inversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self._focus.selectAll('.bar').style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      });
      var ids = Object.keys(app.colors);
      var ranks = ids.map(function (d) {
        return _this7.current_ids.indexOf(d.id) > -1;
      }).map(function (d) {
        return _this7.current_ranks[d];
      });
      if (ranks.length > 1) {
        var c1 = ranks[0] - 1;
        var c2 = ranks[ranks.length - 1];
        if (c1 < current_range[0] || c2 > current_range[1]) {
          current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
          svg_bar.select('.brush_bottom').call(self.brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
        }
      } else {
        current_range = [0, this.data.length];
        svg_bar.select('.brush_bottom').call(self.brush_bottom.move, self.x.range());
      }
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        app.colors[id] = undefined;
        d3.select(parent).attr('fill', color_countries);
      } else {
        var color = comp(d.properties[this.ratio_to_use], this.ref_value, this.serie_inversed);
        app.colors[id] = color;
        d3.select(parent).attr('fill', color);
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value = this.data.find(function (ft) {
          return ft.id === app.current_config.my_region;
        })[this.ratio_to_use];
        this.update();
        this.updateContext(0, this.data.length);
        this.updateMapRegio();
        this.updateTableStats();
        svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x.range());
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
      }
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var y = this.y;
      var ratio_to_use = this.ratio_to_use;
      var grp_mean = this._focus.select('.mean');
      this.mean_value = getMean(this.data.map(function (d) {
        return d[ratio_to_use];
      }));
      grp_mean.select('text').attr('y', y(this.mean_value) + 20).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10 + ' ' + this.unit);
      grp_mean.select('.mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
      grp_mean.select('.transp_mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var ratio_to_use = this.ratio_to_use;
      this.data = app.current_data.filter(function (ft) {
        return !!ft[ratio_to_use];
      });
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.current_ranks = this.data.map(function (d, i) {
        return i + 1;
      });
      if (this.serie_inversed) {
        this.data.sort(function (a, b) {
          return b[ratio_to_use] - a[ratio_to_use];
        });
      } else {
        this.data.sort(function (a, b) {
          return a[ratio_to_use] - b[ratio_to_use];
        });
      }
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      nbFt = this.data.length;
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.x.domain(this.current_ids);
      var min_serie = d3.min(this.data, function (d) {
        return d[ratio_to_use];
      });
      min_serie = min_serie >= 0 ? 0 : min_serie + min_serie / 10;
      var max_serie = d3.max(this.data, function (d) {
        return d[ratio_to_use];
      });
      // const offset_y = (max_serie - min_serie) / 20;
      this.y.domain([
      // min_serie - offset_y, max_serie,
      min_serie, max_serie]);
      this.x2.domain(this.x.domain());
      this.y2.domain(this.y.domain());
      this.updateMeanValue();
      this.update();
      this.updateContext(0, this.data.length);

      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.map_elem.removeRectBrush();
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateTableStats();
      this.updateCompletude();
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Fetch the unit for this indicator:
      var unit = variables_info.find(function (ft) {
        return ft.id === code_variable;
      }).unit;
      var year = name_variable.match(/\([^)]*\)$/)[0];
      var unit_year = '' + year.slice(0, 1) + unit + ', ' + year.slice(1, 6);
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', 'v_' + code_variable).text(name_variable.replace(year, unit_year));

      // And use it immediatly:
      this.selec_var.node().value = 'v_' + code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=v_' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.unit = variables_info.find(function (ft) {
        return ft.id === code_variable;
      }).unit;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this._focus.remove();
      this.context.remove();
      this.selec_var.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      d3.select('#svg_bar').html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.map_elem.displayLegend(0);
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this8 = this;

      var values = this.data.map(function (d) {
        return d[_this8.ratio_to_use];
      });
      return {
        'Min': d3.min(values),
        'Max': d3.max(values),
        'Moy': getMean(values),
        'Med': d3.median(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.ref_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }, {
    key: 'getHelpMessage',
    value: function getHelpMessage() {
      return '\n<h3>Position \u2013 1 Indicateur</h3>\n\n<b>Aide g\xE9n\xE9rale</b>\nCe graphique repr\xE9sente l\u2019indicateur s\xE9lectionn\xE9 ordonn\xE9 de la valeur minimale \xE0 la valeur maximale (barres bleues) pour l\u2019espace d\u2019\xE9tude et le maillage territorial d\u2019analyse s\xE9lectionn\xE9. La valeur de l\u2019unit\xE9 territoriale s\xE9lectionn\xE9e appara\xEEt en surbrillance (jaune). La ligne repr\xE9sent\xE9e par un tiret\xE9 rouge repr\xE9sente la moyenne de l\u2019espace d\u2019\xE9tude (non pond\xE9r\xE9e).\n\nSur ce graphique, il est possible d\u2019inverser l\u2019ordre de classement de l\u2019indicateur (appuyer sur le \xAB\xA0+\xA0\xBB).\n\nLa carte et le graphique sont interactifs dans la mesure o\xF9 l\u2019utilisateur peut choisir de s\xE9lectionner des unit\xE9s territoriales (clic gauche appuy\xE9 de la souris) et visualiser leur positionnement simultan\xE9ment sur la carte (localisation g\xE9ographique) ou sur le diagramme de distribution (positionnement statistique). Il peut aussi en un clic choisir de visualiser les unit\xE9s territoriales ayant des valeurs inf\xE9rieures/sup\xE9rieures \xE0 la moyenne de l\u2019espace d\u2019\xE9tude ou inf\xE9rieures/sup\xE9rieures \xE0 la valeur de l\u2019unit\xE9 territoriale de r\xE9f\xE9rence (\xAB\xA0ma r\xE9gion\xA0\xBB).';
    }
  }]);
  return BarChart1;
}();

var contextMenu = function () {
  function contextMenu(items) {
    classCallCheck(this, contextMenu);

    if (items) {
      this.setItems(items);
    } else {
      this.items = [];
    }
  }

  createClass(contextMenu, [{
    key: 'addItem',
    value: function addItem(item) {
      this.items.push({
        name: item.name,
        action: item.action
      });
    }
  }, {
    key: 'removeItem',
    value: function removeItem(name) {
      for (var i = this.items.length - 1; i > 0; i--) {
        if (this.items[i].name === name) {
          this.items.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: 'setItems',
    value: function setItems(items) {
      this.items = [];
      for (var i = 0, nb_items = items.length; i < nb_items; i++) {
        if (items[i].name && items[i].action) {
          this.addItem(items[i]);
        }
      }
    }
  }, {
    key: 'showMenu',
    value: function showMenu(event, parent, items, position) {
      var _this = this;

      if (event.preventDefault) event.preventDefault();
      if (event.stopPropagation) event.stopPropagation();
      if (this.DOMobj) {
        this.hideMenu();
        return;
      }
      if (items) {
        this.setItems(items);
      }

      this.initMenu(parent);
      if (!position) {
        this.DOMobj.style.top = event.clientY + document.body.scrollTop + 'px';
        this.DOMobj.style.left = event.clientX + 'px';
      } else {
        this.DOMobj.style.top = position[1] + 'px';
        this.DOMobj.style.left = position[0] + 'px';
      }
      this.displayed = true;
      setTimeout(function () {
        document.addEventListener('click', function () {
          return _this.hideMenu();
        });
      }, 150);
    }
  }, {
    key: 'hideMenu',
    value: function hideMenu() {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      this.displayed = false;
      document.removeEventListener('click', this.hideMenu);
    }
  }, {
    key: 'initMenu',
    value: function initMenu(parent) {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      var self = this;
      var menu = document.createElement('div');
      var list = document.createElement('ul');
      menu.className = 'context-menu';
      menu.appendChild(list);
      for (var i = 0, nb_item = this.items.length; i < nb_item; i++) {
        var item = document.createElement('li');
        item.setAttribute('data-index', i);
        item.innerHTML = '<span class="context-menu-item-name">' + this.items[i].name + '</span>';
        list.appendChild(item);
        item.onclick = function () {
          var ix = this.getAttribute('data-index');
          self.items[ix].action();
        };
      }
      this.DOMobj = menu;
      parent.appendChild(menu);
    }
  }]);
  return contextMenu;
}();

var svg_bar$1 = void 0;
var margin$1 = void 0;
var bbox_svg$2 = void 0;
var width$1 = void 0;
var height$1 = void 0;
var svg_container$1 = void 0;
var t$1 = void 0;

var updateDimensions$1 = function updateDimensions() {
  svg_bar$1 = d3.select('#svg_bar');
  margin$1 = { top: 20, right: 20, bottom: 40, left: 50 };
  bbox_svg$2 = svg_bar$1.node().getBoundingClientRect();
  width$1 = +bbox_svg$2.width - margin$1.left - margin$1.right;
  height$1 = 500 * app.ratioToWide - margin$1.top - margin$1.bottom;
  svg_bar$1.attr('height', 500 * app.ratioToWide + 'px');
  svg_container$1 = svg_bar$1.append('g').attr('class', 'container');
};
/** Class representing a scatterplot */
var ScatterPlot2 = function () {
  /**
   * Create a the scatterplot on the `svg_bar` svg element previously defined
   * @param {Array} ref_data - A reference to the subset of the dataset to be used
   * to create the scatterplot (should contain at least two field flagged as ratio
   * in the `app.current_config.ratio` Object).
   */
  function ScatterPlot2(ref_data) {
    var _this = this;

    classCallCheck(this, ScatterPlot2);

    this.brushed = function () {
      if (d3.event && !d3.event.selection) {
        if (d3.event.type === 'end' && d3.event.sourceEvent.type === 'mouseup') {
          _this.map_elem.removeRectBrush();
        }
        app.colors = {};
        app.colors[app.current_config.my_region] = color_highlight;
        _this.updateLight();
        _this.updateMapRegio();
        return;
      }

      resetColors();
      // const self = this;

      var _d3$event$selection = slicedToArray(d3.event.selection, 2),
          topleft = _d3$event$selection[0],
          bottomright = _d3$event$selection[1];

      var range_x = [_this.x.invert(topleft[0]), _this.x.invert(bottomright[0])];
      var range_y = [_this.y.invert(bottomright[1]), _this.y.invert(topleft[1])];
      if (_this.xInversed) range_x.reverse();
      if (_this.yInversed) range_y.reverse();
      range_x[0] -= 0.5;
      range_x[1] += 0.5;
      range_y[0] -= 0.5;
      range_y[1] += 0.5;
      var t1 = void 0;
      var t2 = void 0;
      if (_this.type === 'value') {
        t1 = _this.variable1;
        t2 = _this.variable2;
      } else {
        t1 = _this.rank_variable1;
        t2 = _this.rank_variable2;
      }

      for (var i = 0, len_i = _this.data.length; i < len_i; i++) {
        var ft = _this.data[i];
        if (ft[t1] >= range_x[0] && ft[t1] <= range_x[1] && ft[t2] >= range_y[0] && ft[t2] <= range_y[1]) {
          app.colors[ft.id] = comp2(ft[_this.variable1], ft[_this.variable2], _this.ref_value1, _this.ref_value2, _this.xInversed, _this.yInversed);
        }
      }
      app.colors[app.current_config.my_region] = color_highlight;
      _this.updateLight();
      _this.updateMapRegio();
      _this.map_elem.removeRectBrush();
    };
    updateDimensions$1();
    app.chartDrawRatio = app.ratioToWide;
    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var self = this;
    this.type = 'value';
    this.variable1 = app.current_config.ratio[0];
    this.variable2 = app.current_config.ratio[1];
    this.rank_variable1 = 'pr_' + this.variable1;
    this.rank_variable2 = 'pr_' + this.variable2;
    this.unit1 = variables_info.find(function (ft) {
      return ft.id === _this.variable1;
    }).unit;
    this.unit2 = variables_info.find(function (ft) {
      return ft.id === _this.variable2;
    }).unit;
    this.pretty_name1 = app.current_config.ratio_pretty_name[0];
    this.pretty_name2 = app.current_config.ratio_pretty_name[1];
    this.data = ref_data.filter(function (ft) {
      return !!ft[_this.variable1] && !!ft[_this.variable2];
    }).map(function (d) {
      var res = { id: d.id, name: d.name };
      res[_this.variable1] = d[_this.variable1];
      res[_this.variable2] = d[_this.variable2];
      return res;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors(this.current_ids);
    this.nbFt = this.data.length;
    computePercentileRank(this.data, this.variable1, this.rank_variable1);
    computePercentileRank(this.data, this.variable2, this.rank_variable2);

    this.x = d3.scaleLinear().range([0, width$1]).nice();
    this.y = d3.scaleLinear().range([height$1, 0]).nice();
    this.xAxis = d3.axisBottom(this.x).ticks(12);
    this.yAxis = d3.axisLeft(this.y).ticks(12 * height$1 / width$1);
    this.xAxis2 = d3.axisBottom(this.x).ticks(12);
    this.yAxis2 = d3.axisLeft(this.y).ticks(12 * height$1 / width$1);

    this.brush = d3.brush().extent([[0, 0], [width$1, height$1]]).on('brush end', this.brushed);

    this.xInversed = false;
    this.yInversed = false;
    this.ref_value1 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable1];
    this.ref_value2 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable2];

    this.plot = svg_container$1.append('g').attr('transform', 'translate(' + [margin$1.left, margin$1.top] + ')');

    this.plot.append('defs').append('svg:clipPath').attr('id', 'clip').append('svg:rect').attrs({
      width: width$1,
      height: height$1,
      x: 0,
      y: 0
    });

    this.scatter = this.plot.append('g').attr('id', 'scatterplot').attr('clip-path', 'url(#clip)');

    this.scatter.append('g').attr('class', 'brush').call(this.brush);

    this.makeGrid();

    var groupe_line_mean = this.plot.append('g').attr('clip-path', 'url(#clip)').attr('class', 'mean');
    groupe_line_mean.append('line').attr('clip-path', 'url(#clip)').attrs({
      id: 'mean_x',
      x1: this.x(this.mean_variable1),
      x2: this.x(this.mean_variable1),
      y1: 0,
      y2: width$1,
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).style('stroke', 'red').on('mouseover', function () {
      clearTimeout(t$1);
      _this.tooltip.style('display', null).select('.title').attr('class', 'title red');
    }).on('mouseout', function () {
      clearTimeout(t$1);
      t$1 = setTimeout(function () {
        _this.tooltip.style('display', 'none').select('.title').attr('class', 'title');
      }, 250);
    }).on('mousemove mousedown', function (d) {
      clearTimeout(t$1);
      var content = ['Moyenne de l\'espace d\'Ã©tude'];
      var _h = 65;
      if (app.current_config.my_category) {
        content.push('<br>', ' (', app.current_config.my_category, ')');
        _h += 20;
      }
      self.tooltip.select('.title').attr('class', 'title red').html(content.join(''));
      self.tooltip.select('.content').html(['Valeur (' + _this.variable1 + '): ', Math.round(_this.mean_variable1 * 10) / 10, ' ', self.unit1].join(''));
      self.tooltip.styles({
        display: null,
        left: d3.event.pageX - 5 + 'px',
        top: d3.event.pageY - _h + 'px' });
    });

    groupe_line_mean.append('line').style('stroke', 'red').attrs({
      id: 'mean_y',
      x1: 0,
      x2: width$1,
      y1: this.y(this.mean_variable2),
      y2: this.y(this.mean_variable2),
      'clip-path': 'url(#clip)',
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).on('mouseover', function () {
      clearTimeout(t$1);
      _this.tooltip.style('display', null).select('.title').attr('class', 'title red');
    }).on('mouseout', function () {
      clearTimeout(t$1);
      t$1 = setTimeout(function () {
        _this.tooltip.style('display', 'none').select('.title').attr('class', 'title');
      }, 250);
    }).on('mousemove mousedown', function (d) {
      clearTimeout(t$1);
      var content = ['Moyenne de l\'espace d\'Ã©tude'];
      var _h = 65;
      if (app.current_config.my_category) {
        content.push('<br>', ' (', app.current_config.my_category, ')');
        _h += 20;
      }
      self.tooltip.select('.title').attr('class', 'title red').html(content.join(''));
      self.tooltip.select('.content').html(['Valeur (' + _this.variable2 + '): ', Math.round(_this.mean_variable2 * 10) / 10, ' ', self.unit2].join(''));
      self.tooltip.styles({
        display: null,
        left: d3.event.pageX - 5 + 'px',
        top: d3.event.pageY - _h + 'px' });
    });

    this.plot.append('g').attrs({
      class: 'x axis', id: 'axis--x', transform: 'translate(0, ' + height$1 + ')'
    }).call(this.xAxis);

    this.plot.append('g').attrs({ class: 'y axis', id: 'axis--y', opacity: 0.9 }).call(this.yAxis);

    // Prepare the tooltip displayed on mouseover:
    this.tooltip = prepareTooltip2(d3.select(svg_bar$1.node().parentElement), null);

    this.prepareTitleAxis();

    svg_container$1.append('image').attrs({
      x: margin$1.left + width$1 / 2 - 20 - svg_container$1.select('#title-axis-x').node().getBoundingClientRect().width / 2,
      y: margin$1.top + height$1 + margin$1.bottom / 2 + 5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_x'
    }).on('click', function () {
      _this.xInversed = !_this.xInversed;
      // for (let i = 0; i < this.nbFt; i++) {
      //   self.data[i][self.rank_variable1] = 100 - self.data[i][self.rank_variable1];
      // }
      svg_container$1.select('#title-axis-x').style('fill', _this.xInversed ? 'red' : 'black');
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    svg_container$1.append('image').attrs({
      x: margin$1.left / 2 - 20,
      y: margin$1.top + height$1 / 2 + svg_container$1.select('#title-axis-y').node().getBoundingClientRect().height / 2 + 5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_y'
    }).on('click', function () {
      _this.yInversed = !_this.yInversed;
      // for (let i = 0; i < this.nbFt; i++) {
      //   this.data[i][this.rank_variable2] = 100 - this.data[i][this.rank_variable2];
      // }
      svg_container$1.select('#title-axis-y').style('fill', _this.yInversed ? 'red' : 'black');
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    this.completude = new CompletudeSection();
    this.completude.update(calcCompletudeSubset(app, [this.variable1, this.variable2], 'array'), calcPopCompletudeSubset(app, [this.variable1, this.variable2]));

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    var menu_selection = d3.select(svg_bar$1.node().parentElement).append('div').attr('id', 'menu_selection').styles({ position: 'relative', 'text-align': 'center' });

    var chart_type = menu_selection.append('p');

    chart_type.append('span').attrs({
      id: 'ind_raw_values',
      class: 'choice_ind active'
    }).text('Valeurs brutes');

    chart_type.append('span').attrs({
      id: 'ind_ranks',
      class: 'choice_ind'
    }).text('Rangs normalisÃ©s');

    menu_selection.append('p').attr('id', 'selection_subtitle').styles({ margin: '10px 0px 2px 0px' }).html('Sur les deux indicateurs, sÃ©lection des rÃ©gions ayant des valeurs...');

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('infÃ©rieures Ã  la moyenne').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectBelowMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('infÃ©rieurs Ã  ma rÃ©gion').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectBelowMyRegion();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('supÃ©rieures Ã  la moyenne').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectAboveMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('supÃ©rieures Ã  ma rÃ©gion').on('click', function () {
      menu_selection.selectAll('button').attr('class', 'button_blue');
      this.classList.add('pressed');
      self.selectAboveMyRegion();
    });

    this.bindMenu();
    // this.update();
    this.makeTableStat();
  }

  /**
   * Create the underlying grey grid
   */


  createClass(ScatterPlot2, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#scatterplot').attrs({
        class: 'grid grid-x', transform: 'translate(0, ' + height$1 + ')'
      }).call(this.xAxis2.tickSize(-height$1).tickFormat(''));
      this.plot.insert('g', '#scatterplot').attr('class', 'grid grid-y').call(this.yAxis2.tickSize(-width$1).tickFormat(''));
    }
  }, {
    key: 'updateAxisGrid',
    value: function updateAxisGrid() {
      this.plot.select('.grid-x').transition().duration(125).call(this.xAxis2.tickSize(-height$1).tickFormat(''));
      this.plot.select('.grid-y').transition().duration(125).call(this.yAxis2.tickSize(-width$1).tickFormat(''));
      this.plot.select('#axis--x').transition().duration(125).call(this.xAxis);
      this.plot.select('#axis--y').transition().duration(125).call(this.yAxis);
      this.plot.selectAll('.grid').selectAll('line').attr('stroke', 'lightgray');
    }

    /**
     * Create the title of the X and Y axis with the associated context menu
     * displayed when they are clicked and allowing to select an other variable
     * for this axis.
     */

  }, {
    key: 'prepareTitleAxis',
    value: function prepareTitleAxis() {
      var _this2 = this;

      var self = this;
      this.menuX = new contextMenu();
      this.menuY = new contextMenu();
      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableY(elem);
          }
        };
      });

      svg_container$1.append('text').attrs({
        id: 'title-axis-x',
        class: 'title-axis',
        x: margin$1.left + width$1 / 2,
        y: margin$1.top + height$1 + margin$1.bottom / 2 + 15,
        'title-tooltip': this.pretty_name1
      }).html(this.variable1 + ' &#x25BE;').on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuY.displayed) {
          self.menuY.hideMenu();
        }
        self.menuX.showMenu(d3.event, document.body, self.itemsX, [bbox.left - 20, bbox.top + 20]);
      });

      svg_container$1.append('text').attrs({
        id: 'title-axis-y',
        class: 'title-axis',
        x: margin$1.left / 2,
        y: margin$1.top + height$1 / 2 - 10,
        transform: 'rotate(-90, ' + margin$1.left / 2 + ', ' + (margin$1.top + height$1 / 2) + ')',
        'title-tooltip': this.pretty_name2
      }).html(this.variable2 + ' &#x25BE;').on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuX.displayed) {
          self.menuX.hideMenu();
        }
        self.menuY.showMenu(d3.event, document.body, self.itemsY, [bbox.left, bbox.bottom + 10]);
      });
    }
  }, {
    key: 'updateLight',
    value: function updateLight() {
      var default_color = 'gray';
      this.scatter.selectAll('.dot').transition().duration(125).styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color,
          stroke: app.colors[d.id] ? 'rgb(97, 97, 97)' : 'rgb(206, 206, 206)'
        };
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this3 = this;

      var self = this;
      var data = self.data;
      var dots = this.scatter.selectAll('.dot').data(data, function (d) {
        return d.id;
      });

      if (this.type === 'rank') {
        var rank_variable1 = this.rank_variable1;
        var rank_variable2 = this.rank_variable2;
        var range_x = this.xInversed ? d3.extent(this.data, function (d) {
          return d[rank_variable1];
        }).reverse() : d3.extent(this.data, function (d) {
          return d[rank_variable1];
        });
        var range_y = this.yInversed ? d3.extent(this.data, function (d) {
          return d[rank_variable2];
        }).reverse() : d3.extent(this.data, function (d) {
          return d[rank_variable2];
        });
        var serie_x = this.data.map(function (d) {
          return d[_this3.variable1];
        });
        var serie_y = this.data.map(function (d) {
          return d[_this3.variable2];
        });
        this.x.domain(range_x).nice();
        this.y.domain(range_y).nice();
        this.mean_variable1 = _getPR(getMean(serie_x), serie_x);
        this.mean_variable2 = _getPR(getMean(serie_y), serie_y);

        var x = this.x;
        var y = this.y;
        var default_color = 'gray';

        // const dots = this.scatter.selectAll('.dot')
        //   .data(data, d => d.id);

        dots.transition().duration(125).attrs(function (d) {
          return {
            r: 5,
            cx: x(d[rank_variable1]),
            cy: y(d[rank_variable2])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || default_color,
            stroke: app.colors[d.id] ? 'rgb(97, 97, 97)' : 'rgb(206, 206, 206)'
          };
        }).on('end', function () {
          self.bindTooltips(true);
        });

        dots.enter().insert('circle').transition().duration(125).styles(function (d) {
          return {
            fill: app.colors[d.id] || default_color,
            stroke: app.colors[d.id] ? 'rgb(97, 97, 97)' : 'rgb(206, 206, 206)'
          };
        }).attrs(function (d) {
          return {
            r: 5,
            cx: x(d[rank_variable1]),
            cy: y(d[rank_variable2]),
            class: 'dot'
          };
        }).on('end', function () {
          self.bindTooltips(true);
        });
        dots.exit().transition().duration(125).remove();
      } else if (this.type === 'value') {
        var variable1 = this.variable1;
        var variable2 = this.variable2;
        var _serie_x = this.data.map(function (d) {
          return d[variable1];
        });
        var _serie_y = this.data.map(function (d) {
          return d[variable2];
        });
        var _range_x = this.xInversed ? d3.extent(_serie_x).reverse() : d3.extent(_serie_x);
        var _range_y = this.yInversed ? d3.extent(_serie_y).reverse() : d3.extent(_serie_y);
        this.x.domain(_range_x).nice();
        this.y.domain(_range_y).nice();
        this.mean_variable1 = getMean(_serie_x);
        this.mean_variable2 = getMean(_serie_y);

        var _x = this.x;
        var _y = this.y;
        var _default_color = 'gray';

        this.plot.select('#axis--x').transition().duration(125).call(this.xAxis);
        this.plot.select('#axis--y').transition().duration(125).call(this.yAxis);

        dots.transition().duration(125).attrs(function (d) {
          return {
            r: 5,
            cx: _x(d[variable1]),
            cy: _y(d[variable2])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id] || _default_color,
            stroke: app.colors[d.id] ? 'rgb(97, 97, 97)' : 'rgb(206, 206, 206)'
          };
        }).on('end', function () {
          self.bindTooltips(false);
        });

        dots.enter().insert('circle').transition().duration(125).styles(function (d) {
          return {
            fill: app.colors[d.id] || _default_color,
            stroke: app.colors[d.id] ? 'rgb(97, 97, 97)' : 'rgb(206, 206, 206)'
          };
        }).attrs(function (d) {
          return {
            r: 5,
            cx: _x(d[variable1]),
            cy: _y(d[variable2]),
            class: 'dot'
          };
        }).on('end', function () {
          self.bindTooltips(false);
        });

        dots.exit().transition().duration(125).remove();
      }
      this.updateMeanValue();
      this.updateAxisGrid();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, [this.variable1, this.variable2], 'array'), calcPopCompletudeSubset(app, [this.variable1, this.variable2]));
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.id) > -1 ? app.colors[d.id] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      this.map_elem.tooltip.style('display', 'none');
      svg_container$1.select('.brush').call(this.brush.move, null);
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.id;
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value1 = d.properties[self.variable1];
            var value2 = d.properties[self.variable2];
            var color = comp2(value1, value2, self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self.updateLight();
    }
  }, {
    key: 'bindTooltips',
    value: function bindTooltips(with_rank) {
      var _this5 = this;

      var self = this;
      this.scatter.selectAll('.dot').on('mouseover.tooltip', function () {
        clearTimeout(t$1);
        self.tooltip.style('display', null).select('.title').attr('class', 'title');
      }).on('mousemove.tooltip', function (d) {
        clearTimeout(t$1);
        self.tooltip.select('.title').attr('class', 'title').html(['<b>', d.name, ' (', d.id, ')', '</b>'].join(''));
        var yoffset = void 0;
        if (with_rank) {
          self.tooltip.select('.content').html([self.variable1 + ' (rang) : ' + Math.round(d[self.rank_variable1] * 10) / 10 + '/100', self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10 + ' ' + self.unit1, self.variable2 + ' (rang) : ' + Math.round(d[self.rank_variable2] * 10) / 10 + '/100', self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10 + ' ' + self.unit2].join('<br>'));
          yoffset = 120;
        } else {
          self.tooltip.select('.content').html([self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10 + ' ' + self.unit1, self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10 + ' ' + self.unit2].join('<br>'));
          yoffset = 85;
        }
        var b = self.tooltip.node().getBoundingClientRect();
        self.tooltip.styles({
          display: null,
          left: d3.event.pageX - 5 + 'px',
          top: d3.event.pageY - yoffset + 'px' });
      }).on('mouseout.tooltip', function () {
        clearTimeout(t$1);
        t$1 = setTimeout(function () {
          _this5.tooltip.style('display', 'none').select('.title').attr('class', 'title');
        }, 250);
      });
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value1 = d.properties[this.variable1];
        var value2 = d.properties[this.variable2];
        var color = comp2(value1, value2, this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
      }
      this.updateLight();
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var _this6 = this;

      if (this.type === 'value') {
        this.mean_variable1 = getMean(this.data.map(function (d) {
          return d[_this6.variable1];
        }));
        this.mean_variable2 = getMean(this.data.map(function (d) {
          return d[_this6.variable2];
        }));
      } else if (this.type === 'rank') {
        this.mean_variable1 = _getPR(getMean(this.data.map(function (d) {
          return d[_this6.variable1];
        })), this.data.map(function (d) {
          return d[_this6.variable1];
        }));
        this.mean_variable2 = _getPR(getMean(this.data.map(function (d) {
          return d[_this6.variable2];
        })), this.data.map(function (d) {
          return d[_this6.variable2];
        }));
      }
      var grp_mean = this.plot.select('g.mean');
      grp_mean.select('#mean_x').transition().duration(125).attrs({
        x1: this.x(this.mean_variable1),
        x2: this.x(this.mean_variable1)
      });
      grp_mean.select('#mean_y').transition().duration(125).attrs({
        y1: this.y(this.mean_variable2),
        y2: this.y(this.mean_variable2)
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value1 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable1];
        this.ref_value2 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable2];
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
        this.map_elem.resetColors(this.current_ids);
        this.update();
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this7 = this;

      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this7.variable1] && !!ft[_this7.variable2];
      }).map(function (d) {
        var res = { id: d.id, name: d.name };
        res[_this7.variable1] = d[_this7.variable1];
        res[_this7.variable2] = d[_this7.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);

      this.xInversed = false;
      this.yInversed = false;
      var tmp_my_region = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0];
      this.ref_value1 = tmp_my_region[this.variable1];
      this.ref_value2 = tmp_my_region[this.variable2];

      this.map_elem.removeRectBrush();
      this.updateItemsCtxMenu();
      this.updateMapRegio();
      this.updateTableStat();
      this.updateCompletude();
      this.update();
    }
  }, {
    key: 'changeVariableX',
    value: function changeVariableX(code_variable) {
      var _this8 = this;

      this.variable1 = code_variable;
      this.rank_variable1 = 'pr_' + this.variable1;
      var var_info = variables_info.find(function (ft) {
        return ft.id === code_variable;
      });
      this.pretty_name1 = var_info.name;
      this.unit1 = var_info.unit;
      svg_container$1.select('#title-axis-x').attr('title-tooltip', this.pretty_name1).html(code_variable + ' &#x25BE;');
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this8.variable1] && !!ft[_this8.variable2];
      }).map(function (d) {
        var res = { id: d.id, name: d.name };
        res[_this8.variable1] = d[_this8.variable1];
        res[_this8.variable2] = d[_this8.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value1 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable1];
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'changeVariableY',
    value: function changeVariableY(code_variable) {
      var _this9 = this;

      this.variable2 = code_variable;
      this.rank_variable2 = 'pr_' + this.variable2;
      var var_info = variables_info.find(function (ft) {
        return ft.id === code_variable;
      });
      this.pretty_name2 = var_info.name;
      this.unit2 = var_info.unit;
      svg_container$1.select('#title-axis-y').attr('title-tooltip', this.pretty_name2).html(code_variable + ' &#x25BE;');
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this9.variable1] && !!ft[_this9.variable2];
      }).map(function (d) {
        var res = { id: d.id, name: d.name };
        res[_this9.variable1] = d[_this9.variable1];
        res[_this9.variable2] = d[_this9.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value2 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable2];
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'updateItemsCtxMenu',
    value: function updateItemsCtxMenu() {
      var _this10 = this;

      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this10.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this10.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this10.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this10.changeVariableY(elem);
          }
        };
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this11 = this;

      this.itemsX.push({
        name: code_variable,
        action: function action() {
          return _this11.changeVariableX(code_variable);
        }
      });
      this.itemsY.push({
        name: code_variable,
        action: function action() {
          return _this11.changeVariableY(code_variable);
        }
      });
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this12 = this;

      // Remove the variable from the X and Y list of items:
      for (var i = this.itemsX.length - 1; i > -1; i--) {
        if (this.itemsX[i].name === code_variable) {
          this.itemsX.splice(i, 1);
          break;
        }
      }
      for (var _i = this.itemsY.length - 1; _i > -1; _i--) {
        if (this.itemsY[_i].name === code_variable) {
          this.itemsY.splice(_i, 1);
          break;
        }
      }

      // If the variable to remove was currently used for drawing this chart,
      // set a new variable for this axis and redraw the chart:
      if (code_variable === this.variable1) {
        var new_var_x = this.itemsX.filter(function (ft) {
          return ft.name !== _this12.variable2;
        })[0].name;
        this.changeVariableX(new_var_x);
      } else if (code_variable === this.variable2) {
        var new_var_y = this.itemsY.filter(function (ft) {
          return ft.name !== _this12.variable1;
        })[0].name;
        this.changeVariableY(new_var_y);
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$1.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.displayLegend(1);
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');

      menu.select('#ind_raw_values').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.type = 'value';
        this.classList.add('active');
        menu.select('#ind_ranks').attr('class', 'choice_ind');
        self.update();
      });

      menu.select('#ind_ranks').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.type = 'rank';
        this.classList.add('active');
        menu.select('#ind_raw_values').attr('class', 'choice_ind');
        self.update();
      });
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this13 = this;

      var mean1 = getMean(this.data.map(function (ft) {
        return ft[_this13.variable1];
      }));
      var mean2 = getMean(this.data.map(function (ft) {
        return ft[_this13.variable2];
      }));
      svg_container$1.select('.brush').call(this.brush.move, null);
      app.colors = {};
      for (var i = 0, len_i = this.data.length; i < len_i; i++) {
        var ft = this.data[i];
        if (ft[this.variable1] <= mean1 && ft[this.variable2] <= mean2) {
          app.colors[ft.id] = comp2(ft[this.variable1], ft[this.variable2], this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        }
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateLight();
      this.updateMapRegio();
      this.map_elem.removeRectBrush();
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      svg_container$1.select('.brush').call(this.brush.move, null);
      app.colors = {};
      for (var i = 0, len_i = this.data.length; i < len_i; i++) {
        var ft = this.data[i];
        if (ft[this.variable1] <= this.ref_value1 && ft[this.variable2] <= this.ref_value2) {
          app.colors[ft.id] = comp2(ft[this.variable1], ft[this.variable2], this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        }
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateLight();
      this.updateMapRegio();
      this.map_elem.removeRectBrush();
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this14 = this;

      var mean1 = getMean(this.data.map(function (ft) {
        return ft[_this14.variable1];
      }));
      var mean2 = getMean(this.data.map(function (ft) {
        return ft[_this14.variable2];
      }));
      svg_container$1.select('.brush').call(this.brush.move, null);
      app.colors = {};
      for (var i = 0, len_i = this.data.length; i < len_i; i++) {
        var ft = this.data[i];
        if (ft[this.variable1] >= mean1 && ft[this.variable2] >= mean2) {
          app.colors[ft.id] = comp2(ft[this.variable1], ft[this.variable2], this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        }
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateLight();
      this.updateMapRegio();
      this.map_elem.removeRectBrush();
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      svg_container$1.select('.brush').call(this.brush.move, null);
      app.colors = {};
      for (var i = 0, len_i = this.data.length; i < len_i; i++) {
        var ft = this.data[i];
        if (ft[this.variable1] >= this.ref_value1 && ft[this.variable2] >= this.ref_value2) {
          app.colors[ft.id] = comp2(ft[this.variable1], ft[this.variable2], this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        }
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateLight();
      this.updateMapRegio();
      this.map_elem.removeRectBrush();
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this15 = this;

      var values1 = this.data.map(function (d) {
        return d[_this15.variable1];
      });
      var values2 = this.data.map(function (d) {
        return d[_this15.variable2];
      });
      var features = [{
        Min: d3.min(values1),
        Max: d3.max(values1),
        Moy: getMean(values1),
        Med: d3.median(values1),
        id: this.variable1,
        Variable: this.variable1,
        'Ma rÃ©gion': this.ref_value1
      }, {
        Min: d3.min(values2),
        Max: d3.max(values2),
        Moy: getMean(values2),
        Med: d3.median(values2),
        id: this.variable2,
        Variable: this.variable2,
        'Ma rÃ©gion': this.ref_value2
      }];
      return features;
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }, {
    key: 'getHelpMessage',
    value: function getHelpMessage() {
      return '\n<h3>Position  - 2 indicateurs</h3>\n\n<b>Aide g\xE9n\xE9rale</b>\nCe graphique bidimensionnel repr\xE9sente la position de l\u2019unit\xE9 territoriale de r\xE9f\xE9rence sur deux indicateurs pour un espace d\u2019\xE9tude et un maillage territorial d\u2019analyse donn\xE9. La valeur de l\u2019unit\xE9 territoriale de r\xE9f\xE9rence appara\xEEt en surbrillance (jaune). Les lignes repr\xE9sent\xE9es par un tiret\xE9 rouge repr\xE9sentent la moyenne de l\u2019espace d\u2019\xE9tude pour chacun des indicateurs s\xE9lectionn\xE9s (non pond\xE9r\xE9e).\n\nSur le graphique et la carte, les unit\xE9s territoriales qui disposent de valeurs sup\xE9rieures \xE0 la unit\xE9 territoriale de r\xE9f\xE9rence pour les deux indicateurs sont repr\xE9sent\xE9es en vert. Les unit\xE9s territoriales caract\xE9ris\xE9es par des valeurs inf\xE9rieures \xE0 l\u2019unit\xE9 territoriale de r\xE9f\xE9rence pour les deux indicateurs sont repr\xE9sent\xE9es en rouge. Celles qui sont sup\xE9rieures pour l\u2019indicateur repr\xE9sent\xE9 sur l\u2019axe des abscisses et inf\xE9rieur sur l\u2019axe des ordonn\xE9es sont repr\xE9sent\xE9es en orange\xA0; et violet \xE0 l\u2019inverse. Sur ce graphique, il est possible d\u2019inverser l\u2019ordre de classement de l\u2019indicateur (appuyer sur le \xAB\xA0+\xA0\xBB)\xA0: les valeurs minimales seront alors consid\xE9r\xE9es comme maximale sur l\u2019axe.\n\nPar d\xE9faut, ce graphique est exprim\xE9 dans les valeurs brutes de l\u2019indicateur (pourcentage par exemple). En s\xE9lectionnant l\u2019option \xABvaleurs de rang\xA0\xBB, l\u2019indicateur est normalis\xE9 de 0 (valeur minimale) \xE0 100 (valeur maximale). L\u2019utilisation possible de ce type de transformation est la suivante\xA0: une unit\xE9 territoriale disposant d\u2019un indice de 67 sur un indicateur signifie que 33\xA0% des unit\xE9s territoriales de l\u2019espace d\u2019\xE9tude sont caract\xE9ris\xE9es par des valeurs sup\xE9rieures \xE0 l\u2019unit\xE9 territoriale de r\xE9f\xE9rence pour les indicateurs s\xE9lectionn\xE9s. Et r\xE9ciproquement. Les valeurs de rang permettent notamment de rendre comparables des unit\xE9s de mesure et des param\xE8tres de dispersion de deux indicateurs. Il ne faut n\xE9anmoins pas omettre que cette transformation nuit \xE0 la restitution de la dispersion statistique effective des indicateurs.';
    }
  }]);
  return ScatterPlot2;
}();

var svg_bar$2 = void 0;
var margin$2 = void 0;
var bbox_svg$3 = void 0;
var width$2 = void 0;
var height$2 = void 0;

var updateDimensions$2 = function updateDimensions() {
  svg_bar$2 = d3.select('#svg_bar');
  margin$2 = { top: 60, right: 70, bottom: 60, left: 70 };
  bbox_svg$3 = svg_bar$2.node().getBoundingClientRect();
  width$2 = +bbox_svg$3.width - margin$2.left - margin$2.right;
  height$2 = 500 * app.ratioToWide - margin$2.top - margin$2.bottom;
  svg_bar$2.attr('height', 500 * app.ratioToWide + 'px');
  svg_bar$2 = svg_bar$2.append('g').attr('class', 'container');
};

var wrap = function wrap(_text, _width) {
  _text.each(function () {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        lineHeight = 1.4,
        x = +text.attr('x'),
        dy = parseFloat(text.attr('dy')),
        // ems
    nb_var = app.current_config.ratio.length;
    var y = +text.attr('y');
    var id = +text.attr('id');
    var line = [];
    var lineNumber = 0;
    // if (y > height / 2 - 35) {
    //   y -= 40;
    // }
    if (id === 0) y = y + 12;
    if (id === nb_var / 2) y = y - 12;
    var tspan = text.text(null).append('tspan').attr('x', x).attr('y', y).attr('dy', dy + 'em');
    var word = words.pop();
    while (word) {
      line.push(word);
      tspan.text(line.join(' '));
      if (tspan.node().getComputedTextLength() > _width) {
        line.pop();
        tspan.text(line.join(' '));
        line = [word];
        tspan = text.append('tspan').attr('x', x).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
      }
      word = words.pop();
    }
  });
};

var move = function move(array, from, to) {
  array.splice(to, 0, array.splice(from, 1)[0]);
  return array;
};

var swap = function swap(array, ix1, ix2) {
  // eslint-disable-line no-param-reassign
  var _ref = [array[ix2], array[ix1]];
  array[ix1] = _ref[0];
  array[ix2] = _ref[1];
  return array;
};

var prepare_data_radar_default = function prepare_data_radar_default(data, variables) {
  // Prepare the data for "My RÃ©gion":
  var v_my_region = data.find(function (d) {
    return d.id === app.current_config.my_region;
  });
  var ojb_my_region = {
    name: app.current_config.my_region,
    axes: []
  };
  variables.forEach(function (v) {
    var t = variables_info.find(function (d) {
      return d.id === v;
    }).id;
    var _v = 'pr_' + v;
    ojb_my_region.axes.push({
      axis: t, value: v_my_region[_v]
    });
  });
  return ojb_my_region;
};

var prepare_data_radar_ft = function prepare_data_radar_ft(data, variables, ft) {
  var ft_values = data.find(function (d) {
    return d.id === ft;
  });
  if (!ft_values) {
    return null;
  }
  var obj = {
    name: ft,
    axes: []
  };
  variables.forEach(function (v) {
    var t = variables_info.find(function (d) {
      return d.id === v;
    }).id;
    var _v = 'pr_' + v;
    obj.axes.push({
      axis: t, value: ft_values[_v]
    });
  });
  return obj;
};

var RadarChart3 = function () {
  function RadarChart3(data, options) {
    var _this = this;

    classCallCheck(this, RadarChart3);

    updateDimensions$2();
    var cfg = {
      w: width$2 - 20, // Width of the circle
      h: height$2 - 20, // Height of the circle
      margin: margin$2, // The margins of the SVG
      levels: 10, // How many levels or inner circles should there be drawn
      maxValue: 100, // What is the value that the biggest circle will represent
      labelFactor: 1.2, // How much farther than the radius of the outer circle should the labels be placed
      wrapWidth: 75, // The number of pixels after which a label needs to be given a new line
      opacityArea: 0.10, // The opacity of the area of the blob
      dotRadius: 4, // The size of the colored circles of each blog
      opacityCircles: 0.1, // The opacity of the circles of each blob
      strokeWidth: 2, // The width of the stroke around each blob
      roundStrokes: true, // If true the area and stroke will follow a round path (cardinal-closed)
      color: d3.scaleOrdinal(d3.schemeCategory10), // Color function,
      format: '.2', // The format string to be used by d3.format
      unit: '%', // The unit to display after the number on the axis and point tooltips (like $, â‚¬, %, etc)
      legend: false,
      allowInverseData: true
    };
    this.cfg = cfg;
    // Put all of the options into a variable called cfg
    if (typeof options !== 'undefined') {
      var opts_key = Object.keys(options);
      for (var i = 0, len_i = opts_key.length; i < len_i; i++) {
        var k = opts_key[i];
        if (typeof options[k] !== 'undefined') {
          cfg[k] = options[k];
        }
      }
    }
    this.inversedAxis = new Set();
    this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (cfg.w / 2 + cfg.margin.left) + ',' + (cfg.h / 2 + cfg.margin.top) + ')');

    this.prepareData(data);
    this.drawAxisGrid();
    this.drawArea();

    this.completude = new CompletudeSection();
    // Compute the "complÃ©tude" value for these ratios:
    this.completude.update(calcCompletudeSubset(app, this.variables, 'array'), calcPopCompletudeSubset(app, this.variables));
    app.colors[app.current_config.my_region] = color_highlight;
    if (cfg.allowInverseData) {
      this.inverse_data = function (field) {
        var data_length = _this.data.length;
        if (!field) {
          for (var _i = 0; _i < data_length; _i++) {
            var ax = _this.data[_i].axes;
            for (var j = 0; j < ax.length; j++) {
              ax[j].value = 100 - ax[j].value;
            }
          }
        } else {
          for (var _i2 = 0; _i2 < data_length; _i2++) {
            var _ax = _this.data[_i2].axes;
            for (var _j = 0; _j < _ax.length; _j++) {
              if (_ax[_j].axis === field) {
                _ax[_j].value = 100 - _ax[_j].value;
              }
            }
          }
        }
        _this.update();
      };
    }
    this.makeTableStat();
  }

  createClass(RadarChart3, [{
    key: 'add_element',
    value: function add_element(elem) {
      var _this2 = this;

      var n_axis = elem.axes.map(function (i) {
        return i.axis;
      });
      if (!(JSON.stringify(n_axis.sort()) === JSON.stringify(this.allAxis.sort()))) {
        throw new Error('Expected element with same axes name than existing data.');
      }
      elem.axes.forEach(function (ft) {
        if (_this2.inversedAxis.has(ft.axis)) {
          ft.value = 100 - ft.value; // eslint-disable-line no-param-reassign
        }
      });
      this.data.push(elem);
      var colors_in_use = Object.keys(app.colors).map(function (k) {
        return app.colors[k];
      });
      for (var j = 0; j < this.data.length; j++) {
        var on_axes = [];
        if (this.id_my_region === this.data[j].name) app.colors[this.data[j].name] = color_highlight;else if (!app.colors[this.data[j].name]) {
          var ii = 0;
          while (ii++ < 21) {
            var c = this.cfg.color(ii);
            if (!(colors_in_use.indexOf(c) > -1)) {
              app.colors[this.data[j].name] = c;
            }
          }
        }
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          on_axes.push(this.data[j].name);
        }
      }
      this.displayed_ids.push(elem.name);
      var self = this;
      var cfg = this.cfg;

      var blobWrapper = this.g.insert('g', '.radarCircleWrapper').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', this.radarLine(elem.axes)).style('fill', app.colors[elem.name]).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        self.g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.3);
      }).on('mouseout', function () {
        // Bring back all blobs
        self.g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      }).on('click', function (d) {
        var ft_id = d.name;
        self.map_elem.target_layer.selectAll('path').each(function (ft) {
          if (ft.id === ft_id) {
            var cloned = this.cloneNode();
            cloned.style.stroke = 'yellow';
            cloned.style.strokeWidth = '2.25px';
            cloned.classList.add('cloned');
            self.map_elem.layers.node().appendChild(cloned);
            setTimeout(function () {
              cloned.remove();
            }, 5000);
          }
        });
      });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', this.radarLine(elem.axes)).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', app.colors[elem.name]).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(elem.axes).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', app.colors[elem.name]).style('fill-opacity', 0.8);

      blobWrapper.node().__data__ = elem;

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = this.g.insert('g', '.tooltip').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarCircleWrapper');

      blobCircleWrapper.node().__data__ = elem;

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(elem.axes).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        self.g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(self.Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        self.g.select('.tooltip').transition().style('display', 'none').text('');
      });
    }
  }, {
    key: 'changeOrder',
    value: function changeOrder() {
      this.data = this.data.slice(1, this.data.length).concat(this.data.slice(0, 1));
      this.update();
    }
  }, {
    key: 'prepareData',
    value: function prepareData(data) {
      var _this3 = this;

      // Set the minimum number of variables to keep selected for this kind of chart:
      app.current_config.nb_var = 3;
      this.variables = app.current_config.ratio;
      this.ref_data = data.slice().filter(function (ft) {
        return _this3.variables.map(function (v) {
          return !!ft[v];
        }).every(function (d) {
          return d === true;
        });
      });
      this.rank_variables = this.variables.map(function (d) {
        return 'pr_' + d;
      });
      this.variables.forEach(function (d, i) {
        computePercentileRank(_this3.ref_data, d, _this3.rank_variables[i]);
      });
      this.data = [prepare_data_radar_default(this.ref_data, this.variables)];
      this.displayed_ids = this.data.map(function (d) {
        return d.name;
      });
      this.current_ids = this.ref_data.map(function (d) {
        return d.id;
      });
      this.id_my_region = app.current_config.my_region;

      // If the supplied maxValue is smaller than the actual one, replace by the max in the data
      var maxValue = 0;
      for (var j = 0; j < this.data.length; j++) {
        if (this.id_my_region === this.data[j].name) app.colors[this.data[j].name] = color_highlight;else app.colors[this.data[j].name] = this.cfg.color(j + 1);
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          if (this.data[j].axes[i].value > maxValue) {
            maxValue = this.data[j].axes[i].value;
          }
        }
      }

      this.maxValue = math_max(this.cfg.maxValue, maxValue);
      this.allAxis = this.data[0].axes.map(function (i) {
        return i.axis;
      }); // Names of each axis
      this.total = this.allAxis.length; // The number of different axes
      this.radius = Math.min(this.cfg.w / 2, this.cfg.h / 2); // Radius of the outermost circle
      this.Format = d3.format(this.cfg.format); // Formatting
      this.angleSlice = Math.PI * 2 / this.total; // The width in radians of each "slice"
      // Scale for the radius
      this.rScale = d3.scaleLinear().range([0, this.radius]).domain([0, this.maxValue]);
      // The radial line function
      this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
        return _this3.rScale(d.value);
      }).angle(function (d, i) {
        return i * _this3.angleSlice;
      });
    }
  }, {
    key: 'drawAxisGrid',
    value: function drawAxisGrid() {
      var self = this;
      var cfg = this.cfg;
      var g = this.g;
      var radius = this.radius;
      var maxValue = this.maxValue;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      var labelClicked = function labelClicked() {
        var ix = +this.id;
        if (ix + 1 === self.allAxis.length) {
          for (var i = 0; i < self.data.length; i++) {
            swap(self.data[i].axes, ix, 0);
          }
        } else {
          var new_ix = ix + 1;
          for (var _i3 = 0; _i3 < self.data.length; _i3++) {
            move(self.data[_i3].axes, ix, new_ix);
          }
        }
        self.update();
      };

      var labelCtxMenu = function labelCtxMenu(label) {
        if (self.inversedAxis.has(label)) {
          self.inversedAxis.delete(label);
          this.style.fill = 'black';
        } else {
          self.inversedAxis.add(label);
          this.style.fill = 'red';
        }
        d3.event.stopPropagation();
        d3.event.preventDefault();
        self.inverse_data(label);
      };

      var axisGrid = g.append('g').attr('class', 'axisWrapper');

      // Draw the background circles
      axisGrid.selectAll('.levels').data(d3.range(1, cfg.levels + 1).reverse()).enter().append('circle').attrs(function (d) {
        return {
          class: 'gridCircle',
          r: radius / cfg.levels * d
        };
      }).styles(function (d) {
        if (d === 5) {
          return {
            fill: '#CDCDCD',
            stroke: 'rgb(245, 138, 138)',
            'stroke-dasharray': '5, 5',
            'fill-opacity': cfg.opacityCircles,
            filter: 'url(#glow)'
          };
        }
        return {
          fill: '#CDCDCD',
          stroke: '#CDCDCD',
          'fill-opacity': cfg.opacityCircles,
          filter: 'url(#glow)'
        };
      });

      // // Text indicating at what % each level is
      // axisGrid.selectAll('.axisLabel')
      //   .data(d3.range(1, (cfg.levels + 1)).reverse())
      //   .enter().append('text')
      //   .attr('class', 'axisLabel')
      //   .attr('x', 4)
      //   .attr('y', d => -d * radius / cfg.levels)
      //   .attr('dy', '0.4em')
      //   .style('font-size', '10px')
      //   .attr('fill', '#737373')
      //   .text(d => Format(maxValue * d / cfg.levels) + cfg.unit);

      // Create the straight lines radiating outward from the center
      var axis = axisGrid.selectAll('.axis').data(this.allAxis).enter().append('g').attr('class', 'axis');
      // Append the lines
      axis.append('line').attr('x1', 0).attr('y1', 0).attr('x2', function (d, i) {
        return rScale(maxValue * 1.1) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y2', function (d, i) {
        return rScale(maxValue * 1.1) * math_sin(angleSlice * i - HALF_PI);
      }).attr('class', 'line').style('stroke', 'white').style('stroke-width', '2px');

      // Append the labels at each axis
      axis.append('text').attr('class', 'legend').style('font-size', '11px').attr('id', function (d, i) {
        return i;
      }).attr('text-anchor', 'middle').attr('dy', '0.35em').attr('x', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI);
      }).attr('title-tooltip', function (_, i) {
        return app.current_config.ratio_pretty_name[i];
      }).style('fill', function (d) {
        return self.inversedAxis.has(d) ? 'red' : 'black';
      }).style('cursor', 'pointer').text(function (d) {
        return d;
      }).on('click', labelClicked).on('contextmenu', cfg.allowInverseData ? labelCtxMenu : null).call(wrap, cfg.wrapWidth);

      // Filter for the outside glow
      var filter = g.append('defs').append('filter').attr('id', 'glow');
      filter.append('feGaussianBlur').attr('stdDeviation', '2.5').attr('result', 'coloredBlur');
      var feMerge = filter.append('feMerge');
      feMerge.append('feMergeNode').attr('in', 'coloredBlur');
      feMerge.append('feMergeNode').attr('in', 'SourceGraphic');

      this.axisGrid = axisGrid;
    }

    // handleLegend() {
    //   const cfg = this.cfg;
    //   if (cfg.legend !== false && typeof cfg.legend === 'object') {
    //     const names = this.data.map(el => el.name);
    //     if (cfg.legend.title) {
    //       this.legendZone.append('text')
    //         .attr('class', 'title')
    //         .attr('transform', 'translate(0, -20)')
    //         .attr('x', cfg.w - 70)
    //         .attr('y', 10)
    //         .attr('font-size', '12px')
    //         .attr('fill', '#404040')
    //         .text(cfg.legend.title);
    //     }
    //     const legend = this.legendZone
    //       .selectAll('g')
    //       .data(names);
    //     const legendEnter = legend
    //       .enter()
    //       .append('g');
    //
    //     // Create rectangles markers
    //     legendEnter
    //       .append('rect')
    //       .attrs((d, i) => ({
    //         x: cfg.w - 65,
    //         y: i * 20,
    //         width: 10,
    //         height: 10,
    //       }))
    //       .style('fill', d => app.colors[d.name]);
    //
    //     // Create labels
    //     legendEnter
    //       .append('text')
    //       .attrs((d, i) => ({
    //         x: cfg.w - 52,
    //         y: i * 20 + 9,
    //         fill: '#737373',
    //         'font-size': '11px',
    //       }))
    //       .text(d => d);
    //
    //     legend.merge(legendEnter).selectAll('rect')
    //       .attr('y', (d, i) => i * 20)
    //       .style('fill', d => app.colors[d.name]);
    //
    //     legend.merge(legendEnter).selectAll('text')
    //       .attrs((d, i) => ({
    //         x: cfg.w - 52,
    //         y: i * 20 + 9,
    //       }))
    //       .text(d => d);
    //
    //     legend.exit().remove();
    //   }
    // }

  }, {
    key: 'drawArea',
    value: function drawArea() {
      var _this4 = this;

      var cfg = this.cfg;
      var g = this.g;
      var Format = this.Format;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      // Create a wrapper for the blobs
      var blobWrapper = g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('fill', function (d) {
        return app.colors[d.name];
      }).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0.1);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.7);
      }).on('mouseout', function () {
        g.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', function (d, i) {
        return app.colors[d.name];
      }).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', function (d) {
        return app.colors[d.id];
      }).style('fill-opacity', 0.8);

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarCircleWrapper');

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        g.select('.tooltip').transition().style('display', 'none').text('');
      });

      var tooltip = g.append('text').attrs({ class: 'tooltip', x: 0, y: 0, dy: '0.35em', 'text-anchor': 'middle' }).styles({ 'font-size': '12px', display: 'none' });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this5 = this;

      var rScale = this.rScale;
      var maxValue = this.maxValue;
      var cfg = this.cfg;
      var angleSlice = this.angleSlice;
      // console.log(this.current_ids);
      // if (new_data) {
      //   const new_axis = new_data[0].axes.map(elem => elem.axis);
      //   if (!(JSON.stringify(new_axis) === JSON.stringify(this.allAxis))) {
      //     throw new Error('Expected element with same axes name than existing data.');
      //   }
      //   this.data = new_data;
      //   this.allAxis = new_axis;
      // } else {
      this.allAxis = this.data[0].axes.map(function (elem) {
        return elem.axis;
      });
      // }
      var update_axis = this.axisGrid.selectAll('.axis').data(this.allAxis);

      var t = this.g.selectAll('.radarWrapper').transition().duration(225);

      update_axis.select('text.legend').attrs(function (d, i) {
        return {
          id: i,
          x: rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI),
          y: rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI)
        };
      }).style('fill', function (d) {
        return _this5.inversedAxis.has(d) ? 'red' : 'black';
      }).style('cursor', 'pointer').text(function (d) {
        return d;
      }).call(wrap, cfg.wrapWidth);

      var update_blobWrapper = this.g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      });

      update_blobWrapper.select('.radarArea').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      update_blobWrapper.select('.radarStroke').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      var circle = update_blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      });
      circle.transition(t).attrs(function (d, i) {
        return {
          cx: rScale(d.value) * math_cos(angleSlice * i - HALF_PI),
          cy: rScale(d.value) * math_sin(angleSlice * i - HALF_PI)
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id],
          'fill-opacity': 0.8
        };
      });

      var update_blobCircleWrapper = this.g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      });

      var invisibleCircle = update_blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      });
      invisibleCircle.transition(t).attrs(function (d, i) {
        return {
          cx: rScale(d.value) * math_cos(angleSlice * i - HALF_PI),
          cy: rScale(d.value) * math_sin(angleSlice * i - HALF_PI)
        };
      });
    }
  }, {
    key: 'round_stroke',
    value: function round_stroke(val) {
      var _this6 = this;

      if (val === undefined) {
        return this.cfg.roundStrokes;
      } else if (val !== this.cfg.roundStrokes) {
        this.cfg.roundStrokes = val;
        this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
          return _this6.rScale(d.value);
        }).angle(function (d, i) {
          return i * _this6.angleSlice;
        });
        this.update();
      }
      return val;
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.map_elem.displayLegend(2);
      this.updateMapRegio();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.layers.selectAll('.cloned').remove();
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      d3.select('#svg_bar').html('');
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this7 = this;

      var old_my_region = this.id_my_region;
      var other_features = this.displayed_ids.filter(function (d) {
        return d !== old_my_region;
      });
      this.g.remove();
      this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.id_my_region = app.current_config.my_region;
      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this7.ref_data, _this7.variables, id);
        _this7.add_element(a);
      });
      this.updateMapRegio();
      this.updateCompletude();
      this.updateTableStat();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this8 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this8.id_my_region;
      });
      this.g.remove();
      this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this8.ref_data, _this8.variables, id);
        _this8.add_element(a);
      });
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this9 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this9.id_my_region;
      });
      this.g.remove();
      this.g = svg_bar$2.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this9.ref_data, _this9.variables, id);
        _this9.add_element(a);
      });
      this.updateCompletude();
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this10 = this;

      var all_values = this.variables.map(function (v) {
        return _this10.ref_data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.ref_data.find(function (d) {
        return d.id === _this10.id_my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moy: getMean(values),
          Med: d3.median(values),
          id: _this10.variables[i],
          Variable: _this10.variables[i],
          'Ma rÃ©gion': my_region[_this10.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === this.id_my_region) return;
      if (this.displayed_ids.indexOf(id) < 0) {
        if (this.data.length > 6) {
          alertify.warning('Le nombre maximal de rÃ©gions sÃ©lectionnÃ©es est atteint.');
          return;
        }
        var a = prepare_data_radar_ft(this.ref_data, this.variables, id);
        this.add_element(a);
        this.update();
      } else {
        app.colors[id] = null;
        this.g.selectAll('#' + id + '.radarWrapper').remove();
        this.g.selectAll('#' + id + '.radarCircleWrapper').remove();
        var ix = this.data.map(function (_d, i) {
          return [i, _d.name === id];
        }).find(function (_d) {
          return _d[1] === true;
        })[0];
        this.data.splice(ix, 1);
        this.displayed_ids = this.data.map(function (_d) {
          return _d.name;
        });
        this.update();
      }
      this.updateMapRegio();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, this.variables, 'array'), calcPopCompletudeSubset(app, this.variables));
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this11 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return d.id === _this11.id_my_region ? color_highlight : _this11.current_ids.indexOf(d.id) > -1 ? _this11.displayed_ids.indexOf(d.id) > -1 ? app.colors[d.id] : color_countries : color_disabled;
      });
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }, {
    key: 'getHelpMessage',
    value: function getHelpMessage() {
      return '\n<h3>Position  - 3 indicateurs</h3>\n\n<b>Aide g\xE9n\xE9rale</b>\n\nCe graphique construit tel \xAB\xA0une cible\xA0\xBB permet de repr\xE9senter la position de l\u2019unit\xE9 territoriale de r\xE9f\xE9rence pour 3 \xE0 8 indicateurs simultan\xE9ment. Les cercles concentriques qui constituent le graphique expriment les d\xE9ciles de la distribution pour chacun des indicateurs s\xE9lectionn\xE9s (premier cercle = premier d\xE9cile, valeurs minimales par d\xE9faut / cercle ext\xE9rieur = dernier d\xE9cile, valeurs maximales par d\xE9faut). Les indicateurs repr\xE9sent\xE9s sur ce graphique sont de fait normalis\xE9s selon leur rang respectif dans la distribution statistique pour chacun des indicateurs\xA0: 0 correspondant \xE0 la valeur minimale (100\xA0% des unit\xE9s territoriales disposent de valeurs plus fortes) et 100 la valeur maximale (100\xA0% des unit\xE9 territoriales sont caract\xE9ris\xE9es par des valeurs moins fortes).\n\nLe cercle repr\xE9sent\xE9 en tiret\xE9 rouge repr\xE9sente la valeur m\xE9diane (50) pour l\u2019espace d\u2019\xE9tude. Si pour un indicateur la unit\xE9 territoriale se situe \xE0 l\u2019int\xE9rieur de ce cercle, cela signifie que la valeur pour cet indicateur se situe en-dessous de la m\xE9diane de l\u2019espace d\u2019\xE9tude. Si pour un autre indicateur la unit\xE9 territoriale se situe \xE0 l\u2019ext\xE9rieur de ce cercle, cela signifie que la valeur pour cet indicateur se situe au dessus de la m\xE9diane de l\u2019espace d\u2019\xE9tude.\n\nIl est possible de cliquer sur la carte pour visualiser le positionnement d\u2019autres unit\xE9s territoriales par rapport \xE0 l\u2019unit\xE9 territoriale de r\xE9f\xE9rence. Il est d\xE9conseill\xE9 de repr\xE9senter simultan\xE9ment plus de 3 unit\xE9s territoriales sur le m\xEAme graphique, au risque de rendre sa lecture al\xE9atoire.\n\nCe n\u2019est pas tant la forme cr\xE9\xE9e sur ce graphique qu\u2019il faut analyser (la forme d\xE9pend largement de la position des indicateurs sur le graphique, al\xE9atoire par d\xE9finition) que la position au regard de l\u2019espace de r\xE9f\xE9rence ou d\u2019autres unit\xE9s territoriales s\xE9lectionn\xE9es sur le graphique. L\u2019utilisateur peut d\xE8s lors inverser le sens du classement (clic droit sur le label de l\u2019indicateur, adapt\xE9 pour des indicateurs comme le taux de ch\xF4mage ou un taux \xE9lev\xE9 ne signifie pas forc\xE9ment une situation favorable) ou peut inverser l\u2019ordre d\u2019apparition des variables sur le graphique (clic gauche) si l\u2019on souhaite par exemple rapprocher des indicateurs de m\xEAme th\xE9matique c\xF4te \xE0 c\xF4te.';
    }
  }]);
  return RadarChart3;
}();

var svg_bar$3 = void 0;
var margin$3 = void 0;
var bbox_svg$4 = void 0;
var width$3 = void 0;
var height$3 = void 0;
var svg_container$2 = void 0;
var t$2 = void 0;

var updateDimensions$3 = function updateDimensions() {
  svg_bar$3 = d3.select('#svg_bar');
  margin$3 = { top: 20, right: 20, bottom: 40, left: 30 };
  bbox_svg$4 = svg_bar$3.node().getBoundingClientRect();
  width$3 = +bbox_svg$4.width - margin$3.left - margin$3.right;
  height$3 = 500 * app.ratioToWide - margin$3.top - margin$3.bottom;
  svg_bar$3.attr('height', 500 * app.ratioToWide + 'px');
  svg_container$2 = svg_bar$3.append('g').attr('class', 'container');
};

var Similarity1plus = function () {
  function Similarity1plus(ref_data) {
    var _this = this;

    classCallCheck(this, Similarity1plus);

    updateDimensions$3();
    app.chartDrawRatio = app.ratioToWide;
    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    this.ratios = app.current_config.ratio;
    this.nums = app.current_config.num;
    this.data = ref_data.filter(function (ft) {
      return _this.ratios.map(function (v) {
        return !!ft[v];
      }).every(function (v) {
        return v === true;
      });
    }).slice();
    this.my_region = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    });
    this.data.forEach(function (ft) {
      _this.ratios.forEach(function (v) {
        // eslint-disable-next-line no-param-reassign
        ft['dist_' + v] = math_abs(+ft[v] - +_this.my_region[v]);
      });
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.highlight_selection = [];
    this.serie_inversed = false;
    this.proportionnal_symbols = false;
    this.draw_group = svg_container$2.append('g').attr('transform', 'translate(' + margin$3.left + ', ' + margin$3.top + ')');

    // Prepare the tooltip displayed on mouseover:
    this.tooltip = prepareTooltip2(d3.select(svg_bar$3.node().parentElement), null);

    this.completude = new CompletudeSection();
    this.completude.update(calcCompletudeSubset(app, this.ratios, 'array'), calcPopCompletudeSubset(app, this.ratios));

    // Create the button allowing to choose
    // if the colors are inversed
    // (like green/red for superior/inferior regions)
    svg_container$2.append('image').attrs({
      x: width$3 + margin$3.left + 5,
      y: 232.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      _this.serie_inversed = !_this.serie_inversed;
      _this.applySelection(_this.highlight_selection.length);
    });

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var menu_selection = d3.select(svg_bar$3.node().parentElement).append('div').attr('id', 'menu_selection').styles({ position: 'relative', color: '#4f81bd', 'text-align': 'center' });
    var selection_close = menu_selection.append('p');
    selection_close.append('span').html('SÃ©lection des');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).styles({ color: '#4f81bd', 'margin-left': '1px' }).property('value', 5);
    selection_close.append('span').html('rÃ©gions les plus proches');
    var section = menu_selection.append('section').attr('class', 'slider-checkbox');
    section.append('input').attrs({ type: 'checkbox', id: 'check_prop' });
    section.append('label').attrs({ class: 'label not_selected', for: 'check_prop' }).text('Cercles proportionnels au numÃ©rateur');

    // const switch_button = menu_selection.append('p')
    //   .attr('class', 'btn-switch');
    // switch_button.append('input')
    //   .attrs({ type: 'radio', id: 'yes', name: 'switch', class: 'btn-switch__radio btn-switch__radio_yes' })
    // switch_button.append('input')
    //   .attrs({ type: 'radio', id: 'no', name: 'switch', class: 'btn-switch__radio btn-switch__radio_no' })
    //   .property('checked', 'checked');
    // const yes_label = switch_button.append('label')
    //   .attrs({ for: 'yes', class: 'btn-switch__label btn-switch__label_yes'});
    // yes_label.append('span')
    //   .attr('class', 'btn-switch__txt')
    //   .html('&#xf00c;');
    // const no_label = switch_button.append('label')
    //   .attrs({ for: 'no', class: 'btn-switch__label btn-switch__label_no' });
    // no_label.append('span')
    //   .attr('class', 'btn-switch__txt')
    //   .html('&#xf00d;');

    this.bindMenu();
    this.makeTableStat();
  }

  createClass(Similarity1plus, [{
    key: 'applySelection',
    value: function applySelection(nb) {
      var _this2 = this;

      app.colors = {};
      if (nb > 0) {
        this.data.forEach(function (ft) {
          // eslint-disable-next-line
          ft.dist = math_sqrt(_this2.ratios.map(function (v) {
            return 'dist_' + v;
          }).map(function (v) {
            return Math.pow(ft[v], 2);
          }).reduce(function (a, b) {
            return a + b;
          }));
        });
        this.data.sort(function (a, b) {
          return a.dist - b.dist;
        });
        this.data.forEach(function (el, i) {
          el.rank = i;
        });
        this.highlight_selection = this.data.slice(1, nb + 1);
      } else {
        this.highlight_selection = [];
      }
      this.removeLines();
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'update',
    value: function update() {
      var _this3 = this;

      var self = this;
      var data = self.data;
      var highlight_selection = self.highlight_selection;
      var nb_variables = self.ratios.length;
      var offset = height$3 / nb_variables + 1;
      var height_to_use = offset / 2;

      var _loop = function _loop(i) {
        var ratio_name = self.ratios[i];
        var selector_ratio_name = 'l_' + ratio_name;
        var ratio_pretty_name = app.current_config.ratio_pretty_name[i];
        var num_name = self.nums[i];
        var my_region_value = self.my_region[ratio_name];
        var ratio_values = _this3.data.map(function (d) {
          return d[ratio_name];
        });
        var g = _this3.draw_group.select('#' + selector_ratio_name);
        var axis = _this3.draw_group.select('g.axis--x.' + selector_ratio_name);
        var layer_other = void 0;
        var layer_highlighted = void 0;
        if (!g.node()) {
          g = _this3.draw_group.append('g').attrs({
            id: selector_ratio_name,
            num: num_name,
            class: 'grp_var'
          });
          axis = g.append('g').attrs({
            class: 'axis axis--x ' + selector_ratio_name,
            transform: 'translate(0, 10)'
          });
          g.append('text').attrs({
            x: 0,
            y: -7.5,
            fill: '#4f81bd',
            'font-size': '11px',
            'font-weight': 'bold',
            'font-family': '"Signika",sans-serif',
            'title-tooltip': ratio_pretty_name
          }).text(ratio_name);
          layer_other = g.append('g').attr('class', 'otherfeature');
          layer_highlighted = g.append('g').attr('class', 'highlighted');
        } else {
          layer_other = g.select('g.otherfeature');
          layer_highlighted = g.select('g.highlighted');
        }
        g.attr('transform', 'translate(0, ' + height_to_use + ')');
        var _min = void 0;
        var _max = void 0;
        _this3.data.sort(function (a, b) {
          return b['dist_' + ratio_name] - a['dist_' + ratio_name];
        });
        if (highlight_selection.length > 0) {
          var dist_axis = Math.max(math_abs(my_region_value - +d3.min(highlight_selection, function (d) {
            return d[ratio_name];
          })), math_abs(+d3.max(highlight_selection, function (d) {
            return d[ratio_name];
          }) - my_region_value));
          var margin_min_max = math_round(dist_axis) / 8;
          _min = my_region_value - dist_axis - margin_min_max;
          _max = my_region_value + dist_axis + margin_min_max;
          // if (_min > _max) { [_min, _max] = [_max, _min]; }
        } else {
          var _dist_axis = Math.max(math_abs(my_region_value - d3.min(ratio_values)), math_abs(d3.max(ratio_values) - my_region_value));
          var _margin_min_max = math_round(_dist_axis) / 8;
          _min = my_region_value - _dist_axis - _margin_min_max;
          _max = my_region_value + _dist_axis + _margin_min_max;
        }
        _this3.highlight_selection.forEach(function (elem) {
          app.colors[elem.id] = comp(elem[ratio_name], my_region_value, _this3.serie_inversed);
        });

        app.colors[app.current_config.my_region] = color_highlight;

        var size_func = _this3.proportionnal_symbols ? new PropSizer(d3.max(data, function (d) {
          return d[num_name];
        }), 33).scale : function () {
          return 7.5;
        };
        var xScale = d3.scaleLinear().domain([_min, _max]).range([0, width$3]);

        axis.transition().duration(125).call(d3.axisBottom(xScale));

        var bubbles1 = layer_other.selectAll('.bubble').data(data.filter(function (d) {
          return app.colors[d.id] === undefined;
        }), function (d) {
          return d.id;
        });

        bubbles1.transition().duration(125).attrs(function (d) {
          var x_value = xScale(d[ratio_name]);
          if (x_value > width$3) x_value = width$3 + 200;else if (x_value < 0) x_value = -200;
          return {
            rank: d.rank,
            cx: x_value,
            cy: 10,
            r: size_func(d[num_name])
          };
        }).styles(function (d) {
          return {
            fill: color_countries,
            'fill-opacity': 0.1,
            stroke: 'darkgray',
            'stroke-width': 0.75,
            'stroke-opacity': 0.75
          };
        });

        bubbles1.enter().insert('circle').styles(function (d) {
          return {
            fill: color_countries,
            'fill-opacity': 0.1,
            stroke: 'darkgray',
            'stroke-width': 0.75,
            'stroke-opacity': 0.75
          };
        }).transition().duration(125).attrs(function (d) {
          var x_value = xScale(d[ratio_name]);
          if (x_value > width$3) x_value = width$3 + 200;else if (x_value < 0) x_value = -200;
          return {
            rank: d.rank,
            id: d.id,
            class: 'bubble',
            cx: x_value,
            cy: 10,
            r: size_func(d[num_name])
          };
        });

        bubbles1.exit().transition().duration(125).remove();

        var bubbles2 = layer_highlighted.selectAll('.bubble').data(data.filter(function (d) {
          return app.colors[d.id] !== undefined;
        }), function (d) {
          return d.id;
        });

        bubbles2.transition().duration(125).attrs(function (d) {
          var x_value = xScale(d[ratio_name]);
          if (x_value > width$3) x_value = width$3 + 200;else if (x_value < 0) x_value = -200;
          return {
            rank: d.rank,
            cx: x_value,
            cy: 10,
            r: size_func(d[num_name])
          };
        }).styles(function (d) {
          return {
            fill: app.colors[d.id],
            'fill-opacity': d.id === app.current_config.my_region ? 1 : 0.7,
            stroke: 'darkgray',
            'stroke-width': 0.75,
            'stroke-opacity': 0.75
          };
        });

        bubbles2.enter().insert('circle').styles(function (d) {
          return {
            fill: app.colors[d.id],
            'fill-opacity': d.id === app.current_config.my_region ? 1 : 0.7,
            stroke: 'darkgray',
            'stroke-width': 0.75,
            'stroke-opacity': 0.75
          };
        }).transition().duration(125).attrs(function (d) {
          var x_value = xScale(d[ratio_name]);
          if (x_value > width$3) x_value = width$3 + 200;else if (x_value < 0) x_value = -200;
          return {
            rank: d.rank,
            id: d.id,
            class: 'bubble',
            cx: x_value,
            cy: 10,
            r: size_func(d[num_name])
          };
        });

        bubbles2.exit().transition().duration(125).remove();

        height_to_use += offset;
      };

      for (var i = 0; i < nb_variables; i++) {
        _loop(i);
      }
      setTimeout(function () {
        _this3.makeTooltips();
      }, 125);
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.update(calcCompletudeSubset(app, this.ratios, 'array'), calcPopCompletudeSubset(app, this.ratios));
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var _id = d.id;
        if (_id === app.current_config.my_region) {
          return color_highlight;
        } else if (_this4.current_ids.indexOf(_id) > -1) {
          if (app.colors[_id]) return color_default_dissim;
          return color_countries;
        }
        return color_disabled;
      });
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var _this5 = this;

      var to_display = false;
      var id = d.id;
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:
        var id_to_remove = this.highlight_selection.map(function (ft, i) {
          return ft.id === id ? i : null;
        }).filter(function (ft) {
          return ft;
        })[0];
        this.highlight_selection.splice(id_to_remove, 1);
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        app.colors[id] = color_default_dissim;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_default_dissim);
        // Add the clicked feature on the colored selection on the chart:
        // eslint-disable-next-line no-restricted-properties
        var obj = this.data.find(function (el) {
          return el.id === id;
        });
        // const global_dist = math_sqrt(this.ratios.map(v => `dist_${v}`).map(v => Math.pow(+d.properties[v], 2)).reduce((a, b) => a + b));
        // const obj = {
        //   id,
        //   dist: global_dist,
        // };
        // this.ratios.forEach((v) => { obj[v] = +d.properties[v]; });
        this.highlight_selection.push(obj);
        to_display = true;
      }
      this.highlight_selection.sort(function (a, b) {
        return a.dist - b.dist;
      });
      this.removeLines();
      this.update();
      if (to_display) setTimeout(function () {
        _this5.displayLine(id);
      }, 150);
    }
  }, {
    key: 'makeTooltips',
    value: function makeTooltips() {
      var _this6 = this;

      var self = this;
      this.draw_group.selectAll('g.grp_var').selectAll('circle').on('mouseover', function () {
        clearTimeout(t$2);
        _this6.tooltip.style('display', null);
      }).on('mouseout', function () {
        clearTimeout(t$2);
        t$2 = setTimeout(function () {
          _this6.tooltip.style('display', 'none');
        }, 250);
      }).on('mousemove mousedown', function (d) {
        var content = [];
        var _h = 65;
        var ratio_n = this.parentElement.parentElement.id.replace('l_', '');
        var unit_ratio = variables_info.find(function (ft) {
          return ft.id === ratio_n;
        }).unit;
        var rank = +this.getAttribute('rank');
        content.push(ratio_n + ' : ' + Math.round(d[ratio_n] * 10) / 10 + ' ' + unit_ratio);
        if (self.proportionnal_symbols) {
          _h += 20;
          var num_n = this.parentElement.parentElement.getAttribute('num');
          var o = variables_info.find(function (ft) {
            return ft.id === num_n;
          });
          var unit_num = o.unit;
          var coef = +o.formula;
          coef = isNaN(coef) || coef === 0 ? 1 : coef;
          content.push(num_n + ' (num\xE9rateur) : ' + Math.round(d[num_n] * coef * 10) / 10 + ' ' + unit_num);
        }
        if (!isNaN(rank)) {
          if (+rank === 0) {
            content.push('(Ma rÃ©gion)');
          } else if (+rank === 1) {
            content.push('(RÃ©gion la plus proche)');
          } else {
            content.push('(' + rank + '\xE8me r\xE9gion la plus proche)');
          }
        }
        clearTimeout(t$2);
        self.tooltip.select('.title').html(['<b>', d.name, ' (', d.id, ')', '</b>'].join(''));
        self.tooltip.select('.content').html(content.join('<br>'));
        self.tooltip.styles({
          display: null,
          left: d3.event.pageX - 5 + 'px',
          top: d3.event.pageY - _h + 'px' });
      }).on('click', function (d) {
        if (this.style.fill !== color_countries) {
          self.displayLine(d.id);
        }
        self.map_elem.target_layer.selectAll('path').each(function (ft) {
          if (ft.id === d.id) {
            var cloned = this.cloneNode();
            cloned.style.fill = 'red';
            cloned.style.stroke = 'orange';
            cloned.style.strokeWidth = '2.25px';
            cloned.classList.add('cloned');
            self.map_elem.layers.node().appendChild(cloned);
            setTimeout(function () {
              cloned.remove();
            }, 5000);
          }
        });
      });
    }
  }, {
    key: 'displayLine',
    value: function displayLine(id_region) {
      if (this.ratios.length === 1) return;
      var coords = [];
      svg_container$2.selectAll('.grp_var').selectAll('#' + id_region + '.bubble').each(function () {
        var ty = +this.parentElement.parentElement.getAttribute('transform').split('translate(0, ')[1].replace(')', '');
        coords.push([this.cx.baseVal.value, this.cy.baseVal.value + ty]);
      });

      var l = this.draw_group.append('path').datum(coords).attrs({
        class: 'regio_line',
        fill: 'none',
        stroke: 'steelblue',
        'stroke-linejoin': 'round',
        'stroke-linecap': 'round',
        'stroke-width': 1.5,
        d: d3.line().x(function (_d) {
          return _d[0];
        }).y(function (_d) {
          return _d[1];
        })
      });
      setTimeout(function () {
        l.remove();
      }, 5000);
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      var _this7 = this;

      this.removeLines();
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.map_elem.updateLegend();
        this.my_region = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        });
        this.data.forEach(function (ft) {
          _this7.ratios.forEach(function (v) {
            // eslint-disable-next-line no-param-reassign
            ft['dist_' + v] = math_abs(+ft[v] - +_this7.my_region[v]);
          });
        });
        this.updateTableStat();
        this.update();
        this.updateMapRegio();
        // this.applySelection(this.highlight_selection.length);
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this8 = this;

      this.removeLines();
      this.map_elem.updateLegend();
      this.ratios = app.current_config.ratio;
      this.nums = app.current_config.num;
      this.data = app.current_data.filter(function (ft) {
        return _this8.ratios.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      this.my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      this.data.forEach(function (ft) {
        _this8.ratios.forEach(function (v) {
          // eslint-disable-next-line no-param-reassign
          ft['dist_' + v] = math_abs(+ft[v] - +_this8.my_region[v]);
        });
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      var temp = this.highlight_selection.length;
      this.highlight_selection = [];
      this.updateTableStat();
      this.updateCompletude();
      this.applySelection(temp);
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this9 = this;

      this.removeLines();
      this.ratios = app.current_config.ratio.slice();
      this.nums = app.current_config.num.slice();
      this.data = app.current_data.filter(function (ft) {
        return _this9.ratios.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      this.my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      this.data.forEach(function (ft) {
        _this9.ratios.forEach(function (v) {
          // eslint-disable-next-line no-param-reassign
          ft['dist_' + v] = math_abs(+ft[v] - +_this9.my_region[v]);
        });
        // eslint-disable-next-line no-param-reassign
        ft.dist = math_sqrt(_this9.ratios.map(function (v) {
          return 'dist_' + v;
        }).map(function (v) {
          return Math.pow(ft[v], 2);
        }).reduce(function (a, b) {
          return a + b;
        }));
      });
      this.data.sort(function (a, b) {
        return a.dist - b.dist;
      });
      this.data.forEach(function (el, i) {
        el.rank = i;
      });
      this.highlight_selection = this.highlight_selection.map(function (d) {
        return _this9.data.find(function (el) {
          return el.id === d.id;
        });
      }).filter(function (d) {
        return !!d;
      });
      // And use it immediatly:
      this.updateTableStat();
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this10 = this;

      this.removeLines();
      this.ratios = app.current_config.ratio.slice();
      this.nums = app.current_config.num.slice();
      this.data = app.current_data.filter(function (ft) {
        return _this10.ratios.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      this.data.forEach(function (ft) {
        _this10.ratios.forEach(function (v) {
          // eslint-disable-next-line no-param-reassign
          ft['dist_' + v] = math_abs(+ft[v] - +_this10.my_region[v]);
        });
        // eslint-disable-next-line no-param-reassign
        ft.dist = math_sqrt(_this10.ratios.map(function (v) {
          return 'dist_' + v;
        }).map(function (v) {
          return Math.pow(ft[v], 2);
        }).reduce(function (a, b) {
          return a + b;
        }));
      });
      this.data.sort(function (a, b) {
        return a.dist - b.dist;
      });
      this.data.forEach(function (el, i) {
        el.rank = i;
      });
      this.highlight_selection = this.highlight_selection.map(function (d) {
        return _this10.data.find(function (el) {
          return el.id === d.id;
        });
      }).filter(function (d) {
        return !!d;
      });

      this.my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });

      this.draw_group.select('g#l_' + code_variable).remove();
      // And use it immediatly:
      this.updateTableStat();
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        // self.map_elem.removeRectBrush();
        var value = +this.value;
        if (value < 1) {
          this.value = 1;
          return;
        }
        self.applySelection(value);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);
      menu.select('#check_prop').on('change', function () {
        if (this.checked) {
          menu.select('.slider-checkbox > .label').attr('class', 'label');
          self.proportionnal_symbols = true;
        } else {
          menu.select('.slider-checkbox > .label').attr('class', 'label not_selected');
          self.proportionnal_symbols = false;
        }
        self.update();
      });
    }
  }, {
    key: 'removeLines',
    value: function removeLines() {
      this.draw_group.selectAll('.regio_line').remove();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.layers.selectAll('.cloned').remove();
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.table_stats.remove();
      this.table_stats = null;
      svg_bar$3.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.map_elem.displayLegend(2);
      this.applySelection(5);
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this11 = this;

      var ratios = this.ratios;
      var all_values = ratios.map(function (v) {
        return _this11.data.map(function (d) {
          return +d[v];
        });
      });
      var my_region = this.my_region;
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moy: getMean(values),
          Med: d3.median(values),
          id: _this11.ratios[i],
          Variable: _this11.ratios[i],
          'Ma rÃ©gion': my_region[_this11.ratios[i]]
        };
      });
      return features;
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }, {
    key: 'getHelpMessage',
    value: function getHelpMessage() {
      return '\n<h3>Ressemblances</h3>\n\n<b>Aide g\xE9n\xE9rale</b>\n\nLes graphiques de ressemblance permettent de visualiser pour 1 \xE0 8 indicateurs les unit\xE9s territoriales les plus proches statistiquement \xE0 l\u2019unit\xE9 territoriale de r\xE9f\xE9rence.\n\nCette proximit\xE9 est mesur\xE9e par la distance euclidienne. Cette fonction permet d\u2019\xE9valuer la distance normalis\xE9e globale (exprim\xE9e en rang) s\xE9parant l\u2019unit\xE9 territoriale de r\xE9f\xE9rence avec l\u2019ensemble des autres unit\xE9s territoriales pour un ensemble d\u2019indicateurs. La formule de la fonction est la suivante\xA0:\n\n<b>\u03A3(xi - yi)\xB2</b>\n\nSi la valeur de l\u2019indice \xE9quivaut \xE0 0, la similarit\xE9 est totale entre deux unit\xE9s territoriales. Plus la valeur de l\u2019indice est \xE9lev\xE9e, plus la dissimilarit\xE9 est importante. A noter que cette m\xE9trique euclidienne est assez sensible aux ordres de grandeur h\xE9t\xE9rog\xE8nes entre plusieurs indicateurs (un fort \xE9cart pour un indicateur peut affecter significativement la valeur de l\u2019indice).\n\nPour \xE9viter de potentielles erreurs d\u2019interpr\xE9tation li\xE9es \xE0 cet indice de similarit\xE9 synth\xE9tique, Regioviz propose syst\xE9matiquement une repr\xE9sentation graphique permettant d\u2019\xE9valuer visuellement le degr\xE9 de similarit\xE9 indicateur par indicateur.\n\nPar d\xE9faut, l\u2019application renvoie les 5 unit\xE9s territoriales pour l\u2019espace d\u2019\xE9tude et les indicateurs s\xE9lectionn\xE9es qui sont d\xE9finis par la distance euclidienne la plus faible. Libre \xE0 l\u2019utilisateur de choisir plus ou moins d\u2019unit\xE9s territoriales de comparaison en fonction de ses objectifs d\u2019analyse.\n\nSur le graphique apparaissent les n unit\xE9s territoriales les plus proches pour chaque indicateur dans leurs unit\xE9s de mesure respectives. L\u2019unit\xE9 territoriale de r\xE9f\xE9rence appara\xEEt syst\xE9matiquement au centre de chacun des graphiques. Un clic gauche sur une des unit\xE9s territoriales sur le graphique ou sur la carte g\xE9n\xE8re une ligne entre chaque indicateur permettant d\u2019\xE9valuer le degr\xE9 de ressemblance avec l\u2019unit\xE9 territoriale de r\xE9f\xE9rence et visualiser ainsi si celle-ci se positionne au-dessus ou en dessous, et pour quel indicateur.\n\nPar d\xE9faut, la taille des cercles sur le graphique est constante. Mais l\u2019utilisateur peut activer l\u2019option \xAB\xA0cercles proportionnels au num\xE9rateur\xA0\xBB pour visualiser graphiquement la masse des unit\xE9s territoriales. Par exemple, si l\u2019indicateur PIB par habitant est s\xE9lectionn\xE9, la taille des cercles sera proportionnelle \xE0 la masse de PIB des unit\xE9s territoriales. Si c\u2019est la part des 0-24 ans dans la population totale, la taille des figur\xE9s sera proportionnelle \xE0 la masse de la population \xE2g\xE9e de 0 \xE0 24 ans. Cette option a \xE9t\xE9 cr\xE9\xE9e afin de pouvoir restituer les ordres de grandeur potentiellement h\xE9t\xE9rog\xE8nes des unit\xE9s territoriales propos\xE9es dans l\u2019application.';
    }
  }]);
  return Similarity1plus;
}();

// import debug from 'debug';
var variables_info = [];

var study_zones = [{ id: 'no_filter', name: 'UE28', display_level: '' }, { id: 'filter_dist', name: 'RÃ©gion dans un rayon de ', display_level: '' }];
var territorial_mesh = [];

var app = {
  // A mapping id -> color, containing the color to use for each
  // feature not using the default color or the disabled color
  colors: {},
  // The filtered dataset (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) selected on the left menu:
  current_data: [],
  // The full dataset provided (containing all the features at any level in one table)
  // Row without data are expected to be empty or to contain the "NA" string.
  full_dataset: [],
  // The ids of the current feature in use (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) used in the current chart; filtered
  // to not contain feature with empty ratio values within the ratios in use).
  current_ids: []
};

function setDefaultConfig() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'REVMEN';
  // }, level = 'NUTS1') {
  var var_info = variables_info.find(function (ft) {
    return ft.id === variable;
  });
  app.current_config = {
    // The name of the field of the dataset containing the ID of each feature:
    id_field: 'id',
    // The name of the field of the dataset containing the name of each feature:
    name_field: 'name',
    // The name of the field of the dataset containing the population of each feature:
    pop_field: 'POP_AGE_T',
    // The name of the field of the geojson layer containing the ID of each feature
    // (these values should match with the values of the "id_field" in the
    // tabular dataset)
    id_field_geom: 'id',
    num: [var_info.id1],
    denum: [var_info.id2],
    ratio: [variable],
    ratio_pretty_name: [var_info.name],
    ratio_unit: [var_info.unit],
    // The level currently in use:
    current_level: 'N1',
    // The ID of the region currently in use:
    my_region: code,
    // The name of the region currently in use:
    my_region_pretty_name: app.feature_names[code],
    // How many ratio on the current chart:
    nb_var: 1
  };
  app.colors[app.current_config.my_region] = color_highlight;
}

function setDefaultConfigMenu() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'REVMEN';
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'N1';

  document.querySelector('.target_region.square[value="' + code + '"]').classList.add('checked');
  document.querySelector('.target_variable.small_square[value="' + variable + '"]').classList.add('checked');
  document.querySelector('.filter_v.square[filter-value="no_filter"]').classList.add('checked');
  document.querySelector('.territ_level.square[value="' + level + '"]').classList.add('checked');
  updateAvailableRatios(code);
}

function updateMenuStudyZones() {
  Array.prototype.forEach.call(document.querySelectorAll('#menu_studyzone > p'), function (elem) {
    var val = elem.querySelector('.filter_v.square').getAttribute('display_level');
    if (val === '' || val === app.current_config.current_level) {
      elem.style.display = null;
    } else {
      elem.style.display = 'none';
    }
  });
}

function resetColors() {
  app.colors = {};
  // for (let i = 0, len_i = current_ids.length; i < len_i; i++) {
  //   app.colors[current_ids[i]] = color_countries;
  // }
  app.colors[app.current_config.my_region] = color_highlight;
}

/**
* Function to update the availables ratios in the left menu (after changing region)
* If a selected variable is not available anymore it will be deselected.
* If there selected variable (all the previously selected variables are unavailable for this region)
* the first variable on the menu will be selected.
* If the new number of selected feature is inferior to the number of variables on the current
* chart, a new chart (suitable for only 1 variable) will be selected.
*
*
* @param {String} my_region - The ID of the newly selected region.
* @return {Number} - The new number of selected ratios.
*
*/
function updateAvailableRatios(my_region) {
  var data_my_feature = app.full_dataset.filter(function (ft) {
    return ft[app.current_config.id_field] === my_region;
  })[0];
  var menu = document.querySelector('#menu');
  var lines = menu.querySelectorAll('.target_variable');
  for (var i = 0, nb_lines = lines.length; i < nb_lines; i++) {
    var code_variable = lines[i].getAttribute('value');
    if (data_my_feature[code_variable] !== undefined && data_my_feature[code_variable] !== 'NA') {
      lines[i].classList.remove('disabled');
      lines[i].nextSibling.classList.remove('disabled');
    } else {
      lines[i].classList.remove('checked');
      lines[i].classList.add('disabled');
      lines[i].nextSibling.classList.add('disabled');
    }
  }
  var new_var = menu.querySelectorAll('.target_variable.checked');
  if (new_var.length !== app.current_config.ratio.length) {
    var new_var_names = void 0;
    if (new_var.length === 0) {
      var name = selectFirstAvailableVar();
      new_var_names = [name];
    } else {
      new_var_names = Array.prototype.slice.call(new_var).map(function (elem) {
        return elem.getAttribute('value');
      });
    }
    resetVariables(app, new_var_names);
  }
  return new_var.length;
}

/**
* Update the menu located on the top of the window the display the available
* charts, according to the current number of selected variables.
*
* @param {Number} nb_var - How many variables are currently selected.
* @return {void}
*
*/
function updateAvailableCharts(nb_var) {
  if (nb_var === 1) {
    // Allow all kind of vizu with 1 variable:
    d3.selectAll('.chart_t1').each(function () {
      this.classList.remove('disabled');
    });
    d3.selectAll('.chart_t2, .chart_t3').each(function () {
      this.classList.add('disabled');
    });
  } else if (nb_var === 2) {
    // Allow all kind of vizu with 2 variables:
    d3.selectAll('.chart_t1, .chart_t2').each(function () {
      this.classList.remove('disabled');
    });
    d3.selectAll('.chart_t3').each(function () {
      this.classList.add('disabled');
    });
  } else if (nb_var > 2) {
    // Allow all kind of vizu with 3 variables:
    d3.selectAll('.chart_t1, .chart_t2, .chart_t3').each(function () {
      this.classList.remove('disabled');
    });
  }
}

function updateMyCategorySection() {
  if (app.current_config.my_category) {
    document.querySelector('.filter_info').innerHTML = app.current_config.my_category;
  } else if (app.current_config.filter_key instanceof Array) {
    document.querySelector('.filter_info').innerHTML = 'R\xE9gions dans un voisinage de ' + +d3.select('#dist_filter').property('value') + ' km';
  } else {
    document.querySelector('.filter_info').innerHTML = 'Ensemble des r\xE9gions';
  }
}

/**
* Create handlers for user event on the left menu and on the map for charts only
* allowing to use 1 variable.
*
* @param {Object} chart - The chart object.
* @param {Object} map_elem - The map object.
* @return {void}
*
*/
function bindUI_chart(chart, map_elem) {
  // User change the study zone:
  d3.selectAll('span.filter_v').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      if (filter_type === 'filter_dist') {
        var input_elem = document.getElementById('dist_filter');
        input_elem.removeAttribute('disabled');
        var dist = +input_elem.value;
        var ids = map_elem.getUnitsWithin(dist);
        applyFilter(app, ids);
      } else {
        document.getElementById('dist_filter').setAttribute('disabled', 'disabled');
        applyFilter(app, filter_type);
      }
      updateMyCategorySection();
      chart.changeStudyZone();
      chart.updateCompletude();
    }
  });

  d3.select('#dist_filter').on('change, keyup', function () {
    var ids = map_elem.getUnitsWithin(+this.value);
    applyFilter(app, ids);
    chart.changeStudyZone();
    chart.updateCompletude();
  });

  // User change the targeted region:
  d3.selectAll('span.target_region').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      var id_region = this.getAttribute('value');
      var old_nb_var = app.current_config.ratio.length;
      changeRegion(app, id_region, map_elem);
      // Update the availables ratio on the left menu
      // (this may change the current selected ratio(s) as some variables are
      // not available for some features) and fetch the number of selected
      // variables after that:
      var new_nb_var = updateAvailableRatios(id_region);
      updateAvailableCharts(new_nb_var);
      if (new_nb_var >= app.current_config.nb_var) {
        if (old_nb_var === new_nb_var) {
          chart.updateChangeRegion();
        } else {
          d3.select('span.type_chart.selected').dispatch('click');
          alertify.warning('Une variable prÃ©cÃ©demment sÃ©lectionnÃ©e n\'est pas disponible pour cette rÃ©gion.');
        }
      } else {
        // If there fewer selected variables than requested by the current chart,
        // redraw the first (default) kind of chart:
        d3.select('span.chart_t1[value="BarChart1"]').dispatch('click');
        alertify.warning('Des variables sÃ©lectionnÃ©es sont indisponibles pour cette rÃ©gion. Un changement de reprÃ©sentation est nÃ©cessaire.');
      }
    }
  });

  // User click on the name of a group of variables
  // to expand or collapse its content:
  d3.selectAll('.name_group_var').on('click', function () {
    var group_var = this.nextSibling;
    var title_arrow = this.querySelector('span.arrow');
    if (group_var.style.display === 'none') {
      title_arrow.classList.remove('arrow_down');
      title_arrow.classList.add('arrow_right');
      group_var.style.display = null;
    } else {
      title_arrow.classList.remove('arrow_right');
      title_arrow.classList.add('arrow_down');
      group_var.style.display = 'none';
    }
  });

  // User click to add/remove a variable from the comparison:
  d3.selectAll('span.target_variable').on('click', function () {
    if (this.classList.contains('disabled')) return;
    var nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
      return !!elem.classList.contains('checked');
    }).length;
    // Select a new variable and trigger the appropriate changes on the current chart:
    if (!this.classList.contains('checked')) {
      // We don't want the user to be able to select more than
      // MAX_VARIABLES (default = 7) variables simultaneously:
      if (nb_var >= MAX_VARIABLES) {
        alertify.warning('Le nombre maximal de variables sÃ©lectionnÃ©es est atteint.');
        return;
      }
      this.classList.add('checked');
      var code_variable = this.getAttribute('value');
      var name_variable = variables_info.find(function (d) {
        return d.id === code_variable;
      }).name;
      addVariable(app, code_variable);
      // makeTable(app.current_data, app.current_config);
      chart.addVariable(code_variable, name_variable);
      nb_var += 1;
    } else {
      // Remove a variable from the selection:
      nb_var -= 1;
      // We don't want to let the user remove the variable if
      // it's the only one selected or if the currently displayed
      // chart need a minimum number of variables:
      if (nb_var < app.current_config.nb_var) {
        return;
      }
      var _code_variable = this.getAttribute('value');
      this.classList.remove('checked');
      removeVariable(app, _code_variable);
      chart.removeVariable(_code_variable);
      // makeTable(app.current_data, app.current_config);
    }
    // Update the top menu to display available charts according to the current
    // number of available variables:
    updateAvailableCharts(nb_var);
  });

  d3.selectAll('span.territ_level').on('click', function () {
    if (!this.classList.contains('checked')) {
      // Reset the study zone :
      d3.select('span.filter_v[filter-value="no_filter"]').dispatch('click');
      d3.selectAll('span.territ_level').attr('class', 'territ_level square');
      this.classList.add('checked');
      var level_value = this.getAttribute('value');
      app.current_config.current_level = level_value;
      updateMenuStudyZones();
      filterLevelVar(app);
      resetColors();
      map_elem.updateLevelRegion(level_value);
      map_elem.unbindBrushClick();
      map_elem.bindBrushClick(chart);
      chart.changeStudyZone();
    }
  });

  // Dispatch a click event on the associated checkbox when the text is clicked:
  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section > #header_map');

  header_map_section.select('#img_rect_selec').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').style('display', null);
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_zoom').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(map_elem.zoom_map);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_select').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    }
  });

  header_map_section.select('#zoom_in').on('click', zoomClick);

  header_map_section.select('#zoom_out').on('click', zoomClick);

  if (!map_elem.brush_map) {
    if (chart.handleClickMap) {
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    } else {
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  }

  bindTopButtons(chart, map_elem);
}

/**
* Function to handle click on the top menu, in order to choose
* the kind of availables representation
*
* @param {Object} chart -
* @param {Object} map_elem -
* @return {void}
*/
function bindTopButtons(chart, map_elem) {
  d3.selectAll('.type_chart').on('click', function () {
    if (this.classList.contains('disabled')) return;
    // if (this.classList.contains('selected')) return;
    document.querySelector('.type_chart.selected').classList.remove('selected');
    this.classList.add('selected');
    chart.remove();
    chart = null; // eslint-disable-line no-param-reassign
    unbindUI();
    map_elem.resetZoom();
    app.colors = {};
    var value = this.getAttribute('value');
    if (value === 'BarChart1') {
      chart = new BarChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ScatterPlot2') {
      chart = new ScatterPlot2(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'RadarChart3') {
      chart = new RadarChart3(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'Similarity1plus') {
      chart = new Similarity1plus(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    }
    app.chart = chart;
    Tooltipsify('[title-tooltip]');
  });
}

function bindHelpMenu() {
  var help_buttons_var = document.querySelector('#menu_variables').querySelectorAll('span.i_info');
  Array.prototype.slice.call(help_buttons_var).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var code_variable = this.previousSibling.previousSibling.getAttribute('value');
      var o = variables_info.find(function (d) {
        return d.id === code_variable;
      });
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">Description de l\'indicateur</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + o.methodo.split('\n').join('<br>') + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">' + o.source + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">Date de t\xE9l\xE9chargement de la donn\xE9e : ' + o.last_update + '</p>');
      modal.open();
    };
  });

  var helps_buttons_study_zone = document.querySelector('#menu_studyzone').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_study_zone).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var filter_name = this.previousSibling.previousSibling.getAttribute('filter-value');
      var o = study_zones.find(function (d) {
        return d.id === filter_name;
      });

      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">M\xE9thodologie</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + filter_name + '</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + o.methodology.split('\n').join('<br>') + '</p>\n        ');
      modal.open();
    };
  });

  var helps_buttons_territ_unit = document.querySelector('#menu_territ_level').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_territ_unit).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var territ_level_name = this.previousSibling.previousSibling.getAttribute('value');
      var o = territorial_mesh.find(function (d) {
        return d.id === territ_level_name;
      });

      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('\n        <p style="font-family: \'Signika\',sans-serif; color: #4f81bd;font-size: 1.3rem;">Titre</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + territ_level_name + '</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + o.methodology.split('\n').join('<br>') + '</p>\n        ');
      modal.open();
    };
  });
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA.csv').defer(d3.json, 'data/CGET_nuts_all3035.geojson').defer(d3.json, 'data/borders3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/countries-remote3035.geojson').defer(d3.json, 'data/coasts3035.geojson').defer(d3.json, 'data/coasts-remote3035.geojson').defer(d3.json, 'data/cyprus_non_espon_space3035.geojson').defer(d3.json, 'data/countries-remote-boundaries3035.geojson').defer(d3.json, 'data/frame3035.geojson').defer(d3.json, 'data/boxes3035.geojson').defer(d3.json, 'data/line3035.geojson').defer(d3.csv, 'data/indicateurs_meta.csv').awaitAll(function (error, results) {
    if (error) throw error;
    document.body.classList.remove('loading');
    document.querySelector('.spinner').remove();
    app.ratioToWide = getRatioToWide();

    var _results = slicedToArray(results, 13),
        full_dataset = _results[0],
        nuts = _results[1],
        borders = _results[2],
        countries = _results[3],
        countries_remote = _results[4],
        coasts = _results[5],
        coasts_remote = _results[6],
        cyprus_non_espon_space = _results[7],
        countries_remote_boundaries = _results[8],
        frame = _results[9],
        boxes = _results[10],
        line = _results[11],
        metadata_indicateurs = _results[12];

    alertify.set('notifier', 'position', 'bottom-left');
    prepareVariablesInfo(metadata_indicateurs);
    // TODO : Reorder it in the dataset :
    var features_menu = full_dataset.filter(function (ft) {
      return ft.REGIOVIZ === '1';
    });
    features_menu = features_menu.slice(0, 1).concat(features_menu.slice(6)).concat(features_menu.slice(1, 6));
    var start_region = getRandom(features_menu.map(function (d) {
      return d.id;
    }), 12);
    var start_variable = getRandom(['REVMEN', 'CHOM1574', 'CHOM1524']);
    prepare_dataset(full_dataset, app);
    setDefaultConfig(start_region, start_variable, 'N1');
    prepareGeomLayerId(nuts, app.current_config.id_field_geom);
    createMenu(features_menu, variables_info.filter(function (d) {
      return d.group;
    }), study_zones, territorial_mesh);
    updateMenuStudyZones();
    bindHelpMenu();
    makeTopMenu();
    makeHeaderChart();
    makeHeaderMapSection();
    setDefaultConfigMenu(start_region, start_variable, 'N1');
    filterLevelVar(app);
    var other_layers = new Map([['borders', borders], ['boxes', boxes], ['countries', countries], ['countries_remote', countries_remote], ['coasts', coasts], ['coasts_remote', coasts_remote], ['cyprus_non_espon_space', cyprus_non_espon_space], ['countries_remote_boundaries', countries_remote_boundaries], ['frame', frame], ['line', line], ['boxes2', boxes]]);
    var map_elem = new MapSelect(nuts, other_layers);
    var chart = new BarChart1(app.current_data);
    makeSourceSection();
    bindUI_chart(chart, map_elem);
    map_elem.bindBrushClick(chart);
    chart.bindMap(map_elem);
    app.chart = chart;
    Tooltipsify('[title-tooltip]');
  });
}

loadData();

var getRatioToWide = function getRatioToWide() {
  if (window.matchMedia('(min-width: 1561px)').matches) {
    return 1550 / 1350;
  } else if (window.matchMedia('(min-width: 1361px) and (max-width: 1560px)').matches) {
    return 1350 / 1350;
  } else if (window.matchMedia('(min-width: 1161px) and (max-width: 1360px)').matches) {
    return 1150 / 1350;
  } else if (window.matchMedia('(min-width: 960px) and (max-width: 1160px)').matches) {
    return 960 / 1350;
  } else if (window.matchMedia('(max-width: 959px)').matches) {
    return 540 / 1350;
  }
  return 1350 / 1350;
};

window.onresize = function () {
  var previous_ratio = app.ratioToWide;
  var new_ratio = getRatioToWide();
  if (previous_ratio === new_ratio) return;
  app.ratioToWide = new_ratio;
  var chart_scale_value = new_ratio / app.chartDrawRatio;
  d3.select('#svg_bar').attr('height', 500 * app.ratioToWide + 'px');
  d3.select('#svg_bar > g.container').attr('transform', 'scale(' + chart_scale_value + ')');

  var bbox_svg = svg_map.node().getBoundingClientRect();
  var width_map = +bbox_svg.width;
  var height_map = width_map * (1 / RATIO_WH_MAP);
  var map_scale_value = new_ratio / app.mapDrawRatio;
  svg_map.attr('height', height_map + 'px');
  svg_map.select('#layers').attr('transform', 'scale(' + map_scale_value + ')');
  svg_map.select('.brush_map').attr('transform', 'scale(' + map_scale_value + ')');
  d3.select('#svg_legend').attr('transform', 'scale(' + map_scale_value + ')');
};

exports.variables_info = variables_info;
exports.study_zones = study_zones;
exports.territorial_mesh = territorial_mesh;
exports.app = app;
exports.resetColors = resetColors;
exports.bindTopButtons = bindTopButtons;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
