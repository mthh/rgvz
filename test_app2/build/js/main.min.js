(function (exports) {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var tingle_min = createCommonjsModule(function (module, exports) {
!function(t,o){"function"==typeof undefined&&undefined.amd?undefined(o):module.exports=o();}(commonjsGlobal,function(){function t(t){var o={onClose:null,onOpen:null,beforeOpen:null,beforeClose:null,stickyFooter:!1,footer:!1,cssClass:[],closeLabel:"Close",closeMethods:["overlay","button","escape"]};this.opts=r({},o,t),this.init();}function o(){this.modalBoxFooter&&(this.modalBoxFooter.style.width=this.modalBox.clientWidth+"px",this.modalBoxFooter.style.left=this.modalBox.offsetLeft+"px");}function e(){this.modal=document.createElement("div"),this.modal.classList.add("tingle-modal"),0!==this.opts.closeMethods.length&&this.opts.closeMethods.indexOf("overlay")!==-1||this.modal.classList.add("tingle-modal--noOverlayClose"),this.modal.style.display="none",this.opts.cssClass.forEach(function(t){"string"==typeof t&&this.modal.classList.add(t);},this),this.opts.closeMethods.indexOf("button")!==-1&&(this.modalCloseBtn=document.createElement("button"),this.modalCloseBtn.classList.add("tingle-modal__close"),this.modalCloseBtnIcon=document.createElement("span"),this.modalCloseBtnIcon.classList.add("tingle-modal__closeIcon"),this.modalCloseBtnIcon.innerHTML="Ã—",this.modalCloseBtnLabel=document.createElement("span"),this.modalCloseBtnLabel.classList.add("tingle-modal__closeLabel"),this.modalCloseBtnLabel.innerHTML=this.opts.closeLabel,this.modalCloseBtn.appendChild(this.modalCloseBtnIcon),this.modalCloseBtn.appendChild(this.modalCloseBtnLabel)),this.modalBox=document.createElement("div"),this.modalBox.classList.add("tingle-modal-box"),this.modalBoxContent=document.createElement("div"),this.modalBoxContent.classList.add("tingle-modal-box__content"),this.modalBox.appendChild(this.modalBoxContent),this.opts.closeMethods.indexOf("button")!==-1&&this.modal.appendChild(this.modalCloseBtn),this.modal.appendChild(this.modalBox);}function s(){this.modalBoxFooter=document.createElement("div"),this.modalBoxFooter.classList.add("tingle-modal-box__footer"),this.modalBox.appendChild(this.modalBoxFooter);}function i(){this._events={clickCloseBtn:this.close.bind(this),clickOverlay:l.bind(this),resize:this.checkOverflow.bind(this),keyboardNav:n.bind(this)},this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.addEventListener("click",this._events.clickCloseBtn),this.modal.addEventListener("mousedown",this._events.clickOverlay),window.addEventListener("resize",this._events.resize),document.addEventListener("keydown",this._events.keyboardNav);}function n(t){this.opts.closeMethods.indexOf("escape")!==-1&&27===t.which&&this.isOpen()&&this.close();}function l(t){this.opts.closeMethods.indexOf("overlay")!==-1&&!d(t.target,"tingle-modal")&&t.clientX<this.modal.clientWidth&&this.close();}function d(t,o){for(;(t=t.parentElement)&&!t.classList.contains(o););return t}function a(){this.opts.closeMethods.indexOf("button")!==-1&&this.modalCloseBtn.removeEventListener("click",this._events.clickCloseBtn),this.modal.removeEventListener("mousedown",this._events.clickOverlay),window.removeEventListener("resize",this._events.resize),document.removeEventListener("keydown",this._events.keyboardNav);}function r(){for(var t=1;t<arguments.length;t++)for(var o in arguments[t])arguments[t].hasOwnProperty(o)&&(arguments[0][o]=arguments[t][o]);return arguments[0]}function h(){var t,o=document.createElement("tingle-test-transition"),e={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in e)if(void 0!==o.style[t])return e[t]}var c=h();return t.prototype.init=function(){this.modal||(e.call(this),i.call(this),document.body.insertBefore(this.modal,document.body.firstChild),this.opts.footer&&this.addFooter());},t.prototype.destroy=function(){null!==this.modal&&(a.call(this),this.modal.parentNode.removeChild(this.modal),this.modal=null);},t.prototype.open=function(){var t=this;"function"==typeof t.opts.beforeOpen&&t.opts.beforeOpen(),this.modal.style.removeProperty?this.modal.style.removeProperty("display"):this.modal.style.removeAttribute("display"),document.body.classList.add("tingle-enabled"),this.setStickyFooter(this.opts.stickyFooter),this.modal.classList.add("tingle-modal--visible"),c?this.modal.addEventListener(c,function o(){"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),t.modal.removeEventListener(c,o,!1);},!1):"function"==typeof t.opts.onOpen&&t.opts.onOpen.call(t),this.checkOverflow();},t.prototype.isOpen=function(){return!!this.modal.classList.contains("tingle-modal--visible")},t.prototype.close=function(){if("function"==typeof this.opts.beforeClose){var t=this.opts.beforeClose.call(this);if(!t)return}document.body.classList.remove("tingle-enabled"),this.modal.classList.remove("tingle-modal--visible");var o=this;c?this.modal.addEventListener(c,function t(){o.modal.removeEventListener(c,t,!1),o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this);},!1):(o.modal.style.display="none","function"==typeof o.opts.onClose&&o.opts.onClose.call(this));},t.prototype.setContent=function(t){"string"==typeof t?this.modalBoxContent.innerHTML=t:(this.modalBoxContent.innerHTML="",this.modalBoxContent.appendChild(t));},t.prototype.getContent=function(){return this.modalBoxContent},t.prototype.addFooter=function(){s.call(this);},t.prototype.setFooterContent=function(t){this.modalBoxFooter.innerHTML=t;},t.prototype.getFooterContent=function(){return this.modalBoxFooter},t.prototype.setStickyFooter=function(t){this.isOverflow()||(t=!1),t?this.modalBox.contains(this.modalBoxFooter)&&(this.modalBox.removeChild(this.modalBoxFooter),this.modal.appendChild(this.modalBoxFooter),this.modalBoxFooter.classList.add("tingle-modal-box__footer--sticky"),o.call(this),this.modalBoxContent.style["padding-bottom"]=this.modalBoxFooter.clientHeight+20+"px"):this.modalBoxFooter&&(this.modalBox.contains(this.modalBoxFooter)||(this.modal.removeChild(this.modalBoxFooter),this.modalBox.appendChild(this.modalBoxFooter),this.modalBoxFooter.style.width="auto",this.modalBoxFooter.style.left="",this.modalBoxContent.style["padding-bottom"]="",this.modalBoxFooter.classList.remove("tingle-modal-box__footer--sticky")));},t.prototype.addFooterBtn=function(t,o,e){var s=document.createElement("button");return s.innerHTML=t,s.addEventListener("click",e),"string"==typeof o&&o.length&&o.split(" ").forEach(function(t){s.classList.add(t);}),this.modalBoxFooter.appendChild(s),s},t.prototype.resize=function(){console.warn("Resize is deprecated and will be removed in version 1.0");},t.prototype.isOverflow=function(){var t=window.innerHeight,o=this.modalBox.clientHeight;return o>=t},t.prototype.checkOverflow=function(){this.modal.classList.contains("tingle-modal--visible")&&(this.isOverflow()?this.modal.classList.add("tingle-modal--overflow"):this.modal.classList.remove("tingle-modal--overflow"),!this.isOverflow()&&this.opts.stickyFooter?this.setStickyFooter(!1):this.isOverflow()&&this.opts.stickyFooter&&(o.call(this),this.setStickyFooter(!0)));},{modal:t}});
});

var color_countries = 'rgb(147,144,252)';
var color_disabled = 'rgb(214, 214, 214)';
var color_sup = 'green';
var color_inf = 'red';
var color_highlight = 'yellow';
var color_default_dissim = 'darkred';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};











var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var math_pow = Math.pow;
var math_abs = Math.abs;
var math_round = Math.round;
var math_max = Math.max;
var math_sin = Math.sin;
var math_cos = Math.cos;
var math_sqrt = Math.sqrt;
var HALF_PI = Math.PI / 2;

function prepareTooltip(parent_svg_elem) {
  var tooltip = parent_svg_elem.append('g').attr('class', 'tooltip').style('display', 'none');

  tooltip.append('rect').attrs({ x: 15, width: 0, height: 0, fill: 'beige' }).style('opacity', 0.75);

  tooltip.append('text').attrs({ class: 'id_feature', x: 25, dy: '1.2em', 'font-size': '14px' }).style('font-weight', 'bold');

  tooltip.append('text').attrs({
    class: 'value_feature1',
    x: 25,
    dy: '2.4em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature2',
    x: 25,
    dy: '3.5em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature3',
    x: 25,
    dy: '4.6em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature4',
    x: 25,
    dy: '5.7em',
    'font-size': '14px'
  });

  tooltip.append('text').attrs({
    class: 'value_feature5',
    x: 25,
    dy: '6.8em',
    'font-size': '14px'
  });

  return tooltip;
}

function unbindUI() {
  // Removes the current behavior corresponding to clicking on the left menu:
  d3.selectAll('span.filter_v').on('click', null);
  d3.selectAll('span.target_region').on('click', null);
  d3.selectAll('span.label_chk').on('click', null);

  // Remove the table:
  d3.select('.dataTable-wrapper').remove();

  // Unbind buttons on the top of the map:
  d3.select('#header_map').selectAll('img').on('click', null);

  // Remove the selection menu (or buttons) under the chart:
  d3.select('#bar_section > #menu_selection').remove();

  // Removes the current behavior corresponding to clicking on the top menu:
  d3.selectAll('.type_chart.title_menu').on('click', null);

  // Removes the current behavior corresponding to pressing the Control key:
  document.onkeyup = null;
  document.onkeydown = null;
}

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} test_value - The value to be compared to the value of "my region".
* @param {Number} ref_value - The value of my region.
* @param {Boolean} serie_inversed - Whether the serie is inversed or not in the current chart.
* @return {String} - A string containing the color to be used for this value.
*
*/
var comp = function comp(test_value, ref_value, serie_inversed) {
  if (test_value < ref_value) {
    return serie_inversed ? color_sup : color_inf;
  }
  return serie_inversed ? color_inf : color_sup;
};

/**
* Function to compare the value of a feature to the reference value (i.e. the value of "my region")
* and return the appropriate color (serie may be inversed)
*
* @param {Number} val1 - The value to be compared to the value of "my region" for the 1st variable.
* @param {Number} val2 - The value to be compared to the value of "my region" for the 2nd variable.
* @param {Number} ref_val1 - The value of my region for he first variable.
* @param {Number} ref_val2 - The value of my region for the second variable.
* @param {Boolean} xInversed - Whether the serie is inversed on the x axis in the current chart.
* @param {Boolean} yInversed - Whether the serie is inversed on the y axis in the current chart.
* @return {String} - A string containing the color to be used for theses values.
*
*/
var comp2 = function comp2(val1, val2, ref_val1, ref_val2, xInversed, yInversed) {
  if (val1 < ref_val1 && !xInversed || val1 > ref_val1 && xInversed) {
    // val1 is inferior:
    if (val2 < ref_val2) {
      return yInversed ? 'rgb(160, 30, 160)' : color_inf;
    }
    return yInversed ? color_inf : 'rgb(160, 30, 160)';
  }
  // val1 is superior :
  if (val2 > ref_val2) {
    return !yInversed ? color_sup : 'orange';
  }
  return !yInversed ? 'orange' : color_sup;
};

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

var PropSizer = function PropSizer(fixed_value, fixed_size) {
  var _this = this;

  this.fixed_value = fixed_value;
  var sqrt = Math.sqrt;
  var abs = Math.abs;
  var PI = Math.PI;
  this.smax = fixed_size * fixed_size * PI;
  this.scale = function (val) {
    return sqrt(abs(val) * _this.smax / _this.fixed_value) / PI;
  };
  // this.get_value = size => ((size * PI) ** 2) / this.smax * this.fixed_value;
  // Use Math pow to support browser without ** operator:
  // eslint-disable-next-line no-restricted-properties
  this.get_value = function (size) {
    return Math.pow(size * PI, 2) / _this.smax * _this.fixed_value;
  };
};

var removeDuplicates = function removeDuplicates(arr) {
  var tmp = [];
  for (var i = 0, len_arr = arr.length; i < len_arr; i++) {
    if (tmp.indexOf(arr[i]) === -1) {
      tmp.push(arr[i]);
    }
  }
  return tmp;
};

var getSvgPathType = function getSvgPathType(path) {
  if (path.indexOf('M ') > -1 && path.indexOf(' L ') > -1) {
    return 2;
  }
  return 1;
};

var svgPathToCoords = function svgPathToCoords(path, type_path) {
  if (type_path === 1) {
    return path.slice(1).split('L').map(function (pt) {
      return pt.split(',').map(function (a) {
        return +a;
      });
    });
  }
  return path.slice(2).split(' L ').map(function (pt) {
    return pt.split(' ').map(function (a) {
      return +a;
    });
  });
};

function computePercentileRank(obj, field_name, result_field_name) {
  var values = obj.map(function (d) {
    return d[field_name];
  });
  var len_values = values.length;
  var getPR = function getPR(v) {
    var count = 0;
    for (var i = 0; i < len_values; i++) {
      if (values[i] <= v) {
        count += 1;
      }
    }
    return 100 * count / len_values;
  };
  for (var ix = 0; ix < len_values; ix++) {
    // eslint-disable-next-line no-param-reassign
    obj[ix][result_field_name] = getPR(values[ix]);
  }
}

var _getPR = function _getPR(v, serie) {
  var count = 0;
  for (var i = 0; i < serie.length; i++) {
    if (serie[i] <= v) {
      count += 1;
    }
  }
  return 100 * count / serie.length;
};

var getMean = function getMean(serie) {
  var nb_values = serie.length;
  var sum = 0;
  for (var i = 0; i < nb_values; i++) {
    sum += serie[i];
  }
  return sum / nb_values;
};

var getStdDev = function getStdDev(serie, mean_value) {
  var nb_values = serie.length;
  if (!mean_value) {
    mean_value = getMean(serie); // eslint-disable-line no-param-reassign
  }
  var sum = 0;
  for (var i = 0; i < nb_values; i++) {
    sum += math_pow(serie[i] - mean_value, 2);
  }
  return math_sqrt(1 / nb_values * sum);
};

var getStandardizedMeanStdDev = function getStandardizedMeanStdDev(serie) {
  var mean = getMean(serie);
  var stddev = getStdDev(serie, mean);
  return serie.map(function (val) {
    return (val - mean) / stddev;
  });
};

var shuffle = function shuffle(array) {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    // eslint-disable-next-line no-param-reassign
    var _ref = [array[j], array[i]];
    array[i] = _ref[0];
    array[j] = _ref[1];
  }
  return array;
};

var createMenu = function createMenu(names, variables, study_zones, territorial_mesh) {
  // First section, regions names:
  var title_section1 = document.createElement('p');
  title_section1.className = 'title_menu';
  title_section1.innerHTML = 'Ma rÃ©gion';
  var section1 = document.createElement('div');
  section1.className = 'box';
  section1.style.overflow = 'auto';
  section1.style.height = '180px';
  for (var i = 0, len_i = names.length; i < len_i; i++) {
    var id = names[i].geo;
    var name = names[i].Nom;
    var entry = document.createElement('p');
    entry.innerHTML = '<span value="' + id + '" class=\'target_region square\'></span><span class="label_chk">' + name + '</span>';
    section1.appendChild(entry);
  }

  // Second section, groups of variables:
  var title_section2 = document.createElement('p');
  title_section2.className = 'title_menu';
  title_section2.innerHTML = 'Mon/mes indicateurs';
  var section2 = document.createElement('div');
  section2.id = 'menu_variables';
  section2.className = 'box';
  section2.style.overflow = 'auto';
  section2.style.height = '170px';

  // Filter the "variables" variable to fetch the group names :
  var groups_var = removeDuplicates(variables.map(function (d) {
    return d.group;
  }));

  var _loop = function _loop(_i, _len_i) {
    var gp_name = groups_var[_i];
    var entry = document.createElement('p');
    entry.className = 'name_group_var';
    entry.innerHTML = '<span class=\'square\'></span><span>' + gp_name + '</span>';
    section2.appendChild(entry);
    var div_grp = document.createElement('div');
    div_grp.style.display = _i === 0 ? null : 'none';
    var var_names = variables.filter(function (d) {
      return d.group === gp_name;
    });
    for (var j = 0, len_j = var_names.length; j < len_j; j++) {
      var name_var = var_names[j].name;
      var code_var = var_names[j].ratio;
      var sub_entry = document.createElement('p');
      sub_entry.className = 'small';
      sub_entry.innerHTML = '<span value="' + code_var + '" class="target_variable small_square"></span><span class="label_chk">' + name_var + '</span><span class="i_info">i</span>';
      div_grp.appendChild(sub_entry);
    }
    section2.appendChild(div_grp);
  };

  for (var _i = 0, _len_i = groups_var.length; _i < _len_i; _i++) {
    _loop(_i, _len_i);
  }

  // Third section, study zone:
  var title_section3 = document.createElement('p');
  title_section3.className = 'title_menu';
  title_section3.innerHTML = 'Mon espace d\'Ã©tude';
  var section3 = document.createElement('div');
  section3.id = 'menu_studyzone';
  section3.className = 'box';
  for (var _i2 = 0, _len_i2 = study_zones.length; _i2 < _len_i2; _i2++) {
    var _entry = document.createElement('p');
    var zone = study_zones[_i2];
    _entry.innerHTML = '<span filter-value="' + zone.id + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span><span class="i_info">i</span>';
    section3.appendChild(_entry);
  }

  // Fourth section:
  var title_section4 = document.createElement('p');
  title_section4.className = 'title_menu';
  title_section4.innerHTML = 'Maillage territorial d\'analyse';
  var section4 = document.createElement('div');
  section4.id = 'menu_territ_level';
  section4.className = 'box';
  for (var _i3 = 0, _len_i3 = territorial_mesh.length; _i3 < _len_i3; _i3++) {
    var _entry2 = document.createElement('p');
    var territ_level = territorial_mesh[_i3];
    _entry2.innerHTML = '<span value="' + territ_level.id + '" class=\'square territ_level\'></span><span class="label_chk">' + territ_level.name + '</span><span class="i_info">i</span>';
    section4.appendChild(_entry2);
  }

  // The actual menu containing these 4 sections:
  var menu = document.getElementById('menu');
  menu.id = 'menu';
  menu.style.width = '340px';
  menu.style.float = 'left';
  menu.appendChild(title_section1);
  menu.appendChild(section1);
  menu.appendChild(title_section2);
  menu.appendChild(section2);
  menu.appendChild(title_section3);
  menu.appendChild(section3);
  menu.appendChild(title_section4);
  menu.appendChild(section4);
};

function makeTopMenu() {
  var top_menu = d3.select('#menutop').styles({ 'font-family': "'Signika', sans-serif", 'font-size': '0.80em', padding: '0.3px' });
  var width_left = document.querySelector('#menu').getBoundingClientRect().width + 25 + 'px';
  var t = document.querySelector('#bar_section').getBoundingClientRect().width;
  var width_central_chart = t + 'px';
  var width_map = document.querySelector('#map_section').getBoundingClientRect().width - 35 + 'px';
  var width_type_comp = (t - 80) / 3 - 2 + 'px';
  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_left, float: 'left', margin: '0 3px' }).html('SÃ‰LECTION');

  var type_chart = top_menu.append('div').attr('class', 'top_section').styles({ width: width_central_chart, float: 'left', margin: '0 3px', 'text-align': 'center' });

  var position = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  position.append('p').attr('class', 'title_type_comp').html('POSITION');

  position.append('span').attrs({ class: 'type_chart chart_t1', value: 'BarChart1' }).html('1 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ScatterPlot2' }).html('2 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t3 disabled', value: 'RadarChart3' }).html('+3 ind.');

  var ressemblance = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  ressemblance.append('p').attr('class', 'title_type_comp').html('RESSEMBLANCES');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t1', value: 'BubbleChart1' }).html('1 ind.');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'SimilarityChart' }).html('+2 ind.');

  var inegalite = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  inegalite.append('p').attr('class', 'title_type_comp').html('INÃ‰GALITÃ‰S');

  inegalite.append('span').attrs({ class: 'type_chart chart_t1 disabled', value: 'BoxPlot1' }).html('1 ind.');

  inegalite.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ParallelCoords2' }).html('+2 ind.');

  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_map, float: 'left', margin: '0 0 0 20px' }).html('QUELLES REGIONS ?');
}

function makeHeaderMapSection() {
  var header_map_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_map').style('margin', '0 0 0 10px');

  header_map_section.insert('img').attrs({
    class: 'map_button active',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  });
}

function makeHeaderChart() {
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').attr('id', 'header_chart').style('margin-bottom', '0').style('clear', 'both');

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/edit-table-insert-row-above.svg',
    id: 'img_table'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    if (document.querySelector('.dataTable-wrapper').style.display) {
      document.querySelector('#svg_map').style.display = 'none';
      document.querySelector('#svg_legend').style.display = 'none';
      document.querySelector('#header_map').style.display = 'none';
      document.querySelector('#header_table').style.display = null;
      document.querySelector('.dataTable-wrapper').style.display = null;
      this.style.filter = 'invert(75%)';
    } else {
      document.querySelector('#svg_map').style.display = null;
      document.querySelector('#svg_legend').style.display = null;
      document.querySelector('#header_map').style.display = null;
      document.querySelector('#header_table').style.display = 'none';
      document.querySelector('.dataTable-wrapper').style.display = 'none';
      this.style.filter = null;
    }
  });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/printer.svg',
    id: 'img_printer'
  }).styles({ margin: '3px', float: 'right' });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/gtk-info.svg',
    id: 'img_info'
  }).styles({ margin: '3px', float: 'right' });
}

var svg_map = d3.select('svg#svg_map');
var margin_map = { top: 0, right: 0, bottom: 0, left: 0 };
var width_map = +svg_map.attr('width') - margin_map.left - margin_map.right;
var height_map = +svg_map.attr('height') - margin_map.top - margin_map.bottom;

var styles = {
  template: { id: 'template', fill: 'rgb(247, 252, 254)', 'fill-opacity': 1 },
  countries: { id: 'countries', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes: { id: 'seaboxes', fill: '#e0faff', 'fill-opacity': 1, stroke: 'black', 'stroke-width': 0.2 },
  remote: { id: 'remote', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes2: { id: 'seaboxes2', fill: 'none', stroke: 'black', 'stroke-width': 0.8 },
  nuts1: { id: 'nuts1', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' }
};

var projection = void 0;
var path = void 0;

function get_bbox_layer_path(name) {
  var bbox_layer = [[Infinity, Infinity], [-Infinity, -Infinity]];
  svg_map.select('#' + name).selectAll('path').each(function (d) {
    var bbox_path = path.bounds(d.geometry);
    bbox_layer[0][0] = bbox_path[0][0] < bbox_layer[0][0] ? bbox_path[0][0] : bbox_layer[0][0];
    bbox_layer[0][1] = bbox_path[0][1] < bbox_layer[0][1] ? bbox_path[0][1] : bbox_layer[0][1];
    bbox_layer[1][0] = bbox_path[1][0] > bbox_layer[1][0] ? bbox_path[1][0] : bbox_layer[1][0];
    bbox_layer[1][1] = bbox_path[1][1] > bbox_layer[1][1] ? bbox_path[1][1] : bbox_layer[1][1];
  });
  return bbox_layer;
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('template');
  var s = 1 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map);
  var t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function map_zoomed() {
  var transform = d3.event.transform;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style('stroke-width', function () {
    return styles[this.id]['stroke-width'] / transform.k + 'px';
  });

  layers.selectAll('g').transition(t).attr('transform', transform);

  svg_map.select('.brush_map').transition(t).attr('transform', transform);
}

var MapSelect = function () {
  function MapSelect(nuts1, countries, remote, template, seaboxes) {
    classCallCheck(this, MapSelect);

    projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], template).reflectY(true);

    path = d3.geoPath().projection(projection);
    var layers = svg_map.append('g').attr('id', 'layers');

    this.zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

    svg_map.call(this.zoom_map);

    layers.append('g').attrs(styles.template).selectAll('path').data(template.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.countries).attr('id', 'countries').selectAll('path').data(countries.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.remote).selectAll('path').data(remote.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes2).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    this.target_layer = layers.append('g').attrs(styles.nuts1);
    this.target_layer.selectAll('path').data(nuts1.features).enter().append('path').attr('fill', function (d) {
      return d.properties[app.current_config.id_field_geom] !== app.current_config.my_region ? color_countries : color_highlight;
    }).attr('d', path);
    app.type_path = getSvgPathType(this.target_layer.select('path').node().getAttribute('d'));
    fitLayer();
    prepareTooltip(svg_map);
    // this.bindTooltip();
  }

  createClass(MapSelect, [{
    key: 'resetColors',
    value: function resetColors$$1(current_ids) {
      var id_field_geom = app.current_config.id_field_geom;
      this.target_layer.selectAll('path').attr('fill', function (d) {
        return current_ids.indexOf(d.properties[id_field_geom]) > -1 ? app.colors[d.properties[id_field_geom]] || color_countries : color_disabled;
      });
    }
    // bindTooltip() {
    //   this.target_layer.selectAll('path')
    //     .on('mouseover', () => {
    //       svg_map.select('.tooltip')
    //         .style('display', null);
    //     })
    //     .on('mouseout', () => {
    //       svg_map.select('.tooltip')
    //         .style('display', 'none');
    //     })
    //     .on('mousemove', function (d) {
    //       const tooltip = svg_map.select('.tooltip');
    //       tooltip
    //         .select('text.id_feature')
    //         .text(`${d.properties[app.current_config.id_field_geom]}`);
    //       let _ix, nb_val;
    //       for (_ix = 0, nb_val = Math.min(app.current_config.ratio.length, 5); _ix < nb_val; _ix++) {
    //         tooltip.select(`text.value_feature${_ix + 1}`)
    //           .text(`${app.current_config.ratio_pretty_name[_ix]}: ${math_round(d.properties[app.current_config.ratio[_ix]] * 10) / 10}`);
    //       }
    //       tooltip
    //         .attr('transform', `translate(${[d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 - _ix * 12]})`);
    //     });
    // }

  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      svg_map.transition().duration(250).call(this.zoom_map.transform, d3.zoomIdentity);
    }
  }, {
    key: 'updateLegend',
    value: function updateLegend() {
      d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + app.current_config.my_region_pretty_name);
    }
  }, {
    key: 'removeRectBrush',
    value: function removeRectBrush() {
      svg_map.select('.brush_map').call(this.brush_map.move, null);
    }
  }, {
    key: 'callBrush',
    value: function callBrush(selection) {
      svg_map.select('.brush_map').call(this.brush_map.move, selection);
    }
  }, {
    key: 'bindBrushClick',
    value: function bindBrushClick(chart) {
      if (chart.handleClickMap) {
        document.getElementById('img_map_select').classList.remove('disabled');
        document.getElementById('img_map_select').classList.add('active');
      } else {
        document.getElementById('img_map_select').classList.add('disabled');
      }
      if (chart.handle_brush_map) {
        document.getElementById('img_rect_selec').classList.remove('disabled');
        document.getElementById('img_rect_selec').classList.add('active');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.remove('active');
        this.brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
          chart.handle_brush_map(d3.event);
        });
        svg_map.append('g').attr('class', 'brush_map').call(this.brush_map);
      } else {
        document.getElementById('img_rect_selec').classList.remove('active');
        document.getElementById('img_rect_selec').classList.add('disabled');
        document.getElementById('img_map_zoom').classList.remove('active');
        document.getElementById('img_map_select').classList.add('active');
      }
    }
  }, {
    key: 'unbindBrushClick',
    value: function unbindBrushClick() {
      this.brush_map = null;
      svg_map.select('.brush_map').remove();
    }
  }]);
  return MapSelect;
}();

function makeSourceSection() {
  var text_zone = d3.select('#svg_legend').append('text').attrs({ y: 32.5, 'text-anchor': 'end' }).style('font-size', '11px').style('font-family', '\'Signika\', sans-serif');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Niveau rÃ©gional : NUTS 1 (version 2016)');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Origine des donnÃ©es : Eurostat, 2016');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Limite administrative: UMS RIATE, CC-BY-SA');
}

function makeMapLegend() {
  var legend_elems = [{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres rÃ©gions du filtre de comparaison' }, { color: color_sup, text: 'Rang plus Ã©levÃ© que ma rÃ©gion' }, { color: color_inf, text: 'Rang moins Ã©levÃ© que ma rÃ©gion' }];

  var rect_size = 14;
  var spacing = 4;
  var lgd_height = rect_size + spacing;
  var offset = lgd_height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').append('g').attr('transform', 'translate(50, 40)').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * lgd_height - offset;
    return 'translate(' + [tx, ty] + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attrs({ x: rect_size + spacing, y: rect_size - spacing }).text(function (d) {
    return d.text;
  });
}

var vanillaDataTables = createCommonjsModule(function (module, exports) {
/*!
 *
 * Vanilla-DataTables
 * Copyright (c) 2015-2017 Karl Saunders (http://mobius.ovh)
 * Licensed under MIT (http://www.opensource.org/licenses/mit-license.php)
 *
 * Version: 1.5.1
 *
 */
(function (root, factory) {
    var plugin = "DataTable";

    if (typeof undefined === "function" && undefined.amd) {
        undefined([], factory(plugin));
    } else {
        module.exports = factory(plugin);
    }
})(commonjsGlobal, function (plugin) {
    "use strict";
    var win = window,
        doc = document,
        body = doc.body;

    /**
     * Default configuration
     * @typ {Object}
     */
    var defaultConfig = {
        perPage: 10,
        perPageSelect: [5, 10, 15, 20, 25],

        sortable: true,
        searchable: true,

        // Pagination
        nextPrev: true,
        firstLast: false,
        prevText: "&lsaquo;",
        nextText: "&rsaquo;",
        firstText: "&laquo;",
        lastText: "&raquo;",
        ellipsisText: "&hellip;",
        ascText: "â–´",
        descText: "â–¾",
        truncatePager: true,
        pagerDelta: 2,

        fixedColumns: true,
        fixedHeight: false,

        header: true,
        footer: false,

        // Customise the display text
        labels: {
            placeholder: "Search...", // The search input placeholder
            perPage: "{select} entries per page", // per-page dropdown label
            noRows: "No entries found", // Message shown when there are no search results
            info: "Showing {start} to {end} of {rows} entries" //
        },

        // Customise the layout
        layout: {
            top: "{select}{search}",
            bottom: "{info}{pager}"
        }
    };

    /**
     * Check is item is object
     * @return {Boolean}
     */
    var isObject = function (val) {
        return Object.prototype.toString.call(val) === "[object Object]";
    };

    /**
     * Check is item is array
     * @return {Boolean}
     */
    var isArray = function (val) {
        return Array.isArray(val);
    };

    /**
     * Check for valid JSON string
     * @param  {String}   str
     * @return {Boolean|Array|Object}
     */
    var isJson = function (str) {
        var t = !1;
        try {
            t = JSON.parse(str);
        } catch (e) {
            return !1;
        }
        return !(null === t || (!isArray(t) && !isObject(t))) && t;
    };

    /**
     * Merge objects (reccursive)
     * @param  {Object} r
     * @param  {Object} t
     * @return {Object}
     */
    var extend = function (src, props) {
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var val = props[prop];
                if (val && isObject(val)) {
                    src[prop] = src[prop] || {};
                    extend(src[prop], val);
                } else {
                    src[prop] = val;
                }
            }
        }
        return src;
    };

    /**
     * Iterator helper
     * @param  {(Array|Object)}   arr     Any object, array or array-like collection.
     * @param  {Function}         fn      Callback
     * @param  {Object}           scope   Change the value of this
     * @return {Void}
     */
    var each = function (arr, fn, scope) {
        var n;
        if (isObject(arr)) {
            for (n in arr) {
                if (Object.prototype.hasOwnProperty.call(arr, n)) {
                    fn.call(scope, arr[n], n);
                }
            }
        } else {
            for (n = 0; n < arr.length; n++) {
                fn.call(scope, arr[n], n);
            }
        }
    };

    /**
     * Add event listener to target
     * @param  {Object} el
     * @param  {String} e
     * @param  {Function} fn
     */
    var on = function (el, e, fn) {
        el.addEventListener(e, fn, false);
    };

    /**
     * Create DOM element node
     * @param  {String}   a nodeName
     * @param  {Object}   b properties and attributes
     * @return {Object}
     */
    var createElement = function (a, b) {
        var d = doc.createElement(a);
        if (b && "object" == typeof b) {
            var e;
            for (e in b) {
                if ("html" === e) {
                    d.innerHTML = b[e];
                } else {
                    d.setAttribute(e, b[e]);
                }
            }
        }
        return d;
    };

    var flush = function (el, ie) {
        if (el instanceof NodeList) {
            each(el, function (e) {
                flush(e, ie);
            });
        } else {
            if (ie) {
                while (el.hasChildNodes()) {
                    el.removeChild(el.firstChild);
                }
            } else {
                el.innerHTML = "";
            }
        }
    };

    /**
     * Create button helper
     * @param  {String}   c
     * @param  {Number}   p
     * @param  {String}   t
     * @return {Object}
     */
    var button = function (c, p, t) {
        return createElement("li", {
            class: c,
            html: '<a href="#" data-page="' + p + '">' + t + "</a>"
        });
    };

    /**
     * classList shim
     * @type {Object}
     */
    var classList = {
        add: function (s, a) {
            if (s.classList) {
                s.classList.add(a);
            } else {
                if (!classList.contains(s, a)) {
                    s.className = s.className.trim() + " " + a;
                }
            }
        },
        remove: function (s, a) {
            if (s.classList) {
                s.classList.remove(a);
            } else {
                if (classList.contains(s, a)) {
                    s.className = s.className.replace(
                        new RegExp("(^|\\s)" + a.split(" ").join("|") + "(\\s|$)", "gi"),
                        " "
                    );
                }
            }
        },
        contains: function (s, a) {
            if (s)
                return s.classList ?
                    s.classList.contains(a) :
                    !!s.className &&
                    !!s.className.match(new RegExp("(\\s|^)" + a + "(\\s|$)"));
        }
    };

    /**
     * Bubble sort algorithm
     */
    var sortItems = function (a, b) {
        var c, d;
        if (1 === b) {
            c = 0;
            d = a.length;
        } else {
            if (b === -1) {
                c = a.length - 1;
                d = -1;
            }
        }
        for (var e = !0; e;) {
            e = !1;
            for (var f = c; f != d; f += b) {
                if (a[f + b] && a[f].value > a[f + b].value) {
                    var g = a[f],
                        h = a[f + b],
                        i = g;
                    a[f] = h;
                    a[f + b] = i;
                    e = !0;
                }
            }
        }
        return a;
    };

    /**
     * Pager truncation algorithm
     */
    var truncate = function (a, b, c, d, ellipsis) {
        d = d || 2;
        var j,
            e = 2 * d,
            f = b - d,
            g = b + d,
            h = [],
            i = [];
        if (b < 4 - d + e) {
            g = 3 + e;
        } else if (b > c - (3 - d + e)) {
            f = c - (2 + e);
        }
        for (var k = 1; k <= c; k++) {
            if (1 == k || k == c || (k >= f && k <= g)) {
                var l = a[k - 1];
                classList.remove(l, "active");
                h.push(l);
            }
        }
        each(h, function (c) {
            var d = c.children[0].getAttribute("data-page");
            if (j) {
                var e = j.children[0].getAttribute("data-page");
                if (d - e == 2) i.push(a[e]);
                else if (d - e != 1) {
                    var f = createElement("li", {
                        class: "ellipsis",
                        html: '<a href="#">' + ellipsis + "</a>"
                    });
                    i.push(f);
                }
            }
            i.push(c);
            j = c;
        });

        return i;
    };

    /**
     * Parse data to HTML table
     */
    var dataToTable = function (data) {
        var thead = false,
            tbody = false;

        data = data || this.options.data;

        if (data.headings) {
            thead = createElement("thead");
            var tr = createElement("tr");
            each(data.headings, function (col) {
                var td = createElement("th", {
                    html: col
                });
                tr.appendChild(td);
            });

            thead.appendChild(tr);
        }

        if (data.data && data.data.length) {
            tbody = createElement("tbody");
            each(data.data, function (rows) {
                if (data.headings) {
                    if (data.headings.length !== rows.length) {
                        throw new Error(
                            "The number of rows do not match the number of headings."
                        );
                    }
                }
                var tr = createElement("tr");
                each(rows, function (value) {
                    var td = createElement("td", {
                        html: value
                    });
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
        }

        if (thead) {
            if (this.table.tHead !== null) {
                this.table.removeChild(this.table.tHead);
            }
            this.table.appendChild(thead);
        }

        if (tbody) {
            if (this.table.tBodies.length) {
                this.table.removeChild(this.table.tBodies[0]);
            }
            this.table.appendChild(tbody);
        }
    };

    /**
     * Use moment.js to parse cell contents for sorting
     * @param  {String} content     The datetime string to parse
     * @param  {String} format      The format for moment to use
     * @return {String|Boolean}     Datatime string or false
     */
    var parseDate = function (content, format) {
        var date = false;

        // moment() throws a fit if the string isn't a valid datetime string
        // so we need to supply the format to the constructor (https://momentjs.com/docs/#/parsing/string-format/)

        // Converting to YYYYMMDD ensures we can accurately sort the column numerically

        if (format) {
            switch (format) {
            case "ISO_8601":
                date = moment(content, moment.ISO_8601).format("YYYYMMDD");
                break;
            case "RFC_2822":
                date = moment(content, "ddd, MM MMM YYYY HH:mm:ss ZZ").format("YYYYMMDD");
                break;
            case "MYSQL":
                date = moment(content, "YYYY-MM-DD hh:mm:ss").format("YYYYMMDD");
                break;
            case "UNIX":
                date = moment(content).unix();
                break;
                // User defined format using the data-format attribute or columns[n].format option
            default:
                date = moment(content, format).format("YYYYMMDD");
                break;
            }
        }

        return date;
    };

    /**
     * Columns API
     * @param {Object} instance DataTable instance
     * @param {Mixed} columns  Column index or array of column indexes
     */
    var Columns = function (dt) {
        this.dt = dt;
        return this;
    };

    /**
     * Swap two columns
     * @return {Void}
     */
    Columns.prototype.swap = function (columns) {
        if (columns.length && columns.length === 2) {
            var cols = [];

            // Get the current column indexes
            each(this.dt.headings, function (h, i) {
                cols.push(i);
            });

            var x = columns[0];
            var y = columns[1];
            var b = cols[y];
            cols[y] = cols[x];
            cols[x] = b;

            this.order(cols);
        }
    };

    /**
     * Reorder the columns
     * @return {Array} columns  Array of ordered column indexes
     */
    Columns.prototype.order = function (columns) {

        var a, b, c, d, h, s, cell,
            temp = [
                [],
                [],
                [],
                []
            ],
            dt = this.dt;

        // Order the headings
        each(columns, function (column, x) {
            h = dt.headings[column];
            s = h.getAttribute("data-sortable") !== "false";
            a = h.cloneNode(true);
            a.originalCellIndex = x;
            a.sortable = s;

            temp[0].push(a);

            if (dt.hiddenColumns.indexOf(column) < 0) {
                b = h.cloneNode(true);
                b.originalCellIndex = x;
                b.sortable = s;

                temp[1].push(b);
            }
        });

        // Order the row cells
        each(dt.data, function (row, i) {
            c = row.cloneNode();
            d = row.cloneNode();

            c.dataIndex = d.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                c.searchIndex = d.searchIndex = row.searchIndex;
            }

            // Append the cell to the fragment in the correct order
            each(columns, function (column, x) {
                cell = row.cells[column].cloneNode(true);
                cell.data = row.cells[column].data;
                c.appendChild(cell);

                if (dt.hiddenColumns.indexOf(column) < 0) {
                    cell = row.cells[column].cloneNode(true);
                    cell.data = row.cells[column].data;
                    d.appendChild(cell);
                }
            });

            temp[2].push(c);
            temp[3].push(d);
        });

        dt.headings = temp[0];
        dt.activeHeadings = temp[1];

        dt.data = temp[2];
        dt.activeRows = temp[3];

        // Update
        dt.update();
    };

    /**
     * Hide columns
     * @return {Void}
     */
    Columns.prototype.hide = function (columns) {
        if (columns.length) {
            var dt = this.dt;

            each(columns, function (column) {
                if (dt.hiddenColumns.indexOf(column) < 0) {
                    dt.hiddenColumns.push(column);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Show columns
     * @return {Void}
     */
    Columns.prototype.show = function (columns) {
        if (columns.length) {
            var index, dt = this.dt;

            each(columns, function (column) {
                index = dt.hiddenColumns.indexOf(column);
                if (index > -1) {
                    dt.hiddenColumns.splice(index, 1);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Check column(s) visibility
     * @return {Boolean}
     */
    Columns.prototype.visible = function (columns) {
        var cols, dt = this.dt;

        columns = columns || dt.headings.map(function (th) {
            return th.originalCellIndex;
        });

        if (!isNaN(columns)) {
            cols = dt.hiddenColumns.indexOf(columns) < 0;
        } else if (isArray(columns)) {
            cols = [];
            each(columns, function (column) {
                cols.push(dt.hiddenColumns.indexOf(column) < 0);
            });
        }

        return cols;
    };

    /**
     * Add a new column
     * @param {Object} data
     */
    Columns.prototype.add = function (data) {
        var that = this,
            td, th = document.createElement("th");

        if (!this.dt.headings.length) {
            this.dt.insert({
                headings: [data.heading],
                data: data.data.map(function (i) {
                    return [i];
                })
            });
            this.rebuild();
            return;
        }

        if (!this.dt.hiddenHeader) {
            if (data.heading.nodeName) {
                th.appendChild(data.heading);
            } else {
                th.innerHTML = data.heading;
            }
        } else {
            th.innerHTML = "";
        }

        this.dt.headings.push(th);

        each(this.dt.data, function (row, i) {
            if (data.data[i]) {
                td = document.createElement("td");

                if (data.data[i].nodeName) {
                    td.appendChild(data.data[i]);
                } else {
                    td.innerHTML = data.data[i];
                }

                td.data = td.innerHTML;

                if (data.render) {
                    td.innerHTML = data.render.call(that, td.data, td, row);
                }

                row.appendChild(td);
            }
        });

        if (data.type) {
            th.setAttribute("data-type", data.type);
        }
        if (data.format) {
            th.setAttribute("data-format", data.format);
        }

        if (data.hasOwnProperty("sortable")) {
            th.sortable = data.sortable;
            th.setAttribute("data-sortable", data.sortable === true ? "true" : "false");
        }

        this.rebuild();

        this.dt.renderHeader();
    };

    /**
     * Remove column(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Columns.prototype.remove = function (select) {
        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (column) {
                this.remove(column);
            }, this);
        } else {
            this.dt.headings.splice(select, 1);

            each(this.dt.data, function (row) {
                row.removeChild(row.cells[select]);
            });
        }

        this.rebuild();
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    Columns.prototype.sort = function (column, direction, init) {

        var dt = this.dt;

        // Check column is present
        if (dt.hasHeadings && (column < 1 || column > dt.activeHeadings.length)) {
            return false;
        }

        dt.sorting = true;

        // Convert to zero-indexed
        column = column - 1;

        var dir,
            rows = dt.data,
            alpha = [],
            numeric = [],
            a = 0,
            n = 0,
            th = dt.activeHeadings[column];

        column = th.originalCellIndex;

        each(rows, function (tr) {
            var cell = tr.cells[column];
            var content = cell.data;
            var num = content.replace(/(\$|\,|\s|%)/g, "");

            // Check for date format and moment.js
            if (th.getAttribute("data-type") === "date" && win.moment) {
                var format = false,
                    formatted = th.hasAttribute("data-format");

                if (formatted) {
                    format = th.getAttribute("data-format");
                }

                num = parseDate(content, format);
            }

            if (parseFloat(num) == num) {
                numeric[n++] = {
                    value: Number(num),
                    row: tr
                };
            } else {
                alpha[a++] = {
                    value: content,
                    row: tr
                };
            }
        });

        /* Sort according to direction (ascending or descending) */
        var top, btm;
        if (classList.contains(th, "asc") || direction == "asc") {
            top = sortItems(alpha, -1);
            btm = sortItems(numeric, -1);
            dir = "descending";
            classList.remove(th, "asc");
            classList.add(th, "desc");
        } else {
            top = sortItems(numeric, 1);
            btm = sortItems(alpha, 1);
            dir = "ascending";
            classList.remove(th, "desc");
            classList.add(th, "asc");
        }

        /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */
        if (dt.lastTh && th != dt.lastTh) {
            classList.remove(dt.lastTh, "desc");
            classList.remove(dt.lastTh, "asc");
        }

        dt.lastTh = th;

        /* Reorder the table */
        rows = top.concat(btm);

        dt.data = [];
        var indexes = [];

        each(rows, function (v, i) {
            dt.data.push(v.row);

            if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {
                indexes.push(i);
            }
        }, dt);

        dt.searchData = indexes;

        this.rebuild();

        dt.update();

        if (!init) {
            dt.emit("datatable.sort", column, dir);
        }
    };

    /**
     * Rebuild the columns
     * @return {Void}
     */
    Columns.prototype.rebuild = function () {
        var a, b, c, d, dt = this.dt,
            temp = [];

        dt.activeRows = [];
        dt.activeHeadings = [];

        each(dt.headings, function (th, i) {
            th.originalCellIndex = i;
            th.sortable = th.getAttribute("data-sortable") !== "false";
            if (dt.hiddenColumns.indexOf(i) < 0) {
                dt.activeHeadings.push(th);
            }
        }, this);

        // Loop over the rows and reorder the cells
        each(dt.data, function (row, i) {
            a = row.cloneNode();
            b = row.cloneNode();

            a.dataIndex = b.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                a.searchIndex = b.searchIndex = row.searchIndex;
            }

            // Append the cell to the fragment in the correct order
            each(row.cells, function (cell) {
                c = cell.cloneNode(true);
                c.data = cell.data;
                a.appendChild(c);

                if (dt.hiddenColumns.indexOf(cell.cellIndex) < 0) {
                    d = cell.cloneNode(true);
                    d.data = cell.data;
                    b.appendChild(d);
                }
            });

            // Append the fragment with the ordered cells
            temp.push(a);
            dt.activeRows.push(b);
        });

        dt.data = temp;

        dt.update();
    };

    /**
     * Rows API
     * @param {Object} instance DataTable instance
     * @param {Array} rows
     */
    var Rows = function (dt, rows) {
        this.dt = dt;
        this.rows = rows;

        return this;
    };

    /**
     * Build a new row
     * @param  {Array} row
     * @return {HTMLElement}
     */
    Rows.prototype.build = function (row) {
        var td, tr = createElement("tr");

        var headings = this.dt.headings;

        if (!headings.length) {
            headings = row.map(function () {
                return "";
            });
        }

        each(headings, function (h, i) {
            td = createElement("td");

            // Fixes #29
            if (!row[i] && !row[i].length) {
                row[i] = "";
            }

            td.innerHTML = row[i];

            td.data = row[i];

            tr.appendChild(td);
        });

        return tr;
    };

    Rows.prototype.render = function (row) {
        return row;
    };

    /**
     * Add new row
     * @param {Array} select
     */
    Rows.prototype.add = function (data) {

        if (isArray(data)) {
            var dt = this.dt;
            // Check for multiple rows
            if (isArray(data[0])) {
                each(data, function (row, i) {
                    dt.data.push(this.build(row));
                }, this);
            } else {
                dt.data.push(this.build(data));
            }

            // We may have added data to an empty table
            if ( dt.data.length ) {
                dt.hasRows = true;
            }


            this.update();

            dt.columns().rebuild();
        }
    };

    /**
     * Remove row(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Rows.prototype.remove = function (select) {

        var dt = this.dt;

        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (row, i) {
                dt.data.splice(row, 1);
            });
        } else {
            dt.data.splice(select, 1);
        }

        this.update();
        dt.columns().rebuild();
    };

    /**
     * Update row indexes
     * @return {Void}
     */
    Rows.prototype.update = function () {
        each(this.dt.data, function (row, i) {
            row.dataIndex = i;
        });
    };

    ////////////////////
    //    MAIN LIB    //
    ////////////////////

    var DataTable = function (table, options) {
        this.initialized = false;

        // user options
        this.options = extend(defaultConfig, options);

        if (typeof table === "string") {
            var selector = table;
            table = document.querySelector(table);

            if (!table) {
                throw new Error("The element '" + selector + "' can not be found.");
            }
        }

        if (table.tagName.toLowerCase() !== "table") {
            throw new Error("The selected element is not a table.");
        }

        this.initialLayout = table.innerHTML;
        this.initialSortable = this.options.sortable;

        // Disable manual sorting if no header is present (#4)
        if (!this.options.header) {
            this.options.sortable = false;
        }

        if (table.tHead === null) {
            if (!this.options.data ||
                (this.options.data && !this.options.data.headings)
            ) {
                this.options.sortable = false;
            }
        }

        if (table.tBodies.length && !table.tBodies[0].rows.length) {
            if (this.options.data) {
                if (!this.options.data.data) {
                    throw new Error(
                        "You seem to be using the data option, but you've not defined any rows."
                    );
                }
            }
        }

        this.table = table;

        this.init();
    };

    var proto = DataTable.prototype;

    /**
     * Initialize the instance
     * @param  {Object} options
     * @return {Void}
     */
    proto.init = function (options) {
        if (this.initialized || classList.contains(this.table, "dataTable-table")) {
            return false;
        }

        var that = this;

        this.options = extend(this.options, options || {});

        // IE detection
        this.isIE = !!/(msie|trident)/i.test(navigator.userAgent);

        this.currentPage = 1;
        this.onFirstPage = true;

        this.hiddenColumns = [];
        this.columnRenderers = [];
        this.selectedColumns = [];

        this.render();

        setTimeout(function () {
            that.emit("datatable.init");
            that.initialized = true;
        }, 10);
    };

    /**
     * Render the instance
     * @param  {String} type
     * @return {Void}
     */
    proto.render = function (type) {
        if (type) {
            switch (type) {
            case "page":
                this.renderPage();
                break;
            case "pager":
                this.renderPager();
                break;
            case "header":
                this.renderHeader();
                break;
            }

            return false;
        }

        var that = this,
            o = that.options,
            template = "";

        // Convert data to HTML
        if (o.data) {
            dataToTable.call(that);
        }

        if (o.ajax) {
            var ajax = o.ajax;
            var xhr = new XMLHttpRequest();

            var xhrProgress = function (e) {
                that.emit("datatable.ajax.progress", e, xhr);
            };

            var xhrLoad = function (e) {
                if (xhr.readyState === 4) {
                    that.emit("datatable.ajax.loaded", e, xhr);

                    if (xhr.status === 200) {
                        var obj = {};
                        obj.data = ajax.load ? ajax.load.call(that, xhr) : xhr.responseText;

                        obj.type = "json";

                        if (ajax.content && ajax.content.type) {
                            obj.type = ajax.content.type;

                            obj = extend(obj, ajax.content);
                        }

                        that.import(obj);

                        that.setColumns(true);

                        that.emit("datatable.ajax.success", e, xhr);
                    } else {
                        that.emit("datatable.ajax.error", e, xhr);
                    }
                }
            };

            var xhrFailed = function (e) {
                that.emit("datatable.ajax.error", e, xhr);
            };

            var xhrCancelled = function (e) {
                that.emit("datatable.ajax.abort", e, xhr);
            };

            on(xhr, "progress", xhrProgress);
            on(xhr, "load", xhrLoad);
            on(xhr, "error", xhrFailed);
            on(xhr, "abort", xhrCancelled);

            that.emit("datatable.ajax.loading", xhr);

            xhr.open("GET", typeof ajax === "string" ? o.ajax : o.ajax.url);
            xhr.send();
        }

        // Store references
        that.body = that.table.tBodies[0];
        that.head = that.table.tHead;
        that.foot = that.table.tFoot;

        if (!that.body) {
            that.body = createElement("tbody");

            that.table.appendChild(that.body);
        }

        that.hasRows = that.body.rows.length > 0;

        // Make a tHead if there isn't one (fixes #8)
        if (!that.head) {
            var h = createElement("thead");
            var t = createElement("tr");

            if (that.hasRows) {
                each(that.body.rows[0].cells, function () {
                    t.appendChild(createElement("th"));
                });

                h.appendChild(t);
            }

            that.head = h;

            that.table.insertBefore(that.head, that.body);

            that.hiddenHeader = !o.ajax;
        }

        that.headings = [];
        that.hasHeadings = that.head.rows.length > 0;

        if (that.hasHeadings) {
            that.header = that.head.rows[0];
            that.headings = [].slice.call(that.header.cells);
        }

        // Header
        if (!o.header) {
            if (that.head) {
                that.table.removeChild(that.table.tHead);
            }
        }

        // Footer
        if (o.footer) {
            if (that.head && !that.foot) {
                that.foot = createElement("tfoot", {
                    html: that.head.innerHTML
                });
                that.table.appendChild(that.foot);
            }
        } else {
            if (that.foot) {
                that.table.removeChild(that.table.tFoot);
            }
        }

        // Build
        that.wrapper = createElement("div", {
            class: "dataTable-wrapper dataTable-loading"
        });

        // Template for custom layouts
        template += "<div class='dataTable-top'>";
        template += o.layout.top;
        template += "</div>";
        template += "<div class='dataTable-container'></div>";
        template += "<div class='dataTable-bottom'>";
        template += o.layout.bottom;
        template += "</div>";

        // Info placement
        template = template.replace("{info}", "<div class='dataTable-info'></div>");

        // Per Page Select
        if (o.perPageSelect) {
            var wrap = "<div class='dataTable-dropdown'><label>";
            wrap += o.labels.perPage;
            wrap += "</label></div>";

            // Create the select
            var select = createElement("select", {
                class: "dataTable-selector"
            });

            // Create the options
            each(o.perPageSelect, function (val) {
                var selected = val === o.perPage;
                var option = new Option(val, val, selected, selected);
                select.add(option);
            });

            // Custom label
            wrap = wrap.replace("{select}", select.outerHTML);

            // Selector placement
            template = template.replace("{select}", wrap);
        } else {
            template = template.replace("{select}", "");
        }

        // Searchable
        if (o.searchable) {
            var form =
                "<div class='dataTable-search'><input class='dataTable-input' placeholder='" +
                o.labels.placeholder +
                "' type='text'></div>";

            // Search input placement
            template = template.replace("{search}", form);
        } else {
            template = template.replace("{search}", "");
        }

        if (that.hasHeadings) {
            // Sortable
            this.render("header");
        }

        // Add table class
        classList.add(that.table, "dataTable-table");

        // Paginator
        var w = createElement("div", {
            class: "dataTable-pagination"
        });
        var paginator = createElement("ul");
        w.appendChild(paginator);

        // Pager(s) placement
        template = template.replace(/\{pager\}/g, w.outerHTML);

        that.wrapper.innerHTML = template;

        that.container = that.wrapper.querySelector(".dataTable-container");

        that.pagers = that.wrapper.querySelectorAll(".dataTable-pagination");

        that.label = that.wrapper.querySelector(".dataTable-info");

        // Insert in to DOM tree
        that.table.parentNode.replaceChild(that.wrapper, that.table);
        that.container.appendChild(that.table);

        // Store the table dimensions
        that.rect = that.table.getBoundingClientRect();

        // Convert rows to array for processing
        that.data = [].slice.call(that.body.rows);
        that.activeRows = that.data.slice();
        that.activeHeadings = that.headings.slice();

        // Update
        that.update();

        if (!o.ajax) {
            that.setColumns();
        }

        // Fix height
        this.fixHeight();

        // Fix columns
        that.fixColumns();

        // Class names
        if (!o.header) {
            classList.add(that.wrapper, "no-header");
        }

        if (!o.footer) {
            classList.add(that.wrapper, "no-footer");
        }

        if (o.sortable) {
            classList.add(that.wrapper, "sortable");
        }

        if (o.searchable) {
            classList.add(that.wrapper, "searchable");
        }

        if (o.fixedHeight) {
            classList.add(that.wrapper, "fixed-height");
        }

        if (o.fixedColumns) {
            classList.add(that.wrapper, "fixed-columns");
        }

        that.bindEvents();
    };

    /**
     * Render the page
     * @return {Void}
     */
    proto.renderPage = function () {
        if (this.hasRows && this.totalPages) {
            if (this.currentPage > this.totalPages) {
                this.currentPage = 1;
            }

            // Use a fragment to limit touching the DOM
            var index = this.currentPage - 1,
                frag = doc.createDocumentFragment();

            if (this.hasHeadings) {
                flush(this.header, this.isIE);

                each(this.activeHeadings, function (th) {
                    this.header.appendChild(th);
                }, this);
            }

            each(this.pages[index], function (row) {
                frag.appendChild(this.rows().render(row));
            }, this);

            this.clear(frag);

            this.onFirstPage = this.currentPage === 1;
            this.onLastPage = this.currentPage === this.lastPage;
        } else {
            this.clear();
        }

        // Update the info
        var current = 0,
            f = 0,
            t = 0,
            items;

        if (this.totalPages) {
            current = this.currentPage - 1;
            f = current * this.options.perPage;
            t = f + this.pages[current].length;
            f = f + 1;
            items = !!this.searching ? this.searchData.length : this.data.length;
        }

        if (this.label && this.options.labels.info.length) {
            // CUSTOM LABELS
            var string = this.options.labels.info
                .replace("{start}", f)
                .replace("{end}", t)
                .replace("{page}", this.currentPage)
                .replace("{pages}", this.totalPages)
                .replace("{rows}", items);

            this.label.innerHTML = items ? string : "";
        }

        if (this.currentPage == 1) {
            this.fixHeight();
        }
    };

    /**
     * Render the pager(s)
     * @return {Void}
     */
    proto.renderPager = function () {
        flush(this.pagers, this.isIE);

        if (this.totalPages > 1) {
            var c = "pager",
                frag = doc.createDocumentFragment(),
                prev = this.onFirstPage ? 1 : this.currentPage - 1,
                next = this.onlastPage ? this.totalPages : this.currentPage + 1;

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, 1, this.options.firstText));
            }

            // prev button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, prev, this.options.prevText));
            }

            var pager = this.links;

            // truncate the links
            if (this.options.truncatePager) {
                pager = truncate(
                    this.links,
                    this.currentPage,
                    this.pages.length,
                    this.options.pagerDelta,
                    this.options.ellipsisText
                );
            }

            // active page link
            classList.add(this.links[this.currentPage - 1], "active");

            // append the links
            each(pager, function (p) {
                classList.remove(p, "active");
                frag.appendChild(p);
            });

            classList.add(this.links[this.currentPage - 1], "active");

            // next button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, next, this.options.nextText));
            }

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, this.totalPages, this.options.lastText));
            }

            // We may have more than one pager
            each(this.pagers, function (pager) {
                pager.appendChild(frag.cloneNode(true));
            });
        }
    };

    /**
     * Render the header
     * @return {Void}
     */
    proto.renderHeader = function () {
        var that = this;

        that.labels = [];

        if (that.headings && that.headings.length) {
            each(that.headings, function (th, i) {

                that.labels[i] = th.textContent;

                if (classList.contains(th.firstElementChild, "dataTable-sorter")) {
                    th.innerHTML = th.firstElementChild.innerHTML;
                }

                th.sortable = th.getAttribute("data-sortable") !== "false";

                th.originalCellIndex = i;
                if (that.options.sortable && th.sortable) {
                    var link = createElement("a", {
                        href: "#",
                        class: "dataTable-sorter",
                        html: th.innerHTML
                    });

                    th.innerHTML = "";
                    th.setAttribute("data-sortable", "");
                    th.appendChild(link);
                }
            });
        }

        that.fixColumns();
    };

    /**
     * Bind event listeners
     * @return {[type]} [description]
     */
    proto.bindEvents = function () {
        var that = this,
            o = that.options;

        // Per page selector
        if (o.perPageSelect) {
            var selector = that.wrapper.querySelector(".dataTable-selector");
            if (selector) {
                // Change per page
                on(selector, "change", function (e) {
                    o.perPage = parseInt(this.value, 10);
                    that.update();

                    that.fixHeight();

                    that.emit("datatable.perpage", o.perPage);
                });
            }
        }

        // Search input
        if (o.searchable) {
            that.input = that.wrapper.querySelector(".dataTable-input");
            if (that.input) {
                on(that.input, "keyup", function (e) {
                    that.search(this.value);
                });
            }
        }

        // Pager(s) / sorting
        on(that.wrapper, "click", function (e) {
            var t = e.target;
            if (t.nodeName.toLowerCase() === "a") {
                if (t.hasAttribute("data-page")) {
                    that.page(t.getAttribute("data-page"));
                    e.preventDefault();
                } else if (
                    o.sortable &&
                    classList.contains(t, "dataTable-sorter") &&
                    t.parentNode.getAttribute("data-sortable") != "false"
                ) {
                    that.columns().sort(that.activeHeadings.indexOf(t.parentNode) + 1);
                    e.preventDefault();
                }
            }
        });
    };

    /**
     * Set up columns
     * @return {[type]} [description]
     */
    proto.setColumns = function (ajax) {

        var that = this;

        if (!ajax) {
            each(that.data, function (row) {
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });
        }

        // Check for the columns option
        if (that.options.columns && that.headings.length) {

            each(that.options.columns, function (data) {

                // convert single column selection to array
                if (!isArray(data.select)) {
                    data.select = [data.select];
                }

                if (data.hasOwnProperty("render") && typeof data.render === "function") {
                    that.selectedColumns = that.selectedColumns.concat(data.select);

                    that.columnRenderers.push({
                        columns: data.select,
                        renderer: data.render
                    });
                }

                // Add the data attributes to the th elements
                each(data.select, function (column) {
                    var th = that.headings[column];
                    if (data.type) {
                        th.setAttribute("data-type", data.type);
                    }
                    if (data.format) {
                        th.setAttribute("data-format", data.format);
                    }
                    if (data.hasOwnProperty("sortable")) {
                        th.setAttribute("data-sortable", data.sortable);
                    }

                    if (data.hasOwnProperty("hidden")) {
                        if (data.hidden !== false) {
                            that.columns(column).hide();
                        }
                    }

                    if (data.hasOwnProperty("sort") && data.select.length === 1) {
                        that.columns().sort(data.select[0] + 1, data.sort, true);
                    }
                });
            });
        }

        if (that.hasRows) {
            each(that.data, function (row, i) {
                row.dataIndex = i;
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });

            if (that.selectedColumns.length) {
                each(that.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (that.selectedColumns.indexOf(i) > -1) {
                            each(that.columnRenderers, function (o) {
                                if (o.columns.indexOf(i) > -1) {
                                    cell.innerHTML = o.renderer.call(that, cell.data, cell, row);
                                }
                            });
                        }
                    });
                });
            }

            that.columns().rebuild();
        }

        that.render("header");
    };

    /**
     * Destroy the instance
     * @return {void}
     */
    proto.destroy = function () {
        this.table.innerHTML = this.initialLayout;

        // Remove the className
        classList.remove(this.table, "dataTable-table");

        // Remove the containers
        this.wrapper.parentNode.replaceChild(this.table, this.wrapper);

        this.initialized = false;
    };

    /**
     * Update the instance
     * @return {Void}
     */
    proto.update = function () {
        this.paginate(this);
        this.render("page");

        this.links = [];

        var i = this.pages.length;
        while (i--) {
            var num = i + 1;
            this.links[i] = button(i === 0 ? "active" : "", num, num);
        }

        this.sorting = false;

        this.render("pager");

        this.rows().update();

        this.emit("datatable.update");
    };

    /**
     * Sort rows into pages
     * @return {Number}
     */
    proto.paginate = function () {
        var perPage = this.options.perPage,
            rows = this.activeRows;

        if (this.searching) {
            rows = [];

            each(this.searchData, function (index) {
                rows.push(this.activeRows[index]);
            }, this);
        }

        // Check for hidden columns
        this.pages = rows
            .map(function (tr, i) {
                return i % perPage === 0 ? rows.slice(i, i + perPage) : null;
            })
            .filter(function (page) {
                return page;
            });

        this.totalPages = this.lastPage = this.pages.length;

        return this.totalPages;
    };

    /**
     * Fix column widths
     * @return {Void}
     */
    proto.fixColumns = function () {

        if (this.options.fixedColumns && this.activeHeadings && this.activeHeadings.length) {

            var cells,
                hd = false;

            this.columnWidths = [];

            // If we have headings we need only set the widths on them
            // otherwise we need a temp header and the widths need applying to all cells
            if (this.table.tHead) {
                // Reset widths
                each(this.activeHeadings, function (cell) {
                    cell.style.width = "";
                }, this);

                each(this.activeHeadings, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    cell.style.width = w + "%";
                    this.columnWidths[i] = ow;
                }, this);
            } else {
                cells = [];

                // Make temperary headings
                hd = createElement("thead");
                var r = createElement("tr");
                var c = this.table.tBodies[0].rows[0].cells;
                each(c, function () {
                    var th = createElement("th");
                    r.appendChild(th);
                    cells.push(th);
                });

                hd.appendChild(r);
                this.table.insertBefore(hd, this.body);

                var widths = [];
                each(cells, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    widths.push(w);
                    this.columnWidths[i] = ow;
                }, this);

                each(this.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (this.columns(cell.cellIndex).visible())
                            cell.style.width = widths[i] + "%";
                    }, this);
                }, this);

                // Discard the temp header
                this.table.removeChild(hd);
            }
        }
    };

    /**
     * Fix the container height;
     * @return {Void}
     */
    proto.fixHeight = function () {
        if (this.options.fixedHeight) {
            this.container.style.height = null;
            this.rect = this.container.getBoundingClientRect();
            this.container.style.height = this.rect.height + "px";
        }
    };

    /**
     * Perform a search of the data set
     * @param  {string} query
     * @return {void}
     */
    proto.search = function (query) {
        if (!this.hasRows) return false;

        var that = this;

        query = query.toLowerCase();

        this.currentPage = 1;
        this.searching = true;
        this.searchData = [];

        if (!query.length) {
            this.searching = false;
            this.update();
            this.emit("datatable.search", query, this.searchData);
            classList.remove(this.wrapper, "search-results");
            return false;
        }

        this.clear();

        each(this.data, function (row, idx) {
            var inArray = this.searchData.indexOf(row) > -1;

            // https://github.com/Mobius1/Vanilla-DataTables/issues/12
            var doesQueryMatch = query.split(" ").reduce(function (bool, word) {
                var includes = false;

                for (var x = 0; x < row.cells.length; x++) {
                    if (
                        row.cells[x].textContent.toLowerCase().indexOf(word) > -1 &&
                        that.columns(row.cells[x].cellIndex).visible()
                    ) {
                        includes = true;
                        break;
                    }
                }

                return bool && includes;
            }, true);

            if (doesQueryMatch && !inArray) {
                row.searchIndex = idx;
                this.searchData.push(idx);
            } else {
                row.searchIndex = null;
            }
        }, this);

        classList.add(this.wrapper, "search-results");

        if (!that.searchData.length) {
            classList.remove(that.wrapper, "search-results");

            that.setMessage(that.options.labels.noRows);
        } else {
            that.update();
        }

        this.emit("datatable.search", query, this.searchData);
    };

    /**
     * Change page
     * @param  {int} page
     * @return {void}
     */
    proto.page = function (page) {
        // We don't want to load the current page again.
        if (page == this.currentPage) {
            return false;
        }

        if (!isNaN(page)) {
            this.currentPage = parseInt(page, 10);
        }

        if (page > this.pages.length || page < 0) {
            return false;
        }

        this.render("page");
        this.render("pager");

        this.emit("datatable.page", page);
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    proto.sortColumn = function (column, direction) {
        // Use columns API until sortColumn method is removed
        this.columns().sort(column, direction);
    };

    /**
     * Add new row data
     * @param {object} data
     */
    proto.insert = function (data) {

        var that = this,
            rows = [];
        if (isObject(data)) {
            if (data.headings) {
                if (!that.hasHeadings && !that.hasRows) {
                    var tr = createElement("tr"),
                        th;
                    each(data.headings, function (heading) {
                        th = createElement("th", {
                            html: heading
                        });

                        tr.appendChild(th);
                    });
                    that.head.appendChild(tr);

                    that.header = tr;
                    that.headings = [].slice.call(tr.cells);
                    that.hasHeadings = true;

                    // Re-enable sorting if it was disabled due
                    // to missing header
                    that.options.sortable = that.initialSortable;

                    // Allow sorting on new header
                    that.render("header");
                }
            }

            if (data.data && isArray(data.data)) {
                rows = data.data;
            }
        } else if (isArray(data)) {
            each(data, function (row) {
                var r = [];
                each(row, function (cell, heading) {

                    var index = that.labels.indexOf(heading);

                    if (index > -1) {
                        r[index] = cell;
                    }
                });
                rows.push(r);
            });
        }

        if (rows.length) {
            that.rows().add(rows);

            that.hasRows = true;
        }

        that.update();

        that.fixColumns();
    };

    /**
     * Refresh the instance
     * @return {void}
     */
    proto.refresh = function () {
        if (this.options.searchable) {
            this.input.value = "";
            this.searching = false;
        }
        this.currentPage = 1;
        this.onFirstPage = true;
        this.update();

        this.emit("datatable.refresh");
    };

    /**
     * Truncate the table
     * @param  {mixes} html - HTML string or HTMLElement
     * @return {void}
     */
    proto.clear = function (html) {
        if (this.body) {
            flush(this.body, this.isIE);
        }

        var parent = this.body;
        if (!this.body) {
            parent = this.table;
        }

        if (html) {
            if (typeof html === "string") {
                var frag = doc.createDocumentFragment();
                frag.innerHTML = html;
            }

            parent.appendChild(html);
        }
    };

    /**
     * Export table to various formats (csv, txt or sql)
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.export = function (options) {
        if (!this.hasHeadings && !this.hasRows) return false;

        var headers = this.activeHeadings,
            rows = [],
            arr = [],
            i,
            x,
            str,
            link;

        var defaults = {
            download: true,
            skipColumn: [],

            // csv
            lineDelimiter: "\n",
            columnDelimiter: ",",

            // sql
            tableName: "myTable",

            // json
            replacer: null,
            space: 4
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        var o = extend(defaults, options);

        if (o.type) {
            if (o.type === "txt" || o.type === "csv") {
                // Include headings
                rows[0] = this.header;
            }

            // Selection or whole table
            if (o.selection) {
                // Page number
                if (!isNaN(o.selection)) {
                    rows = rows.concat(this.pages[o.selection - 1]);
                } else if (isArray(o.selection)) {
                    // Array of page numbers
                    for (i = 0; i < o.selection.length; i++) {
                        rows = rows.concat(this.pages[o.selection[i] - 1]);
                    }
                }
            } else {
                rows = rows.concat(this.activeRows);
            }

            // Only proceed if we have data
            if (rows.length) {
                if (o.type === "txt" || o.type === "csv") {
                    str = "";

                    for (i = 0; i < rows.length; i++) {
                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += rows[i].cells[x].textContent + o.columnDelimiter;
                            }
                        }
                        // Remove trailing column delimiter
                        str = str.trim().substring(0, str.length - 1);

                        // Apply line delimiter
                        str += o.lineDelimiter;
                    }

                    // Remove trailing line delimiter
                    str = str.trim().substring(0, str.length - 1);

                    if (o.download) {
                        str = "data:text/csv;charset=utf-8," + str;
                    }
                } else if (o.type === "sql") {
                    // Begin INSERT statement
                    str = "INSERT INTO `" + o.tableName + "` (";

                    // Convert table headings to column names
                    for (i = 0; i < headers.length; i++) {
                        // Check for column skip and column visibility
                        if (
                            o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                            this.columns(headers[i].originalCellIndex).visible()
                        ) {
                            str += "`" + headers[i].textContent + "`,";
                        }
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Begin VALUES
                    str += ") VALUES ";

                    // Iterate rows and convert cell data to column values
                    for (i = 0; i < rows.length; i++) {
                        str += "(";

                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += '"' + rows[i].cells[x].textContent + '",';
                            }
                        }

                        // Remove trailing comma
                        str = str.trim().substring(0, str.length - 1);

                        // end VALUES
                        str += "),";
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Add trailing colon
                    str += ";";

                    if (o.download) {
                        str = "data:application/sql;charset=utf-8," + str;
                    }
                } else if (o.type === "json") {
                    // Iterate rows
                    for (x = 0; x < rows.length; x++) {
                        arr[x] = arr[x] || {};
                        // Iterate columns
                        for (i = 0; i < headers.length; i++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                                this.columns(headers[i].originalCellIndex).visible()
                            ) {
                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent;
                            }
                        }
                    }

                    // Convert the array of objects to JSON string
                    str = JSON.stringify(arr, o.replacer, o.space);

                    if (o.download) {
                        str = "data:application/json;charset=utf-8," + str;
                    }
                }

                // Download
                if (o.download) {
                    // Filename
                    o.filename = o.filename || "datatable_export";
                    o.filename += "." + o.type;

                    str = encodeURI(str);

                    // Create a link to trigger the download
                    link = document.createElement("a");
                    link.href = str;
                    link.download = o.filename;

                    // Append the link
                    body.appendChild(link);

                    // Trigger the download
                    link.click();

                    // Remove the link
                    body.removeChild(link);
                }

                return str;
            }
        }

        return false;
    };

    /**
     * Import data to the table
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.import = function (options) {
        var obj = false;
        var defaults = {
            // csv
            lineDelimiter: "\n",
            columnDelimiter: ","
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        options = extend(defaults, options);

        if (options.data.length || isObject(options.data)) {
            // Import CSV
            if (options.type === "csv") {
                obj = {
                    data: []
                };

                // Split the string into rows
                var rows = options.data.split(options.lineDelimiter);

                if (rows.length) {

                    if (options.headings) {
                        obj.headings = rows[0].split(options.columnDelimiter);

                        rows.shift();
                    }

                    each(rows, function (row, i) {
                        obj.data[i] = [];

                        // Split the rows into values
                        var values = row.split(options.columnDelimiter);

                        if (values.length) {
                            each(values, function (value) {
                                obj.data[i].push(value);
                            });
                        }
                    });
                }
            } else if (options.type === "json") {
                var json = isJson(options.data);

                // Valid JSON string
                if (json) {
                    obj = {
                        headings: [],
                        data: []
                    };

                    each(json, function (data, i) {
                        obj.data[i] = [];
                        each(data, function (value, column) {
                            if (obj.headings.indexOf(column) < 0) {
                                obj.headings.push(column);
                            }

                            obj.data[i].push(value);
                        });
                    });
                } else {
                    console.warn("That's not valid JSON!");
                }
            }

            if (isObject(options.data)) {
                obj = options.data;
            }

            if (obj) {
                // Add the rows
                this.insert(obj);
            }
        }

        return false;
    };
    /**
     * Print the table
     * @return {void}
     */
    proto.print = function () {
        var headings = this.activeHeadings;
        var rows = this.activeRows;
        var table = createElement("table");
        var thead = createElement("thead");
        var tbody = createElement("tbody");

        var tr = createElement("tr");
        each(headings, function (th) {
            tr.appendChild(
                createElement("th", {
                    html: th.textContent
                })
            );
        });

        thead.appendChild(tr);

        each(rows, function (row) {
            var tr = createElement("tr");
            each(row.cells, function (cell) {
                tr.appendChild(
                    createElement("td", {
                        html: cell.textContent
                    })
                );
            });
            tbody.appendChild(tr);
        });

        table.appendChild(thead);
        table.appendChild(tbody);

        // Open new window
        var w = win.open();

        // Append the table to the body
        w.document.body.appendChild(table);

        // Print
        w.print();
    };

    /**
     * Show a message in the table
     * @param {string} message
     */
    proto.setMessage = function (message) {
        var colspan = 1;

        if (this.hasRows) {
            colspan = this.data[0].cells.length;
        }

        this.clear(
            createElement("tr", {
                html: '<td class="dataTables-empty" colspan="' +
                    colspan +
                    '">' +
                    message +
                    "</td>"
            })
        );
    };

    /**
     * Columns API access
     * @return {Object} new Columns instance
     */
    proto.columns = function (columns) {
        return new Columns(this, columns);
    };

    /**
     * Rows API access
     * @return {Object} new Rows instance
     */
    proto.rows = function (rows) {
        return new Rows(this, rows);
    };

    /**
     * Add custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.on = function (event, callback) {
        this.events = this.events || {};
        this.events[event] = this.events[event] || [];
        this.events[event].push(callback);
    };

    /**
     * Remove custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.off = function (event, callback) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        this.events[event].splice(this.events[event].indexOf(callback), 1);
    };

    /**
     * Fire custom event
     * @param  {String} event
     * @return {Void}
     */
    proto.emit = function (event) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        for (var i = 0; i < this.events[event].length; i++) {
            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
        }
    };

    return DataTable;
});
});

function createTableDOM(data, opts, config) {
  var num = config.num,
      denum = config.denum,
      ratio = config.ratio,
      my_region = config.my_region;

  var options = opts || {};
  options.id = options.id || 'myTable';
  var doc = document;
  var nb_features = data.length;
  var column_names = Object.getOwnPropertyNames(data[0]);
  var nb_columns = column_names.length;
  var myTable = doc.createElement('table');
  var headers = doc.createElement('thead');
  var body = doc.createElement('tbody');
  var headers_row = doc.createElement('tr');
  // TODO: Only display ratios values if there is more than 1 variable currently selected
  for (var i = 0; i < nb_columns; i++) {
    var cell = doc.createElement('th');
    var col_name = column_names[i];
    if (num.indexOf(col_name) > -1) {
      cell.innerHTML = 'Num<br><span class="small">' + col_name;
    } else if (denum.indexOf(col_name) > -1) {
      cell.innerHTML = 'Denum<br><span class="small">' + col_name;
    } else if (ratio.indexOf(col_name) > -1) {
      cell.innerHTML = 'Ratio<br><span class="small">' + col_name;
    } else if (col_name === 'rang') {
      cell.innerHTML = 'Rang ';
    } else {
      cell.innerHTML = col_name;
    }
    headers_row.appendChild(cell);
  }
  headers.appendChild(headers_row);
  myTable.appendChild(headers);
  for (var _i = 0; _i < nb_features; _i++) {
    var row = doc.createElement('tr');
    row.id = 'row_' + data[_i].id;
    if (data[_i].id === my_region) {
      row.className = color_highlight;
    }
    for (var j = 0; j < nb_columns; j++) {
      var _cell = doc.createElement('td');
      var _col_name = column_names[j];
      if (num.indexOf(_col_name) > -1 || denum.indexOf(_col_name) > -1 || ratio.indexOf(_col_name) > -1) {
        _cell.innerHTML = Math.round(data[_i][_col_name] * 100) / 10;
      } else {
        _cell.innerHTML = data[_i][_col_name];
      }
      row.appendChild(_cell);
    }
    body.appendChild(row);
  }
  myTable.appendChild(body);
  myTable.setAttribute('id', options.id);
  return myTable;
}

function makeTable(data_no_empty, config) {
  d3.select('.dataTable-wrapper').remove();
  var table = createTableDOM(data_no_empty, undefined, config);
  document.querySelector('#map_section').appendChild(table);
  var dataTable = new vanillaDataTables('#myTable');
  var t = document.querySelector('.dataTable-wrapper');
  t.style.marginTop = '20px';
  t.style.display = 'none';
  t.style.fontSize = '0.7em';
  t.querySelector('.dataTable-top').remove();
  Array.prototype.slice.call(t.querySelectorAll('span.small')).forEach(function (el) {
    el.onclick = function () {
      el.parentElement.click();
    }; // eslint-disable-line no-param-reassign
  });
}

function prepare_dataset(full_dataset, app$$1) {
  app$$1.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name for easier lookup:
  app$$1.feature_names = {};
  full_dataset.forEach(function (elem) {
    app$$1.feature_names[elem.geo] = elem.Nom;
  });
}

/**
* Attach the full_dataset Array to the app Object and create a dictionnary
* allowing to obtain territorial units name from their Id.
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {Array} - The filtered data, containing only the requested variables
*   for the feature of the current study zone,
*    without features containing empty ratios.
*
*/
function filterLevelVar(app$$1, filter_id) {
  // Fetch the name(s) of the ratio (and associated num and denum variable),
  // the name of the targeted region and the current level :
  var _app$current_config = app$$1.current_config,
      num = _app$current_config.num,
      denum = _app$current_config.denum,
      ratio = _app$current_config.ratio,
      current_level = _app$current_config.current_level,
      id_field = _app$current_config.id_field,
      filter_key = _app$current_config.filter_key,
      name_field = _app$current_config.name_field,
      my_region = _app$current_config.my_region;


  var all_variables = ratio.concat(num).concat(denum);

  // Prepare the data:
  var temp = void 0;
  if (filter_id) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && filter_id.indexOf(ft[id_field]) > -1;
    });
  } else if (filter_key) {
    var my_category = app$$1.full_dataset.filter(function (ft) {
      return ft[id_field] === my_region;
    })[0][filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      name: ft[name_field]
    };
    for (var i = 0, len_i = all_variables.length; i < len_i; i++) {
      props_feature[all_variables[i]] = +ft[all_variables[i]];
    }
    return props_feature;
  });

  app$$1.current_data = temp;
}

/**
* Function to prepare the global "variables_info" Array of objects from the array
* containing the readed 'metadata.csv' file.
*
* @param {Array} metadata_indicateurs - The array return by d3.csv.
* @return {void}
*
*/
function prepareVariablesInfo(metadata_indicateurs) {
  console.log(metadata_indicateurs);
  return metadata_indicateurs.filter(function (ft) {
    return ft['Type statistique'] === 'Ratio';
  }).map(function (ft) {
    return {
      ratio: ft['id'],
      num: ft['id1'] + '_' + ft['AnnÃ©e'],
      denum: ft['id2'] + '_' + ft['AnnÃ©e'],
      name: ft['Nom'] + ' (' + ft['AnnÃ©e'] + ')',
      group: ft['ThÃ¨me'],
      methodo: ft['MÃ©thodologie'],
      source: ft['Source'],
      last_update: ft['DerniÃ¨re mise Ã  jour']
    };
  });
}

/**
* Set and apply a new filter (ie. restrict the study zone) on the dataset to be used.
*
* @param {String} filter_type - The name of the filter to use.
* @return {void}
*
*/
function applyFilter(app$$1, filter_type) {
  if (filter_type === 'filter_FR') {
    app$$1.current_config.filter_key = 'Pays';
    filterLevelVar(app$$1);
  } else if (filter_type === 'no_filter') {
    app$$1.current_config.filter_key = undefined;
    filterLevelVar(app$$1);
  } else {
    app$$1.current_config.filter_key = 'type_test';
    filterLevelVar(app$$1);
  }

  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

// TODO : Doc
function changeRegion(app$$1, id_region) {
  app$$1.current_config.my_region = id_region;
  app$$1.current_config.my_region_pretty_name = app$$1.feature_names[app$$1.current_config.my_region];
  if (app$$1.current_config.filter_key !== undefined) {
    filterLevelVar(app$$1);
  }
  // Reset the color to use on the chart/map:
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

/**
*
*
*
*
*/
function addVariable(app$$1, code_ratio) {
  var variable_info = exports.variables_info.filter(function (d) {
    return d.ratio === code_ratio;
  })[0];
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num.push(variable_info.num);
  app$$1.current_config.denum.push(variable_info.denum);
  app$$1.current_config.ratio.push(variable_info.ratio);
  app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  filterLevelVar(app$$1);
}

/**
*
*
*
*
*/
function removeVariable(app$$1, code_ratio) {
  var ix = app$$1.current_config.ratio.indexOf(code_ratio);
  app$$1.current_config.num.splice(ix, 1);
  app$$1.current_config.denum.splice(ix, 1);
  app$$1.current_config.ratio.splice(ix, 1);
  app$$1.current_config.ratio_pretty_name.splice(ix, 1);
  filterLevelVar(app$$1);
}

/**
* Reset the current variables in use.
*
*
*
*/
function resetVariables(app$$1, codes_ratio) {
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num = [];
  app$$1.current_config.denum = [];
  app$$1.current_config.ratio = [];
  app$$1.current_config.ratio_pretty_name = [];

  var _loop = function _loop(i, len) {
    var code_ratio = codes_ratio[i];
    var variable_info = exports.variables_info.filter(function (d) {
      return d.ratio === code_ratio;
    })[0];
    app$$1.current_config.num.push(variable_info.num);
    app$$1.current_config.denum.push(variable_info.denum);
    app$$1.current_config.ratio.push(variable_info.ratio);
    app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  };

  for (var i = 0, len = codes_ratio.length; i < len; i++) {
    _loop(i, len);
  }
  filterLevelVar(app$$1);
}

/**
* Compute the ratio of available (= not empty) values (the "complÃ©tude") within
* the subset currently in use for all the variables in "vars".
*
* @param {Object} app -
* @param {Array} vars -
* @return {Number}
*
*/


/**
* Compute the ratio of population covered by features on which all the variables
* of "vars" are available.
*
* @param {Object} app -
* @param {Array} vars -
* @return {Number}
*
*/
function calcPopCompletudeSubset(app$$1, vars) {
  var _app$current_config3 = app$$1.current_config,
      current_level = _app$current_config3.current_level,
      id_field = _app$current_config3.id_field,
      filter_key = _app$current_config3.filter_key,
      my_region = _app$current_config3.my_region,
      pop_field = _app$current_config3.pop_field;

  // Compute the total population stock of the data (within the "study zone" if any):

  var temp = void 0;
  if (filter_key) {
    var my_category = app$$1.full_dataset.find(function (ft) {
      return ft[id_field] === my_region;
    })[filter_key];
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[filter_key] === my_category;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  var total_pop = 0;
  for (var i = 0, len = temp.length; i < len; i++) {
    total_pop += isNaN(+temp[i][pop_field]) ? 0 : +temp[i][pop_field];
  }
  // Compute the population stock of the dataset if we filter empty features
  // on all the variables of "vars":
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      pop: +ft[pop_field]
    };
    for (var _i = 0, len_i = vars.length; _i < len_i; _i++) {
      props_feature[vars[_i]] = +ft[vars[_i]];
    }
    return props_feature;
  }).filter(function (ft) {
    return vars.map(function (ratio_name) {
      return !!ft[ratio_name];
    }).every(function (v) {
      return v === true;
    });
  });
  var subset_pop = 0;
  for (var _i2 = 0, _len = temp.length; _i2 < _len; _i2++) {
    subset_pop += isNaN(temp[_i2].pop) ? 0 : temp[_i2].pop;
  }
  // Return the ratio of population values ("complÃ©tude") within
  // the study zone selected by the user:
  return Math.round(subset_pop / total_pop * 1000) / 10;
}
/* eslint-enable no-param-reassign */

var TableResumeStat = function () {
  function TableResumeStat(summary_features) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    classCallCheck(this, TableResumeStat);

    var doc = document;
    var nb_features = summary_features.length;
    var column_names = ['Variable', 'Min', 'Moyenne', 'Max', 'Ma rÃ©gion'];
    var nb_columns = column_names.length;
    var container_div = doc.createElement('div');
    var myTable = doc.createElement('table');
    var headers = doc.createElement('thead');
    var table_body = doc.createElement('tbody');
    var headers_row = doc.createElement('tr');
    myTable.className = 'minitable';
    container_div.className = 'minitable_container';
    for (var i = 0; i < nb_columns; i++) {
      var cell = doc.createElement('th');
      cell.innerHTML = column_names[i];
      headers_row.appendChild(cell);
    }
    headers.appendChild(headers_row);
    myTable.appendChild(headers);
    for (var _i = 0; _i < nb_features; _i++) {
      var row = doc.createElement('tr');
      row.id = 'row_' + summary_features[_i].id;
      for (var j = 0; j < nb_columns; j++) {
        var _cell = doc.createElement('td');
        var col_name = column_names[j];
        if (col_name !== 'Variable') {
          _cell.innerHTML = Math.round(summary_features[_i][col_name] * 10) / 10;
        } else {
          _cell.innerHTML = summary_features[_i][col_name];
        }
        row.appendChild(_cell);
      }
      table_body.appendChild(row);
    }
    myTable.appendChild(table_body);
    myTable.setAttribute('id', options.id || 'table_summary');
    container_div.appendChild(myTable);
    document.querySelector('#map_section').appendChild(container_div);
    this.nb_columns = nb_columns;
    this.column_names = column_names;
    this.table_body = table_body;
  }

  createClass(TableResumeStat, [{
    key: 'addFeatures',
    value: function addFeatures(summary_features) {
      for (var i = 0, len = summary_features.length; i < len; i++) {
        this.addFeature(summary_features[i]);
      }
    }
  }, {
    key: 'addFeature',
    value: function addFeature(summary) {
      var row = document.createElement('tr');
      row.id = 'row_' + summary.id;
      for (var j = 0; j < this.nb_columns; j++) {
        var cell = document.createElement('td');
        var col_name = this.column_names[j];
        if (col_name !== 'Variable') {
          cell.innerHTML = Math.round(summary[col_name] * 10) / 10;
        } else {
          cell.innerHTML = summary[col_name];
        }
        row.appendChild(cell);
      }
      this.table_body.appendChild(row);
    }
  }, {
    key: 'removeFeature',
    value: function removeFeature(id_variable) {
      var row = this.table_body.querySelector('tr#row_' + id_variable);
      if (row) row.remove();
    }
  }, {
    key: 'removeAll',
    value: function removeAll() {
      var rows = this.table_body.querySelectorAll('tr');
      for (var i = rows.length - 1; i > -1; i--) {
        rows[i].remove();
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_body.parentElement.parentElement.remove();
      this.table_body = null;
    }
  }]);
  return TableResumeStat;
}();

var svg_bar = d3.select('svg#svg_bar');
var margin = { top: 10, right: 20, bottom: 100, left: 40 };
var margin2 = { top: 430, right: 20, bottom: 15, left: 40 };
var width = +svg_bar.attr('width') - margin.left - margin.right;
var height = +svg_bar.attr('height') - margin.top - margin.bottom;
var height2 = +svg_bar.attr('height') - margin2.top - margin2.bottom;

var nbFt = void 0;
var current_range_brush = [0, 0];
var current_range = [0, 0];
var displayed = void 0;

function getMeanRank(mean_value, ratio_to_use) {
  var mean_rank = app.current_data.map(function (d, i) {
    return [d[ratio_to_use], math_abs(mean_value - d[ratio_to_use]), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

var BarChart1 = function () {
  function BarChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BarChart1);

    this.brushed = function () {
      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return; // ignore brush-by-zoom
      if (!_this.x) {
        console.log('a');return;
      }
      var s = d3.event.selection || _this.x2.range();
      current_range = [math_round(s[0] / (width / nbFt)), math_round(s[1] / (width / nbFt))];
      _this.x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      svg_bar.select('.zoom').call(_this.zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
      _this.update();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(_this.brush_top.move, null);
      _this.brushed_top();
    };

    this.brushed_top = function () {
      if (!_this._focus) {
        console.log('b');return;
      }
      if (!_this.map_elem) {
        console.log('c');return;
      }
      var d3_event = d3.event;
      var ratio_to_use = _this.ratio_to_use;
      var ref_value = _this.ref_value;
      if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
        _this.map_elem.removeRectBrush();
        var s = d3_event.selection;
        current_range_brush = [current_range[0] + math_round(s[0] / (width / displayed)) - 1, current_range[0] + math_round(s[1] / (width / displayed))];
        _this.x.domain(_this.data.slice(current_range_brush[0] + 1, current_range_brush[1]).map(function (ft) {
          return ft.id;
        }));
        app.colors = {};
        _this._focus.selectAll('.bar').style('fill', function (d, i) {
          if (d.id === app.current_config.my_region) {
            app.colors[d.id] = color_highlight;
            return color_highlight;
          } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
            var color = comp(d[ratio_to_use], ref_value, _this.serie_inversed);
            app.colors[d.id] = color;
            return color;
          }
          return color_countries;
        });
        _this.updateMapRegio();
      } else {
        if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
          _this.map_elem.removeRectBrush();
          app.colors = {};
          app.colors[app.current_config.my_region] = color_highlight;
          _this.updateMapRegio();
        }
        _this._focus.selectAll('.bar').style('fill', function (d) {
          return app.colors[d.id] || color_countries;
        });
      }
    };

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var x = d3.scaleBand().range([0, width]).padding(0.1),
        x2 = d3.scaleBand().range([0, width]).padding(0.1),
        y = d3.scaleLinear().range([height, 0]),
        y2 = d3.scaleLinear().range([height2, 0]);

    var xAxis = d3.axisBottom(x);
    var xAxis2 = d3.axisBottom(x2);
    var yAxis = d3.axisLeft(y);

    this.x = x;
    this.x2 = x2;
    this.y = y;
    this.y2 = y2;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.xAxis2 = xAxis2;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var ratio_to_use = available_ratios[0];
    this.ratio_to_use = ratio_to_use;

    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    });
    this.data.sort(function (a, b) {
      return a[ratio_to_use] - b[ratio_to_use];
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.current_ranks = this.data.map(function (d, i) {
      return i + 1;
    });
    nbFt = this.data.length;
    this.mean_value = getMean(this.data.map(function (d) {
      return d[ratio_to_use];
    }));
    this.ref_value = this.data.filter(function (ft) {
      return ft.id === app.current_config.my_region;
    })[0][ratio_to_use];
    svg_bar.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width, height: height });

    var focus = svg_bar.append('g').attrs({
      class: 'focus',
      transform: 'translate(' + margin.left + ', ' + margin.top + ')'
    });

    var context = svg_bar.append('g').attrs({
      class: 'context',
      transform: 'translate(' + margin2.left + ', ' + margin2.top + ')'
    });

    this._focus = focus;
    this.context = context;

    x.domain(this.current_ids);
    y.domain([d3.min(this.data, function (d) {
      return d[ratio_to_use];
    }) - 2, d3.max(this.data, function (d) {
      return d[ratio_to_use];
    })]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    var brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on('brush end', this.brushed);

    var brush_top = d3.brushX().extent([[0, 0], [width, height]]).on('brush end', this.brushed_top);

    var zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
    // .on("zoom", zoomed);
    this.brush_top = brush_top;
    this.brush_bottom = brush_bottom;
    this.zoom = zoom;

    focus.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height + ')' }).call(xAxis);

    focus.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    focus.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = focus.append('g');

    var groupe_line_mean = focus.append('g').attr('class', 'mean');
    groupe_line_mean.append('text').attrs({ x: 60, y: y(this.mean_value) + 20 }).styles({
      display: 'none',
      fill: 'red',
      'fill-opacity': '0.8',
      'font-family': '\'Signika\', sans-serif'
    }).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);

    groupe_line_mean.append('line').attrs({
      x1: 0,
      x2: width,
      y1: y(this.mean_value),
      y2: y(this.mean_value),
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px',
      class: 'mean_line'
    }).style('stroke', 'red');

    groupe_line_mean.append('line').attrs({ x1: 0, x2: width, y1: y(this.mean_value), y2: y(this.mean_value), 'stroke-width': '14px', class: 'transp_mean_line' }).style('stroke', 'transparent').on('mouseover', function () {
      groupe_line_mean.select('text').style('display', 'initial');
    }).on('mouseout', function () {
      groupe_line_mean.select('text').style('display', 'none');
    });

    this.updateMiniBars();

    context.append('g').attr('class', 'brush_bottom').call(brush_bottom).call(brush_bottom.move, x.range());

    focus.append('g').attr('class', 'brush_top').call(brush_top).call(brush_top.move, null);

    this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

    this.completude = svg_bar.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    svg_bar.append('image').attrs({
      x: width + margin.left + 5,
      y: 385,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      // this.data = app.current_data.slice();
      if (!_this.serie_inversed) {
        _this.data.sort(function (a, b) {
          return b[_this.ratio_to_use] - a[_this.ratio_to_use];
        });
      } else {
        _this.data.sort(function (a, b) {
          return a[_this.ratio_to_use] - b[_this.ratio_to_use];
        });
      }
      _this.serie_inversed = !_this.serie_inversed;
      x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      x2.domain(_this.data.map(function (ft) {
        return ft.id;
      }));
      // svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity
      //     .scale(width / (current_range[1] - current_range[0]))
      //     .translate(-current_range[0], 0));
      _this.update();
      // this.updateMiniBars();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(brush_top.move, null);
      _this.map_elem.removeRectBrush();
      svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
    });

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar);

    // Deactivate the brush rect selection on the map + on the chart
    // when he user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', 'none');
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', null);
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Create the menu under the chart allowing to use some useful selections
    // (above or below the mean value and above or below my_region)
    var menu_selection = d3.select('#bar_section').append('div').attr('id', 'menu_selection').styles({ padding: '0 10px 10px 10px', 'text-align': 'center' });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('< Ã  la moyenne').on('click', function () {
      return _this.selectBelowMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('> Ã  la moyenne').on('click', function () {
      return _this.selectAboveMean();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('< Ã  ma rÃ©gion').on('click', function () {
      return _this.selectBelowMyRegion();
    });

    menu_selection.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('> Ã  ma rÃ©gion').on('click', function () {
      return _this.selectAboveMyRegion();
    });

    this.makeTableStat();
  }

  createClass(BarChart1, [{
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      displayed = 0;
      var ratio_to_use = this.ratio_to_use;
      var self = this;
      var bar = this.g_bar.selectAll('.bar').data(this.data);

      bar.attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      }).style('display', function (d) {
        var to_display = _this2.x(d.id) != null;
        if (to_display) {
          displayed += 1;
          return 'initial';
        }
        return 'none';
      }).on('mouseover', function () {
        svg_bar.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar.select('.tooltip');
        tooltip.select('rect').attrs({ width: 0, height: 0 });
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('' + math_round(d[self.ratio_to_use] * 10) / 10);
        var b = tooltip.node().getBoundingClientRect();
        tooltip.select('rect').attrs({
          width: b.width + 20,
          height: b.height + 7.5
        });
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });

      bar.enter().insert('rect', '.mean').attrs(function (d) {
        return {
          class: 'bar',
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      });

      bar.exit().remove();

      this._focus.select('.axis--y').call(this.yAxis);

      var axis_x = this._focus.select('.axis--x').attr('font-size', function () {
        return displayed > 75 ? 6 : 10;
      }).call(this.xAxis);
      axis_x.selectAll('text').attrs(function () {
        if (displayed > 100) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else if (displayed > 20) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else {
          return { dx: '0', dy: '0.71em', transform: null };
        }
      }).style('text-anchor', function () {
        return displayed > 20 ? 'end' : 'middle';
      });

      this.updateMiniBars();
    }
  }, {
    key: 'updateMiniBars',
    value: function updateMiniBars() {
      var _this3 = this;

      var ratio_to_use = this.ratio_to_use;
      var mini_bars = this.context.selectAll('.bar').data(this.data);

      mini_bars.attrs(function (d) {
        return {
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });

      mini_bars.enter().insert('rect').attrs(function (d) {
        return {
          class: 'bar',
          x: _this3.x2(d.id),
          y: _this3.y2(d[ratio_to_use]),
          width: _this3.x2.bandwidth(),
          height: height2 - _this3.y2(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });
      mini_bars.exit().remove();
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this4 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this4.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      } else {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      } else {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this5 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [mean_rank, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      } else {
        current_range_brush = [0, mean_rank + 1];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this6 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      app.colors = {};
      if (!this.serie_inversed) {
        current_range_brush = [0, mean_rank];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      } else {
        current_range_brush = [mean_rank + 1, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this6.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var _this7 = this;

      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      var self = this;
      svg_bar.select('.brush_top').call(self.brush_top.move, null);

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      // const transform = svg_map.node().__zoom;
      // topleft[0] = (topleft[0] - transform.x) / transform.k;
      // topleft[1] = (topleft[1] - transform.y) / transform.k;
      // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
      // bottomright[1] = (bottomright[1] - transform.y) / transform.k;
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, ref_value, this.serie_inversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self._focus.selectAll('.bar').style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      });
      var ids = Object.keys(app.colors);
      var ranks = ids.map(function (d) {
        return _this7.current_ids.indexOf(d.id) > -1;
      }).map(function (d) {
        return _this7.current_ranks[d];
      });
      if (ranks.length > 1) {
        var c1 = ranks[0] - 1;
        var c2 = ranks[ranks.length - 1];
        if (c1 < current_range[0] || c2 > current_range[1]) {
          current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
          svg_bar.select('.brush_bottom').call(self.brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
        }
      } else {
        current_range = [0, this.data.length];
        svg_bar.select('.brush_bottom').call(self.brush_bottom.move, self.x.range());
      }
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        app.colors[id] = undefined;
        d3.select(parent).attr('fill', color_countries);
      } else {
        var color = comp(d.properties[this.ratio_to_use], this.ref_value, this.serie_inversed);
        app.colors[id] = color;
        d3.select(parent).attr('fill', color);
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value = this.data.filter(function (ft) {
          return ft.id === app.current_config.my_region;
        })[0][this.ratio_to_use];
        this.update();
        this.updateContext(0, this.data.length);
        this.updateMapRegio();
        this.updateTableStats();
        svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x.range());
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
      }
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var y = this.y;
      var ratio_to_use = this.ratio_to_use;
      var grp_mean = this._focus.select('.mean');
      this.mean_value = getMean(this.data.map(function (d) {
        return d[ratio_to_use];
      }));
      grp_mean.select('text').attr('y', y(this.mean_value) + 20).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);
      grp_mean.select('.mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
      grp_mean.select('.transp_mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var ratio_to_use = this.ratio_to_use;
      this.data = app.current_data.filter(function (ft) {
        return !!ft[ratio_to_use];
      });

      if (this.serie_inversed) {
        this.data.sort(function (a, b) {
          return b[ratio_to_use] - a[ratio_to_use];
        });
      } else {
        this.data.sort(function (a, b) {
          return a[ratio_to_use] - b[ratio_to_use];
        });
      }
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      nbFt = this.data.length;
      this.ref_value = this.data.find(function (ft) {
        return ft.id === app.current_config.my_region;
      })[ratio_to_use];
      this.x.domain(this.current_ids);
      var min_serie = d3.min(this.data, function (d) {
        return d[ratio_to_use];
      });
      var max_serie = d3.max(this.data, function (d) {
        return d[ratio_to_use];
      });
      var offset_y = (max_serie - min_serie) / 20;
      this.y.domain([min_serie - offset_y, max_serie]);
      this.x2.domain(this.x.domain());
      this.y2.domain(this.y.domain());
      this.updateMeanValue();
      this.update();
      this.updateContext(0, this.data.length);

      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.map_elem.removeRectBrush();
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateTableStats();
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this._focus.remove();
      this.context.remove();
      this.selec_var.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this8 = this;

      var values = this.data.map(function (d) {
        return d[_this8.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.ref_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BarChart1;
}();

var svg_bar$1 = d3.select('#svg_bar');
var margin$1 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$1 = +svg_bar$1.attr('width') - margin$1.left - margin$1.right;
var height$1 = +svg_bar$1.attr('height') - margin$1.top - margin$1.bottom;

var BubbleChart1 = function () {
  function BubbleChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BubbleChart1);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var available_nums = app.current_config.num;
    var ratio_to_use = available_ratios[0];
    var stock_to_use = available_nums[0];
    this.ratio_to_use = ratio_to_use;
    this.stock_to_use = stock_to_use;
    this.my_region_value = ref_data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[ratio_to_use];
    this.data = ref_data.filter(function (ft) {
      return !!ft[ratio_to_use];
    }).slice();
    this.data.forEach(function (ft) {
      // eslint-disable-next-line no-param-reassign
      ft.dist = math_abs(+ft[ratio_to_use] - _this.my_region_value);
    });
    this.data.sort(function (a, b) {
      return b.dist - a.dist;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors();
    this.highlight_selection = [];
    this.serie_inversed = false;
    var draw_group = svg_bar$1.append('g').attr('transform', 'translate(' + margin$1.left + ', ' + margin$1.top + ')');
    draw_group.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height$1 / 2 + ')' });
    this.draw_group = draw_group;

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$1);

    // Compute the "complÃ©tude" value for this ratio:
    this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

    // Create the "complÃ©tude" text:
    this.completude = svg_bar$1.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Create the button allowing to choose
    // if the colors are inversed
    // (like green/red for superior/inferior regions)
    svg_bar$1.append('image').attrs({
      x: width$1 + margin$1.left + 5,
      y: 232.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse'
    }).on('click', function () {
      _this.serie_inversed = !_this.serie_inversed;
      _this.applySelection(_this.highlight_selection.length);
    });

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var selection_close = d3.select(svg_bar$1.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-100px', 'margin-left': '30px', position: 'relative' }).append('p');

    selection_close.append('span').property('value', 'close').attrs({ value: 'close', class: 'type_selection square checked' });
    selection_close.append('span').attrs({ class: 'label_chk' }).html('Les');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).property('value', 5);
    selection_close.append('span').attrs({ class: 'label_chk' }).html('rÃ©gions les plus proches');

    this.bindMenu();

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    this.makeTableStat();
  }

  createClass(BubbleChart1, [{
    key: 'applySelection',
    value: function applySelection(nb) {
      app.colors = {};
      if (nb > 0) {
        var ratio_to_use = this.ratio_to_use;

        this.highlight_selection = this.data.map(function (d) {
          return {
            dist: d.dist,
            ratio: +d[ratio_to_use],
            id: d.id
          };
        });

        this.highlight_selection.sort(function (a, b) {
          return a.dist - b.dist;
        });
        this.highlight_selection = this.highlight_selection.slice(1, nb + 1);
      } else {
        this.highlight_selection = [];
      }
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      var self = this;
      var data = self.data;
      var highlight_selection = self.highlight_selection;
      var my_region_value = self.my_region_value;
      var ratio_to_use = self.ratio_to_use;
      var stock_to_use = self.stock_to_use;

      var _min = void 0;
      var _max = void 0;
      if (highlight_selection.length > 0) {
        var dist_min = math_abs(my_region_value - +d3.min(highlight_selection, function (d) {
          return d.ratio;
        }));
        var dist_max = math_abs(+d3.max(highlight_selection, function (d) {
          return d.ratio;
        }) - my_region_value);
        var dist_axis = Math.max(dist_min, dist_max);
        var margin_min_max = math_round(dist_axis) / 8;
        _min = my_region_value - dist_axis - margin_min_max;
        _max = my_region_value + dist_axis + margin_min_max;
        if (_min > _max) {
          console.log('a');var _ref = [_max, _min];
          _min = _ref[0];
          _max = _ref[1];
        }
      } else {
        var _dist_min = math_abs(my_region_value - d3.min(data, function (d) {
          return d[ratio_to_use];
        }));
        var _dist_max = math_abs(d3.max(data, function (d) {
          return d[ratio_to_use];
        }) - my_region_value);
        var _dist_axis = Math.max(_dist_min, _dist_max);
        var _margin_min_max = math_round(_dist_axis) / 8;
        _min = my_region_value - _dist_axis - _margin_min_max;
        _max = my_region_value + _dist_axis + _margin_min_max;
      }

      this.highlight_selection.forEach(function (elem) {
        app.colors[elem.id] = comp(elem.ratio, my_region_value, _this2.serie_inversed);
      });

      app.colors[app.current_config.my_region] = color_highlight;
      var prop_sizer = new PropSizer(d3.max(data, function (d) {
        return d[stock_to_use];
      }), 30);
      var xScale = d3.scaleLinear().domain([_min, _max]).range([0, width$1]);

      this.draw_group.select('g.axis--x').transition().duration(225).call(d3.axisBottom(xScale));

      var bubbles = this.draw_group.selectAll('.bubble').data(data, function (d) {
        return d.id;
      });

      bubbles.transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries,
          'fill-opacity': d.id === app.current_config.my_region ? 1 : app.colors[d.id] ? 0.7 : 0.3,
          stroke: 'darkgray',
          'stroke-width': 0.75,
          'stroke-opacity': 0.75
        };
      });

      bubbles.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries,
          'fill-opacity': d.id === app.current_config.my_region ? 1 : app.colors[d.id] ? 0.7 : 0.3,
          stroke: 'darkgray',
          'stroke-width': 0.75,
          'stroke-opacity': 0.75
        };
      }).transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          class: 'bubble',
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      }).on('end', function () {
        _this2.draw_group.selectAll('.bubble').on('mouseover', function () {
          svg_bar$1.select('.tooltip').style('display', null);
        }).on('mouseout', function () {
          svg_bar$1.select('.tooltip').style('display', 'none');
        }).on('mousemove', function (d) {
          var tooltip = svg_bar$1.select('.tooltip');
          var _ratio_to_use = self.ratio_to_use;
          var _stock_to_use = self.stock_to_use;
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text('' + d.id);
          tooltip.select('text.value_feature1').text('Ratio: ' + Math.round(d[_ratio_to_use] * 10) / 10);
          tooltip.select('text.value_feature2').text('Stock: ' + Math.round(d[_stock_to_use] * 10) / 10);
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({
            width: b.width + 20,
            height: b.height + 7.5
          });
          tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
        });
      });
      bubbles.exit().transition().duration(225).remove();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.ratio_to_use]);

      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this3 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this3.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:
        var id_to_remove = this.highlight_selection.map(function (ft, i) {
          return ft.id === id ? i : null;
        }).filter(function (ft) {
          return ft;
        })[0];
        this.highlight_selection.splice(id_to_remove, 1);
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value = +d.properties[this.ratio_to_use];
        var color = comp(value, this.my_region_value, this.serie_inversed);
        // app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
        this.highlight_selection.push({
          id: id,
          ratio: value,
          dist: math_abs(value - this.my_region_value)
        });
      }
      this.highlight_selection.sort(function (a, b) {
        return a.dist - b.dist;
      });
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      var _this4 = this;

      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.map_elem.updateLegend();
        this.my_region_value = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.ratio_to_use];
        this.data.forEach(function (ft) {
          // eslint-disable-next-line no-param-reassign
          ft.dist = math_abs(+ft[_this4.ratio_to_use] - _this4.my_region_value);
        });
        this.updateTableStats();
        this.applySelection(this.highlight_selection.length);
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this5 = this;

      this.map_elem.updateLegend();
      this.my_region_value = app.current_data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.ratio_to_use];
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this5.ratio_to_use];
      }).slice();
      this.data.forEach(function (ft) {
        // eslint-disable-next-line no-param-reassign
        ft.dist = math_abs(+ft[_this5.ratio_to_use] - _this5.my_region_value);
      });
      this.data.sort(function (a, b) {
        return b.dist - a.dist;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      var temp = this.highlight_selection.length;
      this.highlight_selection = [];
      this.updateTableStats();
      this.applySelection(temp);
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.stock_to_use = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      }).num;
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        // self.map_elem.removeRectBrush();
        var value = +this.value;
        if (value < 1) {
          this.value = 1;
          return;
        }
        self.applySelection(value);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      this.table_stats.remove();
      this.table_stats = null;
      this.selec_var.remove();
      svg_bar$1.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      d3.select('#menu_selection').select('.nb_select').dispatch('change');
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this6 = this;

      var values = this.data.map(function (d) {
        return d[_this6.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.my_region_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BubbleChart1;
}();

var contextMenu = function () {
  function contextMenu(items) {
    classCallCheck(this, contextMenu);

    if (items) {
      this.setItems(items);
    } else {
      this.items = [];
    }
  }

  createClass(contextMenu, [{
    key: 'addItem',
    value: function addItem(item) {
      this.items.push({
        name: item.name,
        action: item.action
      });
    }
  }, {
    key: 'removeItem',
    value: function removeItem(name) {
      for (var i = this.items.length - 1; i > 0; i--) {
        if (this.items[i].name === name) {
          this.items.splice(i, 1);
          break;
        }
      }
    }
  }, {
    key: 'setItems',
    value: function setItems(items) {
      this.items = [];
      for (var i = 0, nb_items = items.length; i < nb_items; i++) {
        if (items[i].name && items[i].action) {
          this.addItem(items[i]);
        }
      }
    }
  }, {
    key: 'showMenu',
    value: function showMenu(event, parent, items, position) {
      var _this = this;

      if (event.preventDefault) event.preventDefault();
      if (event.stopPropagation) event.stopPropagation();
      if (this.DOMobj) {
        this.hideMenu();
        return;
      }
      if (items) {
        this.setItems(items);
      }

      this.initMenu(parent);
      if (!position) {
        this.DOMobj.style.top = event.clientY + document.body.scrollTop + 'px';
        this.DOMobj.style.left = event.clientX + 'px';
      } else {
        this.DOMobj.style.top = position[1] + 'px';
        this.DOMobj.style.left = position[0] + 'px';
      }
      this.displayed = true;
      setTimeout(function () {
        document.addEventListener('click', function () {
          return _this.hideMenu();
        });
      }, 150);
    }
  }, {
    key: 'hideMenu',
    value: function hideMenu() {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      this.displayed = false;
      document.removeEventListener('click', this.hideMenu);
    }
  }, {
    key: 'initMenu',
    value: function initMenu(parent) {
      if (this.DOMobj && this.DOMobj.parentElement && this.DOMobj.parentElement.removeChild) {
        this.DOMobj.parentElement.removeChild(this.DOMobj);
        this.DOMobj = null;
      }
      var self = this;
      var menu = document.createElement('div');
      var list = document.createElement('ul');
      menu.className = 'context-menu';
      menu.appendChild(list);
      for (var i = 0, nb_item = this.items.length; i < nb_item; i++) {
        var item = document.createElement('li');
        item.setAttribute('data-index', i);
        item.innerHTML = '<span class="context-menu-item-name">' + this.items[i].name + '</span>';
        list.appendChild(item);
        item.onclick = function () {
          var ix = this.getAttribute('data-index');
          self.items[ix].action();
        };
      }
      this.DOMobj = menu;
      parent.appendChild(menu);
    }
  }]);
  return contextMenu;
}();

var svg_bar$2 = d3.select('#svg_bar');
var margin$2 = { top: 20, right: 20, bottom: 40, left: 40 };

var width$2 = +svg_bar$2.attr('width') - margin$2.left - margin$2.right;
var height$2 = +svg_bar$2.attr('height') - margin$2.top - margin$2.bottom;

/** Class representing a scatterplot */
var ScatterPlot2 = function () {
  /**
   * Create a the scatterplot on the `svg_bar` svg element previously defined
   * @param {Array} ref_data - A reference to the subset of the dataset to be used
   * to create the scatterplot (should contain at least two field flagged as ratio
   * in the `app.current_config.ratio` Object).
   */
  function ScatterPlot2(ref_data) {
    var _this = this;

    classCallCheck(this, ScatterPlot2);

    this.brushed = function () {
      if (d3.event && !d3.event.selection) {
        if (d3.event.type === 'end' && d3.event.sourceEvent.type === 'mouseup') {
          _this.map_elem.removeRectBrush();
        }
        app.colors = {};
        app.colors[app.current_config.my_region] = color_highlight;
        _this.update();
        _this.updateMapRegio();
        return;
      }

      resetColors();
      var self = _this;

      var _d3$event$selection = slicedToArray(d3.event.selection, 2),
          topleft = _d3$event$selection[0],
          bottomright = _d3$event$selection[1];

      var range_x = [_this.x.invert(topleft[0]), _this.x.invert(bottomright[0])];
      var range_y = [_this.y.invert(bottomright[1]), _this.y.invert(topleft[1])];
      var t1 = _this.rank_variable1;
      var t2 = _this.rank_variable2;
      _this.data.filter(function (ft) {
        return ft[t1] > range_x[0] && ft[t1] < range_x[1] && ft[t2] > range_y[0] && ft[t2] < range_y[1];
      }).forEach(function (ft) {
        app.colors[ft.id] = comp2(ft[_this.variable1], ft[_this.variable2], self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
      });
      app.colors[app.current_config.my_region] = color_highlight;
      _this.update();
      _this.updateMapRegio();
      _this.map_elem.removeRectBrush();
    };

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var self = this;
    this.variable1 = app.current_config.ratio[0];
    this.variable2 = app.current_config.ratio[1];
    this.rank_variable1 = 'pr_' + this.variable1;
    this.rank_variable2 = 'pr_' + this.variable2;
    this.pretty_name1 = app.current_config.ratio_pretty_name[0];
    this.pretty_name2 = app.current_config.ratio_pretty_name[1];
    this.data = ref_data.filter(function (ft) {
      return !!ft[_this.variable1] && !!ft[_this.variable2];
    }).map(function (d) {
      var res = { id: d.id };
      res[_this.variable1] = d[_this.variable1];
      res[_this.variable2] = d[_this.variable2];
      return res;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    resetColors(this.current_ids);
    this.nbFt = this.data.length;
    computePercentileRank(this.data, this.variable1, this.rank_variable1);
    computePercentileRank(this.data, this.variable2, this.rank_variable2);

    this.x = d3.scaleLinear().range([0, width$2]).nice();
    this.y = d3.scaleLinear().range([height$2, 0]).nice();
    this.xAxis = d3.axisBottom(this.x).ticks(12);
    this.yAxis = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);
    this.xAxis2 = d3.axisBottom(this.x).ticks(12);
    this.yAxis2 = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);

    this.brush = d3.brush().extent([[0, 0], [width$2, height$2]]).on('brush end', this.brushed);

    this.xInversed = false;
    this.yInversed = false;
    this.ref_value1 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable1];
    this.ref_value2 = this.data.find(function (d) {
      return d.id === app.current_config.my_region;
    })[this.variable2];

    this.plot = svg_bar$2.append('g').attr('transform', 'translate(' + [margin$2.left, margin$2.top] + ')');

    this.plot.append('defs').append('svg:clipPath').attr('id', 'clip').append('svg:rect').attrs({
      width: width$2,
      height: height$2,
      x: 0,
      y: 0
    });

    this.scatter = this.plot.append('g').attr('id', 'scatterplot').attr('clip-path', 'url(#clip)');

    this.scatter.append('g').attr('class', 'brush').call(this.brush);

    this.x.domain(d3.extent(this.data, function (d) {
      return d[_this.rank_variable1];
    })).nice();
    this.y.domain(d3.extent(this.data, function (d) {
      return d[_this.rank_variable2];
    })).nice();
    this.mean_variable1 = _getPR(getMean(this.data.map(function (d) {
      return d[_this.variable1];
    })), this.data.map(function (d) {
      return d[_this.variable1];
    }));
    this.mean_variable2 = _getPR(getMean(this.data.map(function (d) {
      return d[_this.variable2];
    })), this.data.map(function (d) {
      return d[_this.variable2];
    }));

    this.makeGrid();

    var groupe_line_mean = this.plot.append('g').attr('clip-path', 'url(#clip)').attr('class', 'mean');
    groupe_line_mean.append('line').attr('clip-path', 'url(#clip)').attrs({
      id: 'mean_x',
      x1: this.x(this.mean_variable1),
      x2: this.x(this.mean_variable1),
      y1: 0,
      y2: width$2,
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).style('stroke', 'red');
    groupe_line_mean.append('line').style('stroke', 'red').attrs({
      id: 'mean_y',
      x1: 0,
      x2: width$2,
      y1: this.y(this.mean_variable2),
      y2: this.y(this.mean_variable2),
      'clip-path': 'url(#clip)',
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    });

    this.plot.append('g').attrs({
      class: 'x axis', id: 'axis--x', transform: 'translate(0, ' + height$2 + ')'
    }).call(this.xAxis);

    this.plot.append('g').attrs({ class: 'y axis', id: 'axis--y', opacity: 0.9 }).call(this.yAxis);

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(this.plot);

    this.prepareTitleAxis();

    svg_bar$2.append('image').attrs({
      x: margin$2.left + width$2 / 2 - 20 - svg_bar$2.select('#title-axis-x').node().getBoundingClientRect().width / 2,
      y: margin$2.top + height$2 + margin$2.bottom / 2 - 2.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_x'
    }).on('click', function () {
      _this.xInversed = !_this.xInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        self.data[i][self.rank_variable1] = 100 - self.data[i][self.rank_variable1];
      }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    svg_bar$2.append('image').attrs({
      x: margin$2.left / 2 - 20,
      y: margin$2.top + height$2 / 2 + svg_bar$2.select('#title-axis-y').node().getBoundingClientRect().height / 2 + 5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_plus.png',
      id: 'img_reverse_y'
    }).on('click', function () {
      _this.yInversed = !_this.yInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        _this.data[i][_this.rank_variable2] = 100 - _this.data[i][_this.rank_variable2];
      }
      if (_this.last_map_selection) {
        _this.map_elem.callBrush(_this.last_map_selection);
      } else {
        _this.update();
      }
    });

    // Compute the "complÃ©tude" value for this ratio:
    this.completude_value = calcPopCompletudeSubset(app, [this.variable1, this.variable2]);

    // Create the "complÃ©tude" text:
    this.completude = svg_bar$2.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };
    // this.update();
    this.makeTableStat();
  }

  /**
   * Create the underlying grey grid
   */


  createClass(ScatterPlot2, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#scatterplot').attrs({
        class: 'grid grid-x', transform: 'translate(0, ' + height$2 + ')'
      }).call(this.xAxis2.tickSize(-height$2).tickFormat(''));
      this.plot.insert('g', '#scatterplot').attr('class', 'grid grid-y').call(this.yAxis2.tickSize(-width$2).tickFormat(''));
      this.plot.selectAll('.grid').selectAll('line').attr('stroke', 'lightgray');
    }

    /**
     * Create the title of the X and Y axis with the associated context menu
     * displayed when they are clicked and allowing to select an other variable
     * for this axis.
     */

  }, {
    key: 'prepareTitleAxis',
    value: function prepareTitleAxis() {
      var _this2 = this;

      var self = this;
      this.menuX = new contextMenu();
      this.menuY = new contextMenu();
      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this2.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this2.changeVariableY(elem);
          }
        };
      });

      svg_bar$2.append('text').attrs({
        id: 'title-axis-x',
        x: margin$2.left + width$2 / 2,
        y: margin$2.top + height$2 + margin$2.bottom / 2 + 10
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable1).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuY.displayed) {
          self.menuY.hideMenu();
        }
        self.menuX.showMenu(d3.event, document.body, self.itemsX, [bbox.left - 20, bbox.top + 20]);
      });

      svg_bar$2.append('text').attrs({
        id: 'title-axis-y',
        x: margin$2.left / 2,
        y: margin$2.top + height$2 / 2 - 10,
        transform: 'rotate(-90, ' + margin$2.left / 2 + ', ' + (margin$2.top + height$2 / 2) + ')'
      }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable2).on('click', function () {
        var bbox = this.getBoundingClientRect();
        if (self.menuX.displayed) {
          self.menuX.hideMenu();
        }
        self.menuY.showMenu(d3.event, document.body, self.itemsY, [bbox.left, bbox.bottom + 10]);
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var self = this;
      var data = self.data;
      var rank_variable1 = this.rank_variable1;
      var rank_variable2 = this.rank_variable2;
      var x = this.x;
      var y = this.y;
      var default_color = 'gray';
      var dots = this.scatter.selectAll('.dot').data(data, function (d) {
        return d.id;
      });

      dots.attrs(function (d) {
        return {
          r: 5,
          cx: x(d[rank_variable1]),
          cy: y(d[rank_variable2])
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      });

      dots.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      }).attrs(function (d) {
        return {
          r: 5,
          cx: x(d[rank_variable1]),
          cy: y(d[rank_variable2]),
          class: 'dot'
        };
      }).call(function (selection) {
        selection.on('mouseover.tooltip', function () {
          svg_bar$2.select('.tooltip').style('display', null);
        }).on('mousemove.tooltip', function (d) {
          var tooltip = svg_bar$2.select('.tooltip').attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 35] + ')');
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text('' + d.id);
          tooltip.select('text.value_feature1').text(self.variable1 + ' (rang) : ' + Math.round(d[self.rank_variable1] * 10) / 10 + '/100');
          tooltip.select('text.value_feature2').text(self.variable1 + ' (valeur) : ' + Math.round(d[self.variable1] * 10) / 10);
          tooltip.select('text.value_feature3').text(self.variable2 + ' (rang) : ' + Math.round(d[self.rank_variable2] * 10) / 10 + '/100');
          tooltip.select('text.value_feature4').text(self.variable2 + ' (valeur) : ' + Math.round(d[self.variable2] * 10) / 10);
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({ width: b.width + 20, height: b.height + 7.5 });
        }).on('mouseout.tooltip', function () {
          svg_bar$2.select('.tooltip').style('display', 'none');
        });
      });
      dots.exit().transition().duration(225).remove();
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, [this.variable1, this.variable2]);
      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this3 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this3.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      if (!event || !event.selection) {
        this.last_map_selection = undefined;
        return;
      }
      svg_bar$2.select('.brush').call(this.brush.move, null);
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      this.last_map_selection = [topleft, bottomright];
      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (self.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value1 = d.properties[self.variable1];
            var value2 = d.properties[self.variable2];
            var color = comp2(value1, value2, self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self.update();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value1 = d.properties[this.variable1];
        var value2 = d.properties[this.variable2];
        var color = comp2(value1, value2, this.ref_value1, this.ref_value2, this.xInversed, this.yInversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
      }
      this.update();
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var _this4 = this;

      this.mean_variable1 = _getPR(getMean(this.data.map(function (d) {
        return d[_this4.variable1];
      })), this.data.map(function (d) {
        return d[_this4.variable1];
      }));
      this.mean_variable2 = _getPR(getMean(this.data.map(function (d) {
        return d[_this4.variable2];
      })), this.data.map(function (d) {
        return d[_this4.variable2];
      }));
      var grp_mean = this.plot.select('g.mean');
      grp_mean.select('#mean_x').transition().duration(225).attrs({
        x1: this.x(this.mean_variable1),
        x2: this.x(this.mean_variable1)
      });
      grp_mean.select('#mean_y').transition().duration(225).attrs({
        y1: this.y(this.mean_variable2),
        y2: this.y(this.mean_variable2)
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      if (app.current_config.filter_key !== undefined) {
        this.changeStudyZone();
      } else {
        this.ref_value1 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable1];
        this.ref_value2 = this.data.find(function (d) {
          return d.id === app.current_config.my_region;
        })[this.variable2];
        this.map_elem.removeRectBrush();
        this.map_elem.updateLegend();
        this.map_elem.resetColors(this.current_ids);
        this.update();
      }
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this5 = this;

      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this5.variable1] && !!ft[_this5.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this5.variable1] = d[_this5.variable1];
        res[_this5.variable2] = d[_this5.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);

      this.xInversed = false;
      this.yInversed = false;
      var tmp_my_region = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0];
      this.ref_value1 = tmp_my_region[this.variable1];
      this.ref_value2 = tmp_my_region[this.variable2];

      this.x.domain(d3.extent(this.data, function (d) {
        return d[_this5.rank_variable1];
      })).nice();
      this.y.domain(d3.extent(this.data, function (d) {
        return d[_this5.rank_variable2];
      })).nice();
      this.map_elem.removeRectBrush();
      this.updateItemsCtxMenu();
      this.updateMeanValue();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'changeVariableX',
    value: function changeVariableX(code_variable) {
      var _this6 = this;

      this.variable1 = code_variable;
      this.rank_variable1 = 'pr_' + this.variable1;
      this.pretty_name1 = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      }).name;
      svg_bar$2.select('#title-axis-x').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this6.variable1] && !!ft[_this6.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this6.variable1] = d[_this6.variable1];
        res[_this6.variable2] = d[_this6.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value1 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable1];
      this.x.domain(d3.extent(this.data, function (d) {
        return d[_this6.rank_variable1];
      })).nice();
      // this.y.domain(d3.extent(this.data, d => d[this.rank_variable2])).nice();
      this.updateMeanValue();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'changeVariableY',
    value: function changeVariableY(code_variable) {
      var _this7 = this;

      this.variable2 = code_variable;
      this.rank_variable2 = 'pr_' + this.variable2;
      this.pretty_name2 = exports.variables_info.find(function (ft) {
        return ft.ratio === code_variable;
      }).name;
      svg_bar$2.select('#title-axis-y').text(code_variable);
      // TODO: Also change the position of the button alowing to inverse the serie
      this.updateItemsCtxMenu();
      this.data = app.current_data.filter(function (ft) {
        return !!ft[_this7.variable1] && !!ft[_this7.variable2];
      }).map(function (d) {
        var res = { id: d.id };
        res[_this7.variable1] = d[_this7.variable1];
        res[_this7.variable2] = d[_this7.variable2];
        return res;
      });
      this.current_ids = this.data.map(function (d) {
        return d.id;
      });
      resetColors();
      this.nbFt = this.data.length;
      computePercentileRank(this.data, this.variable1, this.rank_variable1);
      computePercentileRank(this.data, this.variable2, this.rank_variable2);
      this.ref_value2 = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      })[this.variable2];
      // this.x.domain(d3.extent(this.data, d => d[this.rank_variable1])).nice();
      this.y.domain(d3.extent(this.data, function (d) {
        return d[_this7.rank_variable2];
      })).nice();
      this.updateMeanValue();
      this.updateMapRegio();
      this.updateTableStat();
      this.update();
    }
  }, {
    key: 'updateItemsCtxMenu',
    value: function updateItemsCtxMenu() {
      var _this8 = this;

      this.itemsX = app.current_config.ratio.filter(function (elem) {
        return elem !== _this8.variable2;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this8.changeVariableX(elem);
          }
        };
      });
      this.itemsY = app.current_config.ratio.filter(function (elem) {
        return elem !== _this8.variable1;
      }).map(function (elem) {
        return {
          name: elem,
          action: function action() {
            return _this8.changeVariableY(elem);
          }
        };
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this9 = this;

      this.itemsX.push({
        name: code_variable,
        action: function action() {
          return _this9.changeVariableX(code_variable);
        }
      });
      this.itemsY.push({
        name: code_variable,
        action: function action() {
          return _this9.changeVariableY(code_variable);
        }
      });
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      var _this10 = this;

      // Remove the variable from the X and Y list of items:
      for (var i = this.itemsX.length - 1; i > -1; i--) {
        if (this.itemsX[i].name === code_variable) {
          this.itemsX.splice(i, 1);
          break;
        }
      }
      for (var _i = this.itemsY.length - 1; _i > -1; _i--) {
        if (this.itemsY[_i].name === code_variable) {
          this.itemsY.splice(_i, 1);
          break;
        }
      }

      // If the variable to remove was currently used for drawing this chart,
      // set a new variable for this axis and redraw the chart:
      if (code_variable === this.variable1) {
        var new_var_x = this.itemsX.filter(function (ft) {
          return ft.name !== _this10.variable2;
        })[0].name;
        this.changeVariableX(new_var_x);
      } else if (code_variable === this.variable2) {
        var new_var_y = this.itemsY.filter(function (ft) {
          return ft.name !== _this10.variable1;
        })[0].name;
        this.changeVariableY(new_var_y);
      }
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$2.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this11 = this;

      var values1 = this.data.map(function (d) {
        return d[_this11.variable1];
      });
      var values2 = this.data.map(function (d) {
        return d[_this11.variable2];
      });
      var features = [{
        Min: d3.min(values1),
        Max: d3.max(values1),
        Moyenne: getMean(values1),
        id: this.variable1,
        Variable: this.variable1,
        'Ma rÃ©gion': this.ref_value1
      }, {
        Min: d3.min(values2),
        Max: d3.max(values2),
        Moyenne: getMean(values2),
        id: this.variable2,
        Variable: this.variable2,
        'Ma rÃ©gion': this.ref_value2
      }];
      return features;
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return ScatterPlot2;
}();

var svg_bar$3 = d3.select('#svg_bar');
var margin$3 = { top: 70, right: 70, bottom: 70, left: 70 };

var width$3 = +svg_bar$3.attr('width') - margin$3.left - margin$3.right;
var height$3 = +svg_bar$3.attr('height') - margin$3.top - margin$3.bottom;

var wrap = function wrap(_text, _width) {
  _text.each(function () {
    var text = d3.select(this),
        words = text.text().split(/\s+/).reverse(),
        lineHeight = 1.4,
        // ems
    y = text.attr('y'),
        x = text.attr('x'),
        dy = parseFloat(text.attr('dy'));
    var line = [],
        lineNumber = 0;
    var tspan = text.text(null).append('tspan').attr('x', x).attr('y', y).attr('dy', dy + 'em');
    var word = words.pop();
    while (word) {
      line.push(word);
      tspan.text(line.join(' '));
      if (tspan.node().getComputedTextLength() > _width) {
        line.pop();
        tspan.text(line.join(' '));
        line = [word];
        tspan = text.append('tspan').attr('x', x).attr('y', y).attr('dy', ++lineNumber * lineHeight + dy + 'em').text(word);
      }
      word = words.pop();
    }
  });
};

var move = function move(array, from, to) {
  array.splice(to, 0, array.splice(from, 1)[0]);
  return array;
};

var swap = function swap(array, ix1, ix2) {
  // eslint-disable-line no-param-reassign
  var _ref = [array[ix2], array[ix1]];
  array[ix1] = _ref[0];
  array[ix2] = _ref[1];
  return array;
};

var prepare_data_radar_default = function prepare_data_radar_default(data, variables) {
  var features = [];
  // Prepare the data for "My RÃ©gion":
  var v_my_region = data.find(function (d) {
    return d.id === app.current_config.my_region;
  });
  var ojb_my_region = {
    name: app.current_config.my_region,
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    ojb_my_region.axes.push({
      axis: t, value: v_my_region[_v]
    });
  });
  features.push(ojb_my_region);
  var obj_mean = {
    name: 'Moyenne du contexte d\'Ã©tude',
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    obj_mean.axes.push({
      axis: t,
      value: _getPR(getMean(data.map(function (d) {
        return d[_v];
      })), data.map(function (d) {
        return d[_v];
      }))
    });
  });
  features.push(obj_mean);
  return features;
};

var prepare_data_radar_ft = function prepare_data_radar_ft(data, variables, ft) {
  var ft_values = data.find(function (d) {
    return d.id === ft;
  });
  if (!ft_values) {
    return null;
  }
  var obj = {
    name: ft,
    axes: []
  };
  variables.forEach(function (v) {
    var t = exports.variables_info.find(function (d) {
      return d.ratio === v;
    }).name;
    var _v = 'pr_' + v;
    obj.axes.push({
      axis: t, value: ft_values[_v]
    });
  });
  return obj;
};

var RadarChart3 = function () {
  function RadarChart3(data, options) {
    var _this = this;

    classCallCheck(this, RadarChart3);

    var cfg = {
      w: width$3, // Width of the circle
      h: height$3, // Height of the circle
      margin: margin$3, // The margins of the SVG
      levels: 10, // How many levels or inner circles should there be drawn
      maxValue: 100, // What is the value that the biggest circle will represent
      labelFactor: 1.3, // How much farther than the radius of the outer circle should the labels be placed
      wrapWidth: 85, // The number of pixels after which a label needs to be given a new line
      opacityArea: 0.35, // The opacity of the area of the blob
      dotRadius: 4, // The size of the colored circles of each blog
      opacityCircles: 0.1, // The opacity of the circles of each blob
      strokeWidth: 2, // The width of the stroke around each blob
      roundStrokes: false, // If true the area and stroke will follow a round path (cardinal-closed)
      color: d3.scaleOrdinal(d3.schemeCategory10), // Color function,
      format: '.2', // The format string to be used by d3.format
      unit: '%', // The unit to display after the number on the axis and point tooltips (like $, â‚¬, %, etc)
      legend: false,
      allowInverseData: true
    };
    this.cfg = cfg;
    // Put all of the options into a variable called cfg
    if (typeof options !== 'undefined') {
      for (var i in options) {
        if (typeof options[i] !== 'undefined') {
          cfg[i] = options[i];
        }
      }
    }

    this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (cfg.w / 2 + cfg.margin.left) + ',' + (cfg.h / 2 + cfg.margin.top) + ')');

    this.prepareData(data);
    this.drawAxisGrid();
    this.drawArea();
    this.handleLegend();
    // Compute the "complÃ©tude" value for these ratios:
    this.completude_value = calcPopCompletudeSubset(app, this.variables);

    // Create the "complÃ©tude" text:
    this.completude = svg_bar$3.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    if (cfg.allowInverseData) {
      this.inverse_data = function (field) {
        var data_length = _this.data.length;
        if (!field) {
          for (var _i = 0; _i < data_length; _i++) {
            var ax = _this.data[_i].axes;
            for (var j = 0; j < ax.length; j++) {
              ax[j].value = 100 - ax[j].value;
            }
          }
        } else {
          for (var _i2 = 0; _i2 < data_length; _i2++) {
            var _ax = _this.data[_i2].axes;
            for (var _j = 0; _j < _ax.length; _j++) {
              if (_ax[_j].axis === field) {
                _ax[_j].value = 100 - _ax[_j].value;
              }
            }
          }
        }
        _this.update();
      };
    }
    this.makeTableStat();
  }

  createClass(RadarChart3, [{
    key: 'add_element',
    value: function add_element(elem) {
      var _this2 = this;

      var n_axis = elem.axes.map(function (i) {
        return i.axis;
      });
      if (!(JSON.stringify(n_axis) === JSON.stringify(this.allAxis))) {
        throw new Error('Expected element with same axes name than existing data.');
      }
      this.data.push(elem);
      this.displayed_ids.push(elem.name);
      for (var j = 0; j < this.data.length; j++) {
        var on_axes = [];
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          on_axes.push(this.data[j].name);
        }
      }

      var self = this;
      var cfg = this.cfg;
      var n = this.data.length - 1;
      var blobWrapper = this.g.insert('g', '.radarCircleWrapper').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', this.radarLine(elem.axes)).style('fill', cfg.color(n)).style('fill-opacity', 0).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0.1);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.7);
      }).on('mouseout', function () {
        // Bring back all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });
      // .on('click', function () {
      //   const p = this.parentElement;
      //   if (p.previousSibling.className !== 'tooltip') {
      //     const group = g.node();
      //     group.insertBefore(p, group.querySelector('.tooltip'));
      //     const new_order = [];
      //     g.selectAll('.radarWrapper').each(d => new_order.push(d.name));
      //     new_order.reverse();
      //     updateLegend(new_order);
      //   }
      // });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', this.radarLine(elem.axes)).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', cfg.color(n)).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(elem.axes).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', function (d) {
        return cfg.color(d.id);
      }).style('fill-opacity', 0.8);

      blobWrapper.node().__data__ = elem;

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = this.g.insert('g', '.tooltip').attr('id', elem.name.indexOf(' ') > -1 ? 'ctx' : elem.name).attr('class', 'radarCircleWrapper');

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(elem.axes).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return _this2.rScale(d.value) * math_cos(_this2.angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return _this2.rScale(d.value) * math_sin(_this2.angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        self.g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(this.Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        self.g.select('.tooltip').transition().style('display', 'none').text('');
      });
    }
  }, {
    key: 'changeOrder',
    value: function changeOrder() {
      this.data = this.data.slice(1, this.data.length).concat(this.data.slice(0, 1));
      this.update();
    }
  }, {
    key: 'prepareData',
    value: function prepareData(data) {
      var _this3 = this;

      // Set the minimum number of variables to keep selected for this kind of chart:
      app.current_config.nb_var = 3;
      this.variables = app.current_config.ratio;
      this.ref_data = data.slice().filter(function (ft) {
        return _this3.variables.map(function (v) {
          return !!ft[v];
        }).every(function (d) {
          return d === true;
        });
      });
      this.rank_variables = this.variables.map(function (d) {
        return 'pr_' + d;
      });
      this.variables.forEach(function (d, i) {
        computePercentileRank(_this3.ref_data, d, _this3.rank_variables[i]);
      });
      this.data = prepare_data_radar_default(this.ref_data, this.variables);
      this.displayed_ids = this.data.map(function (d) {
        return d.name;
      });
      this.current_ids = this.ref_data.map(function (d) {
        return d.id;
      });
      this.id_my_region = app.current_config.my_region;
      // const ref_ids = [];
      // If the supplied maxValue is smaller than the actual one, replace by the max in the data
      // var maxValue = max(cfg.maxValue, d3.max(data, function(i){return d3.max(i.map(function(o){return o.value;}))}));
      var maxValue = 0;
      for (var j = 0; j < this.data.length; j++) {
        var on_axes = [];
        for (var i = 0; i < this.data[j].axes.length; i++) {
          this.data[j].axes[i].id = this.data[j].name;
          // on_axes.push(this.data[j].name);
          if (this.data[j].axes[i].value > maxValue) {
            maxValue = this.data[j].axes[i].value;
          }
          // ref_ids.push(on_axes);
        }
      }

      this.maxValue = math_max(this.cfg.maxValue, maxValue);
      this.allAxis = this.data[0].axes.map(function (i) {
        return i.axis;
      }); // Names of each axis
      this.total = this.allAxis.length; // The number of different axes
      this.radius = Math.min(this.cfg.w / 2, this.cfg.h / 2); // Radius of the outermost circle
      this.Format = d3.format(this.cfg.format); // Formatting
      this.angleSlice = Math.PI * 2 / this.total; // The width in radians of each "slice"
      // Scale for the radius
      this.rScale = d3.scaleLinear().range([0, this.radius]).domain([0, this.maxValue]);
      // The radial line function
      this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
        return _this3.rScale(d.value);
      }).angle(function (d, i) {
        return i * _this3.angleSlice;
      });
    }
  }, {
    key: 'drawAxisGrid',
    value: function drawAxisGrid() {
      var self = this;
      var cfg = this.cfg;
      var g = this.g;
      var radius = this.radius;
      var Format = this.Format;
      var maxValue = this.maxValue;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      var labelClicked = function labelClicked() {
        var ix = +this.id;
        if (ix + 1 === self.allAxis.length) {
          for (var i = 0; i < self.data.length; i++) {
            swap(self.data[i].axes, ix, 0);
          }
        } else {
          var new_ix = ix + 1;
          for (var _i3 = 0; _i3 < self.data.length; _i3++) {
            move(self.data[_i3].axes, ix, new_ix);
          }
        }
        self.update();
      };

      var labelCtxMenu = function labelCtxMenu(label) {
        d3.event.stopPropagation();
        d3.event.preventDefault();
        var ix = +this.id;
        self.inverse_data(label);
      };

      var axisGrid = g.append('g').attr('class', 'axisWrapper');

      // Draw the background circles
      axisGrid.selectAll('.levels').data(d3.range(1, cfg.levels + 1).reverse()).enter().append('circle').attr('class', 'gridCircle').attr('r', function (d) {
        return radius / cfg.levels * d;
      }).style('fill', '#CDCDCD').style('stroke', '#CDCDCD').style('fill-opacity', cfg.opacityCircles).style('filter', 'url(#glow)');

      // Text indicating at what % each level is
      axisGrid.selectAll('.axisLabel').data(d3.range(1, cfg.levels + 1).reverse()).enter().append('text').attr('class', 'axisLabel').attr('x', 4).attr('y', function (d) {
        return -d * radius / cfg.levels;
      }).attr('dy', '0.4em').style('font-size', '10px').attr('fill', '#737373').text(function (d) {
        return Format(maxValue * d / cfg.levels) + cfg.unit;
      });

      // Create the straight lines radiating outward from the center
      var axis = axisGrid.selectAll('.axis').data(this.allAxis).enter().append('g').attr('class', 'axis');
      // Append the lines
      axis.append('line').attr('x1', 0).attr('y1', 0).attr('x2', function (d, i) {
        return rScale(maxValue * 1.1) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y2', function (d, i) {
        return rScale(maxValue * 1.1) * math_sin(angleSlice * i - HALF_PI);
      }).attr('class', 'line').style('stroke', 'white').style('stroke-width', '2px');

      // Append the labels at each axis
      axis.append('text').attr('class', 'legend').style('font-size', '11px').attr('id', function (d, i) {
        return i;
      }).attr('text-anchor', 'middle').attr('dy', '0.35em').attr('x', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI);
      }).text(function (d) {
        return d;
      }).on('click', labelClicked).on('contextmenu', cfg.allowInverseData ? labelCtxMenu : null).call(wrap, cfg.wrapWidth);

      // Filter for the outside glow
      var filter = g.append('defs').append('filter').attr('id', 'glow');
      filter.append('feGaussianBlur').attr('stdDeviation', '2.5').attr('result', 'coloredBlur');
      var feMerge = filter.append('feMerge');
      feMerge.append('feMergeNode').attr('in', 'coloredBlur');
      feMerge.append('feMergeNode').attr('in', 'SourceGraphic');

      this.axisGrid = axisGrid;
    }
  }, {
    key: 'handleLegend',
    value: function handleLegend() {
      var cfg = this.cfg;
      if (cfg.legend !== false && _typeof(cfg.legend) === 'object') {
        var names = this.data.map(function (el) {
          return el.name;
        });
        if (cfg.legend.title) {
          this.legendZone.append('text').attr('class', 'title').attr('transform', 'translate(0, -20)').attr('x', cfg.w - 70).attr('y', 10).attr('font-size', '12px').attr('fill', '#404040').text(cfg.legend.title);
        }
        var legend = this.legendZone.selectAll('g').data(names);
        var legendEnter = legend.enter().append('g');

        // Create rectangles markers
        legendEnter.append('rect').attr('x', cfg.w - 65).attr('y', function (d, i) {
          return i * 20;
        }).attr('width', 10).attr('height', 10).style('fill', function (d) {
          return cfg.color(d);
        });
        // Create labels
        legendEnter.append('text').attr('x', cfg.w - 52).attr('y', function (d, i) {
          return i * 20 + 9;
        }).attr('font-size', '11px').attr('fill', '#737373').text(function (d) {
          return d;
        });

        legend.merge(legendEnter).selectAll('rect').attr('y', function (d, i) {
          return i * 20;
        }).style('fill', function (d) {
          return cfg.color(d);
        });

        legend.merge(legendEnter).selectAll('text').attr('x', cfg.w - 52).attr('y', function (d, i) {
          return i * 20 + 9;
        }).text(function (d) {
          return d;
        });

        legend.exit().remove();
      }
    }
  }, {
    key: 'drawArea',
    value: function drawArea() {
      var _this4 = this;

      var cfg = this.cfg;
      var g = this.g;
      var Format = this.Format;
      var rScale = this.rScale;
      var angleSlice = this.angleSlice;

      // Create a wrapper for the blobs
      var blobWrapper = g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarWrapper');

      // Append the backgrounds
      blobWrapper.append('path').attr('class', 'radarArea').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('fill', function (d, i) {
        return cfg.color(i);
      }).style('fill-opacity', 0).style('fill-opacity', cfg.opacityArea).on('mouseover', function () {
        // Dim all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', 0.1);
        // Bring back the hovered over blob
        d3.select(this).transition().duration(200).style('fill-opacity', 0.7);
      }).on('mouseout', function () {
        // Bring back all blobs
        blobWrapper.selectAll('.radarArea').transition().duration(200).style('fill-opacity', cfg.opacityArea);
      });
      // .on('click', function () {
      //   const p = this.parentElement;
      //   if (p.previousSibling.className !== 'tooltip') {
      //     const group = g.node();
      //     group.insertBefore(p, group.querySelector('.tooltip'));
      //     const new_order = [];
      //     g.selectAll('.radarWrapper').each(d => new_order.push(d.name));
      //     new_order.reverse();
      //     updateLegend(new_order);
      //   }
      // });

      // Create the outlines
      blobWrapper.append('path').attr('class', 'radarStroke').attr('d', function (d) {
        return _this4.radarLine(d.axes);
      }).style('stroke-width', cfg.strokeWidth + 'px').style('stroke', function (d, i) {
        return cfg.color(i);
      }).style('fill', 'none').style('filter', 'url(#glow)');

      // Append the circles
      blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarCircle').attr('r', cfg.dotRadius).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', function (d) {
        return cfg.color(d.id);
      }).style('fill-opacity', 0.8);

      // ///////////////////////////////////////////////////////
      // ////// Append invisible circles for tooltip ///////////
      // ///////////////////////////////////////////////////////

      // Wrapper for the invisible circles on top
      var blobCircleWrapper = g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      }).enter().append('g').attr('id', function (d) {
        return d.name.indexOf(' ') > -1 ? 'ctx' : d.name;
      }).attr('class', 'radarCircleWrapper');

      // Append a set of invisible circles on top for the mouseover pop-up
      blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      }).enter().append('circle').attr('class', 'radarInvisibleCircle').attr('r', cfg.dotRadius * 1.5).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', 'none').style('pointer-events', 'all').on('mouseover', function (d) {
        g.select('.tooltip').attr('x', this.cx.baseVal.value - 10).attr('y', this.cy.baseVal.value - 10).transition().style('display', 'block').text(Format(d.value) + cfg.unit);
      }).on('mouseout', function () {
        g.select('.tooltip').transition().style('display', 'none').text('');
      });

      var tooltip = g.append('text').attr('class', 'tooltip').attr('x', 0).attr('y', 0).style('font-size', '12px').style('display', 'none').attr('text-anchor', 'middle').attr('dy', '0.35em');

      this.legendZone = svg_bar$3.append('g').attr('id', 'legendZone').attr('class', 'legend').attr('transform', 'translate(' + cfg.legend.translateX + ',' + (cfg.legend.translateY + 20) + ')');
    }
  }, {
    key: 'update',
    value: function update() {
      var _this5 = this;

      var rScale = this.rScale;
      var maxValue = this.maxValue;
      var cfg = this.cfg;
      var angleSlice = this.angleSlice;
      // console.log(this.current_ids);
      // if (new_data) {
      //   const new_axis = new_data[0].axes.map(elem => elem.axis);
      //   if (!(JSON.stringify(new_axis) === JSON.stringify(this.allAxis))) {
      //     throw new Error('Expected element with same axes name than existing data.');
      //   }
      //   this.data = new_data;
      //   this.allAxis = new_axis;
      // } else {
      this.allAxis = this.data[0].axes.map(function (elem) {
        return elem.axis;
      });
      // }
      var update_axis = this.axisGrid.selectAll('.axis').data(this.allAxis);

      var t = this.g.selectAll('.radarWrapper').transition().duration(225);
      // .on('end', () => {
      //   parent.selectAll('text.legend')
      //     .text(d => d)
      //     .call(wrap, cfg.wrapWidth);
      //   // wrap(parent.selectAll('text.legend'), cfg.wrapWidth);
      // });
      update_axis.select('text.legend').attr('id', function (d, i) {
        return i;
      }).attr('x', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_cos(angleSlice * i - HALF_PI);
      }).attr('y', function (d, i) {
        return rScale(maxValue * cfg.labelFactor) * math_sin(angleSlice * i - HALF_PI);
      }).text(function (d) {
        return d;
      }).call(wrap, cfg.wrapWidth);

      var update_blobWrapper = this.g.selectAll('.radarWrapper').data(this.data, function (d) {
        return d.name;
      });
      console.log(this.data);
      update_blobWrapper.select('.radarArea').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      update_blobWrapper.select('.radarStroke').transition(t).attr('d', function (d) {
        return _this5.radarLine(d.axes);
      });

      var circle = update_blobWrapper.selectAll('.radarCircle').data(function (d) {
        return d.axes;
      });
      circle.transition(t).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      }).style('fill', function (d) {
        return cfg.color(d.id);
      }).style('fill-opacity', 0.8);

      var update_blobCircleWrapper = this.g.selectAll('.radarCircleWrapper').data(this.data, function (d) {
        return d.name;
      });

      var invisibleCircle = update_blobCircleWrapper.selectAll('.radarInvisibleCircle').data(function (d) {
        return d.axes;
      });
      invisibleCircle.transition(t).attr('cx', function (d, i) {
        return rScale(d.value) * math_cos(angleSlice * i - HALF_PI);
      }).attr('cy', function (d, i) {
        return rScale(d.value) * math_sin(angleSlice * i - HALF_PI);
      });
    }
  }, {
    key: 'round_stroke',
    value: function round_stroke(val) {
      var _this6 = this;

      if (val === undefined) {
        return this.cfg.roundStrokes;
      } else if (val !== this.cfg.roundStrokes) {
        this.cfg.roundStrokes = val;
        this.radarLine = d3.radialLine().curve(this.cfg.roundStrokes ? d3.curveCardinalClosed : d3.curveLinearClosed).radius(function (d) {
          return _this6.rScale(d.value);
        }).angle(function (d, i) {
          return i * _this6.angleSlice;
        });
        this.update();
      }
      return val;
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.updateMapRegio();
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$3.html('');
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this7 = this;

      // this.variables = app.current_config.ratio;
      // this.ref_data = app.current_data.slice().filter(
      //   ft => this.variables.map(v => !!ft[v]).every(d => d === true));
      // this.rank_variables = this.variables.map(d => `pr_${d}`);
      // this.variables.forEach((d, i) => {
      //   computePercentileRank(this.ref_data, d, this.rank_variables[i]);
      // });
      // this.data = prepare_data_radar_default(this.ref_data, this.variables);
      // this.current_ids = this.ref_data.map(d => d.id);
      // this.displayed_ids = this.data.map(d => d.name);
      // resetColors();
      // this.nbFt = this.data.length;
      // this.updateMapRegio();
      // this.updateTableStat();
      // this.update();
      var old_my_region = this.id_my_region;
      var other_features = this.displayed_ids.filter(function (d) {
        return d !== old_my_region && d !== 'Moyenne du contexte d\'Ã©tude';
      });
      this.g.remove();
      this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.id_my_region = app.current_config.my_region;
      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this7.ref_data, _this7.variables, id);
        _this7.add_element(a);
      });
      this.updateMapRegio();
      this.updateTableStat();
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      var _this8 = this;

      var other_features = this.displayed_ids.filter(function (d) {
        return d !== _this8.id_my_region && d !== 'Moyenne du contexte d\'Ã©tude';
      });
      this.g.remove();
      this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      other_features.forEach(function (id) {
        var a = prepare_data_radar_ft(_this8.ref_data, _this8.variables, id);
        _this8.add_element(a);
      });
      this.updateMapRegio();
      this.updateTableStat();
      // this.update();
      // this.variables = app.current_config.ratio;
      // this.ref_data = app.current_data.slice().filter(
      //   ft => this.variables.map(v => !!ft[v]).every(d => d === true));
      // this.rank_variables = this.variables.map(d => `pr_${d}`);
      // this.variables.forEach((d, i) => {
      //   computePercentileRank(this.ref_data, d, this.rank_variables[i]);
      // });
      // this.data = prepare_data_radar_default(this.ref_data, this.variables);
      // this.current_ids = this.ref_data.map(d => d.id);
      // resetColors();
      // this.nbFt = this.data.length;
      // this.updateMapRegio();
      // this.updateTableStat();
      // this.update();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      this.g.remove();
      this.g = svg_bar$3.append('g').attr('id', 'RadarGrp').attr('transform', 'translate(' + (this.cfg.w / 2 + this.cfg.margin.left) + ',' + (this.cfg.h / 2 + this.cfg.margin.top) + ')');

      this.prepareData(app.current_data);
      this.drawAxisGrid();
      this.drawArea();
      this.handleLegend();
      this.updateTableStat();
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this9 = this;

      var all_values = this.variables.map(function (v) {
        return _this9.ref_data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.ref_data.find(function (d) {
        return d.id === _this9.id_my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this9.variables[i],
          Variable: _this9.variables[i],
          'Ma rÃ©gion': my_region[_this9.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (this.current_ids.indexOf(id) < 0 || id === this.id_my_region) return;
      if (this.displayed_ids.indexOf(id) < 0) {
        var a = prepare_data_radar_ft(this.ref_data, this.variables, id);
        this.add_element(a);
        this.update();
      } else {
        this.g.selectAll('#' + id + '.radarWrapper').remove();
        this.g.selectAll('#' + id + '.radarCircleWrapper').remove();
        var ix = this.data.map(function (_d, i) {
          return [i, _d.name === id];
        }).find(function (_d) {
          return _d[1] === true;
        });
        this.data.splice(ix, 1);
        this.displayed_ids = this.data.map(function (_d) {
          return _d.name;
        });
        this.update();
      }
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, this.variables);
      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this10 = this;

      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return d.properties[app.current_config.id_field_geom] === _this10.id_my_region ? color_highlight : _this10.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? _this10.displayed_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? color_default_dissim : color_countries : color_disabled;
      });
    }
  }, {
    key: 'updateTableStat',
    value: function updateTableStat() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var features = this.prepareTableStat();
      this.table_stats = new TableResumeStat(features);
    }
  }]);
  return RadarChart3;
}();

var svg_bar$4 = d3.select('#svg_bar');
var margin$4 = { top: 20, right: 20, bottom: 40, left: 40 };

var width$4 = +svg_bar$4.attr('width') - margin$4.left - margin$4.right;
var height$4 = +svg_bar$4.attr('height') - margin$4.top - margin$4.bottom;

/**
* Class representing some "special" bar chart, allowing to toogle the
* reprsentation between a simple bar chart (for **similarity**)
* and a grouped bar chart with negative value (for **dissimilarity**)
*/
var SimilarityChart = function () {
  /**
   * Create a the bar chart on the `svg_bar` svg element previously defined.
   * @param {Array} ref_data - A reference to the subset of the dataset to be used
   * to create the scatterplot (should contain at least two field flagged as ratio
   * in the `app.current_config.ratio` Object).
   */
  function SimilarityChart(ref_data) {
    var _this = this;

    classCallCheck(this, SimilarityChart);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var x = d3.scaleBand().range([0, width$4]).padding(0.1);
    var x1 = d3.scaleBand().padding(0.05);
    var y = d3.scaleLinear().range([height$4, 0]);
    console.log(d3.schemeCategory10);
    var z = d3.scaleOrdinal().range(shuffle(d3.schemeCategory10));
    console.log(d3.schemeCategory10);
    var xAxis = d3.axisBottom(x);
    var yAxis = d3.axisLeft(y);
    this.x = x;
    this.x1 = x1;
    this.y = y;
    this.z = z;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.nb_display = 5;
    this.variables = app.current_config.ratio;
    this.current_type = 'global';
    // Filter the data against empty features:
    this.ref_data = ref_data.filter(function (ft) {
      return _this.variables.map(function (v) {
        return !!ft[v];
      }).every(function (v) {
        return v === true;
      });
    }).slice();
    // Standardize all variables:
    this.variables.forEach(function (v) {
      var serie = _this.ref_data.map(function (ft) {
        return ft[v];
      });
      var standardized = getStandardizedMeanStdDev(serie);
      var name_standardized = 'st_' + v;
      _this.ref_data.forEach(function (ft, i) {
        // eslint-disable-next-line no-param-reassign
        ft[name_standardized] = standardized[i];
      });
    });

    // Find value of my region:
    this.obj_my_region = this.ref_data.find(function (d) {
      return d.id === app.current_config.my_region;
    });

    this.ref_data.forEach(function (ft) {
      var s = _this.variables.map(function (v) {
        return math_pow(_this.obj_my_region['st_' + v] - ft['st_' + v], 2);
      }).reduce(function (a, b) {
        return a + b;
      }, 0);
      // eslint-disable-next-line no-param-reassign
      ft.dissimilarity = math_sqrt(s);
      _this.variables.forEach(function (v) {
        var var_name = 'ec_' + v;
        // eslint-disable-next-line no-param-reassign
        ft[var_name] = ft[v] / _this.obj_my_region[v] * 100 - 100;
      });
    });
    this.ref_data = this.ref_data.sort(function (a, b) {
      return a.dissimilarity - b.dissimilarity;
    });
    this.data = this.ref_data.slice(1, 1 + this.nb_display);

    this.current_ids = this.ref_data.map(function (d) {
      return d.id;
    });
    this.displayed_ids = this.data.map(function (d) {
      return d.id;
    });

    resetColors();

    svg_bar$4.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width$4, height: height$4 });

    var plot = svg_bar$4.append('g').attr('transform', 'translate(' + margin$4.left + ', ' + margin$4.top + ')');

    this.plot = plot;

    var _max = d3.max(this.data, function (d) {
      return d.dissimilarity;
    });

    x.domain(this.displayed_ids);
    y.domain([0, _max + _max / 12]);

    plot.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height$4 + ')' }).call(xAxis);

    plot.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    plot.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = plot.append('g').attr('id', 'bar');

    this.completude_value = calcPopCompletudeSubset(app, this.variables);

    this.completude = svg_bar$4.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + this.completude_value + '%');

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar$4);

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var menu_selection = d3.select(svg_bar$4.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-20px', 'margin-left': '30px', position: 'relative' });
    var selection_close = menu_selection.append('p').style('float', 'left');

    selection_close.append('span').property('value', 'close').attrs({ value: 'close', class: 'type_selection square checked' });
    selection_close.append('span').attrs({ class: 'label_chk' }).html('Les');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).property('value', 5);
    selection_close.append('span').attrs({ class: 'label_chk' }).html('rÃ©gions les plus proches');

    var indice_kind = menu_selection.append('p').styles({
      float: 'right',
      display: 'inline-grid'
    });

    indice_kind.append('span').attrs({
      id: 'ind_global',
      class: 'choice_ind active'
    }).text('Indice global');

    indice_kind.append('span').attrs({
      id: 'ind_detail',
      class: 'choice_ind'
    }).text('Indices dÃ©taillÃ©s');

    this.makeGrid();
    this.bindMenu();
    this.update();
    this.makeTableStat();
  }

  createClass(SimilarityChart, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#bar').attr('class', 'grid grid-y').call(d3.axisLeft(this.y).tickSize(-width$4).tickFormat('')).selectAll('line, path').attr('stroke', 'lightgray');
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude_value = calcPopCompletudeSubset(app, this.variables);
      this.completude.text('Compl\xE9tude : ' + this.completude_value + '%');
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      var self = this;
      svg_bar$4.select('.tooltip').selectAll('text').text('');
      if (this.current_type === 'global') {
        var _max = d3.max(this.data, function (d) {
          return d.dissimilarity;
        });
        this.x.domain(this.displayed_ids);
        this.y.domain([0, _max + _max / 12]);

        this.plot.select('#zero_line').remove();

        var bars = this.g_bar.selectAll('.bar').data(this.data, function (d) {
          return d.id;
        });

        bars.attrs(function (d) {
          return {
            x: _this2.x(d.id),
            y: _this2.y(d.dissimilarity),
            width: _this2.x.bandwidth(),
            height: height$4 - _this2.y(d.dissimilarity)
          };
        }).style('fill', color_default_dissim);

        bars.enter().insert('rect', '.mean').attrs(function (d) {
          return {
            class: 'bar',
            x: _this2.x(d.id),
            y: _this2.y(d.dissimilarity),
            width: _this2.x.bandwidth(),
            height: height$4 - _this2.y(d.dissimilarity)
          };
        }).style('fill', color_default_dissim).on('mouseover', function () {
          svg_bar$4.select('.tooltip').style('display', null);
        }).on('mouseout', function () {
          svg_bar$4.select('.tooltip').style('display', 'none');
        }).on('mousemove', function (d) {
          var tooltip = svg_bar$4.select('.tooltip');
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text(app.current_config.my_region + ' - ' + d.id);
          tooltip.select('text.value_feature1').text('Indice de dissimilarit\xE9 : ' + math_round(d.dissimilarity * 10) / 10);
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({
            width: b.width + 20,
            height: b.height + 7.5
          });
          tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 25] + ')');
        });

        bars.exit().remove();

        var axis_x = this.plot.select('.axis--x').attr('font-size', function () {
          return _this2.nb_display > 75 ? 6 : 10;
        }).call(this.xAxis);

        axis_x.selectAll('text').attrs(function () {
          if (_this2.nb_display > 100) {
            return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
          } else if (_this2.nb_display > 20) {
            return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
          }
          return { dx: '0', dy: '0.71em', transform: null };
        }).style('text-anchor', function () {
          return _this2.nb_display > 20 ? 'end' : 'middle';
        });

        this.plot.select('.axis--y').call(this.yAxis);

        this.plot.select('.grid-y').call(d3.axisLeft(this.y).tickSize(-width$4).tickFormat('')).selectAll('line, path').attr('stroke', 'lightgray');
      } else if (this.current_type === 'detail') {
        var keys = this.variables.map(function (v) {
          return 'ec_' + v;
        });
        this.x.domain(this.displayed_ids);
        this.x1.domain(keys).rangeRound([0, this.x.bandwidth()]);
        this.z.domain(keys);
        var mmin = d3.min(this.data, function (d) {
          return d3.min(keys, function (key) {
            return d[key];
          });
        });
        this.y.domain([mmin > 0 ? 0 : mmin, d3.max(this.data, function (d) {
          return d3.max(keys, function (key) {
            return d[key];
          });
        })]).nice();

        this.plot.select('#zero_line').remove();
        this.plot.insert('line').attrs({
          x1: 0,
          x2: width$4,
          y1: this.y(0),
          y2: this.y(0),
          'stroke-width': '1px',
          stroke: '#000',
          id: 'zero_line'
        });

        var _bars = this.g_bar.selectAll('.group_bar').data(this.data, function (d) {
          return d.id;
        });

        _bars.attr('transform', function (d) {
          return 'translate(' + _this2.x(d.id) + ', 0)';
        });

        _bars.selectAll('rect').attrs(function (d) {
          return {
            x: _this2.x1(d.key),
            y: _this2.y(Math.max(0, d.value)),
            width: _this2.x1.bandwidth(),
            height: Math.abs(_this2.y(d.value) - _this2.y(0)),
            fill: _this2.z(d.key)
          };
        });

        _bars.enter().append('g').attrs(function (d) {
          return {
            class: 'group_bar',
            transform: 'translate(' + _this2.x(d.id) + ', 0)'
          };
        }).selectAll('rect').data(function (d) {
          return keys.map(function (key) {
            return { key: key, value: d[key], value_ref: d[key.replace('ec_', '')], id: d.id };
          });
        }).enter().append('rect').attrs(function (d) {
          return {
            x: _this2.x1(d.key),
            y: _this2.y(Math.max(0, d.value)),
            width: _this2.x1.bandwidth(),
            height: Math.abs(_this2.y(d.value) - _this2.y(0)),
            fill: _this2.z(d.key)
          };
        }).on('mouseover', function () {
          svg_bar$4.select('.tooltip').style('display', null);
        }).on('mouseout', function () {
          svg_bar$4.select('.tooltip').style('display', 'none');
        }).on('mousemove', function (d) {
          var tooltip = svg_bar$4.select('.tooltip');
          var indic = d.key.replace('ec_', '');
          tooltip.select('rect').attrs({ width: 0, height: 0 });
          tooltip.select('text.id_feature').text(app.current_config.my_region + ' - ' + d.id);
          tooltip.select('text.value_feature1').text('Indicateur : ' + indic);
          tooltip.select('text.value_feature2').text(app.current_config.my_region + ' : ' + math_round(self.obj_my_region[indic] * 10) / 10);
          tooltip.select('text.value_feature3').text(d.id + ' : ' + math_round(d.value_ref * 10) / 10);
          tooltip.select('text.value_feature4').text('\xC9cart: ' + math_round(d.value * 10) / 10 + ' %');
          var tx = +this.parentElement.getAttribute('transform').replace('translate(', '').replace(', 0)', '');
          var b = tooltip.node().getBoundingClientRect();
          tooltip.select('rect').attrs({
            width: b.width + 20,
            height: b.height + 7.5
          });
          tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5 + tx, d3.mouse(this)[1] - 72.5] + ')');
        });

        _bars.exit().remove();

        var _axis_x = this.plot.select('.axis--x').transition().call(d3.axisBottom(this.x));
        this.plot.select('.axis--y').transition().call(d3.axisLeft(this.y).ticks(null, 's'));

        this.plot.select('.grid-y').transition().call(d3.axisLeft(this.y).tickSize(-width$4).tickFormat('')).selectAll('line').attr('stroke', 'lightgray');

        _axis_x.selectAll('text').attrs(function () {
          if (_this2.nb_display > 18) {
            return {
              dx: '-0.8em',
              dy: '0.15em',
              transform: 'rotate(-65)',
              'font-size': _this2.nb_display > 45 ? '7.5px' : '9px' };
          }
          return { dx: '0', dy: '0.71em', transform: null };
        }).style('text-anchor', function () {
          return _this2.nb_display > 18 ? 'end' : 'middle';
        });

        _axis_x.selectAll('.tick > line').attrs({
          transform: 'translate(' + Math.ceil(width$4 / (this.displayed_ids.length * 2)) + ',0)',
          y1: 6,
          y2: -height$4
        }).styles({
          stroke: 'gray',
          'stroke-opacity': 0.4
        });
      }
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      var _this3 = this;

      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return _this3.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this4 = this;

      this.variables = app.current_config.ratio;
      // Filter the data against empty features:
      this.ref_data = app.current_data.filter(function (ft) {
        return _this4.variables.map(function (v) {
          return !!ft[v];
        }).every(function (v) {
          return v === true;
        });
      }).slice();
      // Standardize all variables:
      this.variables.forEach(function (v) {
        var serie = _this4.ref_data.map(function (ft) {
          return ft[v];
        });
        var standardized = getStandardizedMeanStdDev(serie);
        var name_standardized = 'st_' + v;
        _this4.ref_data.forEach(function (ft, i) {
          // eslint-disable-next-line no-param-reassign
          ft[name_standardized] = standardized[i];
        });
      });

      // Find value of my region:
      this.obj_my_region = this.ref_data.find(function (d) {
        return d.id === app.current_config.my_region;
      });

      this.ref_data.forEach(function (ft) {
        var s = _this4.variables.map(function (v) {
          return math_pow(_this4.obj_my_region['st_' + v] - ft['st_' + v], 2);
        }).reduce(function (a, b) {
          return a + b;
        }, 0);
        // eslint-disable-next-line no-param-reassign
        ft.dissimilarity = math_sqrt(s);
        _this4.variables.forEach(function (v) {
          var var_name = 'ec_' + v;
          // eslint-disable-next-line no-param-reassign
          ft[var_name] = ft[v] / _this4.obj_my_region[v] * 100 - 100;
        });
      });
      this.ref_data = this.ref_data.sort(function (a, b) {
        return a.dissimilarity - b.dissimilarity;
      });
      this.data = this.ref_data.slice(1, 1 + this.nb_display);

      this.current_ids = this.ref_data.map(function (d) {
        return d.id;
      });
      this.displayed_ids = this.data.map(function (d) {
        return d.id;
      });
      app.colors = {};
      this.displayed_ids.forEach(function (_id) {
        app.colors[_id] = color_default_dissim;
      });
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateCompletude();
      this.updateTableStats();
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'applySelection',
    value: function applySelection(nb_value) {
      this.nb_display = nb_value;
      this.data = this.ref_data.slice(1, 1 + nb_value);
      this.displayed_ids = this.data.map(function (d) {
        return d.id;
      });
      app.colors = {};
      this.displayed_ids.forEach(function (_id) {
        app.colors[_id] = color_default_dissim;
      });
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateMapRegio();
      this.update();
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        var value = +this.value;
        if (value < 1) {
          this.value = 1;
          return;
        }
        if (self.current_type === 'global' && value > self.ref_data.length) {
          value = this.value = self.ref_data.length;
        } else if (self.current_type === 'detail' && value > 50) {
          value = this.value = 50;
        }
        self.applySelection(value);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);

      menu.select('#ind_global').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.current_type = 'global';
        this.classList.add('active');
        menu.select('#ind_detail').attr('class', 'choice_ind');
        self.g_bar.selectAll('g').remove();
        self.update();
      });

      menu.select('#ind_detail').on('click', function () {
        if (this.classList.contains('active')) {
          return;
        }
        self.current_type = 'detail';
        this.classList.add('active');
        menu.select('#ind_global').attr('class', 'choice_ind');
        self.g_bar.selectAll('rect').remove();
        self.update();
      });
    }
  }, {
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {
      this.g_bar.selectAll('rect, g').remove();
      this.changeStudyZone();
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {
      this.g_bar.selectAll('rect, g').remove();
      this.changeStudyZone();
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.plot.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$4.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
      this.applySelection(5);

      // TODO : define in each chart was kind of tooltip to display on the map
      // this.map_elem.target_layer.selectAll('path')
      //   .on('mouseover', () => {
      //     svg_map.select('.tooltip')
      //       .style('display', null);
      //   })
      //   .on('mouseout', () => {
      //     svg_map.select('.tooltip')
      //       .style('display', 'none');
      //   })
      //   .on('mousemove', function (d) {
      //     const tooltip = svg_map.select('.tooltip');
      //     tooltip
      //       .select('text.id_feature')
      //       .text(`${d.properties[app.current_config.id_field_geom]}`);
      //     let _ix, nb_val;
      //     for (_ix = 0, nb_val = Math.min(app.current_config.ratio.length, 5); _ix < nb_val; _ix++) {
      //       tooltip.select(`text.value_feature${_ix + 1}`)
      //         .text(`${app.current_config.ratio_pretty_name[_ix]}: ${math_round(d.properties[app.current_config.ratio[_ix]] * 10) / 10}`);
      //     }
      //     tooltip
      //       .attr('transform', `translate(${[d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 - _ix * 12]})`);
      //   });
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this5 = this;

      var all_values = this.variables.map(function (v) {
        return _this5.ref_data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.ref_data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this5.variables[i],
          Variable: _this5.variables[i],
          'Ma rÃ©gion': my_region[_this5.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      this.table_stats = new TableResumeStat(this.prepareTableStat());
    }
  }]);
  return SimilarityChart;
}();

var svg_bar$5 = d3.select('#svg_bar');
var margin$5 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$5 = +svg_bar$5.attr('width') - margin$5.left - margin$5.right;
var height$5 = +svg_bar$5.attr('height') - margin$5.top - margin$5.bottom;

var boxQuartiles = function boxQuartiles(values) {
  return [d3.quantiles(values, 0.25), d3.quantiles(values, 0.5), d3.quantiles(values, 0.75)];
};

/**
* Class representing a chart of "parallel coordinates".
*/
var BoxPlot1 = function () {
  function BoxPlot1(ref_data) {
    var _this = this;

    classCallCheck(this, BoxPlot1);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 1;
    var self = this;
    this.ratio_to_use = app.current_config.ratio[0];
    this.current_level = +app.current_config.current_level;
    this.inf_level = +this.current_level + 1;
    this.plot = svg_bar$5.append('g').attr('transform', 'translate(' + [margin$5.left, margin$5.top] + ')');

    this.ref_data = ref_data.filter(function (ft) {
      return !!ft[_this.ratio_to_use];
    });
    var inf_level_features = app.full_dataset.filter(function (ft) {
      return +ft.level === _this.inf_level;
    });
    var _all_values = void 0;
    this.data = [];
    this.ref_data.forEach(function (ft) {
      var id = ft.id;
      var children = inf_level_features.filter(function (d) {
        return d[app.current_config.id_field].indexOf(id) > -1;
      }).map(function (d) {
        return d[_this.ratio_to_use];
      });
      if (children.length < 2) {
        ft.remove = true; // eslint-disable-line no-param-reassign
        return;
      }
      children.sort(function (a, b) {
        return a - b;
      });
      var record = {
        key: id,
        counts: children,
        quartile: boxQuartiles(children),
        whiskers: [d3.min(children), d3.max(children)],
        color: id === app.current_config.my_region ? color_highlight : color_countries
      };
      _all_values = _all_values.concat(children);
      _this.data.push(record);
    });
    this.data.sort(function (a, b) {
      return a.quartile[1] - b.quartile[1];
    });
    var min = d3.min(_all_values) - 5;
    var max = d3.max(_all_values) + 5;
    var xScale = d3.scaleBand().domain(this.data.map(function (d) {
      return d.key;
    })).range([0, width$5]).padding(1);
    var yScale = d3.scaleLinear().domain([min, max]).range([height$5, 0]);

    var max_nb_ft = this.data.map(function (d) {
      return d.counts.length;
    });
    max_nb_ft.sort(function (a, b) {
      return a - b;
    });
    max_nb_ft = max_nb_ft[max_nb_ft.length - 1];
    var barWidth = xScale.step() - 1;
    var get_bar_width = function get_bar_width(nb_ft) {
      return barWidth * nb_ft / max_nb_ft;
    };

    this.plot = svg_bar$5.append('g').attr('transform', 'translate(' + [margin$5.left, margin$5.top] + ')');
    this.plot.append('g').attrs({ class: 'axis axis--x', transform: 'translate(10, ' + height$5 + ')' }).call(d3.axisBottom(xScale));
    this.plot.append('g').attrs({ class: 'axis axis--y', transform: 'translate(10, 0)' }).call(d3.axisLeft(yScale));

    this.g_box = this.plot.append('g').attr('transform', 'translate(10, 0)');

    this.vertical_lines = this.g_box.selectAll('.vertical_lines').data(this.data).enter().append('line').attrs(function (d) {
      return {
        x1: xScale(d.key) + get_bar_width(d.counts.length) / 2,
        y1: yScale(d.whiskers[0]),
        x2: xScale(d.key) + get_bar_width(d.counts.length) / 2,
        y2: yScale(d.whiskers[1]),
        stroke: '#000',
        'stroke-width': 0.5,
        fill: 'none'
      };
    });

    this.g_box.selectAll('rect').data(this.data).enter().append('rect').attrs(function (d) {
      return {
        width: get_bar_width(d.counts.length),
        height: yScale(d.quartile[0]) - yScale(d.quartile[2]),
        x: xScale(d.key),
        y: yScale(d.quartile[2]),
        fill: d.color,
        stroke: '#000',
        'stroke-width': 0.5
      };
    });

    var horizontalLineConfigs = [{
      x1: function x1(datum) {
        return xScale(datum.key);
      },
      y1: function y1(datum) {
        return yScale(datum.whiskers[1]);
      },
      x2: function x2(datum) {
        return xScale(datum.key) + get_bar_width(datum.counts.length);
      },
      y2: function y2(datum) {
        return yScale(datum.whiskers[1]);
      }
    }, {
      x1: function x1(datum) {
        return xScale(datum.key);
      },
      y1: function y1(datum) {
        return yScale(datum.quartile[1]);
      },
      x2: function x2(datum) {
        return xScale(datum.key) + get_bar_width(datum.counts.length);
      },
      y2: function y2(datum) {
        return yScale(datum.quartile[1]);
      }
    }, {
      x1: function x1(datum) {
        return xScale(datum.key);
      },
      y1: function y1(datum) {
        return yScale(datum.whiskers[0]);
      },
      x2: function x2(datum) {
        return xScale(datum.key) + get_bar_width(datum.counts.length);
      },
      y2: function y2(datum) {
        return yScale(datum.whiskers[0]);
      }
    }];

    var _loop = function _loop(i) {
      var lineConfig = horizontalLineConfigs[i];
      var horizontalLine = _this.g_box
      // .selectAll('.whiskers')
      // .data(this.data)
      // .enter()
      .append('line').attrs(function (d) {
        return {
          x1: lineConfig.x1,
          y1: lineConfig.y1,
          x2: lineConfig.x2,
          y2: lineConfig.y2,
          stroke: '#000',
          'stroke-width': 0.5,
          fill: 'none'
        };
      });
    };

    for (var i = 0; i < horizontalLineConfigs.length; i++) {
      _loop(i);
    }
  }

  createClass(BoxPlot1, [{
    key: 'addVariable',
    value: function addVariable$$1(code_variable, name_variable) {}
  }, {
    key: 'removeVariable',
    value: function removeVariable$$1(code_variable) {}
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {}
  }, {
    key: 'remove',
    value: function remove() {
      this.plot.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$5.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeature(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this2 = this;

      var values = this.data.map(function (d) {
        return d[_this2.ratio_to_use];
      });
      return {
        Min: d3.min(values),
        Max: d3.max(values),
        Moyenne: getMean(values),
        id: this.ratio_to_use,
        Variable: this.ratio_to_use,
        'Ma rÃ©gion': this.ref_value
      };
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      var feature = this.prepareTableStat();
      this.table_stats = new TableResumeStat([feature]);
    }
  }]);
  return BoxPlot1;
}();

var svg_bar$6 = d3.select('#svg_bar');
var margin$6 = { top: 20, right: 20, bottom: 40, left: 20 };

var width$6 = +svg_bar$6.attr('width') - margin$6.left - margin$6.right;
var height$6 = +svg_bar$6.attr('height') - margin$6.top - margin$6.bottom;

/**
* Class representing a chart of "parallel coordinates".
*/
var ParallelCoords2 = function () {
  function ParallelCoords2(ref_data) {
    var _this = this;

    classCallCheck(this, ParallelCoords2);

    // Set the minimum number of variables to keep selected for this kind of chart:
    app.current_config.nb_var = 2;
    var self = this;
    this.variables = app.current_config.ratio.slice();
    this.current_level = +app.current_config.current_level;
    this.inf_level = +this.current_level + 1;
    this.plot = svg_bar$6.append('g').attr('transform', 'translate(' + [margin$6.left, margin$6.top] + ')');

    this.x = d3.scaleBand().rangeRound([0, width$6]);
    this.y = {};
    this.line = d3.line();
    // this.all_keys = this.variables;
    this.data = ref_data.filter(function (ft) {
      return _this.variables.map(function (v) {
        return !!ft[v];
      }).every(function (v) {
        return v === true;
      });
    });
    var inf_level_features = app.full_dataset.filter(function (ft) {
      return +ft.level === _this.inf_level;
    });
    this.data.forEach(function (ft) {
      var id = ft.id;
      var children = inf_level_features.filter(function (d) {
        return d[app.current_config.id_field].indexOf(id) > -1;
      });
      if (children.length < 2) {
        ft.remove = true; // eslint-disable-line no-param-reassign
        return;
      }
      // Compute Relative Standard Deviation ("coefficient de variation") for each variable:
      _this.variables.forEach(function (v) {
        var v_name = 'rsd_' + v;
        var serie = children.map(function (d) {
          return +d[v];
        });
        var mean = getMean(serie);
        var rsd = mean / getStdDev(serie, mean);
        ft[v_name] = rsd; // eslint-disable-line no-param-reassign
      });
    });
    this.data = this.data.filter(function (d) {
      return !d.remove;
    });
    this.current_ids = this.data.map(function (d) {
      return d.id;
    });
    this.dimensions = d3.keys(this.data[0]).filter(function (d) {
      return d.indexOf('rsd_') === 0 && (_this.y[d] = d3.scaleLinear().domain(d3.extent(_this.data, function (p) {
        return +p[d];
      })).range([height$6, 0]));
    });
    this.x.domain(this.dimensions);
    this.x.rangeRound([0, width$6 + this.x.step() * 1.5]);
    var background = this.plot.append('g').attr('class', 'background').selectAll('path').data(this.data).enter().append('path').attr('d', function (d) {
      return _this.path(d);
    }).attr('id', function (d) {
      return 'f_' + d.id;
    });

    // const foreground = this.plot.append('g')
    //   .attr('class', 'foreground')
    //   .selectAll('path')
    //   .data(this.data)
    //   .enter()
    //   .append('path')
    //   .attr('d', d => this.path(d));

    var g = this.plot.selectAll('.dimension').data(this.dimensions).enter().append('g').attrs(function (d) {
      return {
        class: 'dimension',
        transform: 'translate(' + _this.x(d) + ')'
      };
    });

    g.append('g').attr('class', 'axis').each(function (d) {
      d3.select(this).call(d3.axisLeft(self.y[d]));
    }).append('text').styles({
      'text-anchor': 'middle',
      'font-size': '11px'
    }).attr('y', -5).text(function (d) {
      return d;
    });

    // foreground
    //   .on('mouseover', function (d) {
    //     d3.select(this).style('stroke-width', d.id === app.current_config.my_region ? 2.8 : 2);
    //     svg_bar.append('text')
    //       .attrs({
    //         id: 'id_feature',
    //         x: 75,
    //         y: self.y[self.dimensions[0]](d[self.dimensions]),
    //       });
    //   })
    //   .on('mouseout', function (d) {
    //     d3.select(this).style('stroke-width', d.id === app.current_config.my_region ? 1.7 : 1);
    //     svg_bar.select('#id_feature').remove();
    //   });
    //
    // this.plot.select(`.foreground > #f_${app.current_config.my_region}`);
    this.makeTableStat();
  }

  createClass(ParallelCoords2, [{
    key: 'path',
    value: function path(d) {
      var _this2 = this;

      return this.line(this.dimensions.map(function (p) {
        return [_this2.x(p), _this2.y[p](d[p])];
      }));
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      this.map_elem.resetColors(this.current_ids);
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.plot.remove();
      this.table_stats.remove();
      this.table_stats = null;
      this.map_elem.unbindBrushClick();
      this.map_elem = null;
      svg_bar$6.html('');
    }
  }, {
    key: 'updateTableStats',
    value: function updateTableStats() {
      this.table_stats.removeAll();
      this.table_stats.addFeatures(this.prepareTableStat());
    }
  }, {
    key: 'prepareTableStat',
    value: function prepareTableStat() {
      var _this3 = this;

      var all_values = this.variables.map(function (v) {
        return _this3.data.map(function (d) {
          return d[v];
        });
      });
      var my_region = this.data.find(function (d) {
        return d.id === app.current_config.my_region;
      });
      var features = all_values.map(function (values, i) {
        return {
          Min: d3.min(values),
          Max: d3.max(values),
          Moyenne: getMean(values),
          id: _this3.variables[i],
          Variable: _this3.variables[i],
          'Ma rÃ©gion': my_region[_this3.variables[i]]
        };
      });
      return features;
    }
  }, {
    key: 'makeTableStat',
    value: function makeTableStat() {
      this.table_stats = new TableResumeStat(this.prepareTableStat());
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.changeStudyZone();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {}
  }]);
  return ParallelCoords2;
}();

// import debug from 'debug';
exports.variables_info = void 0;

var study_zones = [{ id: 'no_filter', name: 'UE28' }, { id: 'filter_FR', name: 'Filtre national (France)' }, { id: 'filter_param2', name: 'Espace de comparaison nÂ°2' }];

var territorial_mesh = [{ id: 'NUTS1', name: 'NUTS1' }, { id: 'NUTS12stat', name: 'NUTS1/2 (statistique)' }];

var app = {
  // A mapping id -> color, containing the color to use for each
  // feature not using the default color or the disabled color
  colors: {},
  // The filtered dataset (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) selected on the left menu:
  current_data: [],
  // The full dataset provided (containing all the features at any level in one table)
  // Row without data are expected to be empty or to contain the "NA" string.
  full_dataset: [],
  // The ids of the current feature in use (acccording to: the current territorial level,
  // the filter key (if any) and the ratio(s) used in the current chart; filtered
  // to not contain feature with empty ratio values within the ratios in use).
  current_ids: []
};

function setDefaultConfig() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  // }, level = 'NUTS1') {
  app.current_config = {
    // The name of the field of the dataset containing the ID of each feature:
    id_field: 'geo',
    // The name of the field of the dataset containing the name of each feature:
    name_field: 'Nom',
    // The name of the field of the dataset containing the population of each feature:
    pop_field: 'POP_AGE_T_2016',
    // The name of the field of the geojson layer containing the ID of each feature
    // (these values should match with the values of the "id_field" in the
    // tabular dataset)
    id_field_geom: 'NUTS1_2016',
    num: ['CHOM_1574_2016'],
    denum: ['ACT_1574_2016'],
    ratio: [variable],
    ratio_pretty_name: ['Taux de chÃ´mage (15-74 ans) (2016)'],
    // The level currently in use:
    current_level: 1,
    // The ID of the region currently in use:
    my_region: code,
    // The name of the region currently in use:
    my_region_pretty_name: app.feature_names[code],
    // How many ratio on the current chart:
    nb_var: 1
  };
  app.colors[app.current_config.my_region] = color_highlight;
}

function setDefaultConfigMenu() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'RT_CHOM_1574';
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NUTS1';

  document.querySelector('.target_region.square[value="' + code + '"]').classList.add('checked');
  document.querySelector('.target_variable.small_square[value="' + variable + '"]').classList.add('checked');
  document.querySelector('.filter_v.square[filter-value="no_filter"]').classList.add('checked');
  document.querySelector('.territ_level.square[value="' + level + '"]').classList.add('checked');
}

function resetColors() {
  app.colors = {};
  // for (let i = 0, len_i = current_ids.length; i < len_i; i++) {
  //   app.colors[current_ids[i]] = color_countries;
  // }
  app.colors[app.current_config.my_region] = color_highlight;
}

/**
* Function to select the first variable on the left menu
* (triggered after changing region, if no more variable was selected)
*
* @return {void}
*/
function selectFirstAvailableVar() {
  var menu = document.querySelector('#menu');
  var v = menu.querySelectorAll('.target_variable');
  for (var i = 0; i < v.length; i++) {
    if (!v[i].classList.contains('disabled')) {
      v[i].classList.add('checked');
      return v[i].getAttribute('value');
    }
  }
}

/**
* Function to update the availables ratios in the left menu (after changing region)
* If a selected variable is not available anymore it will be deselected.
* If there selected variable (all the previously selected variables are unavailable for this region)
* the first variable on the menu will be selected.
* If the new number of selected feature is inferior to the number of variables on the current
* chart, a new chart (suitable for only 1 variable) will be selected.
*
*
* @param {String} my_region - The ID of the newly selected region.
* @return {Number} - The new number of selected ratios.
*
*/
function updateAvailablesRatios(my_region) {
  var data_my_feature = app.full_dataset.filter(function (ft) {
    return ft[app.current_config.id_field] === my_region;
  })[0];
  var menu = document.querySelector('#menu');
  var lines = menu.querySelectorAll('.target_variable');
  for (var i = 0, nb_lines = lines.length; i < nb_lines; i++) {
    var code_variable = lines[i].getAttribute('value');
    if (data_my_feature[code_variable] !== undefined && data_my_feature[code_variable] !== 'NA') {
      lines[i].classList.remove('disabled');
      lines[i].nextSibling.classList.remove('disabled');
    } else {
      lines[i].classList.remove('checked');
      lines[i].classList.add('disabled');
      lines[i].nextSibling.classList.add('disabled');
    }
  }
  var new_var = menu.querySelectorAll('.target_variable.checked');
  if (new_var.length !== app.current_config.ratio.length) {
    var new_var_names = void 0;
    if (new_var.length === 0) {
      var name = selectFirstAvailableVar();
      new_var_names = [name];
    } else {
      new_var_names = Array.prototype.slice.call(new_var).map(function (elem) {
        return elem.getAttribute('value');
      });
    }
    resetVariables(app, new_var_names);
  }
  return new_var.length;
}

/**
* Create handlers for user event on the left menu and on the map for charts only
* allowing to use 1 variable.
*
* @param {Object} chart - The chart object.
* @param {Object} map_elem - The map object.
* @return {void}
*
*/
function bindUI_chart(chart, map_elem) {
  // User change the study zone:
  d3.selectAll('span.filter_v').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      applyFilter(app, filter_type);
      makeTable(app.current_data, app.current_config);
      chart.changeStudyZone();
      chart.updateCompletude();
    }
  });

  // User change the targeted region:
  d3.selectAll('span.target_region').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      var id_region = this.getAttribute('value');
      changeRegion(app, id_region);
      // Update the availables ratio on the left menu
      // (this may change the current selected ratio(s) as some variables are
      // not available for some features) and fetch the number of selected
      // variables after that:
      var new_nb_var = updateAvailablesRatios(id_region);
      if (new_nb_var >= app.current_config.nb_var) {
        chart.updateChangeRegion();
      } else {
        // If there fewer selected variables than requested by the current chart,
        // redraw the first (default) kind of chart:
        d3.select('span.chart_t1[value="BarChart1"]').dispatch('click');
      }
    }
  });

  // User click on the name of a group of variables
  // to expand or collapse its content:
  d3.selectAll('.name_group_var').on('click', function () {
    var group_var = this.nextSibling;
    if (group_var.style.display === 'none') {
      group_var.style.display = null;
    } else {
      group_var.style.display = 'none';
    }
  });

  // User click to add/remove a variable from the comparison:
  d3.selectAll('span.target_variable').on('click', function () {
    if (this.classList.contains('disabled')) return;
    var nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
      return !!elem.classList.contains('checked');
    }).length;
    // Select a new variable and trigger the appropriate changes on the current chart:
    if (!this.classList.contains('checked')) {
      // We don't want the user to be able to select more than 8 variables simultaneously:
      if (nb_var >= 8) return;
      this.classList.add('checked');
      var code_variable = this.getAttribute('value');
      var name_variable = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      }).name;
      addVariable(app, code_variable);
      makeTable(app.current_data, app.current_config);
      chart.addVariable(code_variable, name_variable);
      nb_var += 1;
    } else {
      // Remove a variable from the selection:
      nb_var -= 1;
      // We don't want to let the user remove the variable if
      // it's the only one selected or if the currently displayed
      // chart need a minimum number of variables:
      if (nb_var < app.current_config.nb_var) {
        return;
      }
      var _code_variable = this.getAttribute('value');
      this.classList.remove('checked');
      removeVariable(app, _code_variable);
      chart.removeVariable(_code_variable);
      makeTable(app.current_data, app.current_config);
    }
    // Update the top menu to display available charts according to the current
    // number of available variables:
    if (nb_var === 1) {
      // Allow all kind of vizu with 1 variable:
      d3.selectAll('.chart_t1').attr('class', 'type_chart chart_t1');
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2 disabled');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    } else if (nb_var === 2) {
      // Allow all kind of vizu with 2 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    } else if (nb_var > 2) {
      // Allow all kind of vizu with 3 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3');
    }
  });

  // Dispatch a click event on the associated checkbox when the text is clicked:
  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section > #header_map');

  header_map_section.select('#img_rect_selec').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').style('display', null);
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_zoom').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(map_elem.zoom_map);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_select').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      if (map_elem.brush_map) {
        svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
        svg_map.select('.brush_map').style('display', 'none');
      }
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    }
  });

  if (!map_elem.brush_map) {
    if (chart.handleClickMap) {
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    } else {
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  }

  var header_table_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_table').styles({ display: 'none', margin: 'auto', 'text-align': 'right' });

  header_table_section.append('span').attr('class', 'button_blue').html('CSV').on('click', function () {
    var content = ['id,NumÃ©rateur,DÃ©nominateur,Ratio,Rang\r\n', app.current_data.map(function (d) {
      return [d.id, d.num, d.denum, d.ratio, d.rang].join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'table.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
  });
  bindTopButtons(chart, map_elem);
}

/**
* Function to handle click on the top menu, in order to choose
* the kind of availables representation
*
* @param {Object} chart -
* @param {Object} map_elem -
* @return {void}
*/
function bindTopButtons(chart, map_elem) {
  d3.selectAll('.type_chart').on('click', function () {
    if (this.classList.contains('disabled')) return;
    chart.remove();
    chart = null; // eslint-disable-line no-param-reassign
    unbindUI();
    map_elem.resetZoom();
    app.colors = {};
    var value = this.getAttribute('value');
    if (value === 'BarChart1') {
      console.log('BarChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BarChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'BubbleChart1') {
      console.log('BubbleChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BubbleChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ScatterPlot2') {
      console.log('ScatterPlot2');
      makeTable(app.current_data, app.current_config);
      chart = new ScatterPlot2(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'RadarChart3') {
      console.log('RadarChart3');
      makeTable(app.current_data, app.current_config);
      chart = new RadarChart3(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'SimilarityChart') {
      console.log('SimilarityChart');
      makeTable(app.current_data, app.current_config);
      chart = new SimilarityChart(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ParallelCoords2') {
      console.log('ParallelCoords2');
      // makeTable(app.current_data, app.current_config);
      chart = new ParallelCoords2(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    } else if (value === 'BoxPlot1') {
      console.log('BoxPlot1');
      // makeTable(app.current_data, app.current_config);
      chart = new BoxPlot1(app.current_data);
      bindUI_chart(chart, map_elem);
      map_elem.bindBrushClick(chart);
      chart.bindMap(map_elem);
    }
  });
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA.csv').defer(d3.json, 'data/cget-nuts1-3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/remote3035.geojson').defer(d3.json, 'data/template3035.geojson').defer(d3.json, 'data/sea_boxes.geojson').defer(d3.csv, 'data/indicateurs_meta.csv').defer(d3.csv, 'data/nuts2_aggreg.csv').awaitAll(function (error, results) {
    if (error) throw error;

    var _results = slicedToArray(results, 8),
        full_dataset = _results[0],
        nuts1 = _results[1],
        countries = _results[2],
        remote = _results[3],
        template = _results[4],
        seaboxes = _results[5],
        metadata_indicateurs = _results[6],
        agg_n2 = _results[7];

    console.log(agg_n2);
    exports.variables_info = prepareVariablesInfo(metadata_indicateurs);
    prepare_dataset(full_dataset, app);
    setDefaultConfig('FRB', 'RT_CHOM_1574', 'NUTS1');
    var features_menu = full_dataset.filter(function (ft) {
      return ft.geo.indexOf('FR') > -1 && +ft.level === app.current_config.current_level;
    });
    createMenu(features_menu, exports.variables_info, study_zones, territorial_mesh);
    bindHelpMenu();
    makeTopMenu();
    makeHeaderChart();
    setDefaultConfigMenu('FRB', 'RT_CHOM_1574', 'NUTS1');
    filterLevelVar(app);
    console.log(app);
    var map_elem = new MapSelect(nuts1, countries, remote, template, seaboxes);
    var chart = new BarChart1(app.current_data);
    makeTable(app.current_data, app.current_config);
    makeHeaderMapSection();
    makeSourceSection();
    makeMapLegend();
    bindUI_chart(chart, map_elem);
    map_elem.bindBrushClick(chart);
    chart.bindMap(map_elem);
  });
}

function bindHelpMenu() {
  var help_buttons_var = document.querySelector('#menu_variables').querySelectorAll('span.i_info');
  Array.prototype.slice.call(help_buttons_var).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var code_variable = this.previousSibling.previousSibling.getAttribute('value');
      var o = exports.variables_info.find(function (d) {
        return d.ratio === code_variable;
      });
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">Description de l\'indicateur</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + o.methodo.split('\n').join('<br>') + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">' + o.source + '</p>\n        <p style="font-family: \'Signika\',sans-serif;font-size: 0.8em">Date de t\xE9l\xE9chargement de la donn\xE9es : ' + o.last_update + '</p>');
      modal.open();
    };
  });

  var helps_buttons_study_zone = document.querySelector('#menu_studyzone').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_study_zone).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var filter_name = this.previousSibling.previousSibling.getAttribute('filter-value');
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('<p style="font-family: \'Signika\',sans-serif;color: #4f81bd;font-size: 1.3rem;">M\xE9thodologie</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + filter_name + '</p>');
      modal.open();
    };
  });

  var helps_buttons_territ_unit = document.querySelector('#menu_territ_level').querySelectorAll('span.i_info');
  Array.prototype.slice.call(helps_buttons_territ_unit).forEach(function (btn_i) {
    // eslint-disable-next-line no-param-reassign
    btn_i.onclick = function () {
      var territ_level_name = this.previousSibling.previousSibling.getAttribute('value');
      // eslint-disable-next-line new-cap
      var modal = new tingle_min.modal({
        stickyFooter: false,
        closeMethods: ['overlay', 'button', 'escape'],
        closeLabel: 'Close',
        onOpen: function onOpen() {
          document.querySelector('div.tingle-modal.tingle-modal--visible').style.background = 'rgba(0,0,0,0,0.4)';
        },
        onClose: function onClose() {
          modal.destroy();
        }
      });
      modal.setContent('\n        <p style="font-family: \'Signika\',sans-serif; color: #4f81bd;font-size: 1.3rem;">Titre</p>\n        <p style="font-family: \'Signika\',sans-serif;text-align: justify;">' + territ_level_name + '</p>');
      modal.open();
    };
  });
}

loadData();

exports.app = app;
exports.resetColors = resetColors;
exports.bindTopButtons = bindTopButtons;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzIjpbIi4uLy4uL25vZGVfbW9kdWxlcy90aW5nbGUuanMvZGlzdC90aW5nbGUubWluLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9vcHRpb25zLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9oZWxwZXJzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9tZW51bGVmdC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvbWVudXRvcC5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvbWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3ZhbmlsbGEtZGF0YXRhYmxlcy9zcmMvdmFuaWxsYS1kYXRhVGFibGVzLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy90YWJsZS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvcHJlcGFyZV9kYXRhLmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy90YWJsZVJlc3VtZVN0YXQuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2NoYXJ0cy9iYXJDaGFydF8xdi5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvY2hhcnRzL2J1YmJsZUNoYXJ0XzF2LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jb250ZXh0TWVudS5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvY2hhcnRzL3NjYXR0ZXJQbG90XzJ2LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jaGFydHMvcmFkYXJDaGFydF8zdi5qcyIsIi4uLy4uL3NyYy9zY3JpcHRzL21vZHVsZXMvY2hhcnRzL3NpbWlsYXJpdHlfMnYuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tb2R1bGVzL2NoYXJ0cy9ib3hQbG90XzF2LmpzIiwiLi4vLi4vc3JjL3NjcmlwdHMvbW9kdWxlcy9jaGFydHMvcGFyYWxsZWxDb29yZHNfMnYuanMiLCIuLi8uLi9zcmMvc2NyaXB0cy9tYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiFmdW5jdGlvbih0LG8pe1wiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUobyk6XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9bygpOnQudGluZ2xlPW8oKX0odGhpcyxmdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dmFyIG89e29uQ2xvc2U6bnVsbCxvbk9wZW46bnVsbCxiZWZvcmVPcGVuOm51bGwsYmVmb3JlQ2xvc2U6bnVsbCxzdGlja3lGb290ZXI6ITEsZm9vdGVyOiExLGNzc0NsYXNzOltdLGNsb3NlTGFiZWw6XCJDbG9zZVwiLGNsb3NlTWV0aG9kczpbXCJvdmVybGF5XCIsXCJidXR0b25cIixcImVzY2FwZVwiXX07dGhpcy5vcHRzPXIoe30sbyx0KSx0aGlzLmluaXQoKX1mdW5jdGlvbiBvKCl7dGhpcy5tb2RhbEJveEZvb3RlciYmKHRoaXMubW9kYWxCb3hGb290ZXIuc3R5bGUud2lkdGg9dGhpcy5tb2RhbEJveC5jbGllbnRXaWR0aCtcInB4XCIsdGhpcy5tb2RhbEJveEZvb3Rlci5zdHlsZS5sZWZ0PXRoaXMubW9kYWxCb3gub2Zmc2V0TGVmdCtcInB4XCIpfWZ1bmN0aW9uIGUoKXt0aGlzLm1vZGFsPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKFwidGluZ2xlLW1vZGFsXCIpLDAhPT10aGlzLm9wdHMuY2xvc2VNZXRob2RzLmxlbmd0aCYmdGhpcy5vcHRzLmNsb3NlTWV0aG9kcy5pbmRleE9mKFwib3ZlcmxheVwiKSE9PS0xfHx0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoXCJ0aW5nbGUtbW9kYWwtLW5vT3ZlcmxheUNsb3NlXCIpLHRoaXMubW9kYWwuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLm9wdHMuY3NzQ2xhc3MuZm9yRWFjaChmdW5jdGlvbih0KXtcInN0cmluZ1wiPT10eXBlb2YgdCYmdGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKHQpfSx0aGlzKSx0aGlzLm9wdHMuY2xvc2VNZXRob2RzLmluZGV4T2YoXCJidXR0b25cIikhPT0tMSYmKHRoaXMubW9kYWxDbG9zZUJ0bj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpLHRoaXMubW9kYWxDbG9zZUJ0bi5jbGFzc0xpc3QuYWRkKFwidGluZ2xlLW1vZGFsX19jbG9zZVwiKSx0aGlzLm1vZGFsQ2xvc2VCdG5JY29uPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzcGFuXCIpLHRoaXMubW9kYWxDbG9zZUJ0bkljb24uY2xhc3NMaXN0LmFkZChcInRpbmdsZS1tb2RhbF9fY2xvc2VJY29uXCIpLHRoaXMubW9kYWxDbG9zZUJ0bkljb24uaW5uZXJIVE1MPVwiw5dcIix0aGlzLm1vZGFsQ2xvc2VCdG5MYWJlbD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3BhblwiKSx0aGlzLm1vZGFsQ2xvc2VCdG5MYWJlbC5jbGFzc0xpc3QuYWRkKFwidGluZ2xlLW1vZGFsX19jbG9zZUxhYmVsXCIpLHRoaXMubW9kYWxDbG9zZUJ0bkxhYmVsLmlubmVySFRNTD10aGlzLm9wdHMuY2xvc2VMYWJlbCx0aGlzLm1vZGFsQ2xvc2VCdG4uYXBwZW5kQ2hpbGQodGhpcy5tb2RhbENsb3NlQnRuSWNvbiksdGhpcy5tb2RhbENsb3NlQnRuLmFwcGVuZENoaWxkKHRoaXMubW9kYWxDbG9zZUJ0bkxhYmVsKSksdGhpcy5tb2RhbEJveD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLHRoaXMubW9kYWxCb3guY2xhc3NMaXN0LmFkZChcInRpbmdsZS1tb2RhbC1ib3hcIiksdGhpcy5tb2RhbEJveENvbnRlbnQ9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLm1vZGFsQm94Q29udGVudC5jbGFzc0xpc3QuYWRkKFwidGluZ2xlLW1vZGFsLWJveF9fY29udGVudFwiKSx0aGlzLm1vZGFsQm94LmFwcGVuZENoaWxkKHRoaXMubW9kYWxCb3hDb250ZW50KSx0aGlzLm9wdHMuY2xvc2VNZXRob2RzLmluZGV4T2YoXCJidXR0b25cIikhPT0tMSYmdGhpcy5tb2RhbC5hcHBlbmRDaGlsZCh0aGlzLm1vZGFsQ2xvc2VCdG4pLHRoaXMubW9kYWwuYXBwZW5kQ2hpbGQodGhpcy5tb2RhbEJveCl9ZnVuY3Rpb24gcygpe3RoaXMubW9kYWxCb3hGb290ZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSx0aGlzLm1vZGFsQm94Rm9vdGVyLmNsYXNzTGlzdC5hZGQoXCJ0aW5nbGUtbW9kYWwtYm94X19mb290ZXJcIiksdGhpcy5tb2RhbEJveC5hcHBlbmRDaGlsZCh0aGlzLm1vZGFsQm94Rm9vdGVyKX1mdW5jdGlvbiBpKCl7dGhpcy5fZXZlbnRzPXtjbGlja0Nsb3NlQnRuOnRoaXMuY2xvc2UuYmluZCh0aGlzKSxjbGlja092ZXJsYXk6bC5iaW5kKHRoaXMpLHJlc2l6ZTp0aGlzLmNoZWNrT3ZlcmZsb3cuYmluZCh0aGlzKSxrZXlib2FyZE5hdjpuLmJpbmQodGhpcyl9LHRoaXMub3B0cy5jbG9zZU1ldGhvZHMuaW5kZXhPZihcImJ1dHRvblwiKSE9PS0xJiZ0aGlzLm1vZGFsQ2xvc2VCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsdGhpcy5fZXZlbnRzLmNsaWNrQ2xvc2VCdG4pLHRoaXMubW9kYWwuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLHRoaXMuX2V2ZW50cy5jbGlja092ZXJsYXkpLHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsdGhpcy5fZXZlbnRzLnJlc2l6ZSksZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIix0aGlzLl9ldmVudHMua2V5Ym9hcmROYXYpfWZ1bmN0aW9uIG4odCl7dGhpcy5vcHRzLmNsb3NlTWV0aG9kcy5pbmRleE9mKFwiZXNjYXBlXCIpIT09LTEmJjI3PT09dC53aGljaCYmdGhpcy5pc09wZW4oKSYmdGhpcy5jbG9zZSgpfWZ1bmN0aW9uIGwodCl7dGhpcy5vcHRzLmNsb3NlTWV0aG9kcy5pbmRleE9mKFwib3ZlcmxheVwiKSE9PS0xJiYhZCh0LnRhcmdldCxcInRpbmdsZS1tb2RhbFwiKSYmdC5jbGllbnRYPHRoaXMubW9kYWwuY2xpZW50V2lkdGgmJnRoaXMuY2xvc2UoKX1mdW5jdGlvbiBkKHQsbyl7Zm9yKDsodD10LnBhcmVudEVsZW1lbnQpJiYhdC5jbGFzc0xpc3QuY29udGFpbnMobyk7KTtyZXR1cm4gdH1mdW5jdGlvbiBhKCl7dGhpcy5vcHRzLmNsb3NlTWV0aG9kcy5pbmRleE9mKFwiYnV0dG9uXCIpIT09LTEmJnRoaXMubW9kYWxDbG9zZUJ0bi5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIix0aGlzLl9ldmVudHMuY2xpY2tDbG9zZUJ0biksdGhpcy5tb2RhbC5yZW1vdmVFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsdGhpcy5fZXZlbnRzLmNsaWNrT3ZlcmxheSksd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJyZXNpemVcIix0aGlzLl9ldmVudHMucmVzaXplKSxkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLHRoaXMuX2V2ZW50cy5rZXlib2FyZE5hdil9ZnVuY3Rpb24gcigpe2Zvcih2YXIgdD0xO3Q8YXJndW1lbnRzLmxlbmd0aDt0KyspZm9yKHZhciBvIGluIGFyZ3VtZW50c1t0XSlhcmd1bWVudHNbdF0uaGFzT3duUHJvcGVydHkobykmJihhcmd1bWVudHNbMF1bb109YXJndW1lbnRzW3RdW29dKTtyZXR1cm4gYXJndW1lbnRzWzBdfWZ1bmN0aW9uIGgoKXt2YXIgdCxvPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aW5nbGUtdGVzdC10cmFuc2l0aW9uXCIpLGU9e3RyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsT1RyYW5zaXRpb246XCJvVHJhbnNpdGlvbkVuZFwiLE1velRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsV2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIn07Zm9yKHQgaW4gZSlpZih2b2lkIDAhPT1vLnN0eWxlW3RdKXJldHVybiBlW3RdfXZhciBjPWgoKTtyZXR1cm4gdC5wcm90b3R5cGUuaW5pdD1mdW5jdGlvbigpe3RoaXMubW9kYWx8fChlLmNhbGwodGhpcyksaS5jYWxsKHRoaXMpLGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKHRoaXMubW9kYWwsZG9jdW1lbnQuYm9keS5maXJzdENoaWxkKSx0aGlzLm9wdHMuZm9vdGVyJiZ0aGlzLmFkZEZvb3RlcigpKX0sdC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe251bGwhPT10aGlzLm1vZGFsJiYoYS5jYWxsKHRoaXMpLHRoaXMubW9kYWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm1vZGFsKSx0aGlzLm1vZGFsPW51bGwpfSx0LnByb3RvdHlwZS5vcGVuPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztcImZ1bmN0aW9uXCI9PXR5cGVvZiB0Lm9wdHMuYmVmb3JlT3BlbiYmdC5vcHRzLmJlZm9yZU9wZW4oKSx0aGlzLm1vZGFsLnN0eWxlLnJlbW92ZVByb3BlcnR5P3RoaXMubW9kYWwuc3R5bGUucmVtb3ZlUHJvcGVydHkoXCJkaXNwbGF5XCIpOnRoaXMubW9kYWwuc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwiZGlzcGxheVwiKSxkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5hZGQoXCJ0aW5nbGUtZW5hYmxlZFwiKSx0aGlzLnNldFN0aWNreUZvb3Rlcih0aGlzLm9wdHMuc3RpY2t5Rm9vdGVyKSx0aGlzLm1vZGFsLmNsYXNzTGlzdC5hZGQoXCJ0aW5nbGUtbW9kYWwtLXZpc2libGVcIiksYz90aGlzLm1vZGFsLmFkZEV2ZW50TGlzdGVuZXIoYyxmdW5jdGlvbiBvKCl7XCJmdW5jdGlvblwiPT10eXBlb2YgdC5vcHRzLm9uT3BlbiYmdC5vcHRzLm9uT3Blbi5jYWxsKHQpLHQubW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLG8sITEpfSwhMSk6XCJmdW5jdGlvblwiPT10eXBlb2YgdC5vcHRzLm9uT3BlbiYmdC5vcHRzLm9uT3Blbi5jYWxsKHQpLHRoaXMuY2hlY2tPdmVyZmxvdygpfSx0LnByb3RvdHlwZS5pc09wZW49ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMubW9kYWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGluZ2xlLW1vZGFsLS12aXNpYmxlXCIpfSx0LnByb3RvdHlwZS5jbG9zZT1mdW5jdGlvbigpe2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMub3B0cy5iZWZvcmVDbG9zZSl7dmFyIHQ9dGhpcy5vcHRzLmJlZm9yZUNsb3NlLmNhbGwodGhpcyk7aWYoIXQpcmV0dXJufWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcInRpbmdsZS1lbmFibGVkXCIpLHRoaXMubW9kYWwuY2xhc3NMaXN0LnJlbW92ZShcInRpbmdsZS1tb2RhbC0tdmlzaWJsZVwiKTt2YXIgbz10aGlzO2M/dGhpcy5tb2RhbC5hZGRFdmVudExpc3RlbmVyKGMsZnVuY3Rpb24gdCgpe28ubW9kYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihjLHQsITEpLG8ubW9kYWwuc3R5bGUuZGlzcGxheT1cIm5vbmVcIixcImZ1bmN0aW9uXCI9PXR5cGVvZiBvLm9wdHMub25DbG9zZSYmby5vcHRzLm9uQ2xvc2UuY2FsbCh0aGlzKX0sITEpOihvLm1vZGFsLnN0eWxlLmRpc3BsYXk9XCJub25lXCIsXCJmdW5jdGlvblwiPT10eXBlb2Ygby5vcHRzLm9uQ2xvc2UmJm8ub3B0cy5vbkNsb3NlLmNhbGwodGhpcykpfSx0LnByb3RvdHlwZS5zZXRDb250ZW50PWZ1bmN0aW9uKHQpe1wic3RyaW5nXCI9PXR5cGVvZiB0P3RoaXMubW9kYWxCb3hDb250ZW50LmlubmVySFRNTD10Oih0aGlzLm1vZGFsQm94Q29udGVudC5pbm5lckhUTUw9XCJcIix0aGlzLm1vZGFsQm94Q29udGVudC5hcHBlbmRDaGlsZCh0KSl9LHQucHJvdG90eXBlLmdldENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tb2RhbEJveENvbnRlbnR9LHQucHJvdG90eXBlLmFkZEZvb3Rlcj1mdW5jdGlvbigpe3MuY2FsbCh0aGlzKX0sdC5wcm90b3R5cGUuc2V0Rm9vdGVyQ29udGVudD1mdW5jdGlvbih0KXt0aGlzLm1vZGFsQm94Rm9vdGVyLmlubmVySFRNTD10fSx0LnByb3RvdHlwZS5nZXRGb290ZXJDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubW9kYWxCb3hGb290ZXJ9LHQucHJvdG90eXBlLnNldFN0aWNreUZvb3Rlcj1mdW5jdGlvbih0KXt0aGlzLmlzT3ZlcmZsb3coKXx8KHQ9ITEpLHQ/dGhpcy5tb2RhbEJveC5jb250YWlucyh0aGlzLm1vZGFsQm94Rm9vdGVyKSYmKHRoaXMubW9kYWxCb3gucmVtb3ZlQ2hpbGQodGhpcy5tb2RhbEJveEZvb3RlciksdGhpcy5tb2RhbC5hcHBlbmRDaGlsZCh0aGlzLm1vZGFsQm94Rm9vdGVyKSx0aGlzLm1vZGFsQm94Rm9vdGVyLmNsYXNzTGlzdC5hZGQoXCJ0aW5nbGUtbW9kYWwtYm94X19mb290ZXItLXN0aWNreVwiKSxvLmNhbGwodGhpcyksdGhpcy5tb2RhbEJveENvbnRlbnQuc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXT10aGlzLm1vZGFsQm94Rm9vdGVyLmNsaWVudEhlaWdodCsyMCtcInB4XCIpOnRoaXMubW9kYWxCb3hGb290ZXImJih0aGlzLm1vZGFsQm94LmNvbnRhaW5zKHRoaXMubW9kYWxCb3hGb290ZXIpfHwodGhpcy5tb2RhbC5yZW1vdmVDaGlsZCh0aGlzLm1vZGFsQm94Rm9vdGVyKSx0aGlzLm1vZGFsQm94LmFwcGVuZENoaWxkKHRoaXMubW9kYWxCb3hGb290ZXIpLHRoaXMubW9kYWxCb3hGb290ZXIuc3R5bGUud2lkdGg9XCJhdXRvXCIsdGhpcy5tb2RhbEJveEZvb3Rlci5zdHlsZS5sZWZ0PVwiXCIsdGhpcy5tb2RhbEJveENvbnRlbnQuc3R5bGVbXCJwYWRkaW5nLWJvdHRvbVwiXT1cIlwiLHRoaXMubW9kYWxCb3hGb290ZXIuY2xhc3NMaXN0LnJlbW92ZShcInRpbmdsZS1tb2RhbC1ib3hfX2Zvb3Rlci0tc3RpY2t5XCIpKSl9LHQucHJvdG90eXBlLmFkZEZvb3RlckJ0bj1mdW5jdGlvbih0LG8sZSl7dmFyIHM9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJ1dHRvblwiKTtyZXR1cm4gcy5pbm5lckhUTUw9dCxzLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLGUpLFwic3RyaW5nXCI9PXR5cGVvZiBvJiZvLmxlbmd0aCYmby5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbih0KXtzLmNsYXNzTGlzdC5hZGQodCl9KSx0aGlzLm1vZGFsQm94Rm9vdGVyLmFwcGVuZENoaWxkKHMpLHN9LHQucHJvdG90eXBlLnJlc2l6ZT1mdW5jdGlvbigpe2NvbnNvbGUud2FybihcIlJlc2l6ZSBpcyBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiAxLjBcIil9LHQucHJvdG90eXBlLmlzT3ZlcmZsb3c9ZnVuY3Rpb24oKXt2YXIgdD13aW5kb3cuaW5uZXJIZWlnaHQsbz10aGlzLm1vZGFsQm94LmNsaWVudEhlaWdodDtyZXR1cm4gbz49dH0sdC5wcm90b3R5cGUuY2hlY2tPdmVyZmxvdz1mdW5jdGlvbigpe3RoaXMubW9kYWwuY2xhc3NMaXN0LmNvbnRhaW5zKFwidGluZ2xlLW1vZGFsLS12aXNpYmxlXCIpJiYodGhpcy5pc092ZXJmbG93KCk/dGhpcy5tb2RhbC5jbGFzc0xpc3QuYWRkKFwidGluZ2xlLW1vZGFsLS1vdmVyZmxvd1wiKTp0aGlzLm1vZGFsLmNsYXNzTGlzdC5yZW1vdmUoXCJ0aW5nbGUtbW9kYWwtLW92ZXJmbG93XCIpLCF0aGlzLmlzT3ZlcmZsb3coKSYmdGhpcy5vcHRzLnN0aWNreUZvb3Rlcj90aGlzLnNldFN0aWNreUZvb3RlcighMSk6dGhpcy5pc092ZXJmbG93KCkmJnRoaXMub3B0cy5zdGlja3lGb290ZXImJihvLmNhbGwodGhpcyksdGhpcy5zZXRTdGlja3lGb290ZXIoITApKSl9LHttb2RhbDp0fX0pOyIsImV4cG9ydCBjb25zdCBjb2xvcl9jb3VudHJpZXMgPSAncmdiKDE0NywxNDQsMjUyKSc7XG5leHBvcnQgY29uc3QgY29sb3JfZGlzYWJsZWQgPSAncmdiKDIxNCwgMjE0LCAyMTQpJztcbmV4cG9ydCBjb25zdCBjb2xvcl9zdXAgPSAnZ3JlZW4nO1xuZXhwb3J0IGNvbnN0IGNvbG9yX2luZiA9ICdyZWQnO1xuZXhwb3J0IGNvbnN0IGNvbG9yX2hpZ2hsaWdodCA9ICd5ZWxsb3cnO1xuZXhwb3J0IGNvbnN0IGNvbG9yX2RlZmF1bHRfZGlzc2ltID0gJ2RhcmtyZWQnO1xuIiwiaW1wb3J0IHsgY29sb3JfaW5mLCBjb2xvcl9zdXAgfSBmcm9tICcuL29wdGlvbnMnO1xuXG5jb25zdCBtYXRoX3BvdyA9IE1hdGgucG93O1xuY29uc3QgbWF0aF9hYnMgPSBNYXRoLmFicztcbmNvbnN0IG1hdGhfcm91bmQgPSBNYXRoLnJvdW5kO1xuY29uc3QgbWF0aF9tYXggPSBNYXRoLm1heDtcbmNvbnN0IG1hdGhfc2luID0gTWF0aC5zaW47XG5jb25zdCBtYXRoX2NvcyA9IE1hdGguY29zO1xuY29uc3QgbWF0aF9zcXJ0ID0gTWF0aC5zcXJ0O1xuY29uc3QgSEFMRl9QSSA9IE1hdGguUEkgLyAyO1xuXG5mdW5jdGlvbiBwcmVwYXJlVG9vbHRpcChwYXJlbnRfc3ZnX2VsZW0pIHtcbiAgY29uc3QgdG9vbHRpcCA9IHBhcmVudF9zdmdfZWxlbS5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCdjbGFzcycsICd0b29sdGlwJylcbiAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuXG4gIHRvb2x0aXAuYXBwZW5kKCdyZWN0JylcbiAgICAuYXR0cnMoeyB4OiAxNSwgd2lkdGg6IDAsIGhlaWdodDogMCwgZmlsbDogJ2JlaWdlJyB9KVxuICAgIC5zdHlsZSgnb3BhY2l0eScsIDAuNzUpO1xuXG4gIHRvb2x0aXAuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cnMoeyBjbGFzczogJ2lkX2ZlYXR1cmUnLCB4OiAyNSwgZHk6ICcxLjJlbScsICdmb250LXNpemUnOiAnMTRweCcgfSlcbiAgICAuc3R5bGUoJ2ZvbnQtd2VpZ2h0JywgJ2JvbGQnKTtcblxuICB0b29sdGlwLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHJzKHtcbiAgICAgIGNsYXNzOiAndmFsdWVfZmVhdHVyZTEnLFxuICAgICAgeDogMjUsXG4gICAgICBkeTogJzIuNGVtJyxcbiAgICAgICdmb250LXNpemUnOiAnMTRweCcsXG4gICAgfSk7XG5cbiAgdG9vbHRpcC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRycyh7XG4gICAgICBjbGFzczogJ3ZhbHVlX2ZlYXR1cmUyJyxcbiAgICAgIHg6IDI1LFxuICAgICAgZHk6ICczLjVlbScsXG4gICAgICAnZm9udC1zaXplJzogJzE0cHgnLFxuICAgIH0pO1xuXG4gIHRvb2x0aXAuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cnMoe1xuICAgICAgY2xhc3M6ICd2YWx1ZV9mZWF0dXJlMycsXG4gICAgICB4OiAyNSxcbiAgICAgIGR5OiAnNC42ZW0nLFxuICAgICAgJ2ZvbnQtc2l6ZSc6ICcxNHB4JyxcbiAgICB9KTtcblxuICB0b29sdGlwLmFwcGVuZCgndGV4dCcpXG4gICAgLmF0dHJzKHtcbiAgICAgIGNsYXNzOiAndmFsdWVfZmVhdHVyZTQnLFxuICAgICAgeDogMjUsXG4gICAgICBkeTogJzUuN2VtJyxcbiAgICAgICdmb250LXNpemUnOiAnMTRweCcsXG4gICAgfSk7XG5cbiAgdG9vbHRpcC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRycyh7XG4gICAgICBjbGFzczogJ3ZhbHVlX2ZlYXR1cmU1JyxcbiAgICAgIHg6IDI1LFxuICAgICAgZHk6ICc2LjhlbScsXG4gICAgICAnZm9udC1zaXplJzogJzE0cHgnLFxuICAgIH0pO1xuXG4gIHJldHVybiB0b29sdGlwO1xufVxuXG5mdW5jdGlvbiB1bmJpbmRVSSgpIHtcbiAgLy8gUmVtb3ZlcyB0aGUgY3VycmVudCBiZWhhdmlvciBjb3JyZXNwb25kaW5nIHRvIGNsaWNraW5nIG9uIHRoZSBsZWZ0IG1lbnU6XG4gIGQzLnNlbGVjdEFsbCgnc3Bhbi5maWx0ZXJfdicpXG4gICAgLm9uKCdjbGljaycsIG51bGwpO1xuICBkMy5zZWxlY3RBbGwoJ3NwYW4udGFyZ2V0X3JlZ2lvbicpXG4gICAgLm9uKCdjbGljaycsIG51bGwpO1xuICBkMy5zZWxlY3RBbGwoJ3NwYW4ubGFiZWxfY2hrJylcbiAgICAub24oJ2NsaWNrJywgbnVsbCk7XG5cbiAgLy8gUmVtb3ZlIHRoZSB0YWJsZTpcbiAgZDMuc2VsZWN0KCcuZGF0YVRhYmxlLXdyYXBwZXInKS5yZW1vdmUoKTtcblxuICAvLyBVbmJpbmQgYnV0dG9ucyBvbiB0aGUgdG9wIG9mIHRoZSBtYXA6XG4gIGQzLnNlbGVjdCgnI2hlYWRlcl9tYXAnKVxuICAgIC5zZWxlY3RBbGwoJ2ltZycpXG4gICAgLm9uKCdjbGljaycsIG51bGwpO1xuXG4gIC8vIFJlbW92ZSB0aGUgc2VsZWN0aW9uIG1lbnUgKG9yIGJ1dHRvbnMpIHVuZGVyIHRoZSBjaGFydDpcbiAgZDMuc2VsZWN0KCcjYmFyX3NlY3Rpb24gPiAjbWVudV9zZWxlY3Rpb24nKS5yZW1vdmUoKTtcblxuICAvLyBSZW1vdmVzIHRoZSBjdXJyZW50IGJlaGF2aW9yIGNvcnJlc3BvbmRpbmcgdG8gY2xpY2tpbmcgb24gdGhlIHRvcCBtZW51OlxuICBkMy5zZWxlY3RBbGwoJy50eXBlX2NoYXJ0LnRpdGxlX21lbnUnKS5vbignY2xpY2snLCBudWxsKTtcblxuICAvLyBSZW1vdmVzIHRoZSBjdXJyZW50IGJlaGF2aW9yIGNvcnJlc3BvbmRpbmcgdG8gcHJlc3NpbmcgdGhlIENvbnRyb2wga2V5OlxuICBkb2N1bWVudC5vbmtleXVwID0gbnVsbDtcbiAgZG9jdW1lbnQub25rZXlkb3duID0gbnVsbDtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIGNvbXBhcmUgdGhlIHZhbHVlIG9mIGEgZmVhdHVyZSB0byB0aGUgcmVmZXJlbmNlIHZhbHVlIChpLmUuIHRoZSB2YWx1ZSBvZiBcIm15IHJlZ2lvblwiKVxuKiBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSBjb2xvciAoc2VyaWUgbWF5IGJlIGludmVyc2VkKVxuKlxuKiBAcGFyYW0ge051bWJlcn0gdGVzdF92YWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBjb21wYXJlZCB0byB0aGUgdmFsdWUgb2YgXCJteSByZWdpb25cIi5cbiogQHBhcmFtIHtOdW1iZXJ9IHJlZl92YWx1ZSAtIFRoZSB2YWx1ZSBvZiBteSByZWdpb24uXG4qIEBwYXJhbSB7Qm9vbGVhbn0gc2VyaWVfaW52ZXJzZWQgLSBXaGV0aGVyIHRoZSBzZXJpZSBpcyBpbnZlcnNlZCBvciBub3QgaW4gdGhlIGN1cnJlbnQgY2hhcnQuXG4qIEByZXR1cm4ge1N0cmluZ30gLSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBjb2xvciB0byBiZSB1c2VkIGZvciB0aGlzIHZhbHVlLlxuKlxuKi9cbmNvbnN0IGNvbXAgPSAodGVzdF92YWx1ZSwgcmVmX3ZhbHVlLCBzZXJpZV9pbnZlcnNlZCkgPT4ge1xuICBpZiAodGVzdF92YWx1ZSA8IHJlZl92YWx1ZSkge1xuICAgIHJldHVybiBzZXJpZV9pbnZlcnNlZCA/IGNvbG9yX3N1cCA6IGNvbG9yX2luZjtcbiAgfVxuICByZXR1cm4gc2VyaWVfaW52ZXJzZWQgPyBjb2xvcl9pbmYgOiBjb2xvcl9zdXA7XG59O1xuXG5cbi8qKlxuKiBGdW5jdGlvbiB0byBjb21wYXJlIHRoZSB2YWx1ZSBvZiBhIGZlYXR1cmUgdG8gdGhlIHJlZmVyZW5jZSB2YWx1ZSAoaS5lLiB0aGUgdmFsdWUgb2YgXCJteSByZWdpb25cIilcbiogYW5kIHJldHVybiB0aGUgYXBwcm9wcmlhdGUgY29sb3IgKHNlcmllIG1heSBiZSBpbnZlcnNlZClcbipcbiogQHBhcmFtIHtOdW1iZXJ9IHZhbDEgLSBUaGUgdmFsdWUgdG8gYmUgY29tcGFyZWQgdG8gdGhlIHZhbHVlIG9mIFwibXkgcmVnaW9uXCIgZm9yIHRoZSAxc3QgdmFyaWFibGUuXG4qIEBwYXJhbSB7TnVtYmVyfSB2YWwyIC0gVGhlIHZhbHVlIHRvIGJlIGNvbXBhcmVkIHRvIHRoZSB2YWx1ZSBvZiBcIm15IHJlZ2lvblwiIGZvciB0aGUgMm5kIHZhcmlhYmxlLlxuKiBAcGFyYW0ge051bWJlcn0gcmVmX3ZhbDEgLSBUaGUgdmFsdWUgb2YgbXkgcmVnaW9uIGZvciBoZSBmaXJzdCB2YXJpYWJsZS5cbiogQHBhcmFtIHtOdW1iZXJ9IHJlZl92YWwyIC0gVGhlIHZhbHVlIG9mIG15IHJlZ2lvbiBmb3IgdGhlIHNlY29uZCB2YXJpYWJsZS5cbiogQHBhcmFtIHtCb29sZWFufSB4SW52ZXJzZWQgLSBXaGV0aGVyIHRoZSBzZXJpZSBpcyBpbnZlcnNlZCBvbiB0aGUgeCBheGlzIGluIHRoZSBjdXJyZW50IGNoYXJ0LlxuKiBAcGFyYW0ge0Jvb2xlYW59IHlJbnZlcnNlZCAtIFdoZXRoZXIgdGhlIHNlcmllIGlzIGludmVyc2VkIG9uIHRoZSB5IGF4aXMgaW4gdGhlIGN1cnJlbnQgY2hhcnQuXG4qIEByZXR1cm4ge1N0cmluZ30gLSBBIHN0cmluZyBjb250YWluaW5nIHRoZSBjb2xvciB0byBiZSB1c2VkIGZvciB0aGVzZXMgdmFsdWVzLlxuKlxuKi9cbmNvbnN0IGNvbXAyID0gKHZhbDEsIHZhbDIsIHJlZl92YWwxLCByZWZfdmFsMiwgeEludmVyc2VkLCB5SW52ZXJzZWQpID0+IHtcbiAgaWYgKCh2YWwxIDwgcmVmX3ZhbDEgJiYgIXhJbnZlcnNlZCkgfHwgKHZhbDEgPiByZWZfdmFsMSAmJiB4SW52ZXJzZWQpKSB7IC8vIHZhbDEgaXMgaW5mZXJpb3I6XG4gICAgaWYgKHZhbDIgPCByZWZfdmFsMikge1xuICAgICAgcmV0dXJuIHlJbnZlcnNlZCA/ICdyZ2IoMTYwLCAzMCwgMTYwKScgOiBjb2xvcl9pbmY7XG4gICAgfVxuICAgIHJldHVybiB5SW52ZXJzZWQgPyBjb2xvcl9pbmYgOiAncmdiKDE2MCwgMzAsIDE2MCknO1xuICB9XG4gIC8vIHZhbDEgaXMgc3VwZXJpb3IgOlxuICBpZiAodmFsMiA+IHJlZl92YWwyKSB7XG4gICAgcmV0dXJuICF5SW52ZXJzZWQgPyBjb2xvcl9zdXAgOiAnb3JhbmdlJztcbiAgfVxuICByZXR1cm4gIXlJbnZlcnNlZCA/ICdvcmFuZ2UnIDogY29sb3Jfc3VwO1xufTtcblxuY2xhc3MgUmVjdCB7XG4gIGNvbnN0cnVjdG9yKHRvcGxlZnQsIGJvdHRvbXJpZ2h0KSB7XG4gICAgdGhpcy54bWluID0gdG9wbGVmdFswXTtcbiAgICB0aGlzLnhtYXggPSBib3R0b21yaWdodFswXTtcbiAgICB0aGlzLnltaW4gPSB0b3BsZWZ0WzFdO1xuICAgIHRoaXMueW1heCA9IGJvdHRvbXJpZ2h0WzFdO1xuICB9XG5cbiAgY29udGFpbnMocHQpIHtcbiAgICBpZiAocHRbMF0gPj0gdGhpcy54bWluICYmIHB0WzBdIDw9IHRoaXMueG1heFxuICAgICAgICAmJiBwdFsxXSA+PSB0aGlzLnltaW4gJiYgcHRbMV0gPD0gdGhpcy55bWF4KSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmNvbnN0IFByb3BTaXplciA9IGZ1bmN0aW9uIFByb3BTaXplcihmaXhlZF92YWx1ZSwgZml4ZWRfc2l6ZSkge1xuICB0aGlzLmZpeGVkX3ZhbHVlID0gZml4ZWRfdmFsdWU7XG4gIGNvbnN0IHNxcnQgPSBNYXRoLnNxcnQ7XG4gIGNvbnN0IGFicyA9IE1hdGguYWJzO1xuICBjb25zdCBQSSA9IE1hdGguUEk7XG4gIHRoaXMuc21heCA9IGZpeGVkX3NpemUgKiBmaXhlZF9zaXplICogUEk7XG4gIHRoaXMuc2NhbGUgPSB2YWwgPT4gc3FydChhYnModmFsKSAqIHRoaXMuc21heCAvIHRoaXMuZml4ZWRfdmFsdWUpIC8gUEk7XG4gIC8vIHRoaXMuZ2V0X3ZhbHVlID0gc2l6ZSA9PiAoKHNpemUgKiBQSSkgKiogMikgLyB0aGlzLnNtYXggKiB0aGlzLmZpeGVkX3ZhbHVlO1xuICAvLyBVc2UgTWF0aCBwb3cgdG8gc3VwcG9ydCBicm93c2VyIHdpdGhvdXQgKiogb3BlcmF0b3I6XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLXByb3BlcnRpZXNcbiAgdGhpcy5nZXRfdmFsdWUgPSBzaXplID0+IE1hdGgucG93KHNpemUgKiBQSSwgMikgLyB0aGlzLnNtYXggKiB0aGlzLmZpeGVkX3ZhbHVlO1xufTtcblxuY29uc3QgcmVtb3ZlRHVwbGljYXRlcyA9IGZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZXMoYXJyKSB7XG4gIGNvbnN0IHRtcCA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbGVuX2FyciA9IGFyci5sZW5ndGg7IGkgPCBsZW5fYXJyOyBpKyspIHtcbiAgICBpZiAodG1wLmluZGV4T2YoYXJyW2ldKSA9PT0gLTEpIHtcbiAgICAgIHRtcC5wdXNoKGFycltpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0bXA7XG59O1xuXG5jb25zdCBnZXRTdmdQYXRoVHlwZSA9IChwYXRoKSA9PiB7XG4gIGlmIChwYXRoLmluZGV4T2YoJ00gJykgPiAtMSAmJiBwYXRoLmluZGV4T2YoJyBMICcpID4gLTEpIHtcbiAgICByZXR1cm4gMjtcbiAgfVxuICByZXR1cm4gMTtcbn07XG5cbmNvbnN0IHN2Z1BhdGhUb0Nvb3JkcyA9IChwYXRoLCB0eXBlX3BhdGgpID0+IHtcbiAgaWYgKHR5cGVfcGF0aCA9PT0gMSkge1xuICAgIHJldHVybiBwYXRoLnNsaWNlKDEpLnNwbGl0KCdMJykubWFwKHB0ID0+IHB0LnNwbGl0KCcsJykubWFwKGEgPT4gK2EpKTtcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZSgyKS5zcGxpdCgnIEwgJykubWFwKHB0ID0+IHB0LnNwbGl0KCcgJykubWFwKGEgPT4gK2EpKTtcbn07XG5cbmZ1bmN0aW9uIGNvbXB1dGVQZXJjZW50aWxlUmFuayhvYmosIGZpZWxkX25hbWUsIHJlc3VsdF9maWVsZF9uYW1lKSB7XG4gIGNvbnN0IHZhbHVlcyA9IG9iai5tYXAoZCA9PiBkW2ZpZWxkX25hbWVdKTtcbiAgY29uc3QgbGVuX3ZhbHVlcyA9IHZhbHVlcy5sZW5ndGg7XG4gIGNvbnN0IGdldFBSID0gKHYpID0+IHtcbiAgICBsZXQgY291bnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuX3ZhbHVlczsgaSsrKSB7XG4gICAgICBpZiAodmFsdWVzW2ldIDw9IHYpIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIDEwMCAqIGNvdW50IC8gbGVuX3ZhbHVlcztcbiAgfTtcbiAgZm9yIChsZXQgaXggPSAwOyBpeCA8IGxlbl92YWx1ZXM7IGl4KyspIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBvYmpbaXhdW3Jlc3VsdF9maWVsZF9uYW1lXSA9IGdldFBSKHZhbHVlc1tpeF0pO1xuICB9XG59XG5cbmNvbnN0IF9nZXRQUiA9ICh2LCBzZXJpZSkgPT4ge1xuICBsZXQgY291bnQgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNlcmllLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHNlcmllW2ldIDw9IHYpIHtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuICB9XG4gIHJldHVybiAxMDAgKiBjb3VudCAvIHNlcmllLmxlbmd0aDtcbn07XG5cbmNvbnN0IGdldE1lYW4gPSAoc2VyaWUpID0+IHtcbiAgY29uc3QgbmJfdmFsdWVzID0gc2VyaWUubGVuZ3RoO1xuICBsZXQgc3VtID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuYl92YWx1ZXM7IGkrKykge1xuICAgIHN1bSArPSBzZXJpZVtpXTtcbiAgfVxuICByZXR1cm4gc3VtIC8gbmJfdmFsdWVzO1xufTtcblxuY29uc3QgZ2V0U3RkRGV2ID0gKHNlcmllLCBtZWFuX3ZhbHVlKSA9PiB7XG4gIGNvbnN0IG5iX3ZhbHVlcyA9IHNlcmllLmxlbmd0aDtcbiAgaWYgKCFtZWFuX3ZhbHVlKSB7XG4gICAgbWVhbl92YWx1ZSA9IGdldE1lYW4oc2VyaWUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIH1cbiAgbGV0IHN1bSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmJfdmFsdWVzOyBpKyspIHtcbiAgICBzdW0gKz0gbWF0aF9wb3coc2VyaWVbaV0gLSBtZWFuX3ZhbHVlLCAyKTtcbiAgfVxuICByZXR1cm4gbWF0aF9zcXJ0KCgxIC8gbmJfdmFsdWVzKSAqIHN1bSk7XG59O1xuXG5jb25zdCBnZXRTdGFuZGFyZGl6ZWRNZWFuU3RkRGV2ID0gKHNlcmllKSA9PiB7XG4gIGNvbnN0IG1lYW4gPSBnZXRNZWFuKHNlcmllKTtcbiAgY29uc3Qgc3RkZGV2ID0gZ2V0U3RkRGV2KHNlcmllLCBtZWFuKTtcbiAgcmV0dXJuIHNlcmllLm1hcCh2YWwgPT4gKHZhbCAtIG1lYW4pIC8gc3RkZGV2KTtcbn07XG5cbmNvbnN0IHNodWZmbGUgPSAoYXJyYXkpID0+IHtcbiAgZm9yIChsZXQgaSA9IGFycmF5Lmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICBjb25zdCBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgW2FycmF5W2ldLCBhcnJheVtqXV0gPSBbYXJyYXlbal0sIGFycmF5W2ldXTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59O1xuXG5leHBvcnQge1xuICBjb21wLFxuICBjb21wMixcbiAgbWF0aF9hYnMsXG4gIG1hdGhfcm91bmQsXG4gIG1hdGhfc2luLFxuICBtYXRoX2NvcyxcbiAgbWF0aF9tYXgsXG4gIG1hdGhfc3FydCxcbiAgbWF0aF9wb3csXG4gIEhBTEZfUEksXG4gIFJlY3QsXG4gIFByb3BTaXplcixcbiAgdW5iaW5kVUksXG4gIHByZXBhcmVUb29sdGlwLFxuICByZW1vdmVEdXBsaWNhdGVzLFxuICBnZXRTdmdQYXRoVHlwZSxcbiAgc3ZnUGF0aFRvQ29vcmRzLFxuICBjb21wdXRlUGVyY2VudGlsZVJhbmssXG4gIF9nZXRQUixcbiAgZ2V0TWVhbixcbiAgZ2V0U3RkRGV2LFxuICBnZXRTdGFuZGFyZGl6ZWRNZWFuU3RkRGV2LFxuICBzaHVmZmxlLFxufTtcbiIsImltcG9ydCB7IHJlbW92ZUR1cGxpY2F0ZXMgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBjcmVhdGVNZW51ID0gZnVuY3Rpb24gY3JlYXRlTWVudShuYW1lcywgdmFyaWFibGVzLCBzdHVkeV96b25lcywgdGVycml0b3JpYWxfbWVzaCkge1xuICAvLyBGaXJzdCBzZWN0aW9uLCByZWdpb25zIG5hbWVzOlxuICBjb25zdCB0aXRsZV9zZWN0aW9uMSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgdGl0bGVfc2VjdGlvbjEuY2xhc3NOYW1lID0gJ3RpdGxlX21lbnUnO1xuICB0aXRsZV9zZWN0aW9uMS5pbm5lckhUTUwgPSAnTWEgcsOpZ2lvbic7XG4gIGNvbnN0IHNlY3Rpb24xID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIHNlY3Rpb24xLmNsYXNzTmFtZSA9ICdib3gnO1xuICBzZWN0aW9uMS5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgc2VjdGlvbjEuc3R5bGUuaGVpZ2h0ID0gJzE4MHB4JztcbiAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gbmFtZXMubGVuZ3RoOyBpIDwgbGVuX2k7IGkrKykge1xuICAgIGNvbnN0IGlkID0gbmFtZXNbaV0uZ2VvO1xuICAgIGNvbnN0IG5hbWUgPSBuYW1lc1tpXS5Ob207XG4gICAgY29uc3QgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgZW50cnkuaW5uZXJIVE1MID0gYDxzcGFuIHZhbHVlPVwiJHtpZH1cIiBjbGFzcz0ndGFyZ2V0X3JlZ2lvbiBzcXVhcmUnPjwvc3Bhbj48c3BhbiBjbGFzcz1cImxhYmVsX2Noa1wiPiR7bmFtZX08L3NwYW4+YDtcbiAgICBzZWN0aW9uMS5hcHBlbmRDaGlsZChlbnRyeSk7XG4gIH1cblxuICAvLyBTZWNvbmQgc2VjdGlvbiwgZ3JvdXBzIG9mIHZhcmlhYmxlczpcbiAgY29uc3QgdGl0bGVfc2VjdGlvbjIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gIHRpdGxlX3NlY3Rpb24yLmNsYXNzTmFtZSA9ICd0aXRsZV9tZW51JztcbiAgdGl0bGVfc2VjdGlvbjIuaW5uZXJIVE1MID0gJ01vbi9tZXMgaW5kaWNhdGV1cnMnO1xuICBjb25zdCBzZWN0aW9uMiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZWN0aW9uMi5pZCA9ICdtZW51X3ZhcmlhYmxlcyc7XG4gIHNlY3Rpb24yLmNsYXNzTmFtZSA9ICdib3gnO1xuICBzZWN0aW9uMi5zdHlsZS5vdmVyZmxvdyA9ICdhdXRvJztcbiAgc2VjdGlvbjIuc3R5bGUuaGVpZ2h0ID0gJzE3MHB4JztcblxuICAvLyBGaWx0ZXIgdGhlIFwidmFyaWFibGVzXCIgdmFyaWFibGUgdG8gZmV0Y2ggdGhlIGdyb3VwIG5hbWVzIDpcbiAgY29uc3QgZ3JvdXBzX3ZhciA9IHJlbW92ZUR1cGxpY2F0ZXModmFyaWFibGVzLm1hcChkID0+IGQuZ3JvdXApKTtcblxuICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSBncm91cHNfdmFyLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICBjb25zdCBncF9uYW1lID0gZ3JvdXBzX3ZhcltpXTtcbiAgICBjb25zdCBlbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBlbnRyeS5jbGFzc05hbWUgPSAnbmFtZV9ncm91cF92YXInO1xuICAgIGVudHJ5LmlubmVySFRNTCA9IGA8c3BhbiBjbGFzcz0nc3F1YXJlJz48L3NwYW4+PHNwYW4+JHtncF9uYW1lfTwvc3Bhbj5gO1xuICAgIHNlY3Rpb24yLmFwcGVuZENoaWxkKGVudHJ5KTtcbiAgICBjb25zdCBkaXZfZ3JwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgZGl2X2dycC5zdHlsZS5kaXNwbGF5ID0gaSA9PT0gMCA/IG51bGwgOiAnbm9uZSc7XG4gICAgY29uc3QgdmFyX25hbWVzID0gdmFyaWFibGVzLmZpbHRlcihkID0+IGQuZ3JvdXAgPT09IGdwX25hbWUpO1xuICAgIGZvciAobGV0IGogPSAwLCBsZW5faiA9IHZhcl9uYW1lcy5sZW5ndGg7IGogPCBsZW5fajsgaisrKSB7XG4gICAgICBjb25zdCBuYW1lX3ZhciA9IHZhcl9uYW1lc1tqXS5uYW1lO1xuICAgICAgY29uc3QgY29kZV92YXIgPSB2YXJfbmFtZXNbal0ucmF0aW87XG4gICAgICBjb25zdCBzdWJfZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgICBzdWJfZW50cnkuY2xhc3NOYW1lID0gJ3NtYWxsJztcbiAgICAgIHN1Yl9lbnRyeS5pbm5lckhUTUwgPSBgPHNwYW4gdmFsdWU9XCIke2NvZGVfdmFyfVwiIGNsYXNzPVwidGFyZ2V0X3ZhcmlhYmxlIHNtYWxsX3NxdWFyZVwiPjwvc3Bhbj48c3BhbiBjbGFzcz1cImxhYmVsX2Noa1wiPiR7bmFtZV92YXJ9PC9zcGFuPjxzcGFuIGNsYXNzPVwiaV9pbmZvXCI+aTwvc3Bhbj5gO1xuICAgICAgZGl2X2dycC5hcHBlbmRDaGlsZChzdWJfZW50cnkpO1xuICAgIH1cbiAgICBzZWN0aW9uMi5hcHBlbmRDaGlsZChkaXZfZ3JwKTtcbiAgfVxuXG4gIC8vIFRoaXJkIHNlY3Rpb24sIHN0dWR5IHpvbmU6XG4gIGNvbnN0IHRpdGxlX3NlY3Rpb24zID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICB0aXRsZV9zZWN0aW9uMy5jbGFzc05hbWUgPSAndGl0bGVfbWVudSc7XG4gIHRpdGxlX3NlY3Rpb24zLmlubmVySFRNTCA9ICdNb24gZXNwYWNlIGRcXCfDqXR1ZGUnO1xuICBjb25zdCBzZWN0aW9uMyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZWN0aW9uMy5pZCA9ICdtZW51X3N0dWR5em9uZSc7XG4gIHNlY3Rpb24zLmNsYXNzTmFtZSA9ICdib3gnO1xuICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSBzdHVkeV96b25lcy5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gICAgY29uc3QgZW50cnkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XG4gICAgY29uc3Qgem9uZSA9IHN0dWR5X3pvbmVzW2ldO1xuICAgIGVudHJ5LmlubmVySFRNTCA9IGA8c3BhbiBmaWx0ZXItdmFsdWU9XCIke3pvbmUuaWR9XCIgY2xhc3M9J2ZpbHRlcl92IHNxdWFyZSc+PC9zcGFuPjxzcGFuIGNsYXNzPVwibGFiZWxfY2hrXCI+JHt6b25lLm5hbWV9PC9zcGFuPjxzcGFuIGNsYXNzPVwiaV9pbmZvXCI+aTwvc3Bhbj5gO1xuICAgIHNlY3Rpb24zLmFwcGVuZENoaWxkKGVudHJ5KTtcbiAgfVxuXG4gIC8vIEZvdXJ0aCBzZWN0aW9uOlxuICBjb25zdCB0aXRsZV9zZWN0aW9uNCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgdGl0bGVfc2VjdGlvbjQuY2xhc3NOYW1lID0gJ3RpdGxlX21lbnUnO1xuICB0aXRsZV9zZWN0aW9uNC5pbm5lckhUTUwgPSAnTWFpbGxhZ2UgdGVycml0b3JpYWwgZFxcJ2FuYWx5c2UnO1xuICBjb25zdCBzZWN0aW9uNCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBzZWN0aW9uNC5pZCA9ICdtZW51X3RlcnJpdF9sZXZlbCc7XG4gIHNlY3Rpb240LmNsYXNzTmFtZSA9ICdib3gnO1xuICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSB0ZXJyaXRvcmlhbF9tZXNoLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICBjb25zdCBlbnRyeSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBjb25zdCB0ZXJyaXRfbGV2ZWwgPSB0ZXJyaXRvcmlhbF9tZXNoW2ldO1xuICAgIGVudHJ5LmlubmVySFRNTCA9IGA8c3BhbiB2YWx1ZT1cIiR7dGVycml0X2xldmVsLmlkfVwiIGNsYXNzPSdzcXVhcmUgdGVycml0X2xldmVsJz48L3NwYW4+PHNwYW4gY2xhc3M9XCJsYWJlbF9jaGtcIj4ke3RlcnJpdF9sZXZlbC5uYW1lfTwvc3Bhbj48c3BhbiBjbGFzcz1cImlfaW5mb1wiPmk8L3NwYW4+YDtcbiAgICBzZWN0aW9uNC5hcHBlbmRDaGlsZChlbnRyeSk7XG4gIH1cblxuICAvLyBUaGUgYWN0dWFsIG1lbnUgY29udGFpbmluZyB0aGVzZSA0IHNlY3Rpb25zOlxuICBjb25zdCBtZW51ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21lbnUnKTtcbiAgbWVudS5pZCA9ICdtZW51JztcbiAgbWVudS5zdHlsZS53aWR0aCA9ICczNDBweCc7XG4gIG1lbnUuc3R5bGUuZmxvYXQgPSAnbGVmdCc7XG4gIG1lbnUuYXBwZW5kQ2hpbGQodGl0bGVfc2VjdGlvbjEpO1xuICBtZW51LmFwcGVuZENoaWxkKHNlY3Rpb24xKTtcbiAgbWVudS5hcHBlbmRDaGlsZCh0aXRsZV9zZWN0aW9uMik7XG4gIG1lbnUuYXBwZW5kQ2hpbGQoc2VjdGlvbjIpO1xuICBtZW51LmFwcGVuZENoaWxkKHRpdGxlX3NlY3Rpb24zKTtcbiAgbWVudS5hcHBlbmRDaGlsZChzZWN0aW9uMyk7XG4gIG1lbnUuYXBwZW5kQ2hpbGQodGl0bGVfc2VjdGlvbjQpO1xuICBtZW51LmFwcGVuZENoaWxkKHNlY3Rpb240KTtcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZU1lbnUgfTtcbiIsImltcG9ydCB7IGFwcCB9IGZyb20gJy4vLi4vbWFpbic7XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VUb3BNZW51KCkge1xuICBjb25zdCB0b3BfbWVudSA9IGQzLnNlbGVjdCgnI21lbnV0b3AnKVxuICAgIC5zdHlsZXMoeyAnZm9udC1mYW1pbHknOiBcIidTaWduaWthJywgc2Fucy1zZXJpZlwiLCAnZm9udC1zaXplJzogJzAuODBlbScsIHBhZGRpbmc6ICcwLjNweCcgfSk7XG4gIGNvbnN0IHdpZHRoX2xlZnQgPSBgJHtkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudScpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICsgMjV9cHhgO1xuICBjb25zdCB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2Jhcl9zZWN0aW9uJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg7XG4gIGNvbnN0IHdpZHRoX2NlbnRyYWxfY2hhcnQgPSBgJHt0fXB4YDtcbiAgY29uc3Qgd2lkdGhfbWFwID0gYCR7ZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21hcF9zZWN0aW9uJykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLSAzNX1weGA7XG4gIGNvbnN0IHdpZHRoX3R5cGVfY29tcCA9IGAkeyh0IC0gODApIC8gMyAtIDJ9cHhgO1xuICB0b3BfbWVudVxuICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgLmF0dHJzKHsgY2xhc3M6ICd0aXRsZV9zZWN0aW9uJyB9KVxuICAgIC5zdHlsZXMoeyB3aWR0aDogd2lkdGhfbGVmdCwgZmxvYXQ6ICdsZWZ0JywgbWFyZ2luOiAnMCAzcHgnIH0pXG4gICAgLmh0bWwoJ1PDiUxFQ1RJT04nKTtcblxuICBjb25zdCB0eXBlX2NoYXJ0ID0gdG9wX21lbnVcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5hdHRyKCdjbGFzcycsICd0b3Bfc2VjdGlvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF9jZW50cmFsX2NoYXJ0LCBmbG9hdDogJ2xlZnQnLCBtYXJnaW46ICcwIDNweCcsICd0ZXh0LWFsaWduJzogJ2NlbnRlcicgfSk7XG5cbiAgY29uc3QgcG9zaXRpb24gPSB0eXBlX2NoYXJ0XG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jb21wYXJhaXNvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF90eXBlX2NvbXAgfSk7XG5cbiAgcG9zaXRpb24uYXBwZW5kKCdwJylcbiAgICAuYXR0cignY2xhc3MnLCAndGl0bGVfdHlwZV9jb21wJylcbiAgICAuaHRtbCgnUE9TSVRJT04nKTtcblxuICBwb3NpdGlvbi5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndHlwZV9jaGFydCBjaGFydF90MScsIHZhbHVlOiAnQmFyQ2hhcnQxJyB9KVxuICAgIC5odG1sKCcxIGluZC4nKTtcblxuICBwb3NpdGlvbi5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndHlwZV9jaGFydCBjaGFydF90MiBkaXNhYmxlZCcsIHZhbHVlOiAnU2NhdHRlclBsb3QyJyB9KVxuICAgIC5odG1sKCcyIGluZC4nKTtcblxuICBwb3NpdGlvbi5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndHlwZV9jaGFydCBjaGFydF90MyBkaXNhYmxlZCcsIHZhbHVlOiAnUmFkYXJDaGFydDMnIH0pXG4gICAgLmh0bWwoJyszIGluZC4nKTtcblxuICBjb25zdCByZXNzZW1ibGFuY2UgPSB0eXBlX2NoYXJ0XG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jb21wYXJhaXNvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF90eXBlX2NvbXAgfSk7XG5cbiAgcmVzc2VtYmxhbmNlLmFwcGVuZCgncCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3RpdGxlX3R5cGVfY29tcCcpXG4gICAgLmh0bWwoJ1JFU1NFTUJMQU5DRVMnKTtcblxuICByZXNzZW1ibGFuY2UuYXBwZW5kKCdzcGFuJylcbiAgICAuYXR0cnMoeyBjbGFzczogJ3R5cGVfY2hhcnQgY2hhcnRfdDEnLCB2YWx1ZTogJ0J1YmJsZUNoYXJ0MScgfSlcbiAgICAuaHRtbCgnMSBpbmQuJyk7XG5cbiAgcmVzc2VtYmxhbmNlLmFwcGVuZCgnc3BhbicpXG4gICAgLmF0dHJzKHsgY2xhc3M6ICd0eXBlX2NoYXJ0IGNoYXJ0X3QyIGRpc2FibGVkJywgdmFsdWU6ICdTaW1pbGFyaXR5Q2hhcnQnIH0pXG4gICAgLmh0bWwoJysyIGluZC4nKTtcblxuICBjb25zdCBpbmVnYWxpdGUgPSB0eXBlX2NoYXJ0XG4gICAgLmFwcGVuZCgnZGl2JylcbiAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jb21wYXJhaXNvbicpXG4gICAgLnN0eWxlcyh7IHdpZHRoOiB3aWR0aF90eXBlX2NvbXAgfSk7XG5cbiAgaW5lZ2FsaXRlLmFwcGVuZCgncCcpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ3RpdGxlX3R5cGVfY29tcCcpXG4gICAgLmh0bWwoJ0lOw4lHQUxJVMOJUycpO1xuXG4gIGluZWdhbGl0ZS5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndHlwZV9jaGFydCBjaGFydF90MSBkaXNhYmxlZCcsIHZhbHVlOiAnQm94UGxvdDEnIH0pXG4gICAgLmh0bWwoJzEgaW5kLicpO1xuXG4gIGluZWdhbGl0ZS5hcHBlbmQoJ3NwYW4nKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndHlwZV9jaGFydCBjaGFydF90MiBkaXNhYmxlZCcsIHZhbHVlOiAnUGFyYWxsZWxDb29yZHMyJyB9KVxuICAgIC5odG1sKCcrMiBpbmQuJyk7XG5cbiAgdG9wX21lbnVcbiAgICAuYXBwZW5kKCdkaXYnKVxuICAgIC5hdHRycyh7IGNsYXNzOiAndGl0bGVfc2VjdGlvbicgfSlcbiAgICAuc3R5bGVzKHsgd2lkdGg6IHdpZHRoX21hcCwgZmxvYXQ6ICdsZWZ0JywgbWFyZ2luOiAnMCAwIDAgMjBweCcgfSlcbiAgICAuaHRtbCgnUVVFTExFUyBSRUdJT05TID8nKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VIZWFkZXJNYXBTZWN0aW9uKCkge1xuICBjb25zdCBoZWFkZXJfbWFwX3NlY3Rpb24gPSBkMy5zZWxlY3QoJyNtYXBfc2VjdGlvbicpXG4gICAgLmluc2VydCgncCcsICdzdmcnKVxuICAgIC5hdHRyKCdpZCcsICdoZWFkZXJfbWFwJylcbiAgICAuc3R5bGUoJ21hcmdpbicsICcwIDAgMCAxMHB4Jyk7XG5cbiAgaGVhZGVyX21hcF9zZWN0aW9uLmluc2VydCgnaW1nJylcbiAgICAuYXR0cnMoe1xuICAgICAgY2xhc3M6ICdtYXBfYnV0dG9uIGFjdGl2ZScsXG4gICAgICB3aWR0aDogMjAsXG4gICAgICBoZWlnaHQ6IDIwLFxuICAgICAgc3JjOiAnaW1nL2dpbXAtdG9vbC1yZWN0LXNlbGVjdC5wbmcnLFxuICAgICAgaWQ6ICdpbWdfcmVjdF9zZWxlYycsXG4gICAgfSk7XG5cbiAgaGVhZGVyX21hcF9zZWN0aW9uLmluc2VydCgnaW1nJylcbiAgICAuYXR0cnMoe1xuICAgICAgY2xhc3M6ICdtYXBfYnV0dG9uJyxcbiAgICAgIHdpZHRoOiAyMCxcbiAgICAgIGhlaWdodDogMjAsXG4gICAgICBzcmM6ICdpbWcvZ2ltcC10b29sLXpvb20ucG5nJyxcbiAgICAgIGlkOiAnaW1nX21hcF96b29tJyxcbiAgICB9KTtcblxuICBoZWFkZXJfbWFwX3NlY3Rpb24uaW5zZXJ0KCdpbWcnKVxuICAgIC5hdHRycyh7XG4gICAgICBjbGFzczogJ21hcF9idXR0b24nLFxuICAgICAgd2lkdGg6IDIwLFxuICAgICAgaGVpZ2h0OiAyMCxcbiAgICAgIHNyYzogJ2ltZy9naW1wLWN1cnNvci5wbmcnLFxuICAgICAgaWQ6ICdpbWdfbWFwX3NlbGVjdCcsXG4gICAgfSk7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VIZWFkZXJDaGFydCgpIHtcbiAgY29uc3QgaGVhZGVyX2Jhcl9zZWN0aW9uID0gZDMuc2VsZWN0KCcjYmFyX3NlY3Rpb24nKVxuICAgIC5pbnNlcnQoJ3AnLCAnc3ZnJylcbiAgICAuYXR0cignaWQnLCAnaGVhZGVyX2NoYXJ0JylcbiAgICAuc3R5bGUoJ21hcmdpbi1ib3R0b20nLCAnMCcpXG4gICAgLnN0eWxlKCdjbGVhcicsICdib3RoJyk7XG5cbiAgaGVhZGVyX2Jhcl9zZWN0aW9uLmluc2VydCgnaW1nJylcbiAgICAuYXR0cnMoe1xuICAgICAgd2lkdGg6IDI0LFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIHNyYzogJ2ltZy9lZGl0LXRhYmxlLWluc2VydC1yb3ctYWJvdmUuc3ZnJyxcbiAgICAgIGlkOiAnaW1nX3RhYmxlJyxcbiAgICB9KVxuICAgIC5zdHlsZXMoeyBtYXJnaW46ICczcHgnLCBmbG9hdDogJ3JpZ2h0JyB9KVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGFUYWJsZS13cmFwcGVyJykuc3R5bGUuZGlzcGxheSkge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3ZnX21hcCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNzdmdfbGVnZW5kJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2hlYWRlcl9tYXAnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVhZGVyX3RhYmxlJykuc3R5bGUuZGlzcGxheSA9IG51bGw7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRhVGFibGUtd3JhcHBlcicpLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICB0aGlzLnN0eWxlLmZpbHRlciA9ICdpbnZlcnQoNzUlKSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3ZnX21hcCcpLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc3ZnX2xlZ2VuZCcpLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVhZGVyX21hcCcpLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjaGVhZGVyX3RhYmxlJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGFUYWJsZS13cmFwcGVyJykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy5zdHlsZS5maWx0ZXIgPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIGhlYWRlcl9iYXJfc2VjdGlvbi5pbnNlcnQoJ2ltZycpXG4gICAgLmF0dHJzKHtcbiAgICAgIHdpZHRoOiAyNCxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBzcmM6ICdpbWcvcHJpbnRlci5zdmcnLFxuICAgICAgaWQ6ICdpbWdfcHJpbnRlcicsXG4gICAgfSlcbiAgICAuc3R5bGVzKHsgbWFyZ2luOiAnM3B4JywgZmxvYXQ6ICdyaWdodCcgfSk7XG5cbiAgaGVhZGVyX2Jhcl9zZWN0aW9uLmluc2VydCgnaW1nJylcbiAgICAuYXR0cnMoe1xuICAgICAgd2lkdGg6IDI0LFxuICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgIHNyYzogJ2ltZy9ndGstaW5mby5zdmcnLFxuICAgICAgaWQ6ICdpbWdfaW5mbycsXG4gICAgfSlcbiAgICAuc3R5bGVzKHsgbWFyZ2luOiAnM3B4JywgZmxvYXQ6ICdyaWdodCcgfSk7XG59XG4iLCJpbXBvcnQgeyBhcHAgfSBmcm9tICcuLy4uL21haW4nO1xuaW1wb3J0IHsgY29sb3JfZGlzYWJsZWQsIGNvbG9yX2NvdW50cmllcywgY29sb3Jfc3VwLCBjb2xvcl9pbmYsIGNvbG9yX2hpZ2hsaWdodCB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyBtYXRoX3JvdW5kLCBwcmVwYXJlVG9vbHRpcCwgZ2V0U3ZnUGF0aFR5cGUgfSBmcm9tICcuL2hlbHBlcnMnO1xuXG5jb25zdCBzdmdfbWFwID0gZDMuc2VsZWN0KCdzdmcjc3ZnX21hcCcpLFxuICBtYXJnaW5fbWFwID0geyB0b3A6IDAsIHJpZ2h0OiAwLCBib3R0b206IDAsIGxlZnQ6IDAgfSxcbiAgd2lkdGhfbWFwID0gK3N2Z19tYXAuYXR0cignd2lkdGgnKSAtIG1hcmdpbl9tYXAubGVmdCAtIG1hcmdpbl9tYXAucmlnaHQsXG4gIGhlaWdodF9tYXAgPSArc3ZnX21hcC5hdHRyKCdoZWlnaHQnKSAtIG1hcmdpbl9tYXAudG9wIC0gbWFyZ2luX21hcC5ib3R0b207XG5cbmNvbnN0IHN0eWxlcyA9IHtcbiAgdGVtcGxhdGU6IHsgaWQ6ICd0ZW1wbGF0ZScsIGZpbGw6ICdyZ2IoMjQ3LCAyNTIsIDI1NCknLCAnZmlsbC1vcGFjaXR5JzogMSB9LFxuICBjb3VudHJpZXM6IHsgaWQ6ICdjb3VudHJpZXMnLCBmaWxsOiAncmdiKDIxNCwgMjE0LCAyMTQpJywgJ2ZpbGwtb3BhY2l0eSc6IDEsICdzdHJva2Utd2lkdGgnOiAwLjUsIHN0cm9rZTogJyNmZmZmZmYnIH0sXG4gIHNlYWJveGVzOiB7IGlkOiAnc2VhYm94ZXMnLCBmaWxsOiAnI2UwZmFmZicsICdmaWxsLW9wYWNpdHknOiAxLCBzdHJva2U6ICdibGFjaycsICdzdHJva2Utd2lkdGgnOiAwLjIgfSxcbiAgcmVtb3RlOiB7IGlkOiAncmVtb3RlJywgZmlsbDogJ3JnYigyMTQsIDIxNCwgMjE0KScsICdmaWxsLW9wYWNpdHknOiAxLCAnc3Ryb2tlLXdpZHRoJzogMC41LCBzdHJva2U6ICcjZmZmZmZmJyB9LFxuICBzZWFib3hlczI6IHsgaWQ6ICdzZWFib3hlczInLCBmaWxsOiAnbm9uZScsIHN0cm9rZTogJ2JsYWNrJywgJ3N0cm9rZS13aWR0aCc6IDAuOCB9LFxuICBudXRzMTogeyBpZDogJ251dHMxJywgJ2ZpbGwtb3BhY2l0eSc6IDEsICdzdHJva2Utd2lkdGgnOiAwLjUsIHN0cm9rZTogJyNmZmZmZmYnIH0sXG59O1xuXG5sZXQgcHJvamVjdGlvbjtcbmxldCBwYXRoO1xuXG5mdW5jdGlvbiBnZXRfYmJveF9sYXllcl9wYXRoKG5hbWUpIHtcbiAgY29uc3QgYmJveF9sYXllciA9IFtbSW5maW5pdHksIEluZmluaXR5XSwgWy1JbmZpbml0eSwgLUluZmluaXR5XV07XG4gIHN2Z19tYXAuc2VsZWN0KGAjJHtuYW1lfWApXG4gICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgLmVhY2goKGQpID0+IHtcbiAgICAgIGNvbnN0IGJib3hfcGF0aCA9IHBhdGguYm91bmRzKGQuZ2VvbWV0cnkpO1xuICAgICAgYmJveF9sYXllclswXVswXSA9IGJib3hfcGF0aFswXVswXSA8IGJib3hfbGF5ZXJbMF1bMF0gPyBiYm94X3BhdGhbMF1bMF0gOiBiYm94X2xheWVyWzBdWzBdO1xuICAgICAgYmJveF9sYXllclswXVsxXSA9IGJib3hfcGF0aFswXVsxXSA8IGJib3hfbGF5ZXJbMF1bMV0gPyBiYm94X3BhdGhbMF1bMV0gOiBiYm94X2xheWVyWzBdWzFdO1xuICAgICAgYmJveF9sYXllclsxXVswXSA9IGJib3hfcGF0aFsxXVswXSA+IGJib3hfbGF5ZXJbMV1bMF0gPyBiYm94X3BhdGhbMV1bMF0gOiBiYm94X2xheWVyWzFdWzBdO1xuICAgICAgYmJveF9sYXllclsxXVsxXSA9IGJib3hfcGF0aFsxXVsxXSA+IGJib3hfbGF5ZXJbMV1bMV0gPyBiYm94X3BhdGhbMV1bMV0gOiBiYm94X2xheWVyWzFdWzFdO1xuICAgIH0pO1xuICByZXR1cm4gYmJveF9sYXllcjtcbn1cblxuZnVuY3Rpb24gZml0TGF5ZXIoKSB7XG4gIHByb2plY3Rpb24uc2NhbGUoMSkudHJhbnNsYXRlKFswLCAwXSk7XG4gIGNvbnN0IGIgPSBnZXRfYmJveF9sYXllcl9wYXRoKCd0ZW1wbGF0ZScpO1xuICBjb25zdCBzID0gMSAvIE1hdGgubWF4KChiWzFdWzBdIC0gYlswXVswXSkgLyB3aWR0aF9tYXAsIChiWzFdWzFdIC0gYlswXVsxXSkgLyBoZWlnaHRfbWFwKTtcbiAgY29uc3QgdCA9IFsod2lkdGhfbWFwIC0gcyAqIChiWzFdWzBdICsgYlswXVswXSkpIC8gMiwgKGhlaWdodF9tYXAgLSBzICogKGJbMV1bMV0gKyBiWzBdWzFdKSkgLyAyXTtcbiAgcHJvamVjdGlvbi5zY2FsZShzKS50cmFuc2xhdGUodCk7XG4gIHN2Z19tYXAuc2VsZWN0QWxsKCdwYXRoJykuYXR0cignZCcsIHBhdGgpO1xufVxuXG5mdW5jdGlvbiBtYXBfem9vbWVkKCkge1xuICBjb25zdCB0cmFuc2Zvcm0gPSBkMy5ldmVudC50cmFuc2Zvcm07XG4gIGlmICh0cmFuc2Zvcm0uayA9PT0gMSkge1xuICAgIHRyYW5zZm9ybS54ID0gMDtcbiAgICB0cmFuc2Zvcm0ueSA9IDA7XG4gIH1cbiAgY29uc3QgbGF5ZXJzID0gc3ZnX21hcC5zZWxlY3QoJyNsYXllcnMnKTtcbiAgY29uc3QgdCA9IGxheWVyc1xuICAgIC5zZWxlY3RBbGwoJ2cnKVxuICAgIC50cmFuc2l0aW9uKClcbiAgICAuZHVyYXRpb24oMjI1KTtcblxuICBsYXllcnMuc2VsZWN0QWxsKCdnJylcbiAgICAudHJhbnNpdGlvbih0KVxuICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGAke3N0eWxlc1t0aGlzLmlkXVsnc3Ryb2tlLXdpZHRoJ10gLyB0cmFuc2Zvcm0ua31weGA7XG4gICAgfSk7XG5cbiAgbGF5ZXJzLnNlbGVjdEFsbCgnZycpXG4gICAgLnRyYW5zaXRpb24odClcbiAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcblxuICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpXG4gICAgLnRyYW5zaXRpb24odClcbiAgICAuYXR0cigndHJhbnNmb3JtJywgdHJhbnNmb3JtKTtcbn1cblxuY2xhc3MgTWFwU2VsZWN0IHtcbiAgY29uc3RydWN0b3IobnV0czEsIGNvdW50cmllcywgcmVtb3RlLCB0ZW1wbGF0ZSwgc2VhYm94ZXMpIHtcbiAgICBwcm9qZWN0aW9uID0gZDMuZ2VvSWRlbnRpdHkoKVxuICAgICAgLmZpdEV4dGVudChbWzAsIDBdLCBbd2lkdGhfbWFwLCBoZWlnaHRfbWFwXV0sIHRlbXBsYXRlKVxuICAgICAgLnJlZmxlY3RZKHRydWUpO1xuXG4gICAgcGF0aCA9IGQzLmdlb1BhdGgoKS5wcm9qZWN0aW9uKHByb2plY3Rpb24pO1xuICAgIGNvbnN0IGxheWVycyA9IHN2Z19tYXAuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdpZCcsICdsYXllcnMnKTtcblxuICAgIHRoaXMuem9vbV9tYXAgPSBkMy56b29tKClcbiAgICAgIC5zY2FsZUV4dGVudChbMSwgNV0pXG4gICAgICAudHJhbnNsYXRlRXh0ZW50KFtbMCwgMF0sIFt3aWR0aF9tYXAsIGhlaWdodF9tYXBdXSlcbiAgICAgIC5vbignem9vbScsIG1hcF96b29tZWQpO1xuXG4gICAgc3ZnX21hcC5jYWxsKHRoaXMuem9vbV9tYXApO1xuXG4gICAgbGF5ZXJzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoc3R5bGVzLnRlbXBsYXRlKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YSh0ZW1wbGF0ZS5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRycyh7IGQ6IHBhdGggfSk7XG5cbiAgICBsYXllcnMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyhzdHlsZXMuY291bnRyaWVzKVxuICAgICAgLmF0dHIoJ2lkJywgJ2NvdW50cmllcycpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5kYXRhKGNvdW50cmllcy5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRycyh7IGQ6IHBhdGggfSk7XG5cbiAgICBsYXllcnMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyhzdHlsZXMuc2VhYm94ZXMpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5kYXRhKHNlYWJveGVzLmZlYXR1cmVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHJzKHsgZDogcGF0aCB9KTtcblxuICAgIGxheWVycy5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHN0eWxlcy5yZW1vdGUpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5kYXRhKHJlbW90ZS5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRycyh7IGQ6IHBhdGggfSk7XG5cbiAgICBsYXllcnMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyhzdHlsZXMuc2VhYm94ZXMyKVxuICAgICAgLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuZGF0YShzZWFib3hlcy5mZWF0dXJlcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRycyh7IGQ6IHBhdGggfSk7XG5cbiAgICB0aGlzLnRhcmdldF9sYXllciA9IGxheWVycy5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHN0eWxlcy5udXRzMSk7XG4gICAgdGhpcy50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5kYXRhKG51dHMxLmZlYXR1cmVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IChkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dICE9PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uID8gY29sb3JfY291bnRyaWVzIDogY29sb3JfaGlnaGxpZ2h0KSlcbiAgICAgIC5hdHRyKCdkJywgcGF0aCk7XG4gICAgYXBwLnR5cGVfcGF0aCA9IGdldFN2Z1BhdGhUeXBlKHRoaXMudGFyZ2V0X2xheWVyLnNlbGVjdCgncGF0aCcpLm5vZGUoKS5nZXRBdHRyaWJ1dGUoJ2QnKSk7XG4gICAgZml0TGF5ZXIoKTtcbiAgICBwcmVwYXJlVG9vbHRpcChzdmdfbWFwKTtcbiAgICAvLyB0aGlzLmJpbmRUb29sdGlwKCk7XG4gIH1cblxuICByZXNldENvbG9ycyhjdXJyZW50X2lkcykge1xuICAgIGNvbnN0IGlkX2ZpZWxkX2dlb20gPSBhcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbTtcbiAgICB0aGlzLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IChjdXJyZW50X2lkcy5pbmRleE9mKGQucHJvcGVydGllc1tpZF9maWVsZF9nZW9tXSkgPiAtMVxuICAgICAgICA/IChhcHAuY29sb3JzW2QucHJvcGVydGllc1tpZF9maWVsZF9nZW9tXV0gfHwgY29sb3JfY291bnRyaWVzKVxuICAgICAgICA6IGNvbG9yX2Rpc2FibGVkKSk7XG4gIH1cbiAgLy8gYmluZFRvb2x0aXAoKSB7XG4gIC8vICAgdGhpcy50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgLy8gICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAvLyAgICAgICBzdmdfbWFwLnNlbGVjdCgnLnRvb2x0aXAnKVxuICAvLyAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAvLyAgICAgfSlcbiAgLy8gICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gIC8vICAgICAgIHN2Z19tYXAuc2VsZWN0KCcudG9vbHRpcCcpXG4gIC8vICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgLy8gICAgIH0pXG4gIC8vICAgICAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChkKSB7XG4gIC8vICAgICAgIGNvbnN0IHRvb2x0aXAgPSBzdmdfbWFwLnNlbGVjdCgnLnRvb2x0aXAnKTtcbiAgLy8gICAgICAgdG9vbHRpcFxuICAvLyAgICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gIC8vICAgICAgICAgLnRleHQoYCR7ZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXX1gKTtcbiAgLy8gICAgICAgbGV0IF9peCwgbmJfdmFsO1xuICAvLyAgICAgICBmb3IgKF9peCA9IDAsIG5iX3ZhbCA9IE1hdGgubWluKGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5sZW5ndGgsIDUpOyBfaXggPCBuYl92YWw7IF9peCsrKSB7XG4gIC8vICAgICAgICAgdG9vbHRpcC5zZWxlY3QoYHRleHQudmFsdWVfZmVhdHVyZSR7X2l4ICsgMX1gKVxuICAvLyAgICAgICAgICAgLnRleHQoYCR7YXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lW19peF19OiAke21hdGhfcm91bmQoZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5yYXRpb1tfaXhdXSAqIDEwKSAvIDEwfWApO1xuICAvLyAgICAgICB9XG4gIC8vICAgICAgIHRvb2x0aXBcbiAgLy8gICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1tkMy5tb3VzZSh0aGlzKVswXSAtIDUsIGQzLm1vdXNlKHRoaXMpWzFdIC0gNDUgLSBfaXggKiAxMl19KWApO1xuICAvLyAgICAgfSk7XG4gIC8vIH1cbiAgcmVzZXRab29tKCkge1xuICAgIHN2Z19tYXAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjUwKVxuICAgICAgLmNhbGwodGhpcy56b29tX21hcC50cmFuc2Zvcm0sIGQzLnpvb21JZGVudGl0eSk7XG4gIH1cblxuICB1cGRhdGVMZWdlbmQoKSB7XG4gICAgZDMuc2VsZWN0KCcjc3ZnX2xlZ2VuZCA+IGcgPiAubGVnZW5kID4gdGV4dCcpXG4gICAgICAudGV4dChgTWEgcsOpZ2lvbiA6ICR7YXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl9wcmV0dHlfbmFtZX1gKTtcbiAgfVxuXG4gIHJlbW92ZVJlY3RCcnVzaCgpIHtcbiAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpLmNhbGwodGhpcy5icnVzaF9tYXAubW92ZSwgbnVsbCk7XG4gIH1cblxuICBjYWxsQnJ1c2goc2VsZWN0aW9uKSB7XG4gICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKS5jYWxsKHRoaXMuYnJ1c2hfbWFwLm1vdmUsIHNlbGVjdGlvbik7XG4gIH1cblxuICBiaW5kQnJ1c2hDbGljayhjaGFydCkge1xuICAgIGlmIChjaGFydC5oYW5kbGVDbGlja01hcCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfc2VsZWN0JykuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfbWFwX3NlbGVjdCcpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX21hcF9zZWxlY3QnKS5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgIH1cbiAgICBpZiAoY2hhcnQuaGFuZGxlX2JydXNoX21hcCkge1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19yZWN0X3NlbGVjJykuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfcmVjdF9zZWxlYycpLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfem9vbScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfc2VsZWN0JykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICB0aGlzLmJydXNoX21hcCA9IGQzLmJydXNoKClcbiAgICAgICAgLmV4dGVudChbWzAsIDBdLCBbd2lkdGhfbWFwLCBoZWlnaHRfbWFwXV0pXG4gICAgICAgIC5vbignc3RhcnQgYnJ1c2gnLCAoKSA9PiB7XG4gICAgICAgICAgY2hhcnQuaGFuZGxlX2JydXNoX21hcChkMy5ldmVudCk7XG4gICAgICAgIH0pO1xuICAgICAgc3ZnX21hcC5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnYnJ1c2hfbWFwJylcbiAgICAgICAgLmNhbGwodGhpcy5icnVzaF9tYXApO1xuICAgIH0gZWxzZSB7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX3JlY3Rfc2VsZWMnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfcmVjdF9zZWxlYycpLmNsYXNzTGlzdC5hZGQoJ2Rpc2FibGVkJyk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX21hcF96b29tJykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX21hcF9zZWxlY3QnKS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICB9XG4gIH1cblxuICB1bmJpbmRCcnVzaENsaWNrKCkge1xuICAgIHRoaXMuYnJ1c2hfbWFwID0gbnVsbDtcbiAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpXG4gICAgICAucmVtb3ZlKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZVNvdXJjZVNlY3Rpb24oKSB7XG4gIGNvbnN0IHRleHRfem9uZSA9IGQzLnNlbGVjdCgnI3N2Z19sZWdlbmQnKVxuICAgIC5hcHBlbmQoJ3RleHQnKVxuICAgIC5hdHRycyh7IHk6IDMyLjUsICd0ZXh0LWFuY2hvcic6ICdlbmQnIH0pXG4gICAgLnN0eWxlKCdmb250LXNpemUnLCAnMTFweCcpXG4gICAgLnN0eWxlKCdmb250LWZhbWlseScsICdcXCdTaWduaWthXFwnLCBzYW5zLXNlcmlmJyk7XG4gIHRleHRfem9uZS5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cnMoeyB4OiA0NzAsIGR5OiAxMiB9KVxuICAgIC50ZXh0KCdOaXZlYXUgcsOpZ2lvbmFsIDogTlVUUyAxICh2ZXJzaW9uIDIwMTYpJyk7XG4gIHRleHRfem9uZS5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cnMoeyB4OiA0NzAsIGR5OiAxMiB9KVxuICAgIC50ZXh0KCdPcmlnaW5lIGRlcyBkb25uw6llcyA6IEV1cm9zdGF0LCAyMDE2Jyk7XG4gIHRleHRfem9uZS5hcHBlbmQoJ3RzcGFuJylcbiAgICAuYXR0cnMoeyB4OiA0NzAsIGR5OiAxMiB9KVxuICAgIC50ZXh0KCdMaW1pdGUgYWRtaW5pc3RyYXRpdmU6IFVNUyBSSUFURSwgQ0MtQlktU0EnKTtcbn1cblxuZnVuY3Rpb24gbWFrZU1hcExlZ2VuZCgpIHtcbiAgY29uc3QgbGVnZW5kX2VsZW1zID0gW1xuICAgIHsgY29sb3I6IGNvbG9yX2hpZ2hsaWdodCwgdGV4dDogYE1hIHLDqWdpb24gOiAke2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25fcHJldHR5X25hbWV9YCB9LFxuICAgIHsgY29sb3I6IGNvbG9yX2NvdW50cmllcywgdGV4dDogJ0F1dHJlcyByw6lnaW9ucyBkdSBmaWx0cmUgZGUgY29tcGFyYWlzb24nIH0sXG4gICAgeyBjb2xvcjogY29sb3Jfc3VwLCB0ZXh0OiAnUmFuZyBwbHVzIMOpbGV2w6kgcXVlIG1hIHLDqWdpb24nIH0sXG4gICAgeyBjb2xvcjogY29sb3JfaW5mLCB0ZXh0OiAnUmFuZyBtb2lucyDDqWxldsOpIHF1ZSBtYSByw6lnaW9uJyB9LFxuICBdO1xuXG4gIGNvbnN0IHJlY3Rfc2l6ZSA9IDE0O1xuICBjb25zdCBzcGFjaW5nID0gNDtcbiAgY29uc3QgbGdkX2hlaWdodCA9IHJlY3Rfc2l6ZSArIHNwYWNpbmc7XG4gIGNvbnN0IG9mZnNldCA9IGxnZF9oZWlnaHQgKiBsZWdlbmRfZWxlbXMubGVuZ3RoIC8gMjtcblxuICBjb25zdCBncnBfbGdkID0gZDMuc2VsZWN0KCcjc3ZnX2xlZ2VuZCcpXG4gICAgLmFwcGVuZCgnZycpXG4gICAgLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoNTAsIDQwKScpXG4gICAgLnN0eWxlcyh7ICdmb250LXNpemUnOiAnMTFweCcsICdmb250LWZhbWlseSc6ICdcXCdTaWduaWthXFwnLCBzYW5zLXNlcmlmJyB9KTtcblxuICBjb25zdCBsZWdlbmRzID0gZ3JwX2xnZC5zZWxlY3RBbGwoJy5sZWdlbmQnKVxuICAgIC5kYXRhKGxlZ2VuZF9lbGVtcylcbiAgICAuZW50ZXIoKVxuICAgIC5hcHBlbmQoJ2cnKVxuICAgIC5hdHRyKCdjbGFzcycsICdsZWdlbmQnKVxuICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAoZCwgaSkgPT4ge1xuICAgICAgY29uc3QgdHggPSAtMiAqIHJlY3Rfc2l6ZTtcbiAgICAgIGNvbnN0IHR5ID0gaSAqIGxnZF9oZWlnaHQgLSBvZmZzZXQ7XG4gICAgICByZXR1cm4gYHRyYW5zbGF0ZSgke1t0eCwgdHldfSlgO1xuICAgIH0pO1xuXG4gIGxlZ2VuZHMuYXBwZW5kKCdyZWN0JylcbiAgICAuYXR0cnMoeyB3aWR0aDogcmVjdF9zaXplLCBoZWlnaHQ6IHJlY3Rfc2l6ZSB9KVxuICAgIC5zdHlsZXMoZCA9PiAoeyBmaWxsOiBkLmNvbG9yLCBzdHJva2U6IGQuY29sb3IgfSkpO1xuXG4gIGxlZ2VuZHMuYXBwZW5kKCd0ZXh0JylcbiAgICAuYXR0cnMoeyB4OiByZWN0X3NpemUgKyBzcGFjaW5nLCB5OiByZWN0X3NpemUgLSBzcGFjaW5nIH0pXG4gICAgLnRleHQoZCA9PiBkLnRleHQpO1xufVxuXG5leHBvcnQge1xuICBNYXBTZWxlY3QsXG4gIG1ha2VTb3VyY2VTZWN0aW9uLFxuICBtYWtlTWFwTGVnZW5kLFxuICBzdmdfbWFwLFxufTtcbiIsIi8qIVxyXG4gKlxyXG4gKiBWYW5pbGxhLURhdGFUYWJsZXNcclxuICogQ29weXJpZ2h0IChjKSAyMDE1LTIwMTcgS2FybCBTYXVuZGVycyAoaHR0cDovL21vYml1cy5vdmgpXHJcbiAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXHJcbiAqXHJcbiAqIFZlcnNpb246IDEuNS4xXHJcbiAqXHJcbiAqL1xyXG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcclxuICAgIHZhciBwbHVnaW4gPSBcIkRhdGFUYWJsZVwiO1xyXG5cclxuICAgIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkge1xyXG4gICAgICAgIGRlZmluZShbXSwgZmFjdG9yeShwbHVnaW4pKTtcclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocGx1Z2luKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcm9vdFtwbHVnaW5dID0gZmFjdG9yeShwbHVnaW4pO1xyXG4gICAgfVxyXG59KSh0aGlzLCBmdW5jdGlvbiAocGx1Z2luKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIHZhciB3aW4gPSB3aW5kb3csXHJcbiAgICAgICAgZG9jID0gZG9jdW1lbnQsXHJcbiAgICAgICAgYm9keSA9IGRvYy5ib2R5O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBjb25maWd1cmF0aW9uXHJcbiAgICAgKiBAdHlwIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBkZWZhdWx0Q29uZmlnID0ge1xyXG4gICAgICAgIHBlclBhZ2U6IDEwLFxyXG4gICAgICAgIHBlclBhZ2VTZWxlY3Q6IFs1LCAxMCwgMTUsIDIwLCAyNV0sXHJcblxyXG4gICAgICAgIHNvcnRhYmxlOiB0cnVlLFxyXG4gICAgICAgIHNlYXJjaGFibGU6IHRydWUsXHJcblxyXG4gICAgICAgIC8vIFBhZ2luYXRpb25cclxuICAgICAgICBuZXh0UHJldjogdHJ1ZSxcclxuICAgICAgICBmaXJzdExhc3Q6IGZhbHNlLFxyXG4gICAgICAgIHByZXZUZXh0OiBcIiZsc2FxdW87XCIsXHJcbiAgICAgICAgbmV4dFRleHQ6IFwiJnJzYXF1bztcIixcclxuICAgICAgICBmaXJzdFRleHQ6IFwiJmxhcXVvO1wiLFxyXG4gICAgICAgIGxhc3RUZXh0OiBcIiZyYXF1bztcIixcclxuICAgICAgICBlbGxpcHNpc1RleHQ6IFwiJmhlbGxpcDtcIixcclxuICAgICAgICBhc2NUZXh0OiBcIuKWtFwiLFxyXG4gICAgICAgIGRlc2NUZXh0OiBcIuKWvlwiLFxyXG4gICAgICAgIHRydW5jYXRlUGFnZXI6IHRydWUsXHJcbiAgICAgICAgcGFnZXJEZWx0YTogMixcclxuXHJcbiAgICAgICAgZml4ZWRDb2x1bW5zOiB0cnVlLFxyXG4gICAgICAgIGZpeGVkSGVpZ2h0OiBmYWxzZSxcclxuXHJcbiAgICAgICAgaGVhZGVyOiB0cnVlLFxyXG4gICAgICAgIGZvb3RlcjogZmFsc2UsXHJcblxyXG4gICAgICAgIC8vIEN1c3RvbWlzZSB0aGUgZGlzcGxheSB0ZXh0XHJcbiAgICAgICAgbGFiZWxzOiB7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlNlYXJjaC4uLlwiLCAvLyBUaGUgc2VhcmNoIGlucHV0IHBsYWNlaG9sZGVyXHJcbiAgICAgICAgICAgIHBlclBhZ2U6IFwie3NlbGVjdH0gZW50cmllcyBwZXIgcGFnZVwiLCAvLyBwZXItcGFnZSBkcm9wZG93biBsYWJlbFxyXG4gICAgICAgICAgICBub1Jvd3M6IFwiTm8gZW50cmllcyBmb3VuZFwiLCAvLyBNZXNzYWdlIHNob3duIHdoZW4gdGhlcmUgYXJlIG5vIHNlYXJjaCByZXN1bHRzXHJcbiAgICAgICAgICAgIGluZm86IFwiU2hvd2luZyB7c3RhcnR9IHRvIHtlbmR9IG9mIHtyb3dzfSBlbnRyaWVzXCIgLy9cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvLyBDdXN0b21pc2UgdGhlIGxheW91dFxyXG4gICAgICAgIGxheW91dDoge1xyXG4gICAgICAgICAgICB0b3A6IFwie3NlbGVjdH17c2VhcmNofVwiLFxyXG4gICAgICAgICAgICBib3R0b206IFwie2luZm99e3BhZ2VyfVwiXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlzIGl0ZW0gaXMgb2JqZWN0XHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICovXHJcbiAgICB2YXIgaXNPYmplY3QgPSBmdW5jdGlvbiAodmFsKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpID09PSBcIltvYmplY3QgT2JqZWN0XVwiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlzIGl0ZW0gaXMgYXJyYXlcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHZhciBpc0FycmF5ID0gZnVuY3Rpb24gKHZhbCkge1xyXG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgZm9yIHZhbGlkIEpTT04gc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgc3RyXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufEFycmF5fE9iamVjdH1cclxuICAgICAqL1xyXG4gICAgdmFyIGlzSnNvbiA9IGZ1bmN0aW9uIChzdHIpIHtcclxuICAgICAgICB2YXIgdCA9ICExO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHQgPSBKU09OLnBhcnNlKHN0cik7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhKG51bGwgPT09IHQgfHwgKCFpc0FycmF5KHQpICYmICFpc09iamVjdCh0KSkpICYmIHQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWVyZ2Ugb2JqZWN0cyAocmVjY3Vyc2l2ZSlcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gclxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSB0XHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBleHRlbmQgPSBmdW5jdGlvbiAoc3JjLCBwcm9wcykge1xyXG4gICAgICAgIGZvciAodmFyIHByb3AgaW4gcHJvcHMpIHtcclxuICAgICAgICAgICAgaWYgKHByb3BzLmhhc093blByb3BlcnR5KHByb3ApKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsID0gcHJvcHNbcHJvcF07XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsICYmIGlzT2JqZWN0KHZhbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzcmNbcHJvcF0gPSBzcmNbcHJvcF0gfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgZXh0ZW5kKHNyY1twcm9wXSwgdmFsKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3JjW3Byb3BdID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzcmM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0b3IgaGVscGVyXHJcbiAgICAgKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KX0gICBhcnIgICAgIEFueSBvYmplY3QsIGFycmF5IG9yIGFycmF5LWxpa2UgY29sbGVjdGlvbi5cclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgICAgICAgIGZuICAgICAgQ2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gICAgICAgICAgIHNjb3BlICAgQ2hhbmdlIHRoZSB2YWx1ZSBvZiB0aGlzXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICB2YXIgZWFjaCA9IGZ1bmN0aW9uIChhcnIsIGZuLCBzY29wZSkge1xyXG4gICAgICAgIHZhciBuO1xyXG4gICAgICAgIGlmIChpc09iamVjdChhcnIpKSB7XHJcbiAgICAgICAgICAgIGZvciAobiBpbiBhcnIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYXJyLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZuLmNhbGwoc2NvcGUsIGFycltuXSwgbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgYXJyLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHNjb3BlLCBhcnJbbl0sIG4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBldmVudCBsaXN0ZW5lciB0byB0YXJnZXRcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gZWxcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZVxyXG4gICAgICogQHBhcmFtICB7RnVuY3Rpb259IGZuXHJcbiAgICAgKi9cclxuICAgIHZhciBvbiA9IGZ1bmN0aW9uIChlbCwgZSwgZm4pIHtcclxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGUsIGZuLCBmYWxzZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIERPTSBlbGVtZW50IG5vZGVcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICBhIG5vZGVOYW1lXHJcbiAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICAgYiBwcm9wZXJ0aWVzIGFuZCBhdHRyaWJ1dGVzXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBjcmVhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgZCA9IGRvYy5jcmVhdGVFbGVtZW50KGEpO1xyXG4gICAgICAgIGlmIChiICYmIFwib2JqZWN0XCIgPT0gdHlwZW9mIGIpIHtcclxuICAgICAgICAgICAgdmFyIGU7XHJcbiAgICAgICAgICAgIGZvciAoZSBpbiBiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXCJodG1sXCIgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBkLmlubmVySFRNTCA9IGJbZV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGQuc2V0QXR0cmlidXRlKGUsIGJbZV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoZWwsIGllKSB7XHJcbiAgICAgICAgaWYgKGVsIGluc3RhbmNlb2YgTm9kZUxpc3QpIHtcclxuICAgICAgICAgICAgZWFjaChlbCwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGZsdXNoKGUsIGllKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGllKSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZWwuaGFzQ2hpbGROb2RlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWwucmVtb3ZlQ2hpbGQoZWwuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBidXR0b24gaGVscGVyXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9ICAgY1xyXG4gICAgICogQHBhcmFtICB7TnVtYmVyfSAgIHBcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gICB0XHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHZhciBidXR0b24gPSBmdW5jdGlvbiAoYywgcCwgdCkge1xyXG4gICAgICAgIHJldHVybiBjcmVhdGVFbGVtZW50KFwibGlcIiwge1xyXG4gICAgICAgICAgICBjbGFzczogYyxcclxuICAgICAgICAgICAgaHRtbDogJzxhIGhyZWY9XCIjXCIgZGF0YS1wYWdlPVwiJyArIHAgKyAnXCI+JyArIHQgKyBcIjwvYT5cIlxyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIGNsYXNzTGlzdCBzaGltXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICB2YXIgY2xhc3NMaXN0ID0ge1xyXG4gICAgICAgIGFkZDogZnVuY3Rpb24gKHMsIGEpIHtcclxuICAgICAgICAgICAgaWYgKHMuY2xhc3NMaXN0KSB7XHJcbiAgICAgICAgICAgICAgICBzLmNsYXNzTGlzdC5hZGQoYSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNsYXNzTGlzdC5jb250YWlucyhzLCBhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMuY2xhc3NOYW1lID0gcy5jbGFzc05hbWUudHJpbSgpICsgXCIgXCIgKyBhO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uIChzLCBhKSB7XHJcbiAgICAgICAgICAgIGlmIChzLmNsYXNzTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgcy5jbGFzc0xpc3QucmVtb3ZlKGEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsYXNzTGlzdC5jb250YWlucyhzLCBhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMuY2xhc3NOYW1lID0gcy5jbGFzc05hbWUucmVwbGFjZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFJlZ0V4cChcIihefFxcXFxzKVwiICsgYS5zcGxpdChcIiBcIikuam9pbihcInxcIikgKyBcIihcXFxcc3wkKVwiLCBcImdpXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIiBcIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGNvbnRhaW5zOiBmdW5jdGlvbiAocywgYSkge1xyXG4gICAgICAgICAgICBpZiAocylcclxuICAgICAgICAgICAgICAgIHJldHVybiBzLmNsYXNzTGlzdCA/XHJcbiAgICAgICAgICAgICAgICAgICAgcy5jbGFzc0xpc3QuY29udGFpbnMoYSkgOlxyXG4gICAgICAgICAgICAgICAgICAgICEhcy5jbGFzc05hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAhIXMuY2xhc3NOYW1lLm1hdGNoKG5ldyBSZWdFeHAoXCIoXFxcXHN8XilcIiArIGEgKyBcIihcXFxcc3wkKVwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJ1YmJsZSBzb3J0IGFsZ29yaXRobVxyXG4gICAgICovXHJcbiAgICB2YXIgc29ydEl0ZW1zID0gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICB2YXIgYywgZDtcclxuICAgICAgICBpZiAoMSA9PT0gYikge1xyXG4gICAgICAgICAgICBjID0gMDtcclxuICAgICAgICAgICAgZCA9IGEubGVuZ3RoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChiID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgYyA9IGEubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGQgPSAtMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKHZhciBlID0gITA7IGU7KSB7XHJcbiAgICAgICAgICAgIGUgPSAhMTtcclxuICAgICAgICAgICAgZm9yICh2YXIgZiA9IGM7IGYgIT0gZDsgZiArPSBiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYVtmICsgYl0gJiYgYVtmXS52YWx1ZSA+IGFbZiArIGJdLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGcgPSBhW2ZdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoID0gYVtmICsgYl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBnO1xyXG4gICAgICAgICAgICAgICAgICAgIGFbZl0gPSBoO1xyXG4gICAgICAgICAgICAgICAgICAgIGFbZiArIGJdID0gaTtcclxuICAgICAgICAgICAgICAgICAgICBlID0gITA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGE7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFnZXIgdHJ1bmNhdGlvbiBhbGdvcml0aG1cclxuICAgICAqL1xyXG4gICAgdmFyIHRydW5jYXRlID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIGVsbGlwc2lzKSB7XHJcbiAgICAgICAgZCA9IGQgfHwgMjtcclxuICAgICAgICB2YXIgaixcclxuICAgICAgICAgICAgZSA9IDIgKiBkLFxyXG4gICAgICAgICAgICBmID0gYiAtIGQsXHJcbiAgICAgICAgICAgIGcgPSBiICsgZCxcclxuICAgICAgICAgICAgaCA9IFtdLFxyXG4gICAgICAgICAgICBpID0gW107XHJcbiAgICAgICAgaWYgKGIgPCA0IC0gZCArIGUpIHtcclxuICAgICAgICAgICAgZyA9IDMgKyBlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoYiA+IGMgLSAoMyAtIGQgKyBlKSkge1xyXG4gICAgICAgICAgICBmID0gYyAtICgyICsgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAodmFyIGsgPSAxOyBrIDw9IGM7IGsrKykge1xyXG4gICAgICAgICAgICBpZiAoMSA9PSBrIHx8IGsgPT0gYyB8fCAoayA+PSBmICYmIGsgPD0gZykpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsID0gYVtrIC0gMV07XHJcbiAgICAgICAgICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKGwsIFwiYWN0aXZlXCIpO1xyXG4gICAgICAgICAgICAgICAgaC5wdXNoKGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVhY2goaCwgZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgdmFyIGQgPSBjLmNoaWxkcmVuWzBdLmdldEF0dHJpYnV0ZShcImRhdGEtcGFnZVwiKTtcclxuICAgICAgICAgICAgaWYgKGopIHtcclxuICAgICAgICAgICAgICAgIHZhciBlID0gai5jaGlsZHJlblswXS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAtIGUgPT0gMikgaS5wdXNoKGFbZV0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoZCAtIGUgIT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gY3JlYXRlRWxlbWVudChcImxpXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiZWxsaXBzaXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogJzxhIGhyZWY9XCIjXCI+JyArIGVsbGlwc2lzICsgXCI8L2E+XCJcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpLnB1c2goZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaS5wdXNoKGMpO1xyXG4gICAgICAgICAgICBqID0gYztcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgZGF0YSB0byBIVE1MIHRhYmxlXHJcbiAgICAgKi9cclxuICAgIHZhciBkYXRhVG9UYWJsZSA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgdmFyIHRoZWFkID0gZmFsc2UsXHJcbiAgICAgICAgICAgIHRib2R5ID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGRhdGEgPSBkYXRhIHx8IHRoaXMub3B0aW9ucy5kYXRhO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS5oZWFkaW5ncykge1xyXG4gICAgICAgICAgICB0aGVhZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICAgICAgdmFyIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICBlYWNoKGRhdGEuaGVhZGluZ3MsIGZ1bmN0aW9uIChjb2wpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0ZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogY29sXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGVhZC5hcHBlbmRDaGlsZCh0cik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZGF0YS5kYXRhICYmIGRhdGEuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGJvZHkgPSBjcmVhdGVFbGVtZW50KFwidGJvZHlcIik7XHJcbiAgICAgICAgICAgIGVhY2goZGF0YS5kYXRhLCBmdW5jdGlvbiAocm93cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaGVhZGluZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5oZWFkaW5ncy5sZW5ndGggIT09IHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVGhlIG51bWJlciBvZiByb3dzIGRvIG5vdCBtYXRjaCB0aGUgbnVtYmVyIG9mIGhlYWRpbmdzLlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICAgICAgZWFjaChyb3dzLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGQgPSBjcmVhdGVFbGVtZW50KFwidGRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGJvZHkuYXBwZW5kQ2hpbGQodHIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGVhZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50YWJsZS50SGVhZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZS5yZW1vdmVDaGlsZCh0aGlzLnRhYmxlLnRIZWFkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRhYmxlLmFwcGVuZENoaWxkKHRoZWFkKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0Ym9keSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50YWJsZS50Qm9kaWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZS5yZW1vdmVDaGlsZCh0aGlzLnRhYmxlLnRCb2RpZXNbMF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudGFibGUuYXBwZW5kQ2hpbGQodGJvZHkpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2UgbW9tZW50LmpzIHRvIHBhcnNlIGNlbGwgY29udGVudHMgZm9yIHNvcnRpbmdcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gY29udGVudCAgICAgVGhlIGRhdGV0aW1lIHN0cmluZyB0byBwYXJzZVxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBmb3JtYXQgICAgICBUaGUgZm9ybWF0IGZvciBtb21lbnQgdG8gdXNlXHJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd8Qm9vbGVhbn0gICAgIERhdGF0aW1lIHN0cmluZyBvciBmYWxzZVxyXG4gICAgICovXHJcbiAgICB2YXIgcGFyc2VEYXRlID0gZnVuY3Rpb24gKGNvbnRlbnQsIGZvcm1hdCkge1xyXG4gICAgICAgIHZhciBkYXRlID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIG1vbWVudCgpIHRocm93cyBhIGZpdCBpZiB0aGUgc3RyaW5nIGlzbid0IGEgdmFsaWQgZGF0ZXRpbWUgc3RyaW5nXHJcbiAgICAgICAgLy8gc28gd2UgbmVlZCB0byBzdXBwbHkgdGhlIGZvcm1hdCB0byB0aGUgY29uc3RydWN0b3IgKGh0dHBzOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy1mb3JtYXQvKVxyXG5cclxuICAgICAgICAvLyBDb252ZXJ0aW5nIHRvIFlZWVlNTUREIGVuc3VyZXMgd2UgY2FuIGFjY3VyYXRlbHkgc29ydCB0aGUgY29sdW1uIG51bWVyaWNhbGx5XHJcblxyXG4gICAgICAgIGlmIChmb3JtYXQpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChmb3JtYXQpIHtcclxuICAgICAgICAgICAgY2FzZSBcIklTT184NjAxXCI6XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gbW9tZW50KGNvbnRlbnQsIG1vbWVudC5JU09fODYwMSkuZm9ybWF0KFwiWVlZWU1NRERcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcIlJGQ18yODIyXCI6XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gbW9tZW50KGNvbnRlbnQsIFwiZGRkLCBNTSBNTU0gWVlZWSBISDptbTpzcyBaWlwiKS5mb3JtYXQoXCJZWVlZTU1ERFwiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiTVlTUUxcIjpcclxuICAgICAgICAgICAgICAgIGRhdGUgPSBtb21lbnQoY29udGVudCwgXCJZWVlZLU1NLUREIGhoOm1tOnNzXCIpLmZvcm1hdChcIllZWVlNTUREXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJVTklYXCI6XHJcbiAgICAgICAgICAgICAgICBkYXRlID0gbW9tZW50KGNvbnRlbnQpLnVuaXgoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy8gVXNlciBkZWZpbmVkIGZvcm1hdCB1c2luZyB0aGUgZGF0YS1mb3JtYXQgYXR0cmlidXRlIG9yIGNvbHVtbnNbbl0uZm9ybWF0IG9wdGlvblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgZGF0ZSA9IG1vbWVudChjb250ZW50LCBmb3JtYXQpLmZvcm1hdChcIllZWVlNTUREXCIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENvbHVtbnMgQVBJXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2UgRGF0YVRhYmxlIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0ge01peGVkfSBjb2x1bW5zICBDb2x1bW4gaW5kZXggb3IgYXJyYXkgb2YgY29sdW1uIGluZGV4ZXNcclxuICAgICAqL1xyXG4gICAgdmFyIENvbHVtbnMgPSBmdW5jdGlvbiAoZHQpIHtcclxuICAgICAgICB0aGlzLmR0ID0gZHQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU3dhcCB0d28gY29sdW1uc1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUuc3dhcCA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcbiAgICAgICAgaWYgKGNvbHVtbnMubGVuZ3RoICYmIGNvbHVtbnMubGVuZ3RoID09PSAyKSB7XHJcbiAgICAgICAgICAgIHZhciBjb2xzID0gW107XHJcblxyXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgY29sdW1uIGluZGV4ZXNcclxuICAgICAgICAgICAgZWFjaCh0aGlzLmR0LmhlYWRpbmdzLCBmdW5jdGlvbiAoaCwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29scy5wdXNoKGkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHZhciB4ID0gY29sdW1uc1swXTtcclxuICAgICAgICAgICAgdmFyIHkgPSBjb2x1bW5zWzFdO1xyXG4gICAgICAgICAgICB2YXIgYiA9IGNvbHNbeV07XHJcbiAgICAgICAgICAgIGNvbHNbeV0gPSBjb2xzW3hdO1xyXG4gICAgICAgICAgICBjb2xzW3hdID0gYjtcclxuXHJcbiAgICAgICAgICAgIHRoaXMub3JkZXIoY29scyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlb3JkZXIgdGhlIGNvbHVtbnNcclxuICAgICAqIEByZXR1cm4ge0FycmF5fSBjb2x1bW5zICBBcnJheSBvZiBvcmRlcmVkIGNvbHVtbiBpbmRleGVzXHJcbiAgICAgKi9cclxuICAgIENvbHVtbnMucHJvdG90eXBlLm9yZGVyID0gZnVuY3Rpb24gKGNvbHVtbnMpIHtcclxuXHJcbiAgICAgICAgdmFyIGEsIGIsIGMsIGQsIGgsIHMsIGNlbGwsXHJcbiAgICAgICAgICAgIHRlbXAgPSBbXHJcbiAgICAgICAgICAgICAgICBbXSxcclxuICAgICAgICAgICAgICAgIFtdLFxyXG4gICAgICAgICAgICAgICAgW10sXHJcbiAgICAgICAgICAgICAgICBbXVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgIC8vIE9yZGVyIHRoZSBoZWFkaW5nc1xyXG4gICAgICAgIGVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbiwgeCkge1xyXG4gICAgICAgICAgICBoID0gZHQuaGVhZGluZ3NbY29sdW1uXTtcclxuICAgICAgICAgICAgcyA9IGguZ2V0QXR0cmlidXRlKFwiZGF0YS1zb3J0YWJsZVwiKSAhPT0gXCJmYWxzZVwiO1xyXG4gICAgICAgICAgICBhID0gaC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgIGEub3JpZ2luYWxDZWxsSW5kZXggPSB4O1xyXG4gICAgICAgICAgICBhLnNvcnRhYmxlID0gcztcclxuXHJcbiAgICAgICAgICAgIHRlbXBbMF0ucHVzaChhKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1uKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGIgPSBoLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIGIub3JpZ2luYWxDZWxsSW5kZXggPSB4O1xyXG4gICAgICAgICAgICAgICAgYi5zb3J0YWJsZSA9IHM7XHJcblxyXG4gICAgICAgICAgICAgICAgdGVtcFsxXS5wdXNoKGIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIE9yZGVyIHRoZSByb3cgY2VsbHNcclxuICAgICAgICBlYWNoKGR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgICAgYyA9IHJvdy5jbG9uZU5vZGUoKTtcclxuICAgICAgICAgICAgZCA9IHJvdy5jbG9uZU5vZGUoKTtcclxuXHJcbiAgICAgICAgICAgIGMuZGF0YUluZGV4ID0gZC5kYXRhSW5kZXggPSBpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJvdy5zZWFyY2hJbmRleCAhPT0gbnVsbCAmJiByb3cuc2VhcmNoSW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgYy5zZWFyY2hJbmRleCA9IGQuc2VhcmNoSW5kZXggPSByb3cuc2VhcmNoSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgY2VsbCB0byB0aGUgZnJhZ21lbnQgaW4gdGhlIGNvcnJlY3Qgb3JkZXJcclxuICAgICAgICAgICAgZWFjaChjb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uLCB4KSB7XHJcbiAgICAgICAgICAgICAgICBjZWxsID0gcm93LmNlbGxzW2NvbHVtbl0uY2xvbmVOb2RlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY2VsbC5kYXRhID0gcm93LmNlbGxzW2NvbHVtbl0uZGF0YTtcclxuICAgICAgICAgICAgICAgIGMuYXBwZW5kQ2hpbGQoY2VsbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW4pIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwgPSByb3cuY2VsbHNbY29sdW1uXS5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5kYXRhID0gcm93LmNlbGxzW2NvbHVtbl0uZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICBkLmFwcGVuZENoaWxkKGNlbGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRlbXBbMl0ucHVzaChjKTtcclxuICAgICAgICAgICAgdGVtcFszXS5wdXNoKGQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkdC5oZWFkaW5ncyA9IHRlbXBbMF07XHJcbiAgICAgICAgZHQuYWN0aXZlSGVhZGluZ3MgPSB0ZW1wWzFdO1xyXG5cclxuICAgICAgICBkdC5kYXRhID0gdGVtcFsyXTtcclxuICAgICAgICBkdC5hY3RpdmVSb3dzID0gdGVtcFszXTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlXHJcbiAgICAgICAgZHQudXBkYXRlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogSGlkZSBjb2x1bW5zXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBDb2x1bW5zLnByb3RvdHlwZS5oaWRlID0gZnVuY3Rpb24gKGNvbHVtbnMpIHtcclxuICAgICAgICBpZiAoY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFyIGR0ID0gdGhpcy5kdDtcclxuXHJcbiAgICAgICAgICAgIGVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW4pIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGR0LmhpZGRlbkNvbHVtbnMucHVzaChjb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTaG93IGNvbHVtbnNcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIENvbHVtbnMucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICAgIGlmIChjb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgaW5kZXgsIGR0ID0gdGhpcy5kdDtcclxuXHJcbiAgICAgICAgICAgIGVhY2goY29sdW1ucywgZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHQuaGlkZGVuQ29sdW1ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBjb2x1bW4ocykgdmlzaWJpbGl0eVxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUudmlzaWJsZSA9IGZ1bmN0aW9uIChjb2x1bW5zKSB7XHJcbiAgICAgICAgdmFyIGNvbHMsIGR0ID0gdGhpcy5kdDtcclxuXHJcbiAgICAgICAgY29sdW1ucyA9IGNvbHVtbnMgfHwgZHQuaGVhZGluZ3MubWFwKGZ1bmN0aW9uICh0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGgub3JpZ2luYWxDZWxsSW5kZXg7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghaXNOYU4oY29sdW1ucykpIHtcclxuICAgICAgICAgICAgY29scyA9IGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihjb2x1bW5zKSA8IDA7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGNvbHVtbnMpKSB7XHJcbiAgICAgICAgICAgIGNvbHMgPSBbXTtcclxuICAgICAgICAgICAgZWFjaChjb2x1bW5zLCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xzLnB1c2goZHQuaGlkZGVuQ29sdW1ucy5pbmRleE9mKGNvbHVtbikgPCAwKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY29scztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYSBuZXcgY29sdW1uXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVxyXG4gICAgICovXHJcbiAgICBDb2x1bW5zLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcclxuICAgICAgICAgICAgdGQsIHRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZHQuaGVhZGluZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZHQuaW5zZXJ0KHtcclxuICAgICAgICAgICAgICAgIGhlYWRpbmdzOiBbZGF0YS5oZWFkaW5nXSxcclxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEuZGF0YS5tYXAoZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ldO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuZHQuaGlkZGVuSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmhlYWRpbmcubm9kZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKGRhdGEuaGVhZGluZyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBkYXRhLmhlYWRpbmc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aC5pbm5lckhUTUwgPSBcIlwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kdC5oZWFkaW5ncy5wdXNoKHRoKTtcclxuXHJcbiAgICAgICAgZWFjaCh0aGlzLmR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuZGF0YVtpXSkge1xyXG4gICAgICAgICAgICAgICAgdGQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuZGF0YVtpXS5ub2RlTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkLmFwcGVuZENoaWxkKGRhdGEuZGF0YVtpXSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IGRhdGEuZGF0YVtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0ZC5kYXRhID0gdGQuaW5uZXJIVE1MO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IGRhdGEucmVuZGVyLmNhbGwodGhhdCwgdGQuZGF0YSwgdGQsIHJvdyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHRkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoZGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiLCBkYXRhLnR5cGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YS5mb3JtYXQpIHtcclxuICAgICAgICAgICAgdGguc2V0QXR0cmlidXRlKFwiZGF0YS1mb3JtYXRcIiwgZGF0YS5mb3JtYXQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJzb3J0YWJsZVwiKSkge1xyXG4gICAgICAgICAgICB0aC5zb3J0YWJsZSA9IGRhdGEuc29ydGFibGU7XHJcbiAgICAgICAgICAgIHRoLnNldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIiwgZGF0YS5zb3J0YWJsZSA9PT0gdHJ1ZSA/IFwidHJ1ZVwiIDogXCJmYWxzZVwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG5cclxuICAgICAgICB0aGlzLmR0LnJlbmRlckhlYWRlcigpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBjb2x1bW4ocylcclxuICAgICAqIEBwYXJhbSAge0FycmF5fE51bWJlcn0gc2VsZWN0XHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBDb2x1bW5zLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAoc2VsZWN0KSB7XHJcbiAgICAgICAgaWYgKGlzQXJyYXkoc2VsZWN0KSkge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgaW4gcmV2ZXJzZSBvdGhlcndpc2UgdGhlIGluZGV4ZXMgd2lsbCBiZSBpbmNvcnJlY3RcclxuICAgICAgICAgICAgc2VsZWN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBlYWNoKHNlbGVjdCwgZnVuY3Rpb24gKGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoY29sdW1uKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5kdC5oZWFkaW5ncy5zcGxpY2Uoc2VsZWN0LCAxKTtcclxuXHJcbiAgICAgICAgICAgIGVhY2godGhpcy5kdC5kYXRhLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICByb3cucmVtb3ZlQ2hpbGQocm93LmNlbGxzW3NlbGVjdF0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucmVidWlsZCgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNvcnQgYnkgY29sdW1uXHJcbiAgICAgKiBAcGFyYW0gIHtpbnR9IGNvbHVtbiAtIFRoZSBjb2x1bW4gbm8uXHJcbiAgICAgKiBAcGFyYW0gIHtzdHJpbmd9IGRpcmVjdGlvbiAtIGFzYyBvciBkZXNjXHJcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBDb2x1bW5zLnByb3RvdHlwZS5zb3J0ID0gZnVuY3Rpb24gKGNvbHVtbiwgZGlyZWN0aW9uLCBpbml0KSB7XHJcblxyXG4gICAgICAgIHZhciBkdCA9IHRoaXMuZHQ7XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGNvbHVtbiBpcyBwcmVzZW50XHJcbiAgICAgICAgaWYgKGR0Lmhhc0hlYWRpbmdzICYmIChjb2x1bW4gPCAxIHx8IGNvbHVtbiA+IGR0LmFjdGl2ZUhlYWRpbmdzLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHQuc29ydGluZyA9IHRydWU7XHJcblxyXG4gICAgICAgIC8vIENvbnZlcnQgdG8gemVyby1pbmRleGVkXHJcbiAgICAgICAgY29sdW1uID0gY29sdW1uIC0gMTtcclxuXHJcbiAgICAgICAgdmFyIGRpcixcclxuICAgICAgICAgICAgcm93cyA9IGR0LmRhdGEsXHJcbiAgICAgICAgICAgIGFscGhhID0gW10sXHJcbiAgICAgICAgICAgIG51bWVyaWMgPSBbXSxcclxuICAgICAgICAgICAgYSA9IDAsXHJcbiAgICAgICAgICAgIG4gPSAwLFxyXG4gICAgICAgICAgICB0aCA9IGR0LmFjdGl2ZUhlYWRpbmdzW2NvbHVtbl07XHJcblxyXG4gICAgICAgIGNvbHVtbiA9IHRoLm9yaWdpbmFsQ2VsbEluZGV4O1xyXG5cclxuICAgICAgICBlYWNoKHJvd3MsIGZ1bmN0aW9uICh0cikge1xyXG4gICAgICAgICAgICB2YXIgY2VsbCA9IHRyLmNlbGxzW2NvbHVtbl07XHJcbiAgICAgICAgICAgIHZhciBjb250ZW50ID0gY2VsbC5kYXRhO1xyXG4gICAgICAgICAgICB2YXIgbnVtID0gY29udGVudC5yZXBsYWNlKC8oXFwkfFxcLHxcXHN8JSkvZywgXCJcIik7XHJcblxyXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgZGF0ZSBmb3JtYXQgYW5kIG1vbWVudC5qc1xyXG4gICAgICAgICAgICBpZiAodGguZ2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIpID09PSBcImRhdGVcIiAmJiB3aW4ubW9tZW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0ID0gZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkID0gdGguaGFzQXR0cmlidXRlKFwiZGF0YS1mb3JtYXRcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGZvcm1hdHRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IHRoLmdldEF0dHJpYnV0ZShcImRhdGEtZm9ybWF0XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIG51bSA9IHBhcnNlRGF0ZShjb250ZW50LCBmb3JtYXQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocGFyc2VGbG9hdChudW0pID09IG51bSkge1xyXG4gICAgICAgICAgICAgICAgbnVtZXJpY1tuKytdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIobnVtKSxcclxuICAgICAgICAgICAgICAgICAgICByb3c6IHRyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWxwaGFbYSsrXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY29udGVudCxcclxuICAgICAgICAgICAgICAgICAgICByb3c6IHRyXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8qIFNvcnQgYWNjb3JkaW5nIHRvIGRpcmVjdGlvbiAoYXNjZW5kaW5nIG9yIGRlc2NlbmRpbmcpICovXHJcbiAgICAgICAgdmFyIHRvcCwgYnRtO1xyXG4gICAgICAgIGlmIChjbGFzc0xpc3QuY29udGFpbnModGgsIFwiYXNjXCIpIHx8IGRpcmVjdGlvbiA9PSBcImFzY1wiKSB7XHJcbiAgICAgICAgICAgIHRvcCA9IHNvcnRJdGVtcyhhbHBoYSwgLTEpO1xyXG4gICAgICAgICAgICBidG0gPSBzb3J0SXRlbXMobnVtZXJpYywgLTEpO1xyXG4gICAgICAgICAgICBkaXIgPSBcImRlc2NlbmRpbmdcIjtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSh0aCwgXCJhc2NcIik7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGgsIFwiZGVzY1wiKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0b3AgPSBzb3J0SXRlbXMobnVtZXJpYywgMSk7XHJcbiAgICAgICAgICAgIGJ0bSA9IHNvcnRJdGVtcyhhbHBoYSwgMSk7XHJcbiAgICAgICAgICAgIGRpciA9IFwiYXNjZW5kaW5nXCI7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUodGgsIFwiZGVzY1wiKTtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aCwgXCJhc2NcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvKiBDbGVhciBhc2MvZGVzYyBjbGFzcyBuYW1lcyBmcm9tIHRoZSBsYXN0IHNvcnRlZCBjb2x1bW4ncyB0aCBpZiBpdCBpc24ndCB0aGUgc2FtZSBhcyB0aGUgb25lIHRoYXQgd2FzIGp1c3QgY2xpY2tlZCAqL1xyXG4gICAgICAgIGlmIChkdC5sYXN0VGggJiYgdGggIT0gZHQubGFzdFRoKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoZHQubGFzdFRoLCBcImRlc2NcIik7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoZHQubGFzdFRoLCBcImFzY1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGR0Lmxhc3RUaCA9IHRoO1xyXG5cclxuICAgICAgICAvKiBSZW9yZGVyIHRoZSB0YWJsZSAqL1xyXG4gICAgICAgIHJvd3MgPSB0b3AuY29uY2F0KGJ0bSk7XHJcblxyXG4gICAgICAgIGR0LmRhdGEgPSBbXTtcclxuICAgICAgICB2YXIgaW5kZXhlcyA9IFtdO1xyXG5cclxuICAgICAgICBlYWNoKHJvd3MsIGZ1bmN0aW9uICh2LCBpKSB7XHJcbiAgICAgICAgICAgIGR0LmRhdGEucHVzaCh2LnJvdyk7XHJcblxyXG4gICAgICAgICAgICBpZiAodi5yb3cuc2VhcmNoSW5kZXggIT09IG51bGwgJiYgdi5yb3cuc2VhcmNoSW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaW5kZXhlcy5wdXNoKGkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZHQpO1xyXG5cclxuICAgICAgICBkdC5zZWFyY2hEYXRhID0gaW5kZXhlcztcclxuXHJcbiAgICAgICAgdGhpcy5yZWJ1aWxkKCk7XHJcblxyXG4gICAgICAgIGR0LnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICBpZiAoIWluaXQpIHtcclxuICAgICAgICAgICAgZHQuZW1pdChcImRhdGF0YWJsZS5zb3J0XCIsIGNvbHVtbiwgZGlyKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVidWlsZCB0aGUgY29sdW1uc1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgQ29sdW1ucy5wcm90b3R5cGUucmVidWlsZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYSwgYiwgYywgZCwgZHQgPSB0aGlzLmR0LFxyXG4gICAgICAgICAgICB0ZW1wID0gW107XHJcblxyXG4gICAgICAgIGR0LmFjdGl2ZVJvd3MgPSBbXTtcclxuICAgICAgICBkdC5hY3RpdmVIZWFkaW5ncyA9IFtdO1xyXG5cclxuICAgICAgICBlYWNoKGR0LmhlYWRpbmdzLCBmdW5jdGlvbiAodGgsIGkpIHtcclxuICAgICAgICAgICAgdGgub3JpZ2luYWxDZWxsSW5kZXggPSBpO1xyXG4gICAgICAgICAgICB0aC5zb3J0YWJsZSA9IHRoLmdldEF0dHJpYnV0ZShcImRhdGEtc29ydGFibGVcIikgIT09IFwiZmFsc2VcIjtcclxuICAgICAgICAgICAgaWYgKGR0LmhpZGRlbkNvbHVtbnMuaW5kZXhPZihpKSA8IDApIHtcclxuICAgICAgICAgICAgICAgIGR0LmFjdGl2ZUhlYWRpbmdzLnB1c2godGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgIC8vIExvb3Agb3ZlciB0aGUgcm93cyBhbmQgcmVvcmRlciB0aGUgY2VsbHNcclxuICAgICAgICBlYWNoKGR0LmRhdGEsIGZ1bmN0aW9uIChyb3csIGkpIHtcclxuICAgICAgICAgICAgYSA9IHJvdy5jbG9uZU5vZGUoKTtcclxuICAgICAgICAgICAgYiA9IHJvdy5jbG9uZU5vZGUoKTtcclxuXHJcbiAgICAgICAgICAgIGEuZGF0YUluZGV4ID0gYi5kYXRhSW5kZXggPSBpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJvdy5zZWFyY2hJbmRleCAhPT0gbnVsbCAmJiByb3cuc2VhcmNoSW5kZXggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgYS5zZWFyY2hJbmRleCA9IGIuc2VhcmNoSW5kZXggPSByb3cuc2VhcmNoSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIEFwcGVuZCB0aGUgY2VsbCB0byB0aGUgZnJhZ21lbnQgaW4gdGhlIGNvcnJlY3Qgb3JkZXJcclxuICAgICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjID0gY2VsbC5jbG9uZU5vZGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjLmRhdGEgPSBjZWxsLmRhdGE7XHJcbiAgICAgICAgICAgICAgICBhLmFwcGVuZENoaWxkKGMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkdC5oaWRkZW5Db2x1bW5zLmluZGV4T2YoY2VsbC5jZWxsSW5kZXgpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGQgPSBjZWxsLmNsb25lTm9kZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBkLmRhdGEgPSBjZWxsLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgYi5hcHBlbmRDaGlsZChkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBBcHBlbmQgdGhlIGZyYWdtZW50IHdpdGggdGhlIG9yZGVyZWQgY2VsbHNcclxuICAgICAgICAgICAgdGVtcC5wdXNoKGEpO1xyXG4gICAgICAgICAgICBkdC5hY3RpdmVSb3dzLnB1c2goYik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGR0LmRhdGEgPSB0ZW1wO1xyXG5cclxuICAgICAgICBkdC51cGRhdGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3dzIEFQSVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlIERhdGFUYWJsZSBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHtBcnJheX0gcm93c1xyXG4gICAgICovXHJcbiAgICB2YXIgUm93cyA9IGZ1bmN0aW9uIChkdCwgcm93cykge1xyXG4gICAgICAgIHRoaXMuZHQgPSBkdDtcclxuICAgICAgICB0aGlzLnJvd3MgPSByb3dzO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCdWlsZCBhIG5ldyByb3dcclxuICAgICAqIEBwYXJhbSAge0FycmF5fSByb3dcclxuICAgICAqIEByZXR1cm4ge0hUTUxFbGVtZW50fVxyXG4gICAgICovXHJcbiAgICBSb3dzLnByb3RvdHlwZS5idWlsZCA9IGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICB2YXIgdGQsIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG5cclxuICAgICAgICB2YXIgaGVhZGluZ3MgPSB0aGlzLmR0LmhlYWRpbmdzO1xyXG5cclxuICAgICAgICBpZiAoIWhlYWRpbmdzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBoZWFkaW5ncyA9IHJvdy5tYXAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZWFjaChoZWFkaW5ncywgZnVuY3Rpb24gKGgsIGkpIHtcclxuICAgICAgICAgICAgdGQgPSBjcmVhdGVFbGVtZW50KFwidGRcIik7XHJcblxyXG4gICAgICAgICAgICAvLyBGaXhlcyAjMjlcclxuICAgICAgICAgICAgaWYgKCFyb3dbaV0gJiYgIXJvd1tpXS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJvd1tpXSA9IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRkLmlubmVySFRNTCA9IHJvd1tpXTtcclxuXHJcbiAgICAgICAgICAgIHRkLmRhdGEgPSByb3dbaV07XHJcblxyXG4gICAgICAgICAgICB0ci5hcHBlbmRDaGlsZCh0ZCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJldHVybiB0cjtcclxuICAgIH07XHJcblxyXG4gICAgUm93cy5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgIHJldHVybiByb3c7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIG5ldyByb3dcclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNlbGVjdFxyXG4gICAgICovXHJcbiAgICBSb3dzLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZGF0YSkge1xyXG5cclxuICAgICAgICBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgICAgICB2YXIgZHQgPSB0aGlzLmR0O1xyXG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgbXVsdGlwbGUgcm93c1xyXG4gICAgICAgICAgICBpZiAoaXNBcnJheShkYXRhWzBdKSkge1xyXG4gICAgICAgICAgICAgICAgZWFjaChkYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHQuZGF0YS5wdXNoKHRoaXMuYnVpbGQocm93KSk7XHJcbiAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGR0LmRhdGEucHVzaCh0aGlzLmJ1aWxkKGRhdGEpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gV2UgbWF5IGhhdmUgYWRkZWQgZGF0YSB0byBhbiBlbXB0eSB0YWJsZVxyXG4gICAgICAgICAgICBpZiAoIGR0LmRhdGEubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgZHQuaGFzUm93cyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgZHQuY29sdW1ucygpLnJlYnVpbGQoKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIHJvdyhzKVxyXG4gICAgICogQHBhcmFtICB7QXJyYXl8TnVtYmVyfSBzZWxlY3RcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJvd3MucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChzZWxlY3QpIHtcclxuXHJcbiAgICAgICAgdmFyIGR0ID0gdGhpcy5kdDtcclxuXHJcbiAgICAgICAgaWYgKGlzQXJyYXkoc2VsZWN0KSkge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgaW4gcmV2ZXJzZSBvdGhlcndpc2UgdGhlIGluZGV4ZXMgd2lsbCBiZSBpbmNvcnJlY3RcclxuICAgICAgICAgICAgc2VsZWN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBlYWNoKHNlbGVjdCwgZnVuY3Rpb24gKHJvdywgaSkge1xyXG4gICAgICAgICAgICAgICAgZHQuZGF0YS5zcGxpY2Uocm93LCAxKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZHQuZGF0YS5zcGxpY2Uoc2VsZWN0LCAxKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgZHQuY29sdW1ucygpLnJlYnVpbGQoKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgcm93IGluZGV4ZXNcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIFJvd3MucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBlYWNoKHRoaXMuZHQuZGF0YSwgZnVuY3Rpb24gKHJvdywgaSkge1xyXG4gICAgICAgICAgICByb3cuZGF0YUluZGV4ID0gaTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgIC8vICAgIE1BSU4gTElCICAgIC8vXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgIHZhciBEYXRhVGFibGUgPSBmdW5jdGlvbiAodGFibGUsIG9wdGlvbnMpIHtcclxuICAgICAgICB0aGlzLmluaXRpYWxpemVkID0gZmFsc2U7XHJcblxyXG4gICAgICAgIC8vIHVzZXIgb3B0aW9uc1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZChkZWZhdWx0Q29uZmlnLCBvcHRpb25zKTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YWJsZSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB0YWJsZTtcclxuICAgICAgICAgICAgdGFibGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhYmxlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSBlbGVtZW50ICdcIiArIHNlbGVjdG9yICsgXCInIGNhbiBub3QgYmUgZm91bmQuXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFibGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9PSBcInRhYmxlXCIpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHNlbGVjdGVkIGVsZW1lbnQgaXMgbm90IGEgdGFibGUuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbml0aWFsTGF5b3V0ID0gdGFibGUuaW5uZXJIVE1MO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbFNvcnRhYmxlID0gdGhpcy5vcHRpb25zLnNvcnRhYmxlO1xyXG5cclxuICAgICAgICAvLyBEaXNhYmxlIG1hbnVhbCBzb3J0aW5nIGlmIG5vIGhlYWRlciBpcyBwcmVzZW50ICgjNClcclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5oZWFkZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnNvcnRhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFibGUudEhlYWQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGF0YSB8fFxyXG4gICAgICAgICAgICAgICAgKHRoaXMub3B0aW9ucy5kYXRhICYmICF0aGlzLm9wdGlvbnMuZGF0YS5oZWFkaW5ncylcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc29ydGFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhYmxlLnRCb2RpZXMubGVuZ3RoICYmICF0YWJsZS50Qm9kaWVzWzBdLnJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMuZGF0YS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIllvdSBzZWVtIHRvIGJlIHVzaW5nIHRoZSBkYXRhIG9wdGlvbiwgYnV0IHlvdSd2ZSBub3QgZGVmaW5lZCBhbnkgcm93cy5cIlxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudGFibGUgPSB0YWJsZTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIHZhciBwcm90byA9IERhdGFUYWJsZS5wcm90b3R5cGU7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBJbml0aWFsaXplIHRoZSBpbnN0YW5jZVxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zXHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCB8fCBjbGFzc0xpc3QuY29udGFpbnModGhpcy50YWJsZSwgXCJkYXRhVGFibGUtdGFibGVcIikpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG5cclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQodGhpcy5vcHRpb25zLCBvcHRpb25zIHx8IHt9KTtcclxuXHJcbiAgICAgICAgLy8gSUUgZGV0ZWN0aW9uXHJcbiAgICAgICAgdGhpcy5pc0lFID0gISEvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICB0aGlzLm9uRmlyc3RQYWdlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgdGhpcy5oaWRkZW5Db2x1bW5zID0gW107XHJcbiAgICAgICAgdGhpcy5jb2x1bW5SZW5kZXJlcnMgPSBbXTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkQ29sdW1ucyA9IFtdO1xyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcigpO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLmluaXRcIik7XHJcbiAgICAgICAgICAgIHRoYXQuaW5pdGlhbGl6ZWQgPSB0cnVlO1xyXG4gICAgICAgIH0sIDEwKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW5kZXIgdGhlIGluc3RhbmNlXHJcbiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHR5cGVcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbmRlciA9IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoICh0eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJwYWdlXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlclBhZ2UoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicGFnZXJcIjpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyUGFnZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiaGVhZGVyXCI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlckhlYWRlcigpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcclxuICAgICAgICAgICAgbyA9IHRoYXQub3B0aW9ucyxcclxuICAgICAgICAgICAgdGVtcGxhdGUgPSBcIlwiO1xyXG5cclxuICAgICAgICAvLyBDb252ZXJ0IGRhdGEgdG8gSFRNTFxyXG4gICAgICAgIGlmIChvLmRhdGEpIHtcclxuICAgICAgICAgICAgZGF0YVRvVGFibGUuY2FsbCh0aGF0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChvLmFqYXgpIHtcclxuICAgICAgICAgICAgdmFyIGFqYXggPSBvLmFqYXg7XHJcbiAgICAgICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuXHJcbiAgICAgICAgICAgIHZhciB4aHJQcm9ncmVzcyA9IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5wcm9ncmVzc1wiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHhockxvYWQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLmFqYXgubG9hZGVkXCIsIGUsIHhocik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzID09PSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9iaiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZGF0YSA9IGFqYXgubG9hZCA/IGFqYXgubG9hZC5jYWxsKHRoYXQsIHhocikgOiB4aHIucmVzcG9uc2VUZXh0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnR5cGUgPSBcImpzb25cIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhamF4LmNvbnRlbnQgJiYgYWpheC5jb250ZW50LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai50eXBlID0gYWpheC5jb250ZW50LnR5cGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqID0gZXh0ZW5kKG9iaiwgYWpheC5jb250ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5pbXBvcnQob2JqKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuc2V0Q29sdW1ucyh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuZW1pdChcImRhdGF0YWJsZS5hamF4LnN1Y2Nlc3NcIiwgZSwgeGhyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5lcnJvclwiLCBlLCB4aHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciB4aHJGYWlsZWQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLmFqYXguZXJyb3JcIiwgZSwgeGhyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciB4aHJDYW5jZWxsZWQgPSBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLmFqYXguYWJvcnRcIiwgZSwgeGhyKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIG9uKHhociwgXCJwcm9ncmVzc1wiLCB4aHJQcm9ncmVzcyk7XHJcbiAgICAgICAgICAgIG9uKHhociwgXCJsb2FkXCIsIHhockxvYWQpO1xyXG4gICAgICAgICAgICBvbih4aHIsIFwiZXJyb3JcIiwgeGhyRmFpbGVkKTtcclxuICAgICAgICAgICAgb24oeGhyLCBcImFib3J0XCIsIHhockNhbmNlbGxlZCk7XHJcblxyXG4gICAgICAgICAgICB0aGF0LmVtaXQoXCJkYXRhdGFibGUuYWpheC5sb2FkaW5nXCIsIHhocik7XHJcblxyXG4gICAgICAgICAgICB4aHIub3BlbihcIkdFVFwiLCB0eXBlb2YgYWpheCA9PT0gXCJzdHJpbmdcIiA/IG8uYWpheCA6IG8uYWpheC51cmwpO1xyXG4gICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gU3RvcmUgcmVmZXJlbmNlc1xyXG4gICAgICAgIHRoYXQuYm9keSA9IHRoYXQudGFibGUudEJvZGllc1swXTtcclxuICAgICAgICB0aGF0LmhlYWQgPSB0aGF0LnRhYmxlLnRIZWFkO1xyXG4gICAgICAgIHRoYXQuZm9vdCA9IHRoYXQudGFibGUudEZvb3Q7XHJcblxyXG4gICAgICAgIGlmICghdGhhdC5ib2R5KSB7XHJcbiAgICAgICAgICAgIHRoYXQuYm9keSA9IGNyZWF0ZUVsZW1lbnQoXCJ0Ym9keVwiKTtcclxuXHJcbiAgICAgICAgICAgIHRoYXQudGFibGUuYXBwZW5kQ2hpbGQodGhhdC5ib2R5KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoYXQuaGFzUm93cyA9IHRoYXQuYm9keS5yb3dzLmxlbmd0aCA+IDA7XHJcblxyXG4gICAgICAgIC8vIE1ha2UgYSB0SGVhZCBpZiB0aGVyZSBpc24ndCBvbmUgKGZpeGVzICM4KVxyXG4gICAgICAgIGlmICghdGhhdC5oZWFkKSB7XHJcbiAgICAgICAgICAgIHZhciBoID0gY3JlYXRlRWxlbWVudChcInRoZWFkXCIpO1xyXG4gICAgICAgICAgICB2YXIgdCA9IGNyZWF0ZUVsZW1lbnQoXCJ0clwiKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGF0Lmhhc1Jvd3MpIHtcclxuICAgICAgICAgICAgICAgIGVhY2godGhhdC5ib2R5LnJvd3NbMF0uY2VsbHMsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmFwcGVuZENoaWxkKGNyZWF0ZUVsZW1lbnQoXCJ0aFwiKSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBoLmFwcGVuZENoaWxkKHQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGF0LmhlYWQgPSBoO1xyXG5cclxuICAgICAgICAgICAgdGhhdC50YWJsZS5pbnNlcnRCZWZvcmUodGhhdC5oZWFkLCB0aGF0LmJvZHkpO1xyXG5cclxuICAgICAgICAgICAgdGhhdC5oaWRkZW5IZWFkZXIgPSAhby5hamF4O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC5oZWFkaW5ncyA9IFtdO1xyXG4gICAgICAgIHRoYXQuaGFzSGVhZGluZ3MgPSB0aGF0LmhlYWQucm93cy5sZW5ndGggPiAwO1xyXG5cclxuICAgICAgICBpZiAodGhhdC5oYXNIZWFkaW5ncykge1xyXG4gICAgICAgICAgICB0aGF0LmhlYWRlciA9IHRoYXQuaGVhZC5yb3dzWzBdO1xyXG4gICAgICAgICAgICB0aGF0LmhlYWRpbmdzID0gW10uc2xpY2UuY2FsbCh0aGF0LmhlYWRlci5jZWxscyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBIZWFkZXJcclxuICAgICAgICBpZiAoIW8uaGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGF0LmhlYWQpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQudGFibGUucmVtb3ZlQ2hpbGQodGhhdC50YWJsZS50SGVhZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEZvb3RlclxyXG4gICAgICAgIGlmIChvLmZvb3Rlcikge1xyXG4gICAgICAgICAgICBpZiAodGhhdC5oZWFkICYmICF0aGF0LmZvb3QpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuZm9vdCA9IGNyZWF0ZUVsZW1lbnQoXCJ0Zm9vdFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHRtbDogdGhhdC5oZWFkLmlubmVySFRNTFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnRhYmxlLmFwcGVuZENoaWxkKHRoYXQuZm9vdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhhdC5mb290KSB7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnRhYmxlLnJlbW92ZUNoaWxkKHRoYXQudGFibGUudEZvb3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBCdWlsZFxyXG4gICAgICAgIHRoYXQud3JhcHBlciA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xyXG4gICAgICAgICAgICBjbGFzczogXCJkYXRhVGFibGUtd3JhcHBlciBkYXRhVGFibGUtbG9hZGluZ1wiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIFRlbXBsYXRlIGZvciBjdXN0b20gbGF5b3V0c1xyXG4gICAgICAgIHRlbXBsYXRlICs9IFwiPGRpdiBjbGFzcz0nZGF0YVRhYmxlLXRvcCc+XCI7XHJcbiAgICAgICAgdGVtcGxhdGUgKz0gby5sYXlvdXQudG9wO1xyXG4gICAgICAgIHRlbXBsYXRlICs9IFwiPC9kaXY+XCI7XHJcbiAgICAgICAgdGVtcGxhdGUgKz0gXCI8ZGl2IGNsYXNzPSdkYXRhVGFibGUtY29udGFpbmVyJz48L2Rpdj5cIjtcclxuICAgICAgICB0ZW1wbGF0ZSArPSBcIjxkaXYgY2xhc3M9J2RhdGFUYWJsZS1ib3R0b20nPlwiO1xyXG4gICAgICAgIHRlbXBsYXRlICs9IG8ubGF5b3V0LmJvdHRvbTtcclxuICAgICAgICB0ZW1wbGF0ZSArPSBcIjwvZGl2PlwiO1xyXG5cclxuICAgICAgICAvLyBJbmZvIHBsYWNlbWVudFxyXG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntpbmZvfVwiLCBcIjxkaXYgY2xhc3M9J2RhdGFUYWJsZS1pbmZvJz48L2Rpdj5cIik7XHJcblxyXG4gICAgICAgIC8vIFBlciBQYWdlIFNlbGVjdFxyXG4gICAgICAgIGlmIChvLnBlclBhZ2VTZWxlY3QpIHtcclxuICAgICAgICAgICAgdmFyIHdyYXAgPSBcIjxkaXYgY2xhc3M9J2RhdGFUYWJsZS1kcm9wZG93bic+PGxhYmVsPlwiO1xyXG4gICAgICAgICAgICB3cmFwICs9IG8ubGFiZWxzLnBlclBhZ2U7XHJcbiAgICAgICAgICAgIHdyYXAgKz0gXCI8L2xhYmVsPjwvZGl2PlwiO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSBzZWxlY3RcclxuICAgICAgICAgICAgdmFyIHNlbGVjdCA9IGNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiwge1xyXG4gICAgICAgICAgICAgICAgY2xhc3M6IFwiZGF0YVRhYmxlLXNlbGVjdG9yXCJcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBDcmVhdGUgdGhlIG9wdGlvbnNcclxuICAgICAgICAgICAgZWFjaChvLnBlclBhZ2VTZWxlY3QsIGZ1bmN0aW9uICh2YWwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IHZhbCA9PT0gby5wZXJQYWdlO1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wdGlvbiA9IG5ldyBPcHRpb24odmFsLCB2YWwsIHNlbGVjdGVkLCBzZWxlY3RlZCk7XHJcbiAgICAgICAgICAgICAgICBzZWxlY3QuYWRkKG9wdGlvbik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gQ3VzdG9tIGxhYmVsXHJcbiAgICAgICAgICAgIHdyYXAgPSB3cmFwLnJlcGxhY2UoXCJ7c2VsZWN0fVwiLCBzZWxlY3Qub3V0ZXJIVE1MKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFNlbGVjdG9yIHBsYWNlbWVudFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoXCJ7c2VsZWN0fVwiLCB3cmFwKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLnJlcGxhY2UoXCJ7c2VsZWN0fVwiLCBcIlwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFNlYXJjaGFibGVcclxuICAgICAgICBpZiAoby5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICAgIHZhciBmb3JtID1cclxuICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZGF0YVRhYmxlLXNlYXJjaCc+PGlucHV0IGNsYXNzPSdkYXRhVGFibGUtaW5wdXQnIHBsYWNlaG9sZGVyPSdcIiArXHJcbiAgICAgICAgICAgICAgICBvLmxhYmVscy5wbGFjZWhvbGRlciArXHJcbiAgICAgICAgICAgICAgICBcIicgdHlwZT0ndGV4dCc+PC9kaXY+XCI7XHJcblxyXG4gICAgICAgICAgICAvLyBTZWFyY2ggaW5wdXQgcGxhY2VtZW50XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntzZWFyY2h9XCIsIGZvcm0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZShcIntzZWFyY2h9XCIsIFwiXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoYXQuaGFzSGVhZGluZ3MpIHtcclxuICAgICAgICAgICAgLy8gU29ydGFibGVcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIoXCJoZWFkZXJcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBBZGQgdGFibGUgY2xhc3NcclxuICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQudGFibGUsIFwiZGF0YVRhYmxlLXRhYmxlXCIpO1xyXG5cclxuICAgICAgICAvLyBQYWdpbmF0b3JcclxuICAgICAgICB2YXIgdyA9IGNyZWF0ZUVsZW1lbnQoXCJkaXZcIiwge1xyXG4gICAgICAgICAgICBjbGFzczogXCJkYXRhVGFibGUtcGFnaW5hdGlvblwiXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIHBhZ2luYXRvciA9IGNyZWF0ZUVsZW1lbnQoXCJ1bFwiKTtcclxuICAgICAgICB3LmFwcGVuZENoaWxkKHBhZ2luYXRvcik7XHJcblxyXG4gICAgICAgIC8vIFBhZ2VyKHMpIHBsYWNlbWVudFxyXG4gICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUucmVwbGFjZSgvXFx7cGFnZXJcXH0vZywgdy5vdXRlckhUTUwpO1xyXG5cclxuICAgICAgICB0aGF0LndyYXBwZXIuaW5uZXJIVE1MID0gdGVtcGxhdGU7XHJcblxyXG4gICAgICAgIHRoYXQuY29udGFpbmVyID0gdGhhdC53cmFwcGVyLnF1ZXJ5U2VsZWN0b3IoXCIuZGF0YVRhYmxlLWNvbnRhaW5lclwiKTtcclxuXHJcbiAgICAgICAgdGhhdC5wYWdlcnMgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvckFsbChcIi5kYXRhVGFibGUtcGFnaW5hdGlvblwiKTtcclxuXHJcbiAgICAgICAgdGhhdC5sYWJlbCA9IHRoYXQud3JhcHBlci5xdWVyeVNlbGVjdG9yKFwiLmRhdGFUYWJsZS1pbmZvXCIpO1xyXG5cclxuICAgICAgICAvLyBJbnNlcnQgaW4gdG8gRE9NIHRyZWVcclxuICAgICAgICB0aGF0LnRhYmxlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKHRoYXQud3JhcHBlciwgdGhhdC50YWJsZSk7XHJcbiAgICAgICAgdGhhdC5jb250YWluZXIuYXBwZW5kQ2hpbGQodGhhdC50YWJsZSk7XHJcblxyXG4gICAgICAgIC8vIFN0b3JlIHRoZSB0YWJsZSBkaW1lbnNpb25zXHJcbiAgICAgICAgdGhhdC5yZWN0ID0gdGhhdC50YWJsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgICAgLy8gQ29udmVydCByb3dzIHRvIGFycmF5IGZvciBwcm9jZXNzaW5nXHJcbiAgICAgICAgdGhhdC5kYXRhID0gW10uc2xpY2UuY2FsbCh0aGF0LmJvZHkucm93cyk7XHJcbiAgICAgICAgdGhhdC5hY3RpdmVSb3dzID0gdGhhdC5kYXRhLnNsaWNlKCk7XHJcbiAgICAgICAgdGhhdC5hY3RpdmVIZWFkaW5ncyA9IHRoYXQuaGVhZGluZ3Muc2xpY2UoKTtcclxuXHJcbiAgICAgICAgLy8gVXBkYXRlXHJcbiAgICAgICAgdGhhdC51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgaWYgKCFvLmFqYXgpIHtcclxuICAgICAgICAgICAgdGhhdC5zZXRDb2x1bW5zKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBGaXggaGVpZ2h0XHJcbiAgICAgICAgdGhpcy5maXhIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgLy8gRml4IGNvbHVtbnNcclxuICAgICAgICB0aGF0LmZpeENvbHVtbnMoKTtcclxuXHJcbiAgICAgICAgLy8gQ2xhc3MgbmFtZXNcclxuICAgICAgICBpZiAoIW8uaGVhZGVyKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC53cmFwcGVyLCBcIm5vLWhlYWRlclwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghby5mb290ZXIpIHtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LndyYXBwZXIsIFwibm8tZm9vdGVyXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKG8uc29ydGFibGUpIHtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LndyYXBwZXIsIFwic29ydGFibGVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoby5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhhdC53cmFwcGVyLCBcInNlYXJjaGFibGVcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoby5maXhlZEhlaWdodCkge1xyXG4gICAgICAgICAgICBjbGFzc0xpc3QuYWRkKHRoYXQud3JhcHBlciwgXCJmaXhlZC1oZWlnaHRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoby5maXhlZENvbHVtbnMpIHtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGF0LndyYXBwZXIsIFwiZml4ZWQtY29sdW1uc1wiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoYXQuYmluZEV2ZW50cygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciB0aGUgcGFnZVxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ucmVuZGVyUGFnZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAodGhpcy5oYXNSb3dzICYmIHRoaXMudG90YWxQYWdlcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA+IHRoaXMudG90YWxQYWdlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFVzZSBhIGZyYWdtZW50IHRvIGxpbWl0IHRvdWNoaW5nIHRoZSBET01cclxuICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5jdXJyZW50UGFnZSAtIDEsXHJcbiAgICAgICAgICAgICAgICBmcmFnID0gZG9jLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmhhc0hlYWRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICBmbHVzaCh0aGlzLmhlYWRlciwgdGhpcy5pc0lFKTtcclxuXHJcbiAgICAgICAgICAgICAgICBlYWNoKHRoaXMuYWN0aXZlSGVhZGluZ3MsIGZ1bmN0aW9uICh0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyLmFwcGVuZENoaWxkKHRoKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlYWNoKHRoaXMucGFnZXNbaW5kZXhdLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKHRoaXMucm93cygpLnJlbmRlcihyb3cpKTtcclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKGZyYWcpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5vbkZpcnN0UGFnZSA9IHRoaXMuY3VycmVudFBhZ2UgPT09IDE7XHJcbiAgICAgICAgICAgIHRoaXMub25MYXN0UGFnZSA9IHRoaXMuY3VycmVudFBhZ2UgPT09IHRoaXMubGFzdFBhZ2U7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVXBkYXRlIHRoZSBpbmZvXHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSAwLFxyXG4gICAgICAgICAgICBmID0gMCxcclxuICAgICAgICAgICAgdCA9IDAsXHJcbiAgICAgICAgICAgIGl0ZW1zO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50b3RhbFBhZ2VzKSB7XHJcbiAgICAgICAgICAgIGN1cnJlbnQgPSB0aGlzLmN1cnJlbnRQYWdlIC0gMTtcclxuICAgICAgICAgICAgZiA9IGN1cnJlbnQgKiB0aGlzLm9wdGlvbnMucGVyUGFnZTtcclxuICAgICAgICAgICAgdCA9IGYgKyB0aGlzLnBhZ2VzW2N1cnJlbnRdLmxlbmd0aDtcclxuICAgICAgICAgICAgZiA9IGYgKyAxO1xyXG4gICAgICAgICAgICBpdGVtcyA9ICEhdGhpcy5zZWFyY2hpbmcgPyB0aGlzLnNlYXJjaERhdGEubGVuZ3RoIDogdGhpcy5kYXRhLmxlbmd0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxhYmVsICYmIHRoaXMub3B0aW9ucy5sYWJlbHMuaW5mby5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gQ1VTVE9NIExBQkVMU1xyXG4gICAgICAgICAgICB2YXIgc3RyaW5nID0gdGhpcy5vcHRpb25zLmxhYmVscy5pbmZvXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIntzdGFydH1cIiwgZilcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwie2VuZH1cIiwgdClcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKFwie3BhZ2V9XCIsIHRoaXMuY3VycmVudFBhZ2UpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZShcIntwYWdlc31cIiwgdGhpcy50b3RhbFBhZ2VzKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoXCJ7cm93c31cIiwgaXRlbXMpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5sYWJlbC5pbm5lckhUTUwgPSBpdGVtcyA/IHN0cmluZyA6IFwiXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA9PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZml4SGVpZ2h0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbmRlciB0aGUgcGFnZXIocylcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbmRlclBhZ2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZsdXNoKHRoaXMucGFnZXJzLCB0aGlzLmlzSUUpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy50b3RhbFBhZ2VzID4gMSkge1xyXG4gICAgICAgICAgICB2YXIgYyA9IFwicGFnZXJcIixcclxuICAgICAgICAgICAgICAgIGZyYWcgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxyXG4gICAgICAgICAgICAgICAgcHJldiA9IHRoaXMub25GaXJzdFBhZ2UgPyAxIDogdGhpcy5jdXJyZW50UGFnZSAtIDEsXHJcbiAgICAgICAgICAgICAgICBuZXh0ID0gdGhpcy5vbmxhc3RQYWdlID8gdGhpcy50b3RhbFBhZ2VzIDogdGhpcy5jdXJyZW50UGFnZSArIDE7XHJcblxyXG4gICAgICAgICAgICAvLyBmaXJzdCBidXR0b25cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maXJzdExhc3QpIHtcclxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQoYnV0dG9uKGMsIDEsIHRoaXMub3B0aW9ucy5maXJzdFRleHQpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gcHJldiBidXR0b25cclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5uZXh0UHJldikge1xyXG4gICAgICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChidXR0b24oYywgcHJldiwgdGhpcy5vcHRpb25zLnByZXZUZXh0KSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZhciBwYWdlciA9IHRoaXMubGlua3M7XHJcblxyXG4gICAgICAgICAgICAvLyB0cnVuY2F0ZSB0aGUgbGlua3NcclxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cnVuY2F0ZVBhZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICBwYWdlciA9IHRydW5jYXRlKFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlua3MsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VzLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMucGFnZXJEZWx0YSxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuZWxsaXBzaXNUZXh0XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBhY3RpdmUgcGFnZSBsaW5rXHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5hZGQodGhpcy5saW5rc1t0aGlzLmN1cnJlbnRQYWdlIC0gMV0sIFwiYWN0aXZlXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8gYXBwZW5kIHRoZSBsaW5rc1xyXG4gICAgICAgICAgICBlYWNoKHBhZ2VyLCBmdW5jdGlvbiAocCkge1xyXG4gICAgICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZShwLCBcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgIGZyYWcuYXBwZW5kQ2hpbGQocCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2xhc3NMaXN0LmFkZCh0aGlzLmxpbmtzW3RoaXMuY3VycmVudFBhZ2UgLSAxXSwgXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgICAvLyBuZXh0IGJ1dHRvblxyXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLm5leHRQcmV2KSB7XHJcbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1dHRvbihjLCBuZXh0LCB0aGlzLm9wdGlvbnMubmV4dFRleHQpKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gZmlyc3QgYnV0dG9uXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZmlyc3RMYXN0KSB7XHJcbiAgICAgICAgICAgICAgICBmcmFnLmFwcGVuZENoaWxkKGJ1dHRvbihjLCB0aGlzLnRvdGFsUGFnZXMsIHRoaXMub3B0aW9ucy5sYXN0VGV4dCkpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBXZSBtYXkgaGF2ZSBtb3JlIHRoYW4gb25lIHBhZ2VyXHJcbiAgICAgICAgICAgIGVhY2godGhpcy5wYWdlcnMsIGZ1bmN0aW9uIChwYWdlcikge1xyXG4gICAgICAgICAgICAgICAgcGFnZXIuYXBwZW5kQ2hpbGQoZnJhZy5jbG9uZU5vZGUodHJ1ZSkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVuZGVyIHRoZSBoZWFkZXJcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlbmRlckhlYWRlciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoYXQubGFiZWxzID0gW107XHJcblxyXG4gICAgICAgIGlmICh0aGF0LmhlYWRpbmdzICYmIHRoYXQuaGVhZGluZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGVhY2godGhhdC5oZWFkaW5ncywgZnVuY3Rpb24gKHRoLCBpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhhdC5sYWJlbHNbaV0gPSB0aC50ZXh0Q29udGVudDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoY2xhc3NMaXN0LmNvbnRhaW5zKHRoLmZpcnN0RWxlbWVudENoaWxkLCBcImRhdGFUYWJsZS1zb3J0ZXJcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aC5pbm5lckhUTUwgPSB0aC5maXJzdEVsZW1lbnRDaGlsZC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGguc29ydGFibGUgPSB0aC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIpICE9PSBcImZhbHNlXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgdGgub3JpZ2luYWxDZWxsSW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5zb3J0YWJsZSAmJiB0aC5zb3J0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsaW5rID0gY3JlYXRlRWxlbWVudChcImFcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBcIiNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiZGF0YVRhYmxlLXNvcnRlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodG1sOiB0aC5pbm5lckhUTUxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGguaW5uZXJIVE1MID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLXNvcnRhYmxlXCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoLmFwcGVuZENoaWxkKGxpbmspO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoYXQuZml4Q29sdW1ucygpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEJpbmQgZXZlbnQgbGlzdGVuZXJzXHJcbiAgICAgKiBAcmV0dXJuIHtbdHlwZV19IFtkZXNjcmlwdGlvbl1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uYmluZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXHJcbiAgICAgICAgICAgIG8gPSB0aGF0Lm9wdGlvbnM7XHJcblxyXG4gICAgICAgIC8vIFBlciBwYWdlIHNlbGVjdG9yXHJcbiAgICAgICAgaWYgKG8ucGVyUGFnZVNlbGVjdCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZWN0b3IgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5kYXRhVGFibGUtc2VsZWN0b3JcIik7XHJcbiAgICAgICAgICAgIGlmIChzZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgLy8gQ2hhbmdlIHBlciBwYWdlXHJcbiAgICAgICAgICAgICAgICBvbihzZWxlY3RvciwgXCJjaGFuZ2VcIiwgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBvLnBlclBhZ2UgPSBwYXJzZUludCh0aGlzLnZhbHVlLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5maXhIZWlnaHQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5lbWl0KFwiZGF0YXRhYmxlLnBlcnBhZ2VcIiwgby5wZXJQYWdlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBTZWFyY2ggaW5wdXRcclxuICAgICAgICBpZiAoby5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoYXQuaW5wdXQgPSB0aGF0LndyYXBwZXIucXVlcnlTZWxlY3RvcihcIi5kYXRhVGFibGUtaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGlmICh0aGF0LmlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICBvbih0aGF0LmlucHV0LCBcImtleXVwXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5zZWFyY2godGhpcy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gUGFnZXIocykgLyBzb3J0aW5nXHJcbiAgICAgICAgb24odGhhdC53cmFwcGVyLCBcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgIGlmICh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5oYXNBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnBhZ2UodC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXBhZ2VcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgby5zb3J0YWJsZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTGlzdC5jb250YWlucyh0LCBcImRhdGFUYWJsZS1zb3J0ZXJcIikgJiZcclxuICAgICAgICAgICAgICAgICAgICB0LnBhcmVudE5vZGUuZ2V0QXR0cmlidXRlKFwiZGF0YS1zb3J0YWJsZVwiKSAhPSBcImZhbHNlXCJcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY29sdW1ucygpLnNvcnQodGhhdC5hY3RpdmVIZWFkaW5ncy5pbmRleE9mKHQucGFyZW50Tm9kZSkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdXAgY29sdW1uc1xyXG4gICAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXHJcbiAgICAgKi9cclxuICAgIHByb3RvLnNldENvbHVtbnMgPSBmdW5jdGlvbiAoYWpheCkge1xyXG5cclxuICAgICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIGlmICghYWpheCkge1xyXG4gICAgICAgICAgICBlYWNoKHRoYXQuZGF0YSwgZnVuY3Rpb24gKHJvdykge1xyXG4gICAgICAgICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5kYXRhID0gY2VsbC5pbm5lckhUTUw7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDaGVjayBmb3IgdGhlIGNvbHVtbnMgb3B0aW9uXHJcbiAgICAgICAgaWYgKHRoYXQub3B0aW9ucy5jb2x1bW5zICYmIHRoYXQuaGVhZGluZ3MubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICBlYWNoKHRoYXQub3B0aW9ucy5jb2x1bW5zLCBmdW5jdGlvbiAoZGF0YSkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNvbnZlcnQgc2luZ2xlIGNvbHVtbiBzZWxlY3Rpb24gdG8gYXJyYXlcclxuICAgICAgICAgICAgICAgIGlmICghaXNBcnJheShkYXRhLnNlbGVjdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnNlbGVjdCA9IFtkYXRhLnNlbGVjdF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJyZW5kZXJcIikgJiYgdHlwZW9mIGRhdGEucmVuZGVyID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdGVkQ29sdW1ucyA9IHRoYXQuc2VsZWN0ZWRDb2x1bW5zLmNvbmNhdChkYXRhLnNlbGVjdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuY29sdW1uUmVuZGVyZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiBkYXRhLnNlbGVjdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXI6IGRhdGEucmVuZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQWRkIHRoZSBkYXRhIGF0dHJpYnV0ZXMgdG8gdGhlIHRoIGVsZW1lbnRzXHJcbiAgICAgICAgICAgICAgICBlYWNoKGRhdGEuc2VsZWN0LCBmdW5jdGlvbiAoY29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoID0gdGhhdC5oZWFkaW5nc1tjb2x1bW5dO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGguc2V0QXR0cmlidXRlKFwiZGF0YS10eXBlXCIsIGRhdGEudHlwZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmZvcm1hdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWZvcm1hdFwiLCBkYXRhLmZvcm1hdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KFwic29ydGFibGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGguc2V0QXR0cmlidXRlKFwiZGF0YS1zb3J0YWJsZVwiLCBkYXRhLnNvcnRhYmxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KFwiaGlkZGVuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLmhpZGRlbiAhPT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuY29sdW1ucyhjb2x1bW4pLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuaGFzT3duUHJvcGVydHkoXCJzb3J0XCIpICYmIGRhdGEuc2VsZWN0Lmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGF0LmNvbHVtbnMoKS5zb3J0KGRhdGEuc2VsZWN0WzBdICsgMSwgZGF0YS5zb3J0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhhdC5oYXNSb3dzKSB7XHJcbiAgICAgICAgICAgIGVhY2godGhhdC5kYXRhLCBmdW5jdGlvbiAocm93LCBpKSB7XHJcbiAgICAgICAgICAgICAgICByb3cuZGF0YUluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIGVhY2gocm93LmNlbGxzLCBmdW5jdGlvbiAoY2VsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNlbGwuZGF0YSA9IGNlbGwuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWRDb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZWFjaCh0aGF0LmRhdGEsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICBlYWNoKHJvdy5jZWxscywgZnVuY3Rpb24gKGNlbGwsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoYXQuc2VsZWN0ZWRDb2x1bW5zLmluZGV4T2YoaSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCh0aGF0LmNvbHVtblJlbmRlcmVycywgZnVuY3Rpb24gKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoby5jb2x1bW5zLmluZGV4T2YoaSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsLmlubmVySFRNTCA9IG8ucmVuZGVyZXIuY2FsbCh0aGF0LCBjZWxsLmRhdGEsIGNlbGwsIHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGF0LmNvbHVtbnMoKS5yZWJ1aWxkKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGF0LnJlbmRlcihcImhlYWRlclwiKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEZXN0cm95IHRoZSBpbnN0YW5jZVxyXG4gICAgICogQHJldHVybiB7dm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnRhYmxlLmlubmVySFRNTCA9IHRoaXMuaW5pdGlhbExheW91dDtcclxuXHJcbiAgICAgICAgLy8gUmVtb3ZlIHRoZSBjbGFzc05hbWVcclxuICAgICAgICBjbGFzc0xpc3QucmVtb3ZlKHRoaXMudGFibGUsIFwiZGF0YVRhYmxlLXRhYmxlXCIpO1xyXG5cclxuICAgICAgICAvLyBSZW1vdmUgdGhlIGNvbnRhaW5lcnNcclxuICAgICAgICB0aGlzLndyYXBwZXIucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQodGhpcy50YWJsZSwgdGhpcy53cmFwcGVyKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbml0aWFsaXplZCA9IGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFVwZGF0ZSB0aGUgaW5zdGFuY2VcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBhZ2luYXRlKHRoaXMpO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKFwicGFnZVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5saW5rcyA9IFtdO1xyXG5cclxuICAgICAgICB2YXIgaSA9IHRoaXMucGFnZXMubGVuZ3RoO1xyXG4gICAgICAgIHdoaWxlIChpLS0pIHtcclxuICAgICAgICAgICAgdmFyIG51bSA9IGkgKyAxO1xyXG4gICAgICAgICAgICB0aGlzLmxpbmtzW2ldID0gYnV0dG9uKGkgPT09IDAgPyBcImFjdGl2ZVwiIDogXCJcIiwgbnVtLCBudW0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zb3J0aW5nID0gZmFsc2U7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyKFwicGFnZXJcIik7XHJcblxyXG4gICAgICAgIHRoaXMucm93cygpLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQoXCJkYXRhdGFibGUudXBkYXRlXCIpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFNvcnQgcm93cyBpbnRvIHBhZ2VzXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnBhZ2luYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBwZXJQYWdlID0gdGhpcy5vcHRpb25zLnBlclBhZ2UsXHJcbiAgICAgICAgICAgIHJvd3MgPSB0aGlzLmFjdGl2ZVJvd3M7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaGluZykge1xyXG4gICAgICAgICAgICByb3dzID0gW107XHJcblxyXG4gICAgICAgICAgICBlYWNoKHRoaXMuc2VhcmNoRGF0YSwgZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICByb3dzLnB1c2godGhpcy5hY3RpdmVSb3dzW2luZGV4XSk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGhpZGRlbiBjb2x1bW5zXHJcbiAgICAgICAgdGhpcy5wYWdlcyA9IHJvd3NcclxuICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAodHIsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpICUgcGVyUGFnZSA9PT0gMCA/IHJvd3Muc2xpY2UoaSwgaSArIHBlclBhZ2UpIDogbnVsbDtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAocGFnZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnRvdGFsUGFnZXMgPSB0aGlzLmxhc3RQYWdlID0gdGhpcy5wYWdlcy5sZW5ndGg7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnRvdGFsUGFnZXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRml4IGNvbHVtbiB3aWR0aHNcclxuICAgICAqIEByZXR1cm4ge1ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmZpeENvbHVtbnMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZml4ZWRDb2x1bW5zICYmIHRoaXMuYWN0aXZlSGVhZGluZ3MgJiYgdGhpcy5hY3RpdmVIZWFkaW5ncy5sZW5ndGgpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjZWxscyxcclxuICAgICAgICAgICAgICAgIGhkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbldpZHRocyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBoZWFkaW5ncyB3ZSBuZWVkIG9ubHkgc2V0IHRoZSB3aWR0aHMgb24gdGhlbVxyXG4gICAgICAgICAgICAvLyBvdGhlcndpc2Ugd2UgbmVlZCBhIHRlbXAgaGVhZGVyIGFuZCB0aGUgd2lkdGhzIG5lZWQgYXBwbHlpbmcgdG8gYWxsIGNlbGxzXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRhYmxlLnRIZWFkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBSZXNldCB3aWR0aHNcclxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5hY3RpdmVIZWFkaW5ncywgZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjZWxsLnN0eWxlLndpZHRoID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5hY3RpdmVIZWFkaW5ncywgZnVuY3Rpb24gKGNlbGwsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3cgPSBjZWxsLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gb3cgLyB0aGlzLnJlY3Qud2lkdGggKiAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbC5zdHlsZS53aWR0aCA9IHcgKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbldpZHRoc1tpXSA9IG93O1xyXG4gICAgICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjZWxscyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIE1ha2UgdGVtcGVyYXJ5IGhlYWRpbmdzXHJcbiAgICAgICAgICAgICAgICBoZCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aGVhZFwiKTtcclxuICAgICAgICAgICAgICAgIHZhciByID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGMgPSB0aGlzLnRhYmxlLnRCb2RpZXNbMF0ucm93c1swXS5jZWxscztcclxuICAgICAgICAgICAgICAgIGVhY2goYywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aCA9IGNyZWF0ZUVsZW1lbnQoXCJ0aFwiKTtcclxuICAgICAgICAgICAgICAgICAgICByLmFwcGVuZENoaWxkKHRoKTtcclxuICAgICAgICAgICAgICAgICAgICBjZWxscy5wdXNoKHRoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGhkLmFwcGVuZENoaWxkKHIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YWJsZS5pbnNlcnRCZWZvcmUoaGQsIHRoaXMuYm9keSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHdpZHRocyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZWFjaChjZWxscywgZnVuY3Rpb24gKGNlbGwsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3cgPSBjZWxsLm9mZnNldFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3ID0gb3cgLyB0aGlzLnJlY3Qud2lkdGggKiAxMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGhzLnB1c2godyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5XaWR0aHNbaV0gPSBvdztcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIGVhY2godGhpcy5kYXRhLCBmdW5jdGlvbiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWFjaChyb3cuY2VsbHMsIGZ1bmN0aW9uIChjZWxsLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbnMoY2VsbC5jZWxsSW5kZXgpLnZpc2libGUoKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGwuc3R5bGUud2lkdGggPSB3aWR0aHNbaV0gKyBcIiVcIjtcclxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0sIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIERpc2NhcmQgdGhlIHRlbXAgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhYmxlLnJlbW92ZUNoaWxkKGhkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXggdGhlIGNvbnRhaW5lciBoZWlnaHQ7XHJcbiAgICAgKiBAcmV0dXJuIHtWb2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5maXhIZWlnaHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5maXhlZEhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnJlY3QgPSB0aGlzLmNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIuc3R5bGUuaGVpZ2h0ID0gdGhpcy5yZWN0LmhlaWdodCArIFwicHhcIjtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBhIHNlYXJjaCBvZiB0aGUgZGF0YSBzZXRcclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gcXVlcnlcclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnNlYXJjaCA9IGZ1bmN0aW9uIChxdWVyeSkge1xyXG4gICAgICAgIGlmICghdGhpcy5oYXNSb3dzKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuXHJcbiAgICAgICAgcXVlcnkgPSBxdWVyeS50b0xvd2VyQ2FzZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICB0aGlzLnNlYXJjaGluZyA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hEYXRhID0gW107XHJcblxyXG4gICAgICAgIGlmICghcXVlcnkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdChcImRhdGF0YWJsZS5zZWFyY2hcIiwgcXVlcnksIHRoaXMuc2VhcmNoRGF0YSk7XHJcbiAgICAgICAgICAgIGNsYXNzTGlzdC5yZW1vdmUodGhpcy53cmFwcGVyLCBcInNlYXJjaC1yZXN1bHRzXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgIGVhY2godGhpcy5kYXRhLCBmdW5jdGlvbiAocm93LCBpZHgpIHtcclxuICAgICAgICAgICAgdmFyIGluQXJyYXkgPSB0aGlzLnNlYXJjaERhdGEuaW5kZXhPZihyb3cpID4gLTE7XHJcblxyXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vTW9iaXVzMS9WYW5pbGxhLURhdGFUYWJsZXMvaXNzdWVzLzEyXHJcbiAgICAgICAgICAgIHZhciBkb2VzUXVlcnlNYXRjaCA9IHF1ZXJ5LnNwbGl0KFwiIFwiKS5yZWR1Y2UoZnVuY3Rpb24gKGJvb2wsIHdvcmQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmNsdWRlcyA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgcm93LmNlbGxzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3cuY2VsbHNbeF0udGV4dENvbnRlbnQudG9Mb3dlckNhc2UoKS5pbmRleE9mKHdvcmQpID4gLTEgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhhdC5jb2x1bW5zKHJvdy5jZWxsc1t4XS5jZWxsSW5kZXgpLnZpc2libGUoKVxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNsdWRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYm9vbCAmJiBpbmNsdWRlcztcclxuICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoZG9lc1F1ZXJ5TWF0Y2ggJiYgIWluQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJvdy5zZWFyY2hJbmRleCA9IGlkeDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoRGF0YS5wdXNoKGlkeCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByb3cuc2VhcmNoSW5kZXggPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcblxyXG4gICAgICAgIGNsYXNzTGlzdC5hZGQodGhpcy53cmFwcGVyLCBcInNlYXJjaC1yZXN1bHRzXCIpO1xyXG5cclxuICAgICAgICBpZiAoIXRoYXQuc2VhcmNoRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY2xhc3NMaXN0LnJlbW92ZSh0aGF0LndyYXBwZXIsIFwic2VhcmNoLXJlc3VsdHNcIik7XHJcblxyXG4gICAgICAgICAgICB0aGF0LnNldE1lc3NhZ2UodGhhdC5vcHRpb25zLmxhYmVscy5ub1Jvd3MpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoYXQudXBkYXRlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmVtaXQoXCJkYXRhdGFibGUuc2VhcmNoXCIsIHF1ZXJ5LCB0aGlzLnNlYXJjaERhdGEpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIENoYW5nZSBwYWdlXHJcbiAgICAgKiBAcGFyYW0gIHtpbnR9IHBhZ2VcclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnBhZ2UgPSBmdW5jdGlvbiAocGFnZSkge1xyXG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbG9hZCB0aGUgY3VycmVudCBwYWdlIGFnYWluLlxyXG4gICAgICAgIGlmIChwYWdlID09IHRoaXMuY3VycmVudFBhZ2UpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFpc05hTihwYWdlKSkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gcGFyc2VJbnQocGFnZSwgMTApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHBhZ2UgPiB0aGlzLnBhZ2VzLmxlbmd0aCB8fCBwYWdlIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlbmRlcihcInBhZ2VcIik7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIoXCJwYWdlclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5lbWl0KFwiZGF0YXRhYmxlLnBhZ2VcIiwgcGFnZSk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU29ydCBieSBjb2x1bW5cclxuICAgICAqIEBwYXJhbSAge2ludH0gY29sdW1uIC0gVGhlIGNvbHVtbiBuby5cclxuICAgICAqIEBwYXJhbSAge3N0cmluZ30gZGlyZWN0aW9uIC0gYXNjIG9yIGRlc2NcclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnNvcnRDb2x1bW4gPSBmdW5jdGlvbiAoY29sdW1uLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICAvLyBVc2UgY29sdW1ucyBBUEkgdW50aWwgc29ydENvbHVtbiBtZXRob2QgaXMgcmVtb3ZlZFxyXG4gICAgICAgIHRoaXMuY29sdW1ucygpLnNvcnQoY29sdW1uLCBkaXJlY3Rpb24pO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBuZXcgcm93IGRhdGFcclxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmluc2VydCA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcblxyXG4gICAgICAgIHZhciB0aGF0ID0gdGhpcyxcclxuICAgICAgICAgICAgcm93cyA9IFtdO1xyXG4gICAgICAgIGlmIChpc09iamVjdChkYXRhKSkge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5oZWFkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGF0Lmhhc0hlYWRpbmdzICYmICF0aGF0Lmhhc1Jvd3MpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHIgPSBjcmVhdGVFbGVtZW50KFwidHJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goZGF0YS5oZWFkaW5ncywgZnVuY3Rpb24gKGhlYWRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGggPSBjcmVhdGVFbGVtZW50KFwidGhcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaHRtbDogaGVhZGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKHRoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWQuYXBwZW5kQ2hpbGQodHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmhlYWRlciA9IHRyO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaGVhZGluZ3MgPSBbXS5zbGljZS5jYWxsKHRyLmNlbGxzKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Lmhhc0hlYWRpbmdzID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmUtZW5hYmxlIHNvcnRpbmcgaWYgaXQgd2FzIGRpc2FibGVkIGR1ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvIG1pc3NpbmcgaGVhZGVyXHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5vcHRpb25zLnNvcnRhYmxlID0gdGhhdC5pbml0aWFsU29ydGFibGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFsbG93IHNvcnRpbmcgb24gbmV3IGhlYWRlclxyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQucmVuZGVyKFwiaGVhZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS5kYXRhICYmIGlzQXJyYXkoZGF0YS5kYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgcm93cyA9IGRhdGEuZGF0YTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhKSkge1xyXG4gICAgICAgICAgICBlYWNoKGRhdGEsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgICAgIHZhciByID0gW107XHJcbiAgICAgICAgICAgICAgICBlYWNoKHJvdywgZnVuY3Rpb24gKGNlbGwsIGhlYWRpbmcpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gdGhhdC5sYWJlbHMuaW5kZXhPZihoZWFkaW5nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcltpbmRleF0gPSBjZWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcm93cy5wdXNoKHIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyb3dzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGF0LnJvd3MoKS5hZGQocm93cyk7XHJcblxyXG4gICAgICAgICAgICB0aGF0Lmhhc1Jvd3MgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhhdC51cGRhdGUoKTtcclxuXHJcbiAgICAgICAgdGhhdC5maXhDb2x1bW5zKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVmcmVzaCB0aGUgaW5zdGFuY2VcclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnJlZnJlc2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zZWFyY2hhYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXQudmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICB0aGlzLnNlYXJjaGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmN1cnJlbnRQYWdlID0gMTtcclxuICAgICAgICB0aGlzLm9uRmlyc3RQYWdlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLnVwZGF0ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQoXCJkYXRhdGFibGUucmVmcmVzaFwiKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcnVuY2F0ZSB0aGUgdGFibGVcclxuICAgICAqIEBwYXJhbSAge21peGVzfSBodG1sIC0gSFRNTCBzdHJpbmcgb3IgSFRNTEVsZW1lbnRcclxuICAgICAqIEByZXR1cm4ge3ZvaWR9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmNsZWFyID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgICAgICBpZiAodGhpcy5ib2R5KSB7XHJcbiAgICAgICAgICAgIGZsdXNoKHRoaXMuYm9keSwgdGhpcy5pc0lFKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBwYXJlbnQgPSB0aGlzLmJvZHk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmJvZHkpIHtcclxuICAgICAgICAgICAgcGFyZW50ID0gdGhpcy50YWJsZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChodG1sKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaHRtbCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZyYWcgPSBkb2MuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgZnJhZy5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoaHRtbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEV4cG9ydCB0YWJsZSB0byB2YXJpb3VzIGZvcm1hdHMgKGNzdiwgdHh0IG9yIHNxbClcclxuICAgICAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9ucyBVc2VyIG9wdGlvbnNcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmV4cG9ydCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmhhc0hlYWRpbmdzICYmICF0aGlzLmhhc1Jvd3MpIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgdmFyIGhlYWRlcnMgPSB0aGlzLmFjdGl2ZUhlYWRpbmdzLFxyXG4gICAgICAgICAgICByb3dzID0gW10sXHJcbiAgICAgICAgICAgIGFyciA9IFtdLFxyXG4gICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICB4LFxyXG4gICAgICAgICAgICBzdHIsXHJcbiAgICAgICAgICAgIGxpbms7XHJcblxyXG4gICAgICAgIHZhciBkZWZhdWx0cyA9IHtcclxuICAgICAgICAgICAgZG93bmxvYWQ6IHRydWUsXHJcbiAgICAgICAgICAgIHNraXBDb2x1bW46IFtdLFxyXG5cclxuICAgICAgICAgICAgLy8gY3N2XHJcbiAgICAgICAgICAgIGxpbmVEZWxpbWl0ZXI6IFwiXFxuXCIsXHJcbiAgICAgICAgICAgIGNvbHVtbkRlbGltaXRlcjogXCIsXCIsXHJcblxyXG4gICAgICAgICAgICAvLyBzcWxcclxuICAgICAgICAgICAgdGFibGVOYW1lOiBcIm15VGFibGVcIixcclxuXHJcbiAgICAgICAgICAgIC8vIGpzb25cclxuICAgICAgICAgICAgcmVwbGFjZXI6IG51bGwsXHJcbiAgICAgICAgICAgIHNwYWNlOiA0XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHRoZSBvcHRpb25zIG9iamVjdFxyXG4gICAgICAgIGlmICghaXNPYmplY3Qob3B0aW9ucykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG8gPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAoby50eXBlKSB7XHJcbiAgICAgICAgICAgIGlmIChvLnR5cGUgPT09IFwidHh0XCIgfHwgby50eXBlID09PSBcImNzdlwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBJbmNsdWRlIGhlYWRpbmdzXHJcbiAgICAgICAgICAgICAgICByb3dzWzBdID0gdGhpcy5oZWFkZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIFNlbGVjdGlvbiBvciB3aG9sZSB0YWJsZVxyXG4gICAgICAgICAgICBpZiAoby5zZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIC8vIFBhZ2UgbnVtYmVyXHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKG8uc2VsZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd3MgPSByb3dzLmNvbmNhdCh0aGlzLnBhZ2VzW28uc2VsZWN0aW9uIC0gMV0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KG8uc2VsZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIEFycmF5IG9mIHBhZ2UgbnVtYmVyc1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBvLnNlbGVjdGlvbi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3dzID0gcm93cy5jb25jYXQodGhpcy5wYWdlc1tvLnNlbGVjdGlvbltpXSAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByb3dzID0gcm93cy5jb25jYXQodGhpcy5hY3RpdmVSb3dzKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gT25seSBwcm9jZWVkIGlmIHdlIGhhdmUgZGF0YVxyXG4gICAgICAgICAgICBpZiAocm93cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvLnR5cGUgPT09IFwidHh0XCIgfHwgby50eXBlID09PSBcImNzdlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3MubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHJvd3NbaV0uY2VsbHMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGZvciBjb2x1bW4gc2tpcCBhbmQgdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2tpcENvbHVtbi5pbmRleE9mKGhlYWRlcnNbeF0ub3JpZ2luYWxDZWxsSW5kZXgpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyhoZWFkZXJzW3hdLm9yaWdpbmFsQ2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSByb3dzW2ldLmNlbGxzW3hdLnRleHRDb250ZW50ICsgby5jb2x1bW5EZWxpbWl0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbHVtbiBkZWxpbWl0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnRyaW0oKS5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgbGluZSBkZWxpbWl0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IG8ubGluZURlbGltaXRlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0cmFpbGluZyBsaW5lIGRlbGltaXRlclxyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci50cmltKCkuc3Vic3RyaW5nKDAsIHN0ci5sZW5ndGggLSAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uZG93bmxvYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJkYXRhOnRleHQvY3N2O2NoYXJzZXQ9dXRmLTgsXCIgKyBzdHI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvLnR5cGUgPT09IFwic3FsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBCZWdpbiBJTlNFUlQgc3RhdGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gXCJJTlNFUlQgSU5UTyBgXCIgKyBvLnRhYmxlTmFtZSArIFwiYCAoXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGFibGUgaGVhZGluZ3MgdG8gY29sdW1uIG5hbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGhlYWRlcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCBjb2x1bW4gdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnNraXBDb2x1bW4uaW5kZXhPZihoZWFkZXJzW2ldLm9yaWdpbmFsQ2VsbEluZGV4KSA8IDAgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyhoZWFkZXJzW2ldLm9yaWdpbmFsQ2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gXCJgXCIgKyBoZWFkZXJzW2ldLnRleHRDb250ZW50ICsgXCJgLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWFcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBzdHIudHJpbSgpLnN1YnN0cmluZygwLCBzdHIubGVuZ3RoIC0gMSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIEJlZ2luIFZBTFVFU1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciArPSBcIikgVkFMVUVTIFwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHJvd3MgYW5kIGNvbnZlcnQgY2VsbCBkYXRhIHRvIGNvbHVtbiB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcm93cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gXCIoXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgcm93c1tpXS5jZWxscy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCBjb2x1bW4gdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2tpcENvbHVtbi5pbmRleE9mKGhlYWRlcnNbeF0ub3JpZ2luYWxDZWxsSW5kZXgpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyhoZWFkZXJzW3hdLm9yaWdpbmFsQ2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXCInICsgcm93c1tpXS5jZWxsc1t4XS50ZXh0Q29udGVudCArICdcIiwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29tbWFcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnRyaW0oKS5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZW5kIFZBTFVFU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gXCIpLFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hXHJcbiAgICAgICAgICAgICAgICAgICAgc3RyID0gc3RyLnRyaW0oKS5zdWJzdHJpbmcoMCwgc3RyLmxlbmd0aCAtIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdHJhaWxpbmcgY29sb25cclxuICAgICAgICAgICAgICAgICAgICBzdHIgKz0gXCI7XCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmRvd25sb2FkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IFwiZGF0YTphcHBsaWNhdGlvbi9zcWw7Y2hhcnNldD11dGYtOCxcIiArIHN0cjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8udHlwZSA9PT0gXCJqc29uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIHJvd3NcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgcm93cy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhcnJbeF0gPSBhcnJbeF0gfHwge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEl0ZXJhdGUgY29sdW1uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGVhZGVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgZm9yIGNvbHVtbiBza2lwIGFuZCBjb2x1bW4gdmlzaWJpbGl0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc2tpcENvbHVtbi5pbmRleE9mKGhlYWRlcnNbaV0ub3JpZ2luYWxDZWxsSW5kZXgpIDwgMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyhoZWFkZXJzW2ldLm9yaWdpbmFsQ2VsbEluZGV4KS52aXNpYmxlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyclt4XVtoZWFkZXJzW2ldLnRleHRDb250ZW50XSA9IHJvd3NbeF0uY2VsbHNbaV0udGV4dENvbnRlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENvbnZlcnQgdGhlIGFycmF5IG9mIG9iamVjdHMgdG8gSlNPTiBzdHJpbmdcclxuICAgICAgICAgICAgICAgICAgICBzdHIgPSBKU09OLnN0cmluZ2lmeShhcnIsIG8ucmVwbGFjZXIsIG8uc3BhY2UpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5kb3dubG9hZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgPSBcImRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04LFwiICsgc3RyO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBEb3dubG9hZFxyXG4gICAgICAgICAgICAgICAgaWYgKG8uZG93bmxvYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBGaWxlbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIG8uZmlsZW5hbWUgPSBvLmZpbGVuYW1lIHx8IFwiZGF0YXRhYmxlX2V4cG9ydFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uZmlsZW5hbWUgKz0gXCIuXCIgKyBvLnR5cGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHN0ciA9IGVuY29kZVVSSShzdHIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBDcmVhdGUgYSBsaW5rIHRvIHRyaWdnZXIgdGhlIGRvd25sb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmsuaHJlZiA9IHN0cjtcclxuICAgICAgICAgICAgICAgICAgICBsaW5rLmRvd25sb2FkID0gby5maWxlbmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRoZSBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgYm9keS5hcHBlbmRDaGlsZChsaW5rKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpZ2dlciB0aGUgZG93bmxvYWRcclxuICAgICAgICAgICAgICAgICAgICBsaW5rLmNsaWNrKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSB0aGUgbGlua1xyXG4gICAgICAgICAgICAgICAgICAgIGJvZHkucmVtb3ZlQ2hpbGQobGluayk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEltcG9ydCBkYXRhIHRvIHRoZSB0YWJsZVxyXG4gICAgICogQHBhcmFtICB7T2JqZWN0fSBvcHRpb25zIFVzZXIgb3B0aW9uc1xyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uaW1wb3J0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgb2JqID0gZmFsc2U7XHJcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xyXG4gICAgICAgICAgICAvLyBjc3ZcclxuICAgICAgICAgICAgbGluZURlbGltaXRlcjogXCJcXG5cIixcclxuICAgICAgICAgICAgY29sdW1uRGVsaW1pdGVyOiBcIixcIlxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIENoZWNrIGZvciB0aGUgb3B0aW9ucyBvYmplY3RcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KG9wdGlvbnMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoZGVmYXVsdHMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICBpZiAob3B0aW9ucy5kYXRhLmxlbmd0aCB8fCBpc09iamVjdChvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgICAgIC8vIEltcG9ydCBDU1ZcclxuICAgICAgICAgICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gXCJjc3ZcIikge1xyXG4gICAgICAgICAgICAgICAgb2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IFtdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFNwbGl0IHRoZSBzdHJpbmcgaW50byByb3dzXHJcbiAgICAgICAgICAgICAgICB2YXIgcm93cyA9IG9wdGlvbnMuZGF0YS5zcGxpdChvcHRpb25zLmxpbmVEZWxpbWl0ZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyb3dzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5oZWFkaW5ncykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouaGVhZGluZ3MgPSByb3dzWzBdLnNwbGl0KG9wdGlvbnMuY29sdW1uRGVsaW1pdGVyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd3Muc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVhY2gocm93cywgZnVuY3Rpb24gKHJvdywgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZGF0YVtpXSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU3BsaXQgdGhlIHJvd3MgaW50byB2YWx1ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlcyA9IHJvdy5zcGxpdChvcHRpb25zLmNvbHVtbkRlbGltaXRlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaCh2YWx1ZXMsIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5kYXRhW2ldLnB1c2godmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLnR5cGUgPT09IFwianNvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIganNvbiA9IGlzSnNvbihvcHRpb25zLmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFZhbGlkIEpTT04gc3RyaW5nXHJcbiAgICAgICAgICAgICAgICBpZiAoanNvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIG9iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGluZ3M6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGVhY2goanNvbiwgZnVuY3Rpb24gKGRhdGEsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmRhdGFbaV0gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaChkYXRhLCBmdW5jdGlvbiAodmFsdWUsIGNvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9iai5oZWFkaW5ncy5pbmRleE9mKGNvbHVtbikgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmhlYWRpbmdzLnB1c2goY29sdW1uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouZGF0YVtpXS5wdXNoKHZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRoYXQncyBub3QgdmFsaWQgSlNPTiFcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChpc09iamVjdChvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICBvYmogPSBvcHRpb25zLmRhdGE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgcm93c1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnQob2JqKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogUHJpbnQgdGhlIHRhYmxlXHJcbiAgICAgKiBAcmV0dXJuIHt2b2lkfVxyXG4gICAgICovXHJcbiAgICBwcm90by5wcmludCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgaGVhZGluZ3MgPSB0aGlzLmFjdGl2ZUhlYWRpbmdzO1xyXG4gICAgICAgIHZhciByb3dzID0gdGhpcy5hY3RpdmVSb3dzO1xyXG4gICAgICAgIHZhciB0YWJsZSA9IGNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcclxuICAgICAgICB2YXIgdGhlYWQgPSBjcmVhdGVFbGVtZW50KFwidGhlYWRcIik7XHJcbiAgICAgICAgdmFyIHRib2R5ID0gY3JlYXRlRWxlbWVudChcInRib2R5XCIpO1xyXG5cclxuICAgICAgICB2YXIgdHIgPSBjcmVhdGVFbGVtZW50KFwidHJcIik7XHJcbiAgICAgICAgZWFjaChoZWFkaW5ncywgZnVuY3Rpb24gKHRoKSB7XHJcbiAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlRWxlbWVudChcInRoXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBodG1sOiB0aC50ZXh0Q29udGVudFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhlYWQuYXBwZW5kQ2hpbGQodHIpO1xyXG5cclxuICAgICAgICBlYWNoKHJvd3MsIGZ1bmN0aW9uIChyb3cpIHtcclxuICAgICAgICAgICAgdmFyIHRyID0gY3JlYXRlRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICBlYWNoKHJvdy5jZWxscywgZnVuY3Rpb24gKGNlbGwpIHtcclxuICAgICAgICAgICAgICAgIHRyLmFwcGVuZENoaWxkKFxyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQoXCJ0ZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6IGNlbGwudGV4dENvbnRlbnRcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZENoaWxkKHRyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGFibGUuYXBwZW5kQ2hpbGQodGhlYWQpO1xyXG4gICAgICAgIHRhYmxlLmFwcGVuZENoaWxkKHRib2R5KTtcclxuXHJcbiAgICAgICAgLy8gT3BlbiBuZXcgd2luZG93XHJcbiAgICAgICAgdmFyIHcgPSB3aW4ub3BlbigpO1xyXG5cclxuICAgICAgICAvLyBBcHBlbmQgdGhlIHRhYmxlIHRvIHRoZSBib2R5XHJcbiAgICAgICAgdy5kb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHRhYmxlKTtcclxuXHJcbiAgICAgICAgLy8gUHJpbnRcclxuICAgICAgICB3LnByaW50KCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogU2hvdyBhIG1lc3NhZ2UgaW4gdGhlIHRhYmxlXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZVxyXG4gICAgICovXHJcbiAgICBwcm90by5zZXRNZXNzYWdlID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuICAgICAgICB2YXIgY29sc3BhbiA9IDE7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmhhc1Jvd3MpIHtcclxuICAgICAgICAgICAgY29sc3BhbiA9IHRoaXMuZGF0YVswXS5jZWxscy5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsZWFyKFxyXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50KFwidHJcIiwge1xyXG4gICAgICAgICAgICAgICAgaHRtbDogJzx0ZCBjbGFzcz1cImRhdGFUYWJsZXMtZW1wdHlcIiBjb2xzcGFuPVwiJyArXHJcbiAgICAgICAgICAgICAgICAgICAgY29sc3BhbiArXHJcbiAgICAgICAgICAgICAgICAgICAgJ1wiPicgK1xyXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiPC90ZD5cIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ29sdW1ucyBBUEkgYWNjZXNzXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IG5ldyBDb2x1bW5zIGluc3RhbmNlXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmNvbHVtbnMgPSBmdW5jdGlvbiAoY29sdW1ucykge1xyXG4gICAgICAgIHJldHVybiBuZXcgQ29sdW1ucyh0aGlzLCBjb2x1bW5zKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSb3dzIEFQSSBhY2Nlc3NcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gbmV3IFJvd3MgaW5zdGFuY2VcclxuICAgICAqL1xyXG4gICAgcHJvdG8ucm93cyA9IGZ1bmN0aW9uIChyb3dzKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBSb3dzKHRoaXMsIHJvd3MpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBjdXN0b20gZXZlbnQgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnRcclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ub24gPSBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMgPSB0aGlzLmV2ZW50cyB8fCB7fTtcclxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudF0gPSB0aGlzLmV2ZW50c1tldmVudF0gfHwgW107XHJcbiAgICAgICAgdGhpcy5ldmVudHNbZXZlbnRdLnB1c2goY2FsbGJhY2spO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBjdXN0b20gZXZlbnQgbGlzdGVuZXJcclxuICAgICAqIEBwYXJhbSAge1N0cmluZ30gZXZlbnRcclxuICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8ub2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gdGhpcy5ldmVudHMgfHwge307XHJcbiAgICAgICAgaWYgKGV2ZW50IGluIHRoaXMuZXZlbnRzID09PSBmYWxzZSkgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XS5zcGxpY2UodGhpcy5ldmVudHNbZXZlbnRdLmluZGV4T2YoY2FsbGJhY2spLCAxKTtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBGaXJlIGN1c3RvbSBldmVudFxyXG4gICAgICogQHBhcmFtICB7U3RyaW5nfSBldmVudFxyXG4gICAgICogQHJldHVybiB7Vm9pZH1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uZW1pdCA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRzID0gdGhpcy5ldmVudHMgfHwge307XHJcbiAgICAgICAgaWYgKGV2ZW50IGluIHRoaXMuZXZlbnRzID09PSBmYWxzZSkgcmV0dXJuO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5ldmVudHNbZXZlbnRdLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XVtpXS5hcHBseSh0aGlzLCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBEYXRhVGFibGU7XHJcbn0pOyIsImltcG9ydCBEYXRhVGFibGUgZnJvbSAndmFuaWxsYS1kYXRhdGFibGVzJztcbmltcG9ydCB7IGNvbG9yX2hpZ2hsaWdodCB9IGZyb20gJy4vb3B0aW9ucyc7XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhYmxlRE9NKGRhdGEsIG9wdHMsIGNvbmZpZykge1xuICBjb25zdCB7IG51bSwgZGVudW0sIHJhdGlvLCBteV9yZWdpb24gfSA9IGNvbmZpZztcbiAgY29uc3Qgb3B0aW9ucyA9IG9wdHMgfHwge307XG4gIG9wdGlvbnMuaWQgPSBvcHRpb25zLmlkIHx8ICdteVRhYmxlJztcbiAgY29uc3QgZG9jID0gZG9jdW1lbnQ7XG4gIGNvbnN0IG5iX2ZlYXR1cmVzID0gZGF0YS5sZW5ndGg7XG4gIGNvbnN0IGNvbHVtbl9uYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRhdGFbMF0pO1xuICBjb25zdCBuYl9jb2x1bW5zID0gY29sdW1uX25hbWVzLmxlbmd0aDtcbiAgY29uc3QgbXlUYWJsZSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICBjb25zdCBoZWFkZXJzID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RoZWFkJyk7XG4gIGNvbnN0IGJvZHkgPSBkb2MuY3JlYXRlRWxlbWVudCgndGJvZHknKTtcbiAgY29uc3QgaGVhZGVyc19yb3cgPSBkb2MuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgLy8gVE9ETzogT25seSBkaXNwbGF5IHJhdGlvcyB2YWx1ZXMgaWYgdGhlcmUgaXMgbW9yZSB0aGFuIDEgdmFyaWFibGUgY3VycmVudGx5IHNlbGVjdGVkXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmJfY29sdW1uczsgaSsrKSB7XG4gICAgY29uc3QgY2VsbCA9IGRvYy5jcmVhdGVFbGVtZW50KCd0aCcpO1xuICAgIGNvbnN0IGNvbF9uYW1lID0gY29sdW1uX25hbWVzW2ldO1xuICAgIGlmIChudW0uaW5kZXhPZihjb2xfbmFtZSkgPiAtMSkge1xuICAgICAgY2VsbC5pbm5lckhUTUwgPSBgTnVtPGJyPjxzcGFuIGNsYXNzPVwic21hbGxcIj4ke2NvbF9uYW1lfWA7XG4gICAgfSBlbHNlIGlmIChkZW51bS5pbmRleE9mKGNvbF9uYW1lKSA+IC0xKSB7XG4gICAgICBjZWxsLmlubmVySFRNTCA9IGBEZW51bTxicj48c3BhbiBjbGFzcz1cInNtYWxsXCI+JHtjb2xfbmFtZX1gO1xuICAgIH0gZWxzZSBpZiAocmF0aW8uaW5kZXhPZihjb2xfbmFtZSkgPiAtMSkge1xuICAgICAgY2VsbC5pbm5lckhUTUwgPSBgUmF0aW88YnI+PHNwYW4gY2xhc3M9XCJzbWFsbFwiPiR7Y29sX25hbWV9YDtcbiAgICB9IGVsc2UgaWYgKGNvbF9uYW1lID09PSAncmFuZycpIHtcbiAgICAgIGNlbGwuaW5uZXJIVE1MID0gJ1JhbmcgJztcbiAgICB9IGVsc2Uge1xuICAgICAgY2VsbC5pbm5lckhUTUwgPSBjb2xfbmFtZTtcbiAgICB9XG4gICAgaGVhZGVyc19yb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gIH1cbiAgaGVhZGVycy5hcHBlbmRDaGlsZChoZWFkZXJzX3Jvdyk7XG4gIG15VGFibGUuYXBwZW5kQ2hpbGQoaGVhZGVycyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbmJfZmVhdHVyZXM7IGkrKykge1xuICAgIGNvbnN0IHJvdyA9IGRvYy5jcmVhdGVFbGVtZW50KCd0cicpO1xuICAgIHJvdy5pZCA9IGByb3dfJHtkYXRhW2ldLmlkfWA7XG4gICAgaWYgKGRhdGFbaV0uaWQgPT09IG15X3JlZ2lvbikge1xuICAgICAgcm93LmNsYXNzTmFtZSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBuYl9jb2x1bW5zOyBqKyspIHtcbiAgICAgIGNvbnN0IGNlbGwgPSBkb2MuY3JlYXRlRWxlbWVudCgndGQnKTtcbiAgICAgIGNvbnN0IGNvbF9uYW1lID0gY29sdW1uX25hbWVzW2pdO1xuICAgICAgaWYgKG51bS5pbmRleE9mKGNvbF9uYW1lKSA+IC0xXG4gICAgICAgICAgfHwgZGVudW0uaW5kZXhPZihjb2xfbmFtZSkgPiAtMSB8fCByYXRpby5pbmRleE9mKGNvbF9uYW1lKSA+IC0xKSB7XG4gICAgICAgIGNlbGwuaW5uZXJIVE1MID0gTWF0aC5yb3VuZChkYXRhW2ldW2NvbF9uYW1lXSAqIDEwMCkgLyAxMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGwuaW5uZXJIVE1MID0gZGF0YVtpXVtjb2xfbmFtZV07XG4gICAgICB9XG4gICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgfVxuICAgIGJvZHkuYXBwZW5kQ2hpbGQocm93KTtcbiAgfVxuICBteVRhYmxlLmFwcGVuZENoaWxkKGJvZHkpO1xuICBteVRhYmxlLnNldEF0dHJpYnV0ZSgnaWQnLCBvcHRpb25zLmlkKTtcbiAgcmV0dXJuIG15VGFibGU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGFibGUoZGF0YV9ub19lbXB0eSwgY29uZmlnKSB7XG4gIGQzLnNlbGVjdCgnLmRhdGFUYWJsZS13cmFwcGVyJykucmVtb3ZlKCk7XG4gIGNvbnN0IHRhYmxlID0gY3JlYXRlVGFibGVET00oZGF0YV9ub19lbXB0eSwgdW5kZWZpbmVkLCBjb25maWcpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWFwX3NlY3Rpb24nKS5hcHBlbmRDaGlsZCh0YWJsZSk7XG4gIGNvbnN0IGRhdGFUYWJsZSA9IG5ldyBEYXRhVGFibGUoJyNteVRhYmxlJyk7XG4gIGNvbnN0IHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZGF0YVRhYmxlLXdyYXBwZXInKTtcbiAgdC5zdHlsZS5tYXJnaW5Ub3AgPSAnMjBweCc7XG4gIHQuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgdC5zdHlsZS5mb250U2l6ZSA9ICcwLjdlbSc7XG4gIHQucXVlcnlTZWxlY3RvcignLmRhdGFUYWJsZS10b3AnKS5yZW1vdmUoKTtcbiAgQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLnNtYWxsJykpXG4gICAgLmZvckVhY2goKGVsKSA9PiB7XG4gICAgICBlbC5vbmNsaWNrID0gKCkgPT4geyBlbC5wYXJlbnRFbGVtZW50LmNsaWNrKCk7IH07IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB9KTtcbn1cbiIsImltcG9ydCB7IGNvbG9yX2hpZ2hsaWdodCB9IGZyb20gJy4vb3B0aW9ucyc7XG5pbXBvcnQgeyB2YXJpYWJsZXNfaW5mbyB9IGZyb20gJy4vLi4vbWFpbic7XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXBhcmFtLXJlYXNzaWduICovXG5cbi8qKlxuKiBBdHRhY2ggdGhlIGZ1bGxfZGF0YXNldCBBcnJheSB0byB0aGUgYXBwIE9iamVjdCBhbmQgY3JlYXRlIGEgZGljdGlvbm5hcnlcbiogYWxsb3dpbmcgdG8gb2J0YWluIHRlcnJpdG9yaWFsIHVuaXRzIG5hbWUgZnJvbSB0aGVpciBJZC5cbipcbiogQHBhcmFtIHtBcnJheX0gZnVsbF9kYXRhc2V0IC0gVGhlIGRhdGFzZXQgYXMgYW4gQXJyYXkgb2YgT2JqZWN0XG4qIEBwYXJhbSB7T2JqZWN0fSBhcHAgLSBUaGUgdmFyaWFibGUgY29udGFpbmluZyB0aGUgZ2xvYmFsIHBhcmFtZXRlcnMgYWJvdXRcbiogICB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgYXBwbGljYXRpb24uXG4qIEByZXR1cm4ge3ZvaWR9XG4qXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVfZGF0YXNldChmdWxsX2RhdGFzZXQsIGFwcCkge1xuICBhcHAuZnVsbF9kYXRhc2V0ID0gZnVsbF9kYXRhc2V0O1xuICAvLyBDcmVhdGUgYW4gT2JqZWN0IGZlYXR1cmVfaWQgLT4gIGZlYXR1cmVfbmFtZSBmb3IgZWFzaWVyIGxvb2t1cDpcbiAgYXBwLmZlYXR1cmVfbmFtZXMgPSB7fTtcbiAgZnVsbF9kYXRhc2V0LmZvckVhY2goKGVsZW0pID0+IHtcbiAgICBhcHAuZmVhdHVyZV9uYW1lc1tlbGVtLmdlb10gPSBlbGVtLk5vbTtcbiAgfSk7XG59XG5cblxuLyoqXG4qIEF0dGFjaCB0aGUgZnVsbF9kYXRhc2V0IEFycmF5IHRvIHRoZSBhcHAgT2JqZWN0IGFuZCBjcmVhdGUgYSBkaWN0aW9ubmFyeVxuKiBhbGxvd2luZyB0byBvYnRhaW4gdGVycml0b3JpYWwgdW5pdHMgbmFtZSBmcm9tIHRoZWlyIElkLlxuKlxuKiBAcGFyYW0ge09iamVjdH0gYXBwIC0gVGhlIHZhcmlhYmxlIGNvbnRhaW5pbmcgdGhlIGdsb2JhbCBwYXJhbWV0ZXJzIGFib3V0XG4qICAgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGFwcGxpY2F0aW9uLlxuKiBAcmV0dXJuIHtBcnJheX0gLSBUaGUgZmlsdGVyZWQgZGF0YSwgY29udGFpbmluZyBvbmx5IHRoZSByZXF1ZXN0ZWQgdmFyaWFibGVzXG4qICAgZm9yIHRoZSBmZWF0dXJlIG9mIHRoZSBjdXJyZW50IHN0dWR5IHpvbmUsXG4qICAgIHdpdGhvdXQgZmVhdHVyZXMgY29udGFpbmluZyBlbXB0eSByYXRpb3MuXG4qXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckxldmVsVmFyKGFwcCwgZmlsdGVyX2lkKSB7XG4gIC8vIEZldGNoIHRoZSBuYW1lKHMpIG9mIHRoZSByYXRpbyAoYW5kIGFzc29jaWF0ZWQgbnVtIGFuZCBkZW51bSB2YXJpYWJsZSksXG4gIC8vIHRoZSBuYW1lIG9mIHRoZSB0YXJnZXRlZCByZWdpb24gYW5kIHRoZSBjdXJyZW50IGxldmVsIDpcbiAgY29uc3Qge1xuICAgIG51bSwgZGVudW0sIHJhdGlvLCBjdXJyZW50X2xldmVsLCBpZF9maWVsZCwgZmlsdGVyX2tleSwgbmFtZV9maWVsZCwgbXlfcmVnaW9uLFxuICB9ID0gYXBwLmN1cnJlbnRfY29uZmlnO1xuXG4gIGNvbnN0IGFsbF92YXJpYWJsZXMgPSByYXRpby5jb25jYXQobnVtKS5jb25jYXQoZGVudW0pO1xuXG4gIC8vIFByZXBhcmUgdGhlIGRhdGE6XG4gIGxldCB0ZW1wO1xuICBpZiAoZmlsdGVyX2lkKSB7XG4gICAgdGVtcCA9IGFwcC5mdWxsX2RhdGFzZXRcbiAgICAgIC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSBjdXJyZW50X2xldmVsICYmIGZpbHRlcl9pZC5pbmRleE9mKGZ0W2lkX2ZpZWxkXSkgPiAtMSk7XG4gIH0gZWxzZSBpZiAoZmlsdGVyX2tleSkge1xuICAgIGNvbnN0IG15X2NhdGVnb3J5ID0gYXBwLmZ1bGxfZGF0YXNldC5maWx0ZXIoZnQgPT4gZnRbaWRfZmllbGRdID09PSBteV9yZWdpb24pWzBdW2ZpbHRlcl9rZXldO1xuICAgIHRlbXAgPSBhcHAuZnVsbF9kYXRhc2V0XG4gICAgICAuZmlsdGVyKGZ0ID0+ICtmdC5sZXZlbCA9PT0gY3VycmVudF9sZXZlbCAmJiBmdFtmaWx0ZXJfa2V5XSA9PT0gbXlfY2F0ZWdvcnkpO1xuICB9IGVsc2Uge1xuICAgIHRlbXAgPSBhcHAuZnVsbF9kYXRhc2V0XG4gICAgICAuZmlsdGVyKGZ0ID0+ICtmdC5sZXZlbCA9PT0gY3VycmVudF9sZXZlbCk7XG4gIH1cbiAgdGVtcCA9IHRlbXAubWFwKChmdCkgPT4ge1xuICAgIGNvbnN0IHByb3BzX2ZlYXR1cmUgPSB7XG4gICAgICBpZDogZnRbaWRfZmllbGRdLFxuICAgICAgbmFtZTogZnRbbmFtZV9maWVsZF0sXG4gICAgfTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSBhbGxfdmFyaWFibGVzLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICAgIHByb3BzX2ZlYXR1cmVbYWxsX3ZhcmlhYmxlc1tpXV0gPSArZnRbYWxsX3ZhcmlhYmxlc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBwcm9wc19mZWF0dXJlO1xuICB9KTtcblxuICBhcHAuY3VycmVudF9kYXRhID0gdGVtcDtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIHByZXBhcmUgdGhlIGdsb2JhbCBcInZhcmlhYmxlc19pbmZvXCIgQXJyYXkgb2Ygb2JqZWN0cyBmcm9tIHRoZSBhcnJheVxuKiBjb250YWluaW5nIHRoZSByZWFkZWQgJ21ldGFkYXRhLmNzdicgZmlsZS5cbipcbiogQHBhcmFtIHtBcnJheX0gbWV0YWRhdGFfaW5kaWNhdGV1cnMgLSBUaGUgYXJyYXkgcmV0dXJuIGJ5IGQzLmNzdi5cbiogQHJldHVybiB7dm9pZH1cbipcbiovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZVZhcmlhYmxlc0luZm8obWV0YWRhdGFfaW5kaWNhdGV1cnMpIHtcbiAgY29uc29sZS5sb2cobWV0YWRhdGFfaW5kaWNhdGV1cnMpO1xuICByZXR1cm4gbWV0YWRhdGFfaW5kaWNhdGV1cnNcbiAgICAuZmlsdGVyKGZ0ID0+IGZ0WydUeXBlIHN0YXRpc3RpcXVlJ10gPT09ICdSYXRpbycpXG4gICAgLm1hcChmdCA9PiAoe1xuICAgICAgcmF0aW86IGZ0WydpZCddLFxuICAgICAgbnVtOiBgJHtmdFsnaWQxJ119XyR7ZnRbJ0FubsOpZSddfWAsXG4gICAgICBkZW51bTogYCR7ZnRbJ2lkMiddfV8ke2Z0WydBbm7DqWUnXX1gLFxuICAgICAgbmFtZTogYCR7ZnRbJ05vbSddfSAoJHtmdFsnQW5uw6llJ119KWAsXG4gICAgICBncm91cDogZnRbJ1Row6htZSddLFxuICAgICAgbWV0aG9kbzogZnRbJ03DqXRob2RvbG9naWUnXSxcbiAgICAgIHNvdXJjZTogZnRbJ1NvdXJjZSddLFxuICAgICAgbGFzdF91cGRhdGU6IGZ0WydEZXJuacOocmUgbWlzZSDDoCBqb3VyJ10sXG4gICAgfSkpO1xufVxuXG4vKipcbiogU2V0IGFuZCBhcHBseSBhIG5ldyBmaWx0ZXIgKGllLiByZXN0cmljdCB0aGUgc3R1ZHkgem9uZSkgb24gdGhlIGRhdGFzZXQgdG8gYmUgdXNlZC5cbipcbiogQHBhcmFtIHtTdHJpbmd9IGZpbHRlcl90eXBlIC0gVGhlIG5hbWUgb2YgdGhlIGZpbHRlciB0byB1c2UuXG4qIEByZXR1cm4ge3ZvaWR9XG4qXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5RmlsdGVyKGFwcCwgZmlsdGVyX3R5cGUpIHtcbiAgaWYgKGZpbHRlcl90eXBlID09PSAnZmlsdGVyX0ZSJykge1xuICAgIGFwcC5jdXJyZW50X2NvbmZpZy5maWx0ZXJfa2V5ID0gJ1BheXMnO1xuICAgIGZpbHRlckxldmVsVmFyKGFwcCk7XG4gIH0gZWxzZSBpZiAoZmlsdGVyX3R5cGUgPT09ICdub19maWx0ZXInKSB7XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLmZpbHRlcl9rZXkgPSB1bmRlZmluZWQ7XG4gICAgZmlsdGVyTGV2ZWxWYXIoYXBwKTtcbiAgfSBlbHNlIHtcbiAgICBhcHAuY3VycmVudF9jb25maWcuZmlsdGVyX2tleSA9ICd0eXBlX3Rlc3QnO1xuICAgIGZpbHRlckxldmVsVmFyKGFwcCk7XG4gIH1cblxuICBhcHAuY29sb3JzID0ge307XG4gIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG59XG5cbi8vIFRPRE8gOiBEb2NcbmV4cG9ydCBmdW5jdGlvbiBjaGFuZ2VSZWdpb24oYXBwLCBpZF9yZWdpb24pIHtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA9IGlkX3JlZ2lvbjtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl9wcmV0dHlfbmFtZSA9IGFwcC5mZWF0dXJlX25hbWVzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dO1xuICBpZiAoYXBwLmN1cnJlbnRfY29uZmlnLmZpbHRlcl9rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgIGZpbHRlckxldmVsVmFyKGFwcCk7XG4gIH1cbiAgLy8gUmVzZXQgdGhlIGNvbG9yIHRvIHVzZSBvbiB0aGUgY2hhcnQvbWFwOlxuICBhcHAuY29sb3JzID0ge307XG4gIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG59XG5cbi8qKlxuKlxuKlxuKlxuKlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBhZGRWYXJpYWJsZShhcHAsIGNvZGVfcmF0aW8pIHtcbiAgY29uc3QgdmFyaWFibGVfaW5mbyA9IHZhcmlhYmxlc19pbmZvLmZpbHRlcihkID0+IGQucmF0aW8gPT09IGNvZGVfcmF0aW8pWzBdO1xuICBhcHAuY29sb3JzID0ge307XG4gIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5udW0ucHVzaCh2YXJpYWJsZV9pbmZvLm51bSk7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5kZW51bS5wdXNoKHZhcmlhYmxlX2luZm8uZGVudW0pO1xuICBhcHAuY3VycmVudF9jb25maWcucmF0aW8ucHVzaCh2YXJpYWJsZV9pbmZvLnJhdGlvKTtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lLnB1c2godmFyaWFibGVfaW5mby5uYW1lKTtcbiAgZmlsdGVyTGV2ZWxWYXIoYXBwKTtcbn1cblxuLyoqXG4qXG4qXG4qXG4qXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVZhcmlhYmxlKGFwcCwgY29kZV9yYXRpbykge1xuICBjb25zdCBpeCA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5pbmRleE9mKGNvZGVfcmF0aW8pO1xuICBhcHAuY3VycmVudF9jb25maWcubnVtLnNwbGljZShpeCwgMSk7XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5kZW51bS5zcGxpY2UoaXgsIDEpO1xuICBhcHAuY3VycmVudF9jb25maWcucmF0aW8uc3BsaWNlKGl4LCAxKTtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lLnNwbGljZShpeCwgMSk7XG4gIGZpbHRlckxldmVsVmFyKGFwcCk7XG59XG5cbi8qKlxuKiBSZXNldCB0aGUgY3VycmVudCB2YXJpYWJsZXMgaW4gdXNlLlxuKlxuKlxuKlxuKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldFZhcmlhYmxlcyhhcHAsIGNvZGVzX3JhdGlvKSB7XG4gIGFwcC5jb2xvcnMgPSB7fTtcbiAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLm51bSA9IFtdO1xuICBhcHAuY3VycmVudF9jb25maWcuZGVudW0gPSBbXTtcbiAgYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvID0gW107XG4gIGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpb19wcmV0dHlfbmFtZSA9IFtdO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gY29kZXNfcmF0aW8ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBjb25zdCBjb2RlX3JhdGlvID0gY29kZXNfcmF0aW9baV07XG4gICAgY29uc3QgdmFyaWFibGVfaW5mbyA9IHZhcmlhYmxlc19pbmZvLmZpbHRlcihkID0+IGQucmF0aW8gPT09IGNvZGVfcmF0aW8pWzBdO1xuICAgIGFwcC5jdXJyZW50X2NvbmZpZy5udW0ucHVzaCh2YXJpYWJsZV9pbmZvLm51bSk7XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLmRlbnVtLnB1c2godmFyaWFibGVfaW5mby5kZW51bSk7XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLnB1c2godmFyaWFibGVfaW5mby5yYXRpbyk7XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lLnB1c2godmFyaWFibGVfaW5mby5uYW1lKTtcbiAgfVxuICBmaWx0ZXJMZXZlbFZhcihhcHApO1xufVxuXG4vKipcbiogQ29tcHV0ZSB0aGUgcmF0aW8gb2YgYXZhaWxhYmxlICg9IG5vdCBlbXB0eSkgdmFsdWVzICh0aGUgXCJjb21wbMOpdHVkZVwiKSB3aXRoaW5cbiogdGhlIHN1YnNldCBjdXJyZW50bHkgaW4gdXNlIGZvciBhbGwgdGhlIHZhcmlhYmxlcyBpbiBcInZhcnNcIi5cbipcbiogQHBhcmFtIHtPYmplY3R9IGFwcCAtXG4qIEBwYXJhbSB7QXJyYXl9IHZhcnMgLVxuKiBAcmV0dXJuIHtOdW1iZXJ9XG4qXG4qL1xuZXhwb3J0IGZ1bmN0aW9uIGNhbGNDb21wbGV0dWRlU3Vic2V0KGFwcCwgdmFycykge1xuICBjb25zdCB7XG4gICAgY3VycmVudF9sZXZlbCwgaWRfZmllbGQsIGZpbHRlcl9rZXksIG15X3JlZ2lvbixcbiAgfSA9IGFwcC5jdXJyZW50X2NvbmZpZztcblxuICAvLyBDb21wdXRlIHRoZSBsZW5ndGggb2YgdGhlIGRhdGFzZXQgKHdpdGhpbiB0aGUgXCJzdHVkeSB6b25lXCIgaWYgYW55KTpcbiAgbGV0IHRlbXA7XG4gIGlmIChmaWx0ZXJfa2V5KSB7XG4gICAgY29uc3QgbXlfY2F0ZWdvcnkgPSBhcHAuZnVsbF9kYXRhc2V0LmZpbHRlcihmdCA9PiBmdFtpZF9maWVsZF0gPT09IG15X3JlZ2lvbilbMF1bZmlsdGVyX2tleV07XG4gICAgdGVtcCA9IGFwcC5mdWxsX2RhdGFzZXRcbiAgICAgIC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSBjdXJyZW50X2xldmVsICYmIGZ0W2ZpbHRlcl9rZXldID09PSBteV9jYXRlZ29yeSk7XG4gIH0gZWxzZSB7XG4gICAgdGVtcCA9IGFwcC5mdWxsX2RhdGFzZXRcbiAgICAgIC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSBjdXJyZW50X2xldmVsKTtcbiAgfVxuICBjb25zdCB0b3RhbF9sZW5ndGggPSB0ZW1wLmxlbmd0aDtcblxuICAvLyBDb21wdXRlIHRoZSBsZW5ndGggb2YgdGhlIGRhdGFzZXQgaWYgd2UgZmlsdGVyIGVtcHR5IGZlYXR1cmVzXG4gIC8vIG9uIGFsbCB0aGUgdmFyaWFibGVzIG9mIFwidmFyc1wiOlxuICB0ZW1wID0gdGVtcC5tYXAoKGZ0KSA9PiB7XG4gICAgY29uc3QgcHJvcHNfZmVhdHVyZSA9IHtcbiAgICAgIGlkOiBmdFtpZF9maWVsZF0sXG4gICAgfTtcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSB2YXJzLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICAgIHByb3BzX2ZlYXR1cmVbdmFyc1tpXV0gPSArZnRbdmFyc1tpXV07XG4gICAgfVxuICAgIHJldHVybiBwcm9wc19mZWF0dXJlO1xuICB9KS5maWx0ZXIoZnQgPT4gdmFycy5tYXAocmF0aW9fbmFtZSA9PiAhIWZ0W3JhdGlvX25hbWVdKS5ldmVyeSh2ID0+IHYgPT09IHRydWUpKTtcbiAgY29uc3QgZmlsdGVyZWRfbGVuZ3RoID0gdGVtcC5sZW5ndGg7XG5cbiAgLy8gUmV0dXJuIHRoZSByYXRpbyBvZiBhdmFpbGFibGUgdmFsdWVzIChcImNvbXBsw6l0dWRlXCIpIHdpdGhpblxuICAvLyB0aGUgc3R1ZHkgem9uZSBzZWxlY3RlZCBieSB0aGUgdXNlcjpcbiAgcmV0dXJuIE1hdGgucm91bmQoKGZpbHRlcmVkX2xlbmd0aCAvIHRvdGFsX2xlbmd0aCkgKiAxMDAwKSAvIDEwO1xufVxuXG4vKipcbiogQ29tcHV0ZSB0aGUgcmF0aW8gb2YgcG9wdWxhdGlvbiBjb3ZlcmVkIGJ5IGZlYXR1cmVzIG9uIHdoaWNoIGFsbCB0aGUgdmFyaWFibGVzXG4qIG9mIFwidmFyc1wiIGFyZSBhdmFpbGFibGUuXG4qXG4qIEBwYXJhbSB7T2JqZWN0fSBhcHAgLVxuKiBAcGFyYW0ge0FycmF5fSB2YXJzIC1cbiogQHJldHVybiB7TnVtYmVyfVxuKlxuKi9cbmV4cG9ydCBmdW5jdGlvbiBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIHZhcnMpIHtcbiAgY29uc3Qge1xuICAgIGN1cnJlbnRfbGV2ZWwsIGlkX2ZpZWxkLCBmaWx0ZXJfa2V5LCBteV9yZWdpb24sIHBvcF9maWVsZCxcbiAgfSA9IGFwcC5jdXJyZW50X2NvbmZpZztcblxuICAvLyBDb21wdXRlIHRoZSB0b3RhbCBwb3B1bGF0aW9uIHN0b2NrIG9mIHRoZSBkYXRhICh3aXRoaW4gdGhlIFwic3R1ZHkgem9uZVwiIGlmIGFueSk6XG4gIGxldCB0ZW1wO1xuICBpZiAoZmlsdGVyX2tleSkge1xuICAgIGNvbnN0IG15X2NhdGVnb3J5ID0gYXBwLmZ1bGxfZGF0YXNldC5maW5kKGZ0ID0+IGZ0W2lkX2ZpZWxkXSA9PT0gbXlfcmVnaW9uKVtmaWx0ZXJfa2V5XTtcbiAgICB0ZW1wID0gYXBwLmZ1bGxfZGF0YXNldFxuICAgICAgLmZpbHRlcihmdCA9PiArZnQubGV2ZWwgPT09IGN1cnJlbnRfbGV2ZWwgJiYgZnRbZmlsdGVyX2tleV0gPT09IG15X2NhdGVnb3J5KTtcbiAgfSBlbHNlIHtcbiAgICB0ZW1wID0gYXBwLmZ1bGxfZGF0YXNldFxuICAgICAgLmZpbHRlcihmdCA9PiArZnQubGV2ZWwgPT09IGN1cnJlbnRfbGV2ZWwpO1xuICB9XG4gIGxldCB0b3RhbF9wb3AgPSAwO1xuICBmb3IgKGxldCBpID0gMCwgbGVuID0gdGVtcC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHRvdGFsX3BvcCArPSBpc05hTigrdGVtcFtpXVtwb3BfZmllbGRdKSA/IDAgOiArdGVtcFtpXVtwb3BfZmllbGRdO1xuICB9XG4gIC8vIENvbXB1dGUgdGhlIHBvcHVsYXRpb24gc3RvY2sgb2YgdGhlIGRhdGFzZXQgaWYgd2UgZmlsdGVyIGVtcHR5IGZlYXR1cmVzXG4gIC8vIG9uIGFsbCB0aGUgdmFyaWFibGVzIG9mIFwidmFyc1wiOlxuICB0ZW1wID0gdGVtcC5tYXAoKGZ0KSA9PiB7XG4gICAgY29uc3QgcHJvcHNfZmVhdHVyZSA9IHtcbiAgICAgIGlkOiBmdFtpZF9maWVsZF0sXG4gICAgICBwb3A6ICtmdFtwb3BfZmllbGRdLFxuICAgIH07XG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gdmFycy5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gICAgICBwcm9wc19mZWF0dXJlW3ZhcnNbaV1dID0gK2Z0W3ZhcnNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gcHJvcHNfZmVhdHVyZTtcbiAgfSkuZmlsdGVyKGZ0ID0+IHZhcnMubWFwKHJhdGlvX25hbWUgPT4gISFmdFtyYXRpb19uYW1lXSkuZXZlcnkodiA9PiB2ID09PSB0cnVlKSk7XG4gIGxldCBzdWJzZXRfcG9wID0gMDtcbiAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHRlbXAubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzdWJzZXRfcG9wICs9IGlzTmFOKHRlbXBbaV0ucG9wKSA/IDAgOiB0ZW1wW2ldLnBvcDtcbiAgfVxuICAvLyBSZXR1cm4gdGhlIHJhdGlvIG9mIHBvcHVsYXRpb24gdmFsdWVzIChcImNvbXBsw6l0dWRlXCIpIHdpdGhpblxuICAvLyB0aGUgc3R1ZHkgem9uZSBzZWxlY3RlZCBieSB0aGUgdXNlcjpcbiAgcmV0dXJuIE1hdGgucm91bmQoKHN1YnNldF9wb3AgLyB0b3RhbF9wb3ApICogMTAwMCkgLyAxMDtcbn1cbi8qIGVzbGludC1lbmFibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbiIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRhYmxlUmVzdW1lU3RhdCB7XG4gIGNvbnN0cnVjdG9yKHN1bW1hcnlfZmVhdHVyZXMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IGRvYyA9IGRvY3VtZW50O1xuICAgIGNvbnN0IG5iX2ZlYXR1cmVzID0gc3VtbWFyeV9mZWF0dXJlcy5sZW5ndGg7XG4gICAgY29uc3QgY29sdW1uX25hbWVzID0gWydWYXJpYWJsZScsICdNaW4nLCAnTW95ZW5uZScsICdNYXgnLCAnTWEgcsOpZ2lvbiddO1xuICAgIGNvbnN0IG5iX2NvbHVtbnMgPSBjb2x1bW5fbmFtZXMubGVuZ3RoO1xuICAgIGNvbnN0IGNvbnRhaW5lcl9kaXYgPSBkb2MuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29uc3QgbXlUYWJsZSA9IGRvYy5jcmVhdGVFbGVtZW50KCd0YWJsZScpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBkb2MuY3JlYXRlRWxlbWVudCgndGhlYWQnKTtcbiAgICBjb25zdCB0YWJsZV9ib2R5ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3Rib2R5Jyk7XG4gICAgY29uc3QgaGVhZGVyc19yb3cgPSBkb2MuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICBteVRhYmxlLmNsYXNzTmFtZSA9ICdtaW5pdGFibGUnO1xuICAgIGNvbnRhaW5lcl9kaXYuY2xhc3NOYW1lID0gJ21pbml0YWJsZV9jb250YWluZXInO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmJfY29sdW1uczsgaSsrKSB7XG4gICAgICBjb25zdCBjZWxsID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RoJyk7XG4gICAgICBjZWxsLmlubmVySFRNTCA9IGNvbHVtbl9uYW1lc1tpXTtcbiAgICAgIGhlYWRlcnNfcm93LmFwcGVuZENoaWxkKGNlbGwpO1xuICAgIH1cbiAgICBoZWFkZXJzLmFwcGVuZENoaWxkKGhlYWRlcnNfcm93KTtcbiAgICBteVRhYmxlLmFwcGVuZENoaWxkKGhlYWRlcnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmJfZmVhdHVyZXM7IGkrKykge1xuICAgICAgY29uc3Qgcm93ID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3RyJyk7XG4gICAgICByb3cuaWQgPSBgcm93XyR7c3VtbWFyeV9mZWF0dXJlc1tpXS5pZH1gO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuYl9jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgY29uc3QgY2VsbCA9IGRvYy5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgICBjb25zdCBjb2xfbmFtZSA9IGNvbHVtbl9uYW1lc1tqXTtcbiAgICAgICAgaWYgKGNvbF9uYW1lICE9PSAnVmFyaWFibGUnKSB7XG4gICAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBNYXRoLnJvdW5kKHN1bW1hcnlfZmVhdHVyZXNbaV1bY29sX25hbWVdICogMTApIC8gMTA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2VsbC5pbm5lckhUTUwgPSBzdW1tYXJ5X2ZlYXR1cmVzW2ldW2NvbF9uYW1lXTtcbiAgICAgICAgfVxuICAgICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgICB9XG4gICAgICB0YWJsZV9ib2R5LmFwcGVuZENoaWxkKHJvdyk7XG4gICAgfVxuICAgIG15VGFibGUuYXBwZW5kQ2hpbGQodGFibGVfYm9keSk7XG4gICAgbXlUYWJsZS5zZXRBdHRyaWJ1dGUoJ2lkJywgb3B0aW9ucy5pZCB8fCAndGFibGVfc3VtbWFyeScpO1xuICAgIGNvbnRhaW5lcl9kaXYuYXBwZW5kQ2hpbGQobXlUYWJsZSk7XG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI21hcF9zZWN0aW9uJykuYXBwZW5kQ2hpbGQoY29udGFpbmVyX2Rpdik7XG4gICAgdGhpcy5uYl9jb2x1bW5zID0gbmJfY29sdW1ucztcbiAgICB0aGlzLmNvbHVtbl9uYW1lcyA9IGNvbHVtbl9uYW1lcztcbiAgICB0aGlzLnRhYmxlX2JvZHkgPSB0YWJsZV9ib2R5O1xuICB9XG5cbiAgYWRkRmVhdHVyZXMoc3VtbWFyeV9mZWF0dXJlcykge1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBzdW1tYXJ5X2ZlYXR1cmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICB0aGlzLmFkZEZlYXR1cmUoc3VtbWFyeV9mZWF0dXJlc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgYWRkRmVhdHVyZShzdW1tYXJ5KSB7XG4gICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndHInKTtcbiAgICByb3cuaWQgPSBgcm93XyR7c3VtbWFyeS5pZH1gO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5uYl9jb2x1bW5zOyBqKyspIHtcbiAgICAgIGNvbnN0IGNlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZCcpO1xuICAgICAgY29uc3QgY29sX25hbWUgPSB0aGlzLmNvbHVtbl9uYW1lc1tqXTtcbiAgICAgIGlmIChjb2xfbmFtZSAhPT0gJ1ZhcmlhYmxlJykge1xuICAgICAgICBjZWxsLmlubmVySFRNTCA9IE1hdGgucm91bmQoc3VtbWFyeVtjb2xfbmFtZV0gKiAxMCkgLyAxMDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNlbGwuaW5uZXJIVE1MID0gc3VtbWFyeVtjb2xfbmFtZV07XG4gICAgICB9XG4gICAgICByb3cuYXBwZW5kQ2hpbGQoY2VsbCk7XG4gICAgfVxuICAgIHRoaXMudGFibGVfYm9keS5hcHBlbmRDaGlsZChyb3cpO1xuICB9XG5cbiAgcmVtb3ZlRmVhdHVyZShpZF92YXJpYWJsZSkge1xuICAgIGNvbnN0IHJvdyA9IHRoaXMudGFibGVfYm9keS5xdWVyeVNlbGVjdG9yKGB0ciNyb3dfJHtpZF92YXJpYWJsZX1gKTtcbiAgICBpZiAocm93KSByb3cucmVtb3ZlKCk7XG4gIH1cblxuICByZW1vdmVBbGwoKSB7XG4gICAgY29uc3Qgcm93cyA9IHRoaXMudGFibGVfYm9keS5xdWVyeVNlbGVjdG9yQWxsKCd0cicpO1xuICAgIGZvciAobGV0IGkgPSByb3dzLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICByb3dzW2ldLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLnRhYmxlX2JvZHkucGFyZW50RWxlbWVudC5wYXJlbnRFbGVtZW50LnJlbW92ZSgpO1xuICAgIHRoaXMudGFibGVfYm9keSA9IG51bGw7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbXAsIG1hdGhfcm91bmQsIG1hdGhfYWJzLCBSZWN0LCBwcmVwYXJlVG9vbHRpcCwgc3ZnUGF0aFRvQ29vcmRzLCBnZXRNZWFuIH0gZnJvbSAnLi8uLi9oZWxwZXJzJztcbmltcG9ydCB7IGNvbG9yX2Rpc2FibGVkLCBjb2xvcl9jb3VudHJpZXMsIGNvbG9yX3N1cCwgY29sb3JfaW5mLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuLy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQgfSBmcm9tICcuLy4uL3ByZXBhcmVfZGF0YSc7XG5pbXBvcnQgeyBzdmdfbWFwIH0gZnJvbSAnLi8uLi9tYXAnO1xuaW1wb3J0IHsgYXBwLCByZXNldENvbG9ycyB9IGZyb20gJy4vLi4vLi4vbWFpbic7XG5pbXBvcnQgVGFibGVSZXN1bWVTdGF0IGZyb20gJy4vLi4vdGFibGVSZXN1bWVTdGF0JztcblxuZXhwb3J0IGNvbnN0IHN2Z19iYXIgPSBkMy5zZWxlY3QoJ3N2ZyNzdmdfYmFyJyksXG4gIG1hcmdpbiA9IHsgdG9wOiAxMCwgcmlnaHQ6IDIwLCBib3R0b206IDEwMCwgbGVmdDogNDAgfSxcbiAgbWFyZ2luMiA9IHsgdG9wOiA0MzAsIHJpZ2h0OiAyMCwgYm90dG9tOiAxNSwgbGVmdDogNDAgfSxcbiAgd2lkdGggPSArc3ZnX2Jhci5hdHRyKCd3aWR0aCcpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG4gIGhlaWdodCA9ICtzdmdfYmFyLmF0dHIoJ2hlaWdodCcpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b20sXG4gIGhlaWdodDIgPSArc3ZnX2Jhci5hdHRyKCdoZWlnaHQnKSAtIG1hcmdpbjIudG9wIC0gbWFyZ2luMi5ib3R0b207XG5cbmxldCBuYkZ0O1xubGV0IGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbMCwgMF07XG5sZXQgY3VycmVudF9yYW5nZSA9IFswLCAwXTtcbmxldCBkaXNwbGF5ZWQ7XG5cbmZ1bmN0aW9uIGdldE1lYW5SYW5rKG1lYW5fdmFsdWUsIHJhdGlvX3RvX3VzZSkge1xuICBsZXQgbWVhbl9yYW5rID0gYXBwLmN1cnJlbnRfZGF0YS5tYXAoXG4gICAgKGQsIGkpID0+IFtkW3JhdGlvX3RvX3VzZV0sIG1hdGhfYWJzKG1lYW5fdmFsdWUgLSBkW3JhdGlvX3RvX3VzZV0pLCBpXSk7XG4gIG1lYW5fcmFuay5zb3J0KChhLCBiKSA9PiBhWzFdIC0gYlsxXSk7XG4gIG1lYW5fcmFuayA9IG1lYW5fcmFua1swXTtcbiAgaWYgKG1lYW5fcmFua1sxXSA+IG1lYW5fdmFsdWUpIHtcbiAgICBtZWFuX3JhbmsgPSBtZWFuX3JhbmtbMl0gLSAxO1xuICB9IGVsc2Uge1xuICAgIG1lYW5fcmFuayA9IG1lYW5fcmFua1syXTtcbiAgfVxuICByZXR1cm4gbWVhbl9yYW5rO1xufVxuXG5cbmV4cG9ydCBjbGFzcyBCYXJDaGFydDEge1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIHRoaXMuYnJ1c2hlZCA9ICgpID0+IHtcbiAgICAgIGlmIChkMy5ldmVudC5zb3VyY2VFdmVudCAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC50eXBlID09PSAnem9vbScpIHJldHVybjsgLy8gaWdub3JlIGJydXNoLWJ5LXpvb21cbiAgICAgIGlmICghdGhpcy54KSB7IGNvbnNvbGUubG9nKCdhJyk7IHJldHVybjsgfVxuICAgICAgY29uc3QgcyA9IGQzLmV2ZW50LnNlbGVjdGlvbiB8fCB0aGlzLngyLnJhbmdlKCk7XG4gICAgICBjdXJyZW50X3JhbmdlID0gW21hdGhfcm91bmQoc1swXSAvICh3aWR0aCAvIG5iRnQpKSwgbWF0aF9yb3VuZChzWzFdIC8gKHdpZHRoIC8gbmJGdCkpXTtcbiAgICAgIHRoaXMueC5kb21haW4odGhpcy5kYXRhLnNsaWNlKGN1cnJlbnRfcmFuZ2VbMF0sIGN1cnJlbnRfcmFuZ2VbMV0pLm1hcChmdCA9PiBmdC5pZCkpO1xuICAgICAgc3ZnX2Jhci5zZWxlY3QoJy56b29tJykuY2FsbCh0aGlzLnpvb20udHJhbnNmb3JtLCBkMy56b29tSWRlbnRpdHlcbiAgICAgICAgLnNjYWxlKHdpZHRoIC8gKGN1cnJlbnRfcmFuZ2VbMV0gLSBjdXJyZW50X3JhbmdlWzBdKSlcbiAgICAgICAgLnRyYW5zbGF0ZSgtY3VycmVudF9yYW5nZVswXSwgMCkpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgIHRoaXMudXBkYXRlQ29udGV4dChjdXJyZW50X3JhbmdlWzBdLCBjdXJyZW50X3JhbmdlWzFdKTtcbiAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbCh0aGlzLmJydXNoX3RvcC5tb3ZlLCBudWxsKTtcbiAgICAgIHRoaXMuYnJ1c2hlZF90b3AoKTtcbiAgICB9O1xuXG4gICAgdGhpcy5icnVzaGVkX3RvcCA9ICgpID0+IHtcbiAgICAgIGlmICghdGhpcy5fZm9jdXMpIHsgY29uc29sZS5sb2coJ2InKTsgcmV0dXJuOyB9XG4gICAgICBpZiAoIXRoaXMubWFwX2VsZW0pIHsgY29uc29sZS5sb2coJ2MnKTsgcmV0dXJuOyB9XG4gICAgICBjb25zdCBkM19ldmVudCA9IGQzLmV2ZW50O1xuICAgICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgICBjb25zdCByZWZfdmFsdWUgPSB0aGlzLnJlZl92YWx1ZTtcbiAgICAgIGlmIChkM19ldmVudCAmJiBkM19ldmVudC5zZWxlY3Rpb25cbiAgICAgICAgICAgICYmIGQzX2V2ZW50LnNvdXJjZUV2ZW50ICYmIGQzX2V2ZW50LnNvdXJjZUV2ZW50LnRhcmdldCA9PT0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJydXNoX3RvcCA+IHJlY3Qub3ZlcmxheScpKSB7XG4gICAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICAgIGNvbnN0IHMgPSBkM19ldmVudC5zZWxlY3Rpb247XG4gICAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbXG4gICAgICAgICAgY3VycmVudF9yYW5nZVswXSArIG1hdGhfcm91bmQoc1swXSAvICh3aWR0aCAvIGRpc3BsYXllZCkpIC0gMSxcbiAgICAgICAgICBjdXJyZW50X3JhbmdlWzBdICsgbWF0aF9yb3VuZChzWzFdIC8gKHdpZHRoIC8gZGlzcGxheWVkKSksXG4gICAgICAgIF07XG4gICAgICAgIHRoaXMueC5kb21haW4odGhpcy5kYXRhLnNsaWNlKGN1cnJlbnRfcmFuZ2VfYnJ1c2hbMF0gKyAxLCBjdXJyZW50X3JhbmdlX2JydXNoWzFdKVxuICAgICAgICAgIC5tYXAoZnQgPT4gZnQuaWQpKTtcbiAgICAgICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgICAgICB0aGlzLl9mb2N1cy5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbCcsIChkLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbikge1xuICAgICAgICAgICAgICBhcHAuY29sb3JzW2QuaWRdID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgICAgICAgICAgICByZXR1cm4gY29sb3JfaGlnaGxpZ2h0O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID4gY3VycmVudF9yYW5nZV9icnVzaFswXSAmJiBpIDwgY3VycmVudF9yYW5nZV9icnVzaFsxXSkge1xuICAgICAgICAgICAgICBjb25zdCBjb2xvciA9IGNvbXAoZFtyYXRpb190b191c2VdLCByZWZfdmFsdWUsIHRoaXMuc2VyaWVfaW52ZXJzZWQpO1xuICAgICAgICAgICAgICBhcHAuY29sb3JzW2QuaWRdID0gY29sb3I7XG4gICAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb2xvcl9jb3VudHJpZXM7XG4gICAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChkM19ldmVudCAmJiAhZDNfZXZlbnQuc2VsZWN0aW9uXG4gICAgICAgICAgICAmJiBkM19ldmVudC5zb3VyY2VFdmVudCAmJiBkM19ldmVudC5zb3VyY2VFdmVudC5kZXRhaWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICAgICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgICAgICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICAgICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2ZvY3VzLnNlbGVjdEFsbCgnLmJhcicpXG4gICAgICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBhcHAuY29sb3JzW2QuaWRdIHx8IGNvbG9yX2NvdW50cmllcyk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFNldCB0aGUgbWluaW11bSBudW1iZXIgb2YgdmFyaWFibGVzIHRvIGtlZXAgc2VsZWN0ZWQgZm9yIHRoaXMga2luZCBvZiBjaGFydDpcbiAgICBhcHAuY3VycmVudF9jb25maWcubmJfdmFyID0gMTtcbiAgICBjb25zdCB4ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIHdpZHRoXSkucGFkZGluZygwLjEpLFxuICAgICAgeDIgPSBkMy5zY2FsZUJhbmQoKS5yYW5nZShbMCwgd2lkdGhdKS5wYWRkaW5nKDAuMSksXG4gICAgICB5ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0LCAwXSksXG4gICAgICB5MiA9IGQzLnNjYWxlTGluZWFyKCkucmFuZ2UoW2hlaWdodDIsIDBdKTtcblxuICAgIGNvbnN0IHhBeGlzID0gZDMuYXhpc0JvdHRvbSh4KTtcbiAgICBjb25zdCB4QXhpczIgPSBkMy5heGlzQm90dG9tKHgyKTtcbiAgICBjb25zdCB5QXhpcyA9IGQzLmF4aXNMZWZ0KHkpO1xuXG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLngyID0geDI7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnkyID0geTI7XG4gICAgdGhpcy54QXhpcyA9IHhBeGlzO1xuICAgIHRoaXMueUF4aXMgPSB5QXhpcztcbiAgICB0aGlzLnhBeGlzMiA9IHhBeGlzMjtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBhdmFpbGFibGVfcmF0aW9zID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvO1xuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IGF2YWlsYWJsZV9yYXRpb3NbMF07XG4gICAgdGhpcy5yYXRpb190b191c2UgPSByYXRpb190b191c2U7XG5cbiAgICB0aGlzLmRhdGEgPSByZWZfZGF0YS5maWx0ZXIoZnQgPT4gISFmdFtyYXRpb190b191c2VdKTtcbiAgICB0aGlzLmRhdGEuc29ydCgoYSwgYikgPT4gYVtyYXRpb190b191c2VdIC0gYltyYXRpb190b191c2VdKTtcbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIHJlc2V0Q29sb3JzKCk7XG4gICAgdGhpcy5jdXJyZW50X3JhbmtzID0gdGhpcy5kYXRhLm1hcCgoZCwgaSkgPT4gaSArIDEpO1xuICAgIG5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIHRoaXMubWVhbl92YWx1ZSA9IGdldE1lYW4odGhpcy5kYXRhLm1hcChkID0+IGRbcmF0aW9fdG9fdXNlXSkpO1xuICAgIHRoaXMucmVmX3ZhbHVlID0gdGhpcy5kYXRhLmZpbHRlcihcbiAgICAgIGZ0ID0+IGZ0LmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXVtyYXRpb190b191c2VdO1xuICAgIHN2Z19iYXIuYXBwZW5kKCdkZWZzJylcbiAgICAgIC5hcHBlbmQoJ2NsaXBQYXRoJylcbiAgICAgIC5hdHRyKCdpZCcsICdjbGlwJylcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHJzKHsgd2lkdGgsIGhlaWdodCB9KTtcblxuICAgIGNvbnN0IGZvY3VzID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgY2xhc3M6ICdmb2N1cycsXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgLFxuICAgICAgfSk7XG5cbiAgICBjb25zdCBjb250ZXh0ID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgY2xhc3M6ICdjb250ZXh0JyxcbiAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7bWFyZ2luMi5sZWZ0fSwgJHttYXJnaW4yLnRvcH0pYCxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5fZm9jdXMgPSBmb2N1cztcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgeC5kb21haW4odGhpcy5jdXJyZW50X2lkcyk7XG4gICAgeS5kb21haW4oW1xuICAgICAgZDMubWluKHRoaXMuZGF0YSwgZCA9PiBkW3JhdGlvX3RvX3VzZV0pIC0gMixcbiAgICAgIGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZFtyYXRpb190b191c2VdKSxcbiAgICBdKTtcbiAgICB4Mi5kb21haW4oeC5kb21haW4oKSk7XG4gICAgeTIuZG9tYWluKHkuZG9tYWluKCkpO1xuXG4gICAgY29uc3QgYnJ1c2hfYm90dG9tID0gZDMuYnJ1c2hYKClcbiAgICAgIC5leHRlbnQoW1swLCAwXSwgW3dpZHRoLCBoZWlnaHQyXV0pXG4gICAgICAub24oJ2JydXNoIGVuZCcsIHRoaXMuYnJ1c2hlZCk7XG5cbiAgICBjb25zdCBicnVzaF90b3AgPSBkMy5icnVzaFgoKVxuICAgICAgLmV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKVxuICAgICAgLm9uKCdicnVzaCBlbmQnLCB0aGlzLmJydXNoZWRfdG9wKTtcblxuICAgIGNvbnN0IHpvb20gPSBkMy56b29tKClcbiAgICAgIC5zY2FsZUV4dGVudChbMSwgSW5maW5pdHldKVxuICAgICAgLnRyYW5zbGF0ZUV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKVxuICAgICAgLmV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKTtcbiAgICAgIC8vIC5vbihcInpvb21cIiwgem9vbWVkKTtcbiAgICB0aGlzLmJydXNoX3RvcCA9IGJydXNoX3RvcDtcbiAgICB0aGlzLmJydXNoX2JvdHRvbSA9IGJydXNoX2JvdHRvbTtcbiAgICB0aGlzLnpvb20gPSB6b29tO1xuXG4gICAgZm9jdXMuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnYXhpcyBheGlzLS14JywgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0fSlgIH0pXG4gICAgICAuY2FsbCh4QXhpcyk7XG5cbiAgICBmb2N1cy5zZWxlY3QoJy5heGlzLS14JylcbiAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgLnN0eWxlKCd0ZXh0LWFuY2hvcicsICdlbmQnKVxuICAgICAgLmF0dHJzKHsgZHg6ICctMC44ZW0nLCBkeTogJzAuMTVlbScsIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNjUpJyB9KTtcblxuICAgIGZvY3VzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYXhpcyBheGlzLS15JylcbiAgICAgIC5jYWxsKHlBeGlzKTtcblxuICAgIHRoaXMuZ19iYXIgPSBmb2N1cy5hcHBlbmQoJ2cnKTtcblxuICAgIGNvbnN0IGdyb3VwZV9saW5lX21lYW4gPSBmb2N1cy5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdtZWFuJyk7XG4gICAgZ3JvdXBlX2xpbmVfbWVhbi5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHsgeDogNjAsIHk6IHkodGhpcy5tZWFuX3ZhbHVlKSArIDIwIH0pXG4gICAgICAuc3R5bGVzKHtcbiAgICAgICAgZGlzcGxheTogJ25vbmUnLFxuICAgICAgICBmaWxsOiAncmVkJyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6ICcwLjgnLFxuICAgICAgICAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicsXG4gICAgICB9KVxuICAgICAgLnRleHQoYFZhbGV1ciBtb3llbm5lIDogJHtNYXRoLnJvdW5kKHRoaXMubWVhbl92YWx1ZSAqIDEwKSAvIDEwfWApO1xuXG4gICAgZ3JvdXBlX2xpbmVfbWVhbi5hcHBlbmQoJ2xpbmUnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgeDE6IDAsXG4gICAgICAgIHgyOiB3aWR0aCxcbiAgICAgICAgeTE6IHkodGhpcy5tZWFuX3ZhbHVlKSxcbiAgICAgICAgeTI6IHkodGhpcy5tZWFuX3ZhbHVlKSxcbiAgICAgICAgJ3N0cm9rZS1kYXNoYXJyYXknOiAnMTAsIDUnLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogJzJweCcsXG4gICAgICAgIGNsYXNzOiAnbWVhbl9saW5lJyxcbiAgICAgIH0pXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICdyZWQnKTtcblxuICAgIGdyb3VwZV9saW5lX21lYW4uYXBwZW5kKCdsaW5lJylcbiAgICAgIC5hdHRycyh7IHgxOiAwLCB4Mjogd2lkdGgsIHkxOiB5KHRoaXMubWVhbl92YWx1ZSksIHkyOiB5KHRoaXMubWVhbl92YWx1ZSksICdzdHJva2Utd2lkdGgnOiAnMTRweCcsIGNsYXNzOiAndHJhbnNwX21lYW5fbGluZScgfSlcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJ3RyYW5zcGFyZW50JylcbiAgICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgICAgICBncm91cGVfbGluZV9tZWFuLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ2luaXRpYWwnKTtcbiAgICAgIH0pXG4gICAgICAub24oJ21vdXNlb3V0JywgKCkgPT4ge1xuICAgICAgICBncm91cGVfbGluZV9tZWFuLnNlbGVjdCgndGV4dCcpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgIH0pO1xuXG4gICAgdGhpcy51cGRhdGVNaW5pQmFycygpO1xuXG4gICAgY29udGV4dC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2JydXNoX2JvdHRvbScpXG4gICAgICAuY2FsbChicnVzaF9ib3R0b20pXG4gICAgICAuY2FsbChicnVzaF9ib3R0b20ubW92ZSwgeC5yYW5nZSgpKTtcblxuICAgIGZvY3VzLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYnJ1c2hfdG9wJylcbiAgICAgIC5jYWxsKGJydXNoX3RvcClcbiAgICAgIC5jYWxsKGJydXNoX3RvcC5tb3ZlLCBudWxsKTtcblxuICAgIHRoaXMuY29tcGxldHVkZV92YWx1ZSA9IGNhbGNQb3BDb21wbGV0dWRlU3Vic2V0KGFwcCwgW3RoaXMucmF0aW9fdG9fdXNlXSk7XG5cbiAgICB0aGlzLmNvbXBsZXR1ZGUgPSBzdmdfYmFyLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cnMoeyBpZDogJ2NoYXJ0X2NvbXBsZXR1ZGUnLCB4OiA2MCwgeTogNDAgfSlcbiAgICAgIC5zdHlsZXMoeyAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicgfSlcbiAgICAgIC50ZXh0KGBDb21wbMOpdHVkZSA6ICR7dGhpcy5jb21wbGV0dWRlX3ZhbHVlfSVgKTtcblxuICAgIHN2Z19iYXIuYXBwZW5kKCdpbWFnZScpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB4OiB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgNSxcbiAgICAgICAgeTogMzg1LFxuICAgICAgICB3aWR0aDogMTUsXG4gICAgICAgIGhlaWdodDogMTUsXG4gICAgICAgICd4bGluazpocmVmJzogJ2ltZy9yZXZlcnNlX3BsdXMucG5nJyxcbiAgICAgICAgaWQ6ICdpbWdfcmV2ZXJzZScsXG4gICAgICB9KVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgLy8gdGhpcy5kYXRhID0gYXBwLmN1cnJlbnRfZGF0YS5zbGljZSgpO1xuICAgICAgICBpZiAoIXRoaXMuc2VyaWVfaW52ZXJzZWQpIHtcbiAgICAgICAgICB0aGlzLmRhdGEuc29ydCgoYSwgYikgPT4gYlt0aGlzLnJhdGlvX3RvX3VzZV0gLSBhW3RoaXMucmF0aW9fdG9fdXNlXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IGFbdGhpcy5yYXRpb190b191c2VdIC0gYlt0aGlzLnJhdGlvX3RvX3VzZV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2VyaWVfaW52ZXJzZWQgPSAhdGhpcy5zZXJpZV9pbnZlcnNlZDtcbiAgICAgICAgeC5kb21haW4odGhpcy5kYXRhLnNsaWNlKGN1cnJlbnRfcmFuZ2VbMF0sIGN1cnJlbnRfcmFuZ2VbMV0pLm1hcChmdCA9PiBmdC5pZCkpO1xuICAgICAgICB4Mi5kb21haW4odGhpcy5kYXRhLm1hcChmdCA9PiBmdC5pZCkpO1xuICAgICAgICAvLyBzdmdfYmFyLnNlbGVjdChcIi56b29tXCIpLmNhbGwoem9vbS50cmFuc2Zvcm0sIGQzLnpvb21JZGVudGl0eVxuICAgICAgICAvLyAgICAgLnNjYWxlKHdpZHRoIC8gKGN1cnJlbnRfcmFuZ2VbMV0gLSBjdXJyZW50X3JhbmdlWzBdKSlcbiAgICAgICAgLy8gICAgIC50cmFuc2xhdGUoLWN1cnJlbnRfcmFuZ2VbMF0sIDApKTtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgLy8gdGhpcy51cGRhdGVNaW5pQmFycygpO1xuICAgICAgICB0aGlzLnVwZGF0ZUNvbnRleHQoY3VycmVudF9yYW5nZVswXSwgY3VycmVudF9yYW5nZVsxXSk7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbChicnVzaF90b3AubW92ZSwgbnVsbCk7XG4gICAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChicnVzaF9ib3R0b20ubW92ZSwgeC5yYW5nZSgpKTtcbiAgICAgIH0pO1xuXG4gICAgLy8gUHJlcGFyZSB0aGUgdG9vbHRpcCBkaXNwbGF5ZWQgb24gbW91c2VvdmVyOlxuICAgIGNvbnN0IHRvb2x0aXAgPSBwcmVwYXJlVG9vbHRpcChzdmdfYmFyKTtcblxuICAgIC8vIERlYWN0aXZhdGUgdGhlIGJydXNoIHJlY3Qgc2VsZWN0aW9uIG9uIHRoZSBtYXAgKyBvbiB0aGUgY2hhcnRcbiAgICAvLyB3aGVuIGhlIHVzZXIgcHJlc3MgdGhlIEN0cmwga2V5OlxuICAgIGRvY3VtZW50Lm9ua2V5ZG93biA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKVxuICAgICAgICAgIC5zZWxlY3RBbGwoJy5zZWxlY3Rpb24sIC5vdmVybGF5JylcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfVxuICAgIH07XG4gICAgZG9jdW1lbnQub25rZXl1cCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vXG4gICAgY29uc3QgaGVhZGVyX2Jhcl9zZWN0aW9uID0gZDMuc2VsZWN0KCcjaGVhZGVyX2NoYXJ0Jyk7XG5cbiAgICB0aGlzLnNlbGVjX3ZhciA9IGhlYWRlcl9iYXJfc2VjdGlvblxuICAgICAgLmluc2VydCgnc2VsZWN0JywgJyNpbWdfdGFibGUnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICd0aXRsZV92YXJpYWJsZScgfSlcbiAgICAgIC5zdHlsZXMoe1xuICAgICAgICAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicsXG4gICAgICAgICdmb250LXdlaWdodCc6ICc4MDAnLFxuICAgICAgICAnZm9udC1zaXplJzogJzE0cHgnLFxuICAgICAgICAnbWFyZ2luLXRvcCc6ICcxMnB4JyxcbiAgICAgICAgJ21hcmdpbi1sZWZ0JzogJzQwcHgnLFxuICAgICAgICBmbG9hdDogJ2xlZnQnLFxuICAgICAgfSk7XG5cbiAgICBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSBhdmFpbGFibGVfcmF0aW9zLmxlbmd0aDsgaSA8IGxlbl9pOyBpKyspIHtcbiAgICAgIHRoaXMuc2VsZWNfdmFyLmFwcGVuZCgnb3B0aW9uJylcbiAgICAgICAgLmF0dHIoJ3ZhbHVlJywgYXZhaWxhYmxlX3JhdGlvc1tpXSlcbiAgICAgICAgLnRleHQoYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lW2ldKTtcbiAgICB9XG5cbiAgICB0aGlzLnNlbGVjX3Zhci5vbignY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgY29kZV92YXJpYWJsZSA9IHRoaXMudmFsdWU7XG4gICAgICBzZWxmLmNoYW5nZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpO1xuICAgICAgc2VsZi5jaGFuZ2VTdHVkeVpvbmUoKTtcbiAgICAgIHNlbGYudXBkYXRlQ29tcGxldHVkZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBtZW51IHVuZGVyIHRoZSBjaGFydCBhbGxvd2luZyB0byB1c2Ugc29tZSB1c2VmdWwgc2VsZWN0aW9uc1xuICAgIC8vIChhYm92ZSBvciBiZWxvdyB0aGUgbWVhbiB2YWx1ZSBhbmQgYWJvdmUgb3IgYmVsb3cgbXlfcmVnaW9uKVxuICAgIGNvbnN0IG1lbnVfc2VsZWN0aW9uID0gZDMuc2VsZWN0KCcjYmFyX3NlY3Rpb24nKVxuICAgICAgLmFwcGVuZCgnZGl2JylcbiAgICAgIC5hdHRyKCdpZCcsICdtZW51X3NlbGVjdGlvbicpXG4gICAgICAuc3R5bGVzKHsgcGFkZGluZzogJzAgMTBweCAxMHB4IDEwcHgnLCAndGV4dC1hbGlnbic6ICdjZW50ZXInIH0pO1xuXG4gICAgbWVudV9zZWxlY3Rpb24uYXBwZW5kKCdidXR0b24nKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdidXR0b25fYmx1ZScsIGlkOiAnYnRuX2Fib3ZlX21lYW4nIH0pXG4gICAgICAudGV4dCgnPCDDoCBsYSBtb3llbm5lJylcbiAgICAgIC5vbignY2xpY2snLCAoKSA9PiB0aGlzLnNlbGVjdEJlbG93TWVhbigpKTtcblxuICAgIG1lbnVfc2VsZWN0aW9uLmFwcGVuZCgnYnV0dG9uJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAnYnV0dG9uX2JsdWUnLCBpZDogJ2J0bl9iZWxvd19tZWFuJyB9KVxuICAgICAgLnRleHQoJz4gw6AgbGEgbW95ZW5uZScpXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5zZWxlY3RBYm92ZU1lYW4oKSk7XG5cbiAgICBtZW51X3NlbGVjdGlvbi5hcHBlbmQoJ2J1dHRvbicpXG4gICAgICAuYXR0cnMoeyBjbGFzczogJ2J1dHRvbl9ibHVlJywgaWQ6ICdidG5fYWJvdmVfbXlfcmVnaW9uJyB9KVxuICAgICAgLnRleHQoJzwgw6AgbWEgcsOpZ2lvbicpXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4gdGhpcy5zZWxlY3RCZWxvd015UmVnaW9uKCkpO1xuXG4gICAgbWVudV9zZWxlY3Rpb24uYXBwZW5kKCdidXR0b24nKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdidXR0b25fYmx1ZScsIGlkOiAnYnRuX2JlbG93X215X3JlZ2lvbicgfSlcbiAgICAgIC50ZXh0KCc+IMOgIG1hIHLDqWdpb24nKVxuICAgICAgLm9uKCdjbGljaycsICgpID0+IHRoaXMuc2VsZWN0QWJvdmVNeVJlZ2lvbigpKTtcblxuICAgIHRoaXMubWFrZVRhYmxlU3RhdCgpO1xuICB9XG5cbiAgdXBkYXRlQ29tcGxldHVkZSgpIHtcbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIFt0aGlzLnJhdGlvX3RvX3VzZV0pO1xuXG4gICAgdGhpcy5jb21wbGV0dWRlXG4gICAgICAudGV4dChgQ29tcGzDqXR1ZGUgOiAke3RoaXMuY29tcGxldHVkZV92YWx1ZX0lYCk7XG4gIH1cblxuICB1cGRhdGVDb250ZXh0KG1pbiwgbWF4KSB7XG4gICAgdGhpcy5jb250ZXh0LnNlbGVjdEFsbCgnLmJhcicpXG4gICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAoXywgaSkgPT4gKGkgPj0gbWluICYmIGkgPCBtYXggPyAnMScgOiAnMC4zJykpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGRpc3BsYXllZCA9IDA7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgYmFyID0gdGhpcy5nX2Jhci5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgLmRhdGEodGhpcy5kYXRhKTtcblxuICAgIGJhclxuICAgICAgLmF0dHJzKGQgPT4gKHtcbiAgICAgICAgeDogdGhpcy54KGQuaWQpLFxuICAgICAgICB5OiB0aGlzLnkoZFtyYXRpb190b191c2VdKSxcbiAgICAgICAgd2lkdGg6IHRoaXMueC5iYW5kd2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSB0aGlzLnkoZFtyYXRpb190b191c2VdKSxcbiAgICAgIH0pKVxuICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBhcHAuY29sb3JzW2QuaWRdIHx8IGNvbG9yX2NvdW50cmllcylcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHRvX2Rpc3BsYXkgPSB0aGlzLngoZC5pZCkgIT0gbnVsbDtcbiAgICAgICAgaWYgKHRvX2Rpc3BsYXkpIHtcbiAgICAgICAgICBkaXNwbGF5ZWQgKz0gMTtcbiAgICAgICAgICByZXR1cm4gJ2luaXRpYWwnO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnbm9uZSc7XG4gICAgICB9KVxuICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9KVxuICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpO1xuICAgICAgICB0b29sdGlwLnNlbGVjdCgncmVjdCcpLmF0dHJzKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcbiAgICAgICAgdG9vbHRpcFxuICAgICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gICAgICAgICAgLnRleHQoYCR7ZC5pZH1gKTtcbiAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTEnKVxuICAgICAgICAgIC50ZXh0KGAke21hdGhfcm91bmQoZFtzZWxmLnJhdGlvX3RvX3VzZV0gKiAxMCkgLyAxMH1gKTtcbiAgICAgICAgY29uc3QgYiA9IHRvb2x0aXAubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB0b29sdGlwLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgLmF0dHJzKHtcbiAgICAgICAgICAgIHdpZHRoOiBiLndpZHRoICsgMjAsXG4gICAgICAgICAgICBoZWlnaHQ6IGIuaGVpZ2h0ICsgNy41LFxuICAgICAgICAgIH0pO1xuICAgICAgICB0b29sdGlwXG4gICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtbZDMubW91c2UodGhpcylbMF0gLSA1LCBkMy5tb3VzZSh0aGlzKVsxXSAtIDQ1XX0pYCk7XG4gICAgICB9KTtcblxuICAgIGJhci5lbnRlcigpXG4gICAgICAuaW5zZXJ0KCdyZWN0JywgJy5tZWFuJylcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIGNsYXNzOiAnYmFyJyxcbiAgICAgICAgeDogdGhpcy54KGQuaWQpLFxuICAgICAgICB5OiB0aGlzLnkoZFtyYXRpb190b191c2VdKSxcbiAgICAgICAgd2lkdGg6IHRoaXMueC5iYW5kd2lkdGgoKSxcbiAgICAgICAgaGVpZ2h0OiBoZWlnaHQgLSB0aGlzLnkoZFtyYXRpb190b191c2VdKSxcbiAgICAgIH0pKTtcblxuICAgIGJhci5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICB0aGlzLl9mb2N1cy5zZWxlY3QoJy5heGlzLS15JylcbiAgICAgIC5jYWxsKHRoaXMueUF4aXMpO1xuXG4gICAgY29uc3QgYXhpc194ID0gdGhpcy5fZm9jdXMuc2VsZWN0KCcuYXhpcy0teCcpXG4gICAgICAuYXR0cignZm9udC1zaXplJywgKCkgPT4gKGRpc3BsYXllZCA+IDc1ID8gNiA6IDEwKSlcbiAgICAgIC5jYWxsKHRoaXMueEF4aXMpO1xuICAgIGF4aXNfeFxuICAgICAgLnNlbGVjdEFsbCgndGV4dCcpXG4gICAgICAuYXR0cnMoKCkgPT4ge1xuICAgICAgICBpZiAoZGlzcGxheWVkID4gMTAwKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZHg6ICctMC44ZW0nLCBkeTogJzAuMTVlbScsIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNjUpJyB9O1xuICAgICAgICB9IGVsc2UgaWYgKGRpc3BsYXllZCA+IDIwKSB7XG4gICAgICAgICAgcmV0dXJuIHsgZHg6ICctMC44ZW0nLCBkeTogJzAuMTVlbScsIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNjUpJyB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB7IGR4OiAnMCcsIGR5OiAnMC43MWVtJywgdHJhbnNmb3JtOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuc3R5bGUoJ3RleHQtYW5jaG9yJywgKCkgPT4gKGRpc3BsYXllZCA+IDIwID8gJ2VuZCcgOiAnbWlkZGxlJykpO1xuXG4gICAgdGhpcy51cGRhdGVNaW5pQmFycygpO1xuICB9XG5cblxuICB1cGRhdGVNaW5pQmFycygpIHtcbiAgICBjb25zdCByYXRpb190b191c2UgPSB0aGlzLnJhdGlvX3RvX3VzZTtcbiAgICBjb25zdCBtaW5pX2JhcnMgPSB0aGlzLmNvbnRleHQuc2VsZWN0QWxsKCcuYmFyJylcbiAgICAgIC5kYXRhKHRoaXMuZGF0YSk7XG5cbiAgICBtaW5pX2JhcnNcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIHg6IHRoaXMueDIoZC5pZCksXG4gICAgICAgIHk6IHRoaXMueTIoZFtyYXRpb190b191c2VdKSxcbiAgICAgICAgd2lkdGg6IHRoaXMueDIuYmFuZHdpZHRoKCksXG4gICAgICAgIGhlaWdodDogaGVpZ2h0MiAtIHRoaXMueTIoZFtyYXRpb190b191c2VdKSxcbiAgICAgIH0pKVxuICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiAoZC5pZCAhPT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA/IGNvbG9yX2NvdW50cmllcyA6IGNvbG9yX2hpZ2hsaWdodCkpO1xuXG4gICAgbWluaV9iYXJzXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmluc2VydCgncmVjdCcpXG4gICAgICAuYXR0cnMoZCA9PiAoe1xuICAgICAgICBjbGFzczogJ2JhcicsXG4gICAgICAgIHg6IHRoaXMueDIoZC5pZCksXG4gICAgICAgIHk6IHRoaXMueTIoZFtyYXRpb190b191c2VdKSxcbiAgICAgICAgd2lkdGg6IHRoaXMueDIuYmFuZHdpZHRoKCksXG4gICAgICAgIGhlaWdodDogaGVpZ2h0MiAtIHRoaXMueTIoZFtyYXRpb190b191c2VdKSxcbiAgICAgIH0pKVxuICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiAoZC5pZCAhPT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA/IGNvbG9yX2NvdW50cmllcyA6IGNvbG9yX2hpZ2hsaWdodCkpO1xuICAgIG1pbmlfYmFycy5leGl0KCkucmVtb3ZlKCk7XG4gIH1cblxuICB1cGRhdGVNYXBSZWdpbygpIHtcbiAgICB0aGlzLm1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+ICh0aGlzLmN1cnJlbnRfaWRzLmluZGV4T2YoZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXSkgPiAtMVxuICAgICAgICA/IChhcHAuY29sb3JzW2QucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV1dIHx8IGNvbG9yX2NvdW50cmllcylcbiAgICAgICAgOiBjb2xvcl9kaXNhYmxlZCkpO1xuICB9XG5cbiAgc2VsZWN0QWJvdmVNeVJlZ2lvbigpIHtcbiAgICBjb25zdCBteV9yYW5rID0gdGhpcy5kYXRhLm1hcCgoZCwgaSkgPT4gW2QuaWQsIGldKVxuICAgICAgLmZpbHRlcihkID0+IGRbMF0gPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pWzBdWzFdO1xuICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgIGlmICghdGhpcy5zZXJpZV9pbnZlcnNlZCkge1xuICAgICAgY3VycmVudF9yYW5nZV9icnVzaCA9IFtteV9yYW5rLCB0aGlzLmRhdGEubGVuZ3RoXTtcbiAgICAgIHRoaXMuZGF0YVxuICAgICAgICAuZmlsdGVyKChkLCBpKSA9PiBpID4gbXlfcmFuaylcbiAgICAgICAgLm1hcChkID0+IGQuaWQpXG4gICAgICAgIC5mb3JFYWNoKChmdCkgPT4geyBhcHAuY29sb3JzW2Z0XSA9IGNvbG9yX3N1cDsgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbMCwgbXlfcmFua107XG4gICAgICB0aGlzLmRhdGFcbiAgICAgICAgLmZpbHRlcigoZCwgaSkgPT4gaSA8IG15X3JhbmspXG4gICAgICAgIC5tYXAoZCA9PiBkLmlkKVxuICAgICAgICAuZm9yRWFjaCgoZnQpID0+IHsgYXBwLmNvbG9yc1tmdF0gPSBjb2xvcl9pbmY7IH0pO1xuICAgIH1cbiAgICBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX2JvdHRvbScpLmNhbGwoXG4gICAgICB0aGlzLmJydXNoX2JvdHRvbS5tb3ZlLCB0aGlzLngyLnJhbmdlKCkpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgLy8gc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF90b3AnKS5jYWxsKHRoaXMuYnJ1c2hfdG9wLm1vdmUsIGN1cnJlbnRfcmFuZ2VfYnJ1c2gubWFwKGQgPT4gZCAqICh3aWR0aCAvIG5iRnQpKSk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICB9XG5cbiAgc2VsZWN0QmVsb3dNeVJlZ2lvbigpIHtcbiAgICBjb25zdCBteV9yYW5rID0gdGhpcy5kYXRhLm1hcCgoZCwgaSkgPT4gW2QuaWQsIGldKVxuICAgICAgLmZpbHRlcihkID0+IGRbMF0gPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pWzBdWzFdO1xuXG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgaWYgKCF0aGlzLnNlcmllX2ludmVyc2VkKSB7XG4gICAgICBjdXJyZW50X3JhbmdlX2JydXNoID0gWzAsIG15X3JhbmtdO1xuICAgICAgdGhpcy5kYXRhXG4gICAgICAgIC5maWx0ZXIoKGQsIGkpID0+IGkgPCBteV9yYW5rKVxuICAgICAgICAubWFwKGQgPT4gZC5pZClcbiAgICAgICAgLmZvckVhY2goKGZ0KSA9PiB7IGFwcC5jb2xvcnNbZnRdID0gY29sb3JfaW5mOyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9yYW5nZV9icnVzaCA9IFtteV9yYW5rLCB0aGlzLmRhdGEubGVuZ3RoXTtcbiAgICAgIHRoaXMuZGF0YVxuICAgICAgICAuZmlsdGVyKChkLCBpKSA9PiBpID4gbXlfcmFuaylcbiAgICAgICAgLm1hcChkID0+IGQuaWQpXG4gICAgICAgIC5mb3JFYWNoKChmdCkgPT4geyBhcHAuY29sb3JzW2Z0XSA9IGNvbG9yX3N1cDsgfSk7XG4gICAgfVxuICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChcbiAgICAgIHRoaXMuYnJ1c2hfYm90dG9tLm1vdmUsIHRoaXMueDIucmFuZ2UoKSk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICAvLyBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX3RvcCcpLmNhbGwodGhpcy5icnVzaF90b3AubW92ZSwgY3VycmVudF9yYW5nZV9icnVzaC5tYXAoZCA9PiBkICogKHdpZHRoIC8gbmJGdCkpKTtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gIH1cblxuICBzZWxlY3RBYm92ZU1lYW4oKSB7XG4gICAgY29uc3QgbWVhbl9yYW5rID0gZ2V0TWVhblJhbmsodGhpcy5tZWFuX3ZhbHVlLCB0aGlzLnJhdGlvX3RvX3VzZSk7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgY29uc3QgcmVmX3ZhbHVlID0gdGhpcy5yZWZfdmFsdWU7XG5cbiAgICBhcHAuY29sb3JzID0ge307XG4gICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICBpZiAoIXRoaXMuc2VyaWVfaW52ZXJzZWQpIHtcbiAgICAgIGN1cnJlbnRfcmFuZ2VfYnJ1c2ggPSBbbWVhbl9yYW5rLCB0aGlzLmRhdGEubGVuZ3RoXTtcbiAgICAgIHRoaXMuZGF0YS5maWx0ZXIoZCA9PiBkW3JhdGlvX3RvX3VzZV0gPiB0aGlzLm1lYW5fdmFsdWUpLmZvckVhY2goKGZ0KSA9PiB7XG4gICAgICAgIGlmIChmdFtyYXRpb190b191c2VdID4gcmVmX3ZhbHVlKSBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbG9yX3N1cDtcbiAgICAgICAgZWxzZSBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbG9yX2luZjtcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X3JhbmdlX2JydXNoID0gWzAsIG1lYW5fcmFuayArIDFdO1xuICAgICAgdGhpcy5kYXRhLmZpbHRlcihkID0+IGRbcmF0aW9fdG9fdXNlXSA+IHRoaXMubWVhbl92YWx1ZSkuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgICAgaWYgKGZ0W3JhdGlvX3RvX3VzZV0gPiByZWZfdmFsdWUpIGFwcC5jb2xvcnNbZnQuaWRdID0gY29sb3JfaW5mO1xuICAgICAgICBlbHNlIGFwcC5jb2xvcnNbZnQuaWRdID0gY29sb3Jfc3VwO1xuICAgICAgfSk7XG4gICAgfVxuICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF9ib3R0b20nKS5jYWxsKFxuICAgICAgdGhpcy5icnVzaF9ib3R0b20ubW92ZSwgdGhpcy54Mi5yYW5nZSgpKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIC8vIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfdG9wJykuY2FsbCh0aGlzLmJydXNoX3RvcC5tb3ZlLCBjdXJyZW50X3JhbmdlX2JydXNoLm1hcChkID0+IGQgKiAod2lkdGggLyBuYkZ0KSkpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgfVxuXG4gIHNlbGVjdEJlbG93TWVhbigpIHtcbiAgICBjb25zdCBtZWFuX3JhbmsgPSBnZXRNZWFuUmFuayh0aGlzLm1lYW5fdmFsdWUsIHRoaXMucmF0aW9fdG9fdXNlKTtcbiAgICBjb25zdCByYXRpb190b191c2UgPSB0aGlzLnJhdGlvX3RvX3VzZTtcbiAgICBjb25zdCByZWZfdmFsdWUgPSB0aGlzLnJlZl92YWx1ZTtcbiAgICBhcHAuY29sb3JzID0ge307XG4gICAgaWYgKCF0aGlzLnNlcmllX2ludmVyc2VkKSB7XG4gICAgICBjdXJyZW50X3JhbmdlX2JydXNoID0gWzAsIG1lYW5fcmFua107XG4gICAgICB0aGlzLmRhdGEuZmlsdGVyKGQgPT4gZFtyYXRpb190b191c2VdIDwgdGhpcy5tZWFuX3ZhbHVlKS5mb3JFYWNoKChmdCkgPT4ge1xuICAgICAgICBpZiAoZnRbcmF0aW9fdG9fdXNlXSA8IHJlZl92YWx1ZSkgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb2xvcl9pbmY7XG4gICAgICAgIGVsc2UgYXBwLmNvbG9yc1tmdC5pZF0gPSBjb2xvcl9zdXA7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3VycmVudF9yYW5nZV9icnVzaCA9IFttZWFuX3JhbmsgKyAxLCB0aGlzLmRhdGEubGVuZ3RoXTtcbiAgICAgIHRoaXMuZGF0YS5maWx0ZXIoZCA9PiBkW3JhdGlvX3RvX3VzZV0gPCB0aGlzLm1lYW5fdmFsdWUpLmZvckVhY2goKGZ0KSA9PiB7XG4gICAgICAgIGlmIChmdFtyYXRpb190b191c2VdIDwgcmVmX3ZhbHVlKSBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbG9yX3N1cDtcbiAgICAgICAgZWxzZSBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbG9yX2luZjtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChcbiAgICAgIHRoaXMuYnJ1c2hfYm90dG9tLm1vdmUsIHRoaXMueDIucmFuZ2UoKSk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgICAvLyBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX3RvcCcpLmNhbGwodGhpcy5icnVzaF90b3AubW92ZSwgY3VycmVudF9yYW5nZV9icnVzaC5tYXAoZCA9PiBkICogKHdpZHRoIC8gbmJGdCkpKTtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gIH1cblxuICBoYW5kbGVfYnJ1c2hfbWFwKGV2ZW50KSB7XG4gICAgaWYgKCFldmVudCB8fCAhZXZlbnQuc2VsZWN0aW9uKSB7XG4gICAgICB0aGlzLmxhc3RfbWFwX3NlbGVjdGlvbiA9IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgY29uc3QgcmVmX3ZhbHVlID0gdGhpcy5yZWZfdmFsdWU7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF90b3AnKS5jYWxsKHNlbGYuYnJ1c2hfdG9wLm1vdmUsIG51bGwpO1xuICAgIGNvbnN0IFt0b3BsZWZ0LCBib3R0b21yaWdodF0gPSBldmVudC5zZWxlY3Rpb247XG4gICAgdGhpcy5sYXN0X21hcF9zZWxlY3Rpb24gPSBbdG9wbGVmdCwgYm90dG9tcmlnaHRdO1xuICAgIC8vIGNvbnN0IHRyYW5zZm9ybSA9IHN2Z19tYXAubm9kZSgpLl9fem9vbTtcbiAgICAvLyB0b3BsZWZ0WzBdID0gKHRvcGxlZnRbMF0gLSB0cmFuc2Zvcm0ueCkgLyB0cmFuc2Zvcm0uaztcbiAgICAvLyB0b3BsZWZ0WzFdID0gKHRvcGxlZnRbMV0gLSB0cmFuc2Zvcm0ueSkgLyB0cmFuc2Zvcm0uaztcbiAgICAvLyBib3R0b21yaWdodFswXSA9IChib3R0b21yaWdodFswXSAtIHRyYW5zZm9ybS54KSAvIHRyYW5zZm9ybS5rO1xuICAgIC8vIGJvdHRvbXJpZ2h0WzFdID0gKGJvdHRvbXJpZ2h0WzFdIC0gdHJhbnNmb3JtLnkpIC8gdHJhbnNmb3JtLms7XG4gICAgY29uc3QgcmVjdCA9IG5ldyBSZWN0KHRvcGxlZnQsIGJvdHRvbXJpZ2h0KTtcbiAgICBhcHAuY29sb3JzID0ge307XG4gICAgc2VsZi5tYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgY29uc3QgaWQgPSBkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dO1xuICAgICAgICBpZiAoaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pIHtcbiAgICAgICAgICBhcHAuY29sb3JzW2lkXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgICAgICByZXR1cm4gY29sb3JfaGlnaGxpZ2h0O1xuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuY3VycmVudF9pZHMuaW5kZXhPZihpZCkgPCAwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yX2Rpc2FibGVkO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5fcHRzKSB7XG4gICAgICAgICAgdGhpcy5fcHRzID0gc3ZnUGF0aFRvQ29vcmRzKHRoaXMuZ2V0QXR0cmlidXRlKCdkJyksIGFwcC50eXBlX3BhdGgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHB0cyA9IHRoaXMuX3B0cztcbiAgICAgICAgZm9yIChsZXQgaXggPSAwLCBuYl9wdHMgPSBwdHMubGVuZ3RoOyBpeCA8IG5iX3B0czsgaXgrKykge1xuICAgICAgICAgIGlmIChyZWN0LmNvbnRhaW5zKHB0c1tpeF0pKSB7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGQucHJvcGVydGllc1tyYXRpb190b191c2VdO1xuICAgICAgICAgICAgY29uc3QgY29sb3IgPSBjb21wKHZhbHVlLCByZWZfdmFsdWUsIHRoaXMuc2VyaWVfaW52ZXJzZWQpO1xuICAgICAgICAgICAgYXBwLmNvbG9yc1tpZF0gPSBjb2xvcjtcbiAgICAgICAgICAgIHJldHVybiBjb2xvcjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvbG9yX2NvdW50cmllcztcbiAgICAgIH0pO1xuICAgIHNlbGYuX2ZvY3VzLnNlbGVjdEFsbCgnLmJhcicpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGFwcC5jb2xvcnNbZC5pZF0gfHwgY29sb3JfY291bnRyaWVzKTtcbiAgICBjb25zdCBpZHMgPSBPYmplY3Qua2V5cyhhcHAuY29sb3JzKTtcbiAgICBjb25zdCByYW5rcyA9IGlkcy5tYXAoZCA9PiB0aGlzLmN1cnJlbnRfaWRzLmluZGV4T2YoZC5pZCkgPiAtMSkubWFwKGQgPT4gdGhpcy5jdXJyZW50X3JhbmtzW2RdKTtcbiAgICBpZiAocmFua3MubGVuZ3RoID4gMSkge1xuICAgICAgY29uc3QgYzEgPSByYW5rc1swXSAtIDE7XG4gICAgICBjb25zdCBjMiA9IHJhbmtzW3JhbmtzLmxlbmd0aCAtIDFdO1xuICAgICAgaWYgKGMxIDwgY3VycmVudF9yYW5nZVswXSB8fCBjMiA+IGN1cnJlbnRfcmFuZ2VbMV0pIHtcbiAgICAgICAgY3VycmVudF9yYW5nZSA9IFtcbiAgICAgICAgICByYW5rc1swXSAtIDEsXG4gICAgICAgICAgcmFua3NbcmFua3MubGVuZ3RoIC0gMV0sXG4gICAgICAgIF07XG4gICAgICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbChcbiAgICAgICAgICBzZWxmLmJydXNoX2JvdHRvbS5tb3ZlLFxuICAgICAgICAgIFtjdXJyZW50X3JhbmdlWzBdICogKHdpZHRoIC8gbmJGdCksIGN1cnJlbnRfcmFuZ2VbMV0gKiAod2lkdGggLyBuYkZ0KV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjdXJyZW50X3JhbmdlID0gWzAsIHRoaXMuZGF0YS5sZW5ndGhdO1xuICAgICAgc3ZnX2Jhci5zZWxlY3QoJy5icnVzaF9ib3R0b20nKS5jYWxsKFxuICAgICAgICBzZWxmLmJydXNoX2JvdHRvbS5tb3ZlLCBzZWxmLngucmFuZ2UoKSk7XG4gICAgfVxuICB9XG5cbiAgaGFuZGxlQ2xpY2tNYXAoZCwgcGFyZW50KSB7XG4gICAgY29uc3QgaWQgPSBkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dO1xuICAgIGlmICh0aGlzLmN1cnJlbnRfaWRzLmluZGV4T2YoaWQpIDwgMCB8fCBpZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbikgcmV0dXJuO1xuICAgIGlmIChhcHAuY29sb3JzW2lkXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBhcHAuY29sb3JzW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIGQzLnNlbGVjdChwYXJlbnQpLmF0dHIoJ2ZpbGwnLCBjb2xvcl9jb3VudHJpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb2xvciA9IGNvbXAoXG4gICAgICAgIGQucHJvcGVydGllc1t0aGlzLnJhdGlvX3RvX3VzZV0sXG4gICAgICAgIHRoaXMucmVmX3ZhbHVlLFxuICAgICAgICB0aGlzLnNlcmllX2ludmVyc2VkKTtcbiAgICAgIGFwcC5jb2xvcnNbaWRdID0gY29sb3I7XG4gICAgICBkMy5zZWxlY3QocGFyZW50KS5hdHRyKCdmaWxsJywgY29sb3IpO1xuICAgIH1cbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlQ2hhbmdlUmVnaW9uKCkge1xuICAgIGlmIChhcHAuY3VycmVudF9jb25maWcuZmlsdGVyX2tleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLmNoYW5nZVN0dWR5Wm9uZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnJlZl92YWx1ZSA9IHRoaXMuZGF0YS5maWx0ZXIoXG4gICAgICAgIGZ0ID0+IGZ0LmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVswXVt0aGlzLnJhdGlvX3RvX3VzZV07XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgdGhpcy51cGRhdGVDb250ZXh0KDAsIHRoaXMuZGF0YS5sZW5ndGgpO1xuICAgICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgICAgdGhpcy51cGRhdGVUYWJsZVN0YXRzKCk7XG4gICAgICBzdmdfYmFyLnNlbGVjdCgnLmJydXNoX2JvdHRvbScpLmNhbGwodGhpcy5icnVzaF9ib3R0b20ubW92ZSwgdGhpcy54LnJhbmdlKCkpO1xuICAgICAgdGhpcy5tYXBfZWxlbS5yZW1vdmVSZWN0QnJ1c2goKTtcbiAgICAgIHRoaXMubWFwX2VsZW0udXBkYXRlTGVnZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgdXBkYXRlTWVhblZhbHVlKCkge1xuICAgIGNvbnN0IHkgPSB0aGlzLnk7XG4gICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG4gICAgY29uc3QgZ3JwX21lYW4gPSB0aGlzLl9mb2N1cy5zZWxlY3QoJy5tZWFuJyk7XG4gICAgdGhpcy5tZWFuX3ZhbHVlID0gZ2V0TWVhbih0aGlzLmRhdGEubWFwKGQgPT4gZFtyYXRpb190b191c2VdKSk7XG4gICAgZ3JwX21lYW4uc2VsZWN0KCd0ZXh0JylcbiAgICAgIC5hdHRyKCd5JywgeSh0aGlzLm1lYW5fdmFsdWUpICsgMjApXG4gICAgICAudGV4dChgVmFsZXVyIG1veWVubmUgOiAke01hdGgucm91bmQodGhpcy5tZWFuX3ZhbHVlICogMTApIC8gMTB9YCk7XG4gICAgZ3JwX21lYW4uc2VsZWN0KCcubWVhbl9saW5lJylcbiAgICAgIC5hdHRycyh7IHkxOiB5KHRoaXMubWVhbl92YWx1ZSksIHkyOiB5KHRoaXMubWVhbl92YWx1ZSkgfSk7XG4gICAgZ3JwX21lYW4uc2VsZWN0KCcudHJhbnNwX21lYW5fbGluZScpXG4gICAgICAuYXR0cnMoeyB5MTogeSh0aGlzLm1lYW5fdmFsdWUpLCB5MjogeSh0aGlzLm1lYW5fdmFsdWUpIH0pO1xuICB9XG5cbiAgY2hhbmdlU3R1ZHlab25lKCkge1xuICAgIGNvbnN0IHJhdGlvX3RvX3VzZSA9IHRoaXMucmF0aW9fdG9fdXNlO1xuICAgIHRoaXMuZGF0YSA9IGFwcC5jdXJyZW50X2RhdGEuZmlsdGVyKGZ0ID0+ICEhZnRbcmF0aW9fdG9fdXNlXSk7XG5cbiAgICBpZiAodGhpcy5zZXJpZV9pbnZlcnNlZCkge1xuICAgICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IGJbcmF0aW9fdG9fdXNlXSAtIGFbcmF0aW9fdG9fdXNlXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGF0YS5zb3J0KChhLCBiKSA9PiBhW3JhdGlvX3RvX3VzZV0gLSBiW3JhdGlvX3RvX3VzZV0pO1xuICAgIH1cbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIG5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIHRoaXMucmVmX3ZhbHVlID0gdGhpcy5kYXRhLmZpbmQoXG4gICAgICBmdCA9PiBmdC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbilbcmF0aW9fdG9fdXNlXTtcbiAgICB0aGlzLnguZG9tYWluKHRoaXMuY3VycmVudF9pZHMpO1xuICAgIGNvbnN0IG1pbl9zZXJpZSA9IGQzLm1pbih0aGlzLmRhdGEsIGQgPT4gZFtyYXRpb190b191c2VdKTtcbiAgICBjb25zdCBtYXhfc2VyaWUgPSBkMy5tYXgodGhpcy5kYXRhLCBkID0+IGRbcmF0aW9fdG9fdXNlXSk7XG4gICAgY29uc3Qgb2Zmc2V0X3kgPSAobWF4X3NlcmllIC0gbWluX3NlcmllKSAvIDIwO1xuICAgIHRoaXMueS5kb21haW4oW1xuICAgICAgbWluX3NlcmllIC0gb2Zmc2V0X3ksIG1heF9zZXJpZSxcbiAgICBdKTtcbiAgICB0aGlzLngyLmRvbWFpbih0aGlzLnguZG9tYWluKCkpO1xuICAgIHRoaXMueTIuZG9tYWluKHRoaXMueS5kb21haW4oKSk7XG4gICAgdGhpcy51cGRhdGVNZWFuVmFsdWUoKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIHRoaXMudXBkYXRlQ29udGV4dCgwLCB0aGlzLmRhdGEubGVuZ3RoKTtcblxuICAgIHN2Z19iYXIuc2VsZWN0KCcuYnJ1c2hfYm90dG9tJykuY2FsbCh0aGlzLmJydXNoX2JvdHRvbS5tb3ZlLCB0aGlzLngyLnJhbmdlKCkpO1xuICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgdGhpcy51cGRhdGVUYWJsZVN0YXRzKCk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICB9XG5cbiAgYWRkVmFyaWFibGUoY29kZV92YXJpYWJsZSwgbmFtZV92YXJpYWJsZSkge1xuICAgIC8vIEFkZCB0aGUgdmFyaWFibGUgdG8gdGhlIGlucHV0IGVsZW1lbnQgYWxsb3dpbmcgdG8gY2hvb3NlIHZhcmlhYmxlczpcbiAgICB0aGlzLnNlbGVjX3Zhci5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAuYXR0cigndmFsdWUnLCBjb2RlX3ZhcmlhYmxlKVxuICAgICAgLnRleHQobmFtZV92YXJpYWJsZSk7XG5cbiAgICAvLyBBbmQgdXNlIGl0IGltbWVkaWF0bHk6XG4gICAgdGhpcy5zZWxlY192YXIubm9kZSgpLnZhbHVlID0gY29kZV92YXJpYWJsZTtcbiAgICB0aGlzLnNlbGVjX3Zhci5kaXNwYXRjaCgnY2hhbmdlJyk7XG4gIH1cblxuICByZW1vdmVWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgLy8gQWRkIHRoZSB2YXJpYWJsZSB0byB0aGUgaW5wdXQgZWxlbWVudCBhbGxvd2luZyB0byBjaG9vc2UgdmFyaWFibGVzOlxuICAgIHRoaXMuc2VsZWNfdmFyLnNlbGVjdChgb3B0aW9uW3ZhbHVlPSR7Y29kZV92YXJpYWJsZX1dYCkucmVtb3ZlKCk7XG4gICAgaWYgKHRoaXMucmF0aW9fdG9fdXNlID09PSBjb2RlX3ZhcmlhYmxlKSB7XG4gICAgICB0aGlzLnNlbGVjX3Zhci5ub2RlKCkudmFsdWUgPSB0aGlzLnNlbGVjX3Zhci5zZWxlY3QoJ29wdGlvbicpLm5vZGUoKS52YWx1ZTtcbiAgICAgIHRoaXMuc2VsZWNfdmFyLmRpc3BhdGNoKCdjaGFuZ2UnKTtcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgdGhpcy5yYXRpb190b191c2UgPSBjb2RlX3ZhcmlhYmxlO1xuICB9XG5cbiAgcmVtb3ZlKCkge1xuICAgIHRoaXMuX2ZvY3VzLnJlbW92ZSgpO1xuICAgIHRoaXMuY29udGV4dC5yZW1vdmUoKTtcbiAgICB0aGlzLnNlbGVjX3Zhci5yZW1vdmUoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzLnJlbW92ZSgpO1xuICAgIHRoaXMudGFibGVfc3RhdHMgPSBudWxsO1xuICAgIHRoaXMubWFwX2VsZW0udW5iaW5kQnJ1c2hDbGljaygpO1xuICAgIHRoaXMubWFwX2VsZW0gPSBudWxsO1xuICAgIHN2Z19iYXIuaHRtbCgnJyk7XG4gIH1cblxuICBiaW5kTWFwKG1hcF9lbGVtKSB7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG1hcF9lbGVtO1xuICAgIHRoaXMubWFwX2VsZW0ucmVzZXRDb2xvcnModGhpcy5jdXJyZW50X2lkcyk7XG4gIH1cblxuICB1cGRhdGVUYWJsZVN0YXRzKCkge1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlQWxsKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5hZGRGZWF0dXJlKHRoaXMucHJlcGFyZVRhYmxlU3RhdCgpKTtcbiAgfVxuXG4gIHByZXBhcmVUYWJsZVN0YXQoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy5yYXRpb190b191c2VdKTtcbiAgICByZXR1cm4ge1xuICAgICAgTWluOiBkMy5taW4odmFsdWVzKSxcbiAgICAgIE1heDogZDMubWF4KHZhbHVlcyksXG4gICAgICBNb3llbm5lOiBnZXRNZWFuKHZhbHVlcyksXG4gICAgICBpZDogdGhpcy5yYXRpb190b191c2UsXG4gICAgICBWYXJpYWJsZTogdGhpcy5yYXRpb190b191c2UsXG4gICAgICAnTWEgcsOpZ2lvbic6IHRoaXMucmVmX3ZhbHVlLFxuICAgIH07XG4gIH1cblxuICBtYWtlVGFibGVTdGF0KCkge1xuICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLnByZXBhcmVUYWJsZVN0YXQoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzID0gbmV3IFRhYmxlUmVzdW1lU3RhdChbZmVhdHVyZV0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wLCBtYXRoX3JvdW5kLCBtYXRoX2FicywgUmVjdCwgUHJvcFNpemVyLCBwcmVwYXJlVG9vbHRpcCwgc3ZnUGF0aFRvQ29vcmRzLCBnZXRNZWFuIH0gZnJvbSAnLi8uLi9oZWxwZXJzJztcbmltcG9ydCB7IGNvbG9yX2Rpc2FibGVkLCBjb2xvcl9jb3VudHJpZXMsIGNvbG9yX3N1cCwgY29sb3JfaW5mLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuLy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQgfSBmcm9tICcuLy4uL3ByZXBhcmVfZGF0YSc7XG5pbXBvcnQgeyBzdmdfbWFwIH0gZnJvbSAnLi8uLi9tYXAnO1xuaW1wb3J0IHsgYXBwLCB2YXJpYWJsZXNfaW5mbywgcmVzZXRDb2xvcnMgfSBmcm9tICcuLy4uLy4uL21haW4nO1xuaW1wb3J0IFRhYmxlUmVzdW1lU3RhdCBmcm9tICcuLy4uL3RhYmxlUmVzdW1lU3RhdCc7XG5cbmNvbnN0IHN2Z19iYXIgPSBkMy5zZWxlY3QoJyNzdmdfYmFyJyk7XG5jb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA0MCwgbGVmdDogMzAgfTtcblxuY29uc3Qgd2lkdGggPSArc3ZnX2Jhci5hdHRyKCd3aWR0aCcpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG4gIGhlaWdodCA9ICtzdmdfYmFyLmF0dHIoJ2hlaWdodCcpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbmV4cG9ydCBjbGFzcyBCdWJibGVDaGFydDEge1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIC8vIFNldCB0aGUgbWluaW11bSBudW1iZXIgb2YgdmFyaWFibGVzIHRvIGtlZXAgc2VsZWN0ZWQgZm9yIHRoaXMga2luZCBvZiBjaGFydDpcbiAgICBhcHAuY3VycmVudF9jb25maWcubmJfdmFyID0gMTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBhdmFpbGFibGVfcmF0aW9zID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvO1xuICAgIGNvbnN0IGF2YWlsYWJsZV9udW1zID0gYXBwLmN1cnJlbnRfY29uZmlnLm51bTtcbiAgICBjb25zdCByYXRpb190b191c2UgPSBhdmFpbGFibGVfcmF0aW9zWzBdO1xuICAgIGNvbnN0IHN0b2NrX3RvX3VzZSA9IGF2YWlsYWJsZV9udW1zWzBdO1xuICAgIHRoaXMucmF0aW9fdG9fdXNlID0gcmF0aW9fdG9fdXNlO1xuICAgIHRoaXMuc3RvY2tfdG9fdXNlID0gc3RvY2tfdG9fdXNlO1xuICAgIHRoaXMubXlfcmVnaW9uX3ZhbHVlID0gcmVmX2RhdGEuZmluZChkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3JhdGlvX3RvX3VzZV07XG4gICAgdGhpcy5kYXRhID0gcmVmX2RhdGEuZmlsdGVyKGZ0ID0+ICEhZnRbcmF0aW9fdG9fdXNlXSkuc2xpY2UoKTtcbiAgICB0aGlzLmRhdGFcbiAgICAgIC5mb3JFYWNoKChmdCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgZnQuZGlzdCA9IG1hdGhfYWJzKCtmdFtyYXRpb190b191c2VdIC0gdGhpcy5teV9yZWdpb25fdmFsdWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IGIuZGlzdCAtIGEuZGlzdCk7XG4gICAgdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkLmlkKTtcbiAgICByZXNldENvbG9ycygpO1xuICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IFtdO1xuICAgIHRoaXMuc2VyaWVfaW52ZXJzZWQgPSBmYWxzZTtcbiAgICBjb25zdCBkcmF3X2dyb3VwID0gc3ZnX2JhclxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKTtcbiAgICBkcmF3X2dyb3VwLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoeyBjbGFzczogJ2F4aXMgYXhpcy0teCcsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgwLCAke2hlaWdodCAvIDJ9KWAgfSk7XG4gICAgdGhpcy5kcmF3X2dyb3VwID0gZHJhd19ncm91cDtcblxuICAgIC8vIFByZXBhcmUgdGhlIHRvb2x0aXAgZGlzcGxheWVkIG9uIG1vdXNlb3ZlcjpcbiAgICBwcmVwYXJlVG9vbHRpcChzdmdfYmFyKTtcblxuICAgIC8vIENvbXB1dGUgdGhlIFwiY29tcGzDqXR1ZGVcIiB2YWx1ZSBmb3IgdGhpcyByYXRpbzpcbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIFt0aGlzLnJhdGlvX3RvX3VzZV0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBcImNvbXBsw6l0dWRlXCIgdGV4dDpcbiAgICB0aGlzLmNvbXBsZXR1ZGUgPSBzdmdfYmFyLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cnMoeyBpZDogJ2NoYXJ0X2NvbXBsZXR1ZGUnLCB4OiA2MCwgeTogNDAgfSlcbiAgICAgIC5zdHlsZXMoeyAnZm9udC1mYW1pbHknOiAnXFwnU2lnbmlrYVxcJywgc2Fucy1zZXJpZicgfSlcbiAgICAgIC50ZXh0KGBDb21wbMOpdHVkZSA6ICR7dGhpcy5jb21wbGV0dWRlX3ZhbHVlfSVgKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgYnV0dG9uIGFsbG93aW5nIHRvIGNob29zZVxuICAgIC8vIGlmIHRoZSBjb2xvcnMgYXJlIGludmVyc2VkXG4gICAgLy8gKGxpa2UgZ3JlZW4vcmVkIGZvciBzdXBlcmlvci9pbmZlcmlvciByZWdpb25zKVxuICAgIHN2Z19iYXIuYXBwZW5kKCdpbWFnZScpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB4OiB3aWR0aCArIG1hcmdpbi5sZWZ0ICsgNSxcbiAgICAgICAgeTogMjMyLjUsXG4gICAgICAgIHdpZHRoOiAxNSxcbiAgICAgICAgaGVpZ2h0OiAxNSxcbiAgICAgICAgJ3hsaW5rOmhyZWYnOiAnaW1nL3JldmVyc2VfcGx1cy5wbmcnLFxuICAgICAgICBpZDogJ2ltZ19yZXZlcnNlJyxcbiAgICAgIH0pXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnNlcmllX2ludmVyc2VkID0gIXRoaXMuc2VyaWVfaW52ZXJzZWQ7XG4gICAgICAgIHRoaXMuYXBwbHlTZWxlY3Rpb24odGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLmxlbmd0aCk7XG4gICAgICB9KTtcblxuXG4gICAgLy8gQ3JlYXRlIHRoZSBzZWN0aW9uIGNvbnRhaW5pbmcgdGhlIGlucHV0IGVsZW1lbnQgYWxsb3dpbmcgdG8gY2hvc2VcbiAgICAvLyBob3cgbWFueSBcImNsb3NlXCIgcmVnaW9ucyB3ZSB3YW50IHRvIGhpZ2hsaWdodC5cbiAgICBjb25zdCBzZWxlY3Rpb25fY2xvc2UgPSBkMy5zZWxlY3Qoc3ZnX2Jhci5ub2RlKCkucGFyZW50RWxlbWVudClcbiAgICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgICAuYXR0cignaWQnLCAnbWVudV9zZWxlY3Rpb24nKVxuICAgICAgLnN0eWxlcyh7IHRvcDogJy0xMDBweCcsICdtYXJnaW4tbGVmdCc6ICczMHB4JywgcG9zaXRpb246ICdyZWxhdGl2ZScgfSlcbiAgICAgIC5hcHBlbmQoJ3AnKTtcblxuICAgIHNlbGVjdGlvbl9jbG9zZS5hcHBlbmQoJ3NwYW4nKVxuICAgICAgLnByb3BlcnR5KCd2YWx1ZScsICdjbG9zZScpXG4gICAgICAuYXR0cnMoeyB2YWx1ZTogJ2Nsb3NlJywgY2xhc3M6ICd0eXBlX3NlbGVjdGlvbiBzcXVhcmUgY2hlY2tlZCcgfSk7XG4gICAgc2VsZWN0aW9uX2Nsb3NlLmFwcGVuZCgnc3BhbicpXG4gICAgICAuYXR0cnMoeyBjbGFzczogJ2xhYmVsX2NoaycgfSlcbiAgICAgIC5odG1sKCdMZXMnKTtcbiAgICBzZWxlY3Rpb25fY2xvc2UuYXBwZW5kKCdpbnB1dCcpXG4gICAgICAuYXR0cnMoeyBjbGFzczogJ25iX3NlbGVjdCcsIHR5cGU6ICdudW1iZXInIH0pXG4gICAgICAucHJvcGVydHkoJ3ZhbHVlJywgNSk7XG4gICAgc2VsZWN0aW9uX2Nsb3NlLmFwcGVuZCgnc3BhbicpXG4gICAgICAuYXR0cnMoeyBjbGFzczogJ2xhYmVsX2NoaycgfSlcbiAgICAgIC5odG1sKCdyw6lnaW9ucyBsZXMgcGx1cyBwcm9jaGVzJyk7XG5cbiAgICB0aGlzLmJpbmRNZW51KCk7XG5cbiAgICAvL1xuICAgIGNvbnN0IGhlYWRlcl9iYXJfc2VjdGlvbiA9IGQzLnNlbGVjdCgnI2hlYWRlcl9jaGFydCcpO1xuXG4gICAgdGhpcy5zZWxlY192YXIgPSBoZWFkZXJfYmFyX3NlY3Rpb25cbiAgICAgIC5pbnNlcnQoJ3NlbGVjdCcsICcjaW1nX3RhYmxlJylcbiAgICAgIC5hdHRycyh7IGNsYXNzOiAndGl0bGVfdmFyaWFibGUnIH0pXG4gICAgICAuc3R5bGVzKHtcbiAgICAgICAgJ2ZvbnQtZmFtaWx5JzogJ1xcJ1NpZ25pa2FcXCcsIHNhbnMtc2VyaWYnLFxuICAgICAgICAnZm9udC13ZWlnaHQnOiAnODAwJyxcbiAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxNHB4JyxcbiAgICAgICAgJ21hcmdpbi10b3AnOiAnMTJweCcsXG4gICAgICAgICdtYXJnaW4tbGVmdCc6ICc0MHB4JyxcbiAgICAgICAgZmxvYXQ6ICdsZWZ0JyxcbiAgICAgIH0pO1xuXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbl9pID0gYXZhaWxhYmxlX3JhdGlvcy5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gICAgICB0aGlzLnNlbGVjX3Zhci5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAgIC5hdHRyKCd2YWx1ZScsIGF2YWlsYWJsZV9yYXRpb3NbaV0pXG4gICAgICAgIC50ZXh0KGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpb19wcmV0dHlfbmFtZVtpXSk7XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY192YXIub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGNvZGVfdmFyaWFibGUgPSB0aGlzLnZhbHVlO1xuICAgICAgc2VsZi5jaGFuZ2VWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKTtcbiAgICAgIHNlbGYuY2hhbmdlU3R1ZHlab25lKCk7XG4gICAgICBzZWxmLnVwZGF0ZUNvbXBsZXR1ZGUoKTtcbiAgICB9KTtcblxuICAgIHRoaXMubWFrZVRhYmxlU3RhdCgpO1xuICB9XG5cbiAgYXBwbHlTZWxlY3Rpb24obmIpIHtcbiAgICBhcHAuY29sb3JzID0ge307XG4gICAgaWYgKG5iID4gMCkge1xuICAgICAgY29uc3QgcmF0aW9fdG9fdXNlID0gdGhpcy5yYXRpb190b191c2U7XG5cbiAgICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IHRoaXMuZGF0YS5tYXAoZCA9PiAoe1xuICAgICAgICBkaXN0OiBkLmRpc3QsXG4gICAgICAgIHJhdGlvOiArZFtyYXRpb190b191c2VdLFxuICAgICAgICBpZDogZC5pZCxcbiAgICAgIH0pKTtcblxuICAgICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLnNvcnQoKGEsIGIpID0+IGEuZGlzdCAtIGIuZGlzdCk7XG4gICAgICB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24gPSB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24uc2xpY2UoMSwgbmIgKyAxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uID0gW107XG4gICAgfVxuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICB9XG5cbiAgdXBkYXRlKCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGRhdGEgPSBzZWxmLmRhdGE7XG4gICAgY29uc3QgaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IHNlbGYuaGlnaGxpZ2h0X3NlbGVjdGlvbjtcbiAgICBjb25zdCBteV9yZWdpb25fdmFsdWUgPSBzZWxmLm15X3JlZ2lvbl92YWx1ZTtcbiAgICBjb25zdCByYXRpb190b191c2UgPSBzZWxmLnJhdGlvX3RvX3VzZTtcbiAgICBjb25zdCBzdG9ja190b191c2UgPSBzZWxmLnN0b2NrX3RvX3VzZTtcblxuICAgIGxldCBfbWluO1xuICAgIGxldCBfbWF4O1xuICAgIGlmIChoaWdobGlnaHRfc2VsZWN0aW9uLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGRpc3RfbWluID0gbWF0aF9hYnMobXlfcmVnaW9uX3ZhbHVlIC0gK2QzLm1pbihoaWdobGlnaHRfc2VsZWN0aW9uLCBkID0+IGQucmF0aW8pKTtcbiAgICAgIGNvbnN0IGRpc3RfbWF4ID0gbWF0aF9hYnMoK2QzLm1heChoaWdobGlnaHRfc2VsZWN0aW9uLCBkID0+IGQucmF0aW8pIC0gbXlfcmVnaW9uX3ZhbHVlKTtcbiAgICAgIGNvbnN0IGRpc3RfYXhpcyA9IE1hdGgubWF4KGRpc3RfbWluLCBkaXN0X21heCk7XG4gICAgICBjb25zdCBtYXJnaW5fbWluX21heCA9IG1hdGhfcm91bmQoZGlzdF9heGlzKSAvIDg7XG4gICAgICBfbWluID0gbXlfcmVnaW9uX3ZhbHVlIC0gZGlzdF9heGlzIC0gbWFyZ2luX21pbl9tYXg7XG4gICAgICBfbWF4ID0gbXlfcmVnaW9uX3ZhbHVlICsgZGlzdF9heGlzICsgbWFyZ2luX21pbl9tYXg7XG4gICAgICBpZiAoX21pbiA+IF9tYXgpIHsgY29uc29sZS5sb2coJ2EnKTsgW19taW4sIF9tYXhdID0gW19tYXgsIF9taW5dOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRpc3RfbWluID0gbWF0aF9hYnMobXlfcmVnaW9uX3ZhbHVlIC0gZDMubWluKGRhdGEsIGQgPT4gZFtyYXRpb190b191c2VdKSk7XG4gICAgICBjb25zdCBkaXN0X21heCA9IG1hdGhfYWJzKGQzLm1heChkYXRhLCBkID0+IGRbcmF0aW9fdG9fdXNlXSkgLSBteV9yZWdpb25fdmFsdWUpO1xuICAgICAgY29uc3QgZGlzdF9heGlzID0gTWF0aC5tYXgoZGlzdF9taW4sIGRpc3RfbWF4KTtcbiAgICAgIGNvbnN0IG1hcmdpbl9taW5fbWF4ID0gbWF0aF9yb3VuZChkaXN0X2F4aXMpIC8gODtcbiAgICAgIF9taW4gPSBteV9yZWdpb25fdmFsdWUgLSBkaXN0X2F4aXMgLSBtYXJnaW5fbWluX21heDtcbiAgICAgIF9tYXggPSBteV9yZWdpb25fdmFsdWUgKyBkaXN0X2F4aXMgKyBtYXJnaW5fbWluX21heDtcbiAgICB9XG5cbiAgICB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24uZm9yRWFjaCgoZWxlbSkgPT4ge1xuICAgICAgYXBwLmNvbG9yc1tlbGVtLmlkXSA9IGNvbXAoZWxlbS5yYXRpbywgbXlfcmVnaW9uX3ZhbHVlLCB0aGlzLnNlcmllX2ludmVyc2VkKTtcbiAgICB9KTtcblxuICAgIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgY29uc3QgcHJvcF9zaXplciA9IG5ldyBQcm9wU2l6ZXIoZDMubWF4KGRhdGEsIGQgPT4gZFtzdG9ja190b191c2VdKSwgMzApO1xuICAgIGNvbnN0IHhTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oW19taW4sIF9tYXhdKVxuICAgICAgLnJhbmdlKFswLCB3aWR0aF0pO1xuXG4gICAgdGhpcy5kcmF3X2dyb3VwLnNlbGVjdCgnZy5heGlzLS14JylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbigyMjUpXG4gICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkpO1xuXG4gICAgY29uc3QgYnViYmxlcyA9IHRoaXMuZHJhd19ncm91cC5zZWxlY3RBbGwoJy5idWJibGUnKVxuICAgICAgLmRhdGEoZGF0YSwgZCA9PiBkLmlkKTtcblxuICAgIGJ1YmJsZXNcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbigyMjUpXG4gICAgICAuYXR0cnMoKGQpID0+IHtcbiAgICAgICAgbGV0IHhfdmFsdWUgPSB4U2NhbGUoZFtyYXRpb190b191c2VdKTtcbiAgICAgICAgaWYgKHhfdmFsdWUgPiB3aWR0aCkgeF92YWx1ZSA9IHdpZHRoICsgMjAwO1xuICAgICAgICBlbHNlIGlmICh4X3ZhbHVlIDwgMCkgeF92YWx1ZSA9IC0yMDA7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY3g6IHhfdmFsdWUsXG4gICAgICAgICAgY3k6IGhlaWdodCAvIDIsXG4gICAgICAgICAgcjogcHJvcF9zaXplci5zY2FsZShkW3N0b2NrX3RvX3VzZV0pLFxuICAgICAgICB9O1xuICAgICAgfSlcbiAgICAgIC5zdHlsZXMoZCA9PiAoe1xuICAgICAgICBmaWxsOiBhcHAuY29sb3JzW2QuaWRdIHx8IGNvbG9yX2NvdW50cmllcyxcbiAgICAgICAgJ2ZpbGwtb3BhY2l0eSc6IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24gPyAxIDogYXBwLmNvbG9yc1tkLmlkXSA/IDAuNyA6IDAuMyxcbiAgICAgICAgc3Ryb2tlOiAnZGFya2dyYXknLFxuICAgICAgICAnc3Ryb2tlLXdpZHRoJzogMC43NSxcbiAgICAgICAgJ3N0cm9rZS1vcGFjaXR5JzogMC43NSxcbiAgICAgIH0pKTtcblxuICAgIGJ1YmJsZXNcbiAgICAgIC5lbnRlcigpXG4gICAgICAuaW5zZXJ0KCdjaXJjbGUnKVxuICAgICAgLnN0eWxlcyhkID0+ICh7XG4gICAgICAgIGZpbGw6IGFwcC5jb2xvcnNbZC5pZF0gfHwgY29sb3JfY291bnRyaWVzLFxuICAgICAgICAnZmlsbC1vcGFjaXR5JzogZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA/IDEgOiBhcHAuY29sb3JzW2QuaWRdID8gMC43IDogMC4zLFxuICAgICAgICBzdHJva2U6ICdkYXJrZ3JheScsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAwLjc1LFxuICAgICAgICAnc3Ryb2tlLW9wYWNpdHknOiAwLjc1LFxuICAgICAgfSkpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjI1KVxuICAgICAgLmF0dHJzKChkKSA9PiB7XG4gICAgICAgIGxldCB4X3ZhbHVlID0geFNjYWxlKGRbcmF0aW9fdG9fdXNlXSk7XG4gICAgICAgIGlmICh4X3ZhbHVlID4gd2lkdGgpIHhfdmFsdWUgPSB3aWR0aCArIDIwMDtcbiAgICAgICAgZWxzZSBpZiAoeF92YWx1ZSA8IDApIHhfdmFsdWUgPSAtMjAwO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNsYXNzOiAnYnViYmxlJyxcbiAgICAgICAgICBjeDogeF92YWx1ZSxcbiAgICAgICAgICBjeTogaGVpZ2h0IC8gMixcbiAgICAgICAgICByOiBwcm9wX3NpemVyLnNjYWxlKGRbc3RvY2tfdG9fdXNlXSksXG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd19ncm91cC5zZWxlY3RBbGwoJy5idWJibGUnKVxuICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgICAgICAgICAgc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJykuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgICBjb25zdCB0b29sdGlwID0gc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJyk7XG4gICAgICAgICAgICBjb25zdCBfcmF0aW9fdG9fdXNlID0gc2VsZi5yYXRpb190b191c2U7XG4gICAgICAgICAgICBjb25zdCBfc3RvY2tfdG9fdXNlID0gc2VsZi5zdG9ja190b191c2U7XG4gICAgICAgICAgICB0b29sdGlwLnNlbGVjdCgncmVjdCcpLmF0dHJzKHsgd2lkdGg6IDAsIGhlaWdodDogMCB9KTtcbiAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgICAgLnNlbGVjdCgndGV4dC5pZF9mZWF0dXJlJylcbiAgICAgICAgICAgICAgLnRleHQoYCR7ZC5pZH1gKTtcbiAgICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCd0ZXh0LnZhbHVlX2ZlYXR1cmUxJylcbiAgICAgICAgICAgICAgLnRleHQoYFJhdGlvOiAke01hdGgucm91bmQoZFtfcmF0aW9fdG9fdXNlXSAqIDEwKSAvIDEwfWApO1xuICAgICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTInKVxuICAgICAgICAgICAgICAudGV4dChgU3RvY2s6ICR7TWF0aC5yb3VuZChkW19zdG9ja190b191c2VdICogMTApIC8gMTB9YCk7XG4gICAgICAgICAgICBjb25zdCBiID0gdG9vbHRpcC5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgICB0b29sdGlwLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgICAgIC5hdHRycyh7XG4gICAgICAgICAgICAgICAgd2lkdGg6IGIud2lkdGggKyAyMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IGIuaGVpZ2h0ICsgNy41LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRvb2x0aXBcbiAgICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtbZDMubW91c2UodGhpcylbMF0gLSA1LCBkMy5tb3VzZSh0aGlzKVsxXSAtIDQ1XX0pYCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICBidWJibGVzLmV4aXQoKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjI1KS5yZW1vdmUoKTtcbiAgfVxuXG4gIHVwZGF0ZUNvbXBsZXR1ZGUoKSB7XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCBbdGhpcy5yYXRpb190b191c2VdKTtcblxuICAgIHRoaXMuY29tcGxldHVkZVxuICAgICAgLnRleHQoYENvbXBsw6l0dWRlIDogJHt0aGlzLmNvbXBsZXR1ZGVfdmFsdWV9JWApO1xuICB9XG5cbiAgdXBkYXRlTWFwUmVnaW8oKSB7XG4gICAgaWYgKCF0aGlzLm1hcF9lbGVtKSByZXR1cm47XG4gICAgdGhpcy5tYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiAodGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV0pID4gLTFcbiAgICAgICAgPyAoYXBwLmNvbG9yc1tkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dXSB8fCBjb2xvcl9jb3VudHJpZXMpXG4gICAgICAgIDogY29sb3JfZGlzYWJsZWQpKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrTWFwKGQsIHBhcmVudCkge1xuICAgIGNvbnN0IGlkID0gZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXTtcbiAgICBpZiAodGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGlkKSA8IDAgfHwgaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pIHJldHVybjtcbiAgICBpZiAoYXBwLmNvbG9yc1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBjbGlja2VkIGZlYXR1cmUgZnJvbSB0aGUgY29sb3JlZCBzZWxlY3Rpb24gb24gdGhlIGNoYXJ0OlxuICAgICAgY29uc3QgaWRfdG9fcmVtb3ZlID0gdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uXG4gICAgICAgIC5tYXAoKGZ0LCBpKSA9PiAoZnQuaWQgPT09IGlkID8gaSA6IG51bGwpKS5maWx0ZXIoZnQgPT4gZnQpWzBdO1xuICAgICAgdGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLnNwbGljZShpZF90b19yZW1vdmUsIDEpO1xuICAgICAgLy8gQ2hhbmdlIGl0cyBjb2xvciBpbiB0aGUgZ2xvYmFsIGNvbG9ycyBvYmplY3Q6XG4gICAgICBhcHAuY29sb3JzW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIENoYW5nZSB0aGUgY29sb3Igb24gdGhlIG1hcDpcbiAgICAgIGQzLnNlbGVjdChwYXJlbnQpLmF0dHIoJ2ZpbGwnLCBjb2xvcl9jb3VudHJpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2YWx1ZSA9ICtkLnByb3BlcnRpZXNbdGhpcy5yYXRpb190b191c2VdO1xuICAgICAgY29uc3QgY29sb3IgPSBjb21wKHZhbHVlLCB0aGlzLm15X3JlZ2lvbl92YWx1ZSwgdGhpcy5zZXJpZV9pbnZlcnNlZCk7XG4gICAgICAvLyBhcHAuY29sb3JzW2lkXSA9IGNvbG9yO1xuICAgICAgLy8gQ2hhbmdlIHRoZSBjb2xvciBvbiB0aGUgbWFwOlxuICAgICAgZDMuc2VsZWN0KHBhcmVudCkuYXR0cignZmlsbCcsIGNvbG9yKTtcbiAgICAgIC8vIEFkZCB0aGUgY2xpY2tlZCBmZWF0dXJlIG9uIHRoZSBjb2xvcmVkIHNlbGVjdGlvbiBvbiB0aGUgY2hhcnQ6XG4gICAgICB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24ucHVzaCh7XG4gICAgICAgIGlkLFxuICAgICAgICByYXRpbzogdmFsdWUsXG4gICAgICAgIGRpc3Q6IG1hdGhfYWJzKHZhbHVlIC0gdGhpcy5teV9yZWdpb25fdmFsdWUpLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbi5zb3J0KChhLCBiKSA9PiBhLmRpc3QgLSBiLmRpc3QpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICB1cGRhdGVDaGFuZ2VSZWdpb24oKSB7XG4gICAgaWYgKGFwcC5jdXJyZW50X2NvbmZpZy5maWx0ZXJfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY2hhbmdlU3R1ZHlab25lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubWFwX2VsZW0udXBkYXRlTGVnZW5kKCk7XG4gICAgICB0aGlzLm15X3JlZ2lvbl92YWx1ZSA9IHRoaXMuZGF0YS5maW5kKFxuICAgICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMucmF0aW9fdG9fdXNlXTtcbiAgICAgIHRoaXMuZGF0YVxuICAgICAgICAuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgICBmdC5kaXN0ID0gbWF0aF9hYnMoK2Z0W3RoaXMucmF0aW9fdG9fdXNlXSAtIHRoaXMubXlfcmVnaW9uX3ZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB0aGlzLnVwZGF0ZVRhYmxlU3RhdHMoKTtcbiAgICAgIHRoaXMuYXBwbHlTZWxlY3Rpb24odGhpcy5oaWdobGlnaHRfc2VsZWN0aW9uLmxlbmd0aCk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlU3R1ZHlab25lKCkge1xuICAgIHRoaXMubWFwX2VsZW0udXBkYXRlTGVnZW5kKCk7XG4gICAgdGhpcy5teV9yZWdpb25fdmFsdWUgPSBhcHAuY3VycmVudF9kYXRhLmZpbmQoXG4gICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMucmF0aW9fdG9fdXNlXTtcbiAgICB0aGlzLmRhdGEgPSBhcHAuY3VycmVudF9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMucmF0aW9fdG9fdXNlXSkuc2xpY2UoKTtcbiAgICB0aGlzLmRhdGFcbiAgICAgIC5mb3JFYWNoKChmdCkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgZnQuZGlzdCA9IG1hdGhfYWJzKCtmdFt0aGlzLnJhdGlvX3RvX3VzZV0gLSB0aGlzLm15X3JlZ2lvbl92YWx1ZSk7XG4gICAgICB9KTtcbiAgICB0aGlzLmRhdGEuc29ydCgoYSwgYikgPT4gYi5kaXN0IC0gYS5kaXN0KTtcbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIGNvbnN0IHRlbXAgPSB0aGlzLmhpZ2hsaWdodF9zZWxlY3Rpb24ubGVuZ3RoO1xuICAgIHRoaXMuaGlnaGxpZ2h0X3NlbGVjdGlvbiA9IFtdO1xuICAgIHRoaXMudXBkYXRlVGFibGVTdGF0cygpO1xuICAgIHRoaXMuYXBwbHlTZWxlY3Rpb24odGVtcCk7XG4gIH1cblxuICBjaGFuZ2VWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgdGhpcy5yYXRpb190b191c2UgPSBjb2RlX3ZhcmlhYmxlO1xuICAgIHRoaXMuc3RvY2tfdG9fdXNlID0gdmFyaWFibGVzX2luZm8uZmluZChkID0+IGQucmF0aW8gPT09IGNvZGVfdmFyaWFibGUpLm51bTtcbiAgfVxuXG5cbiAgYWRkVmFyaWFibGUoY29kZV92YXJpYWJsZSwgbmFtZV92YXJpYWJsZSkge1xuICAgIC8vIEFkZCB0aGUgdmFyaWFibGUgdG8gdGhlIGlucHV0IGVsZW1lbnQgYWxsb3dpbmcgdG8gY2hvb3NlIHZhcmlhYmxlczpcbiAgICB0aGlzLnNlbGVjX3Zhci5hcHBlbmQoJ29wdGlvbicpXG4gICAgICAuYXR0cigndmFsdWUnLCBjb2RlX3ZhcmlhYmxlKVxuICAgICAgLnRleHQobmFtZV92YXJpYWJsZSk7XG5cbiAgICAvLyBBbmQgdXNlIGl0IGltbWVkaWF0bHk6XG4gICAgdGhpcy5zZWxlY192YXIubm9kZSgpLnZhbHVlID0gY29kZV92YXJpYWJsZTtcbiAgICB0aGlzLnNlbGVjX3Zhci5kaXNwYXRjaCgnY2hhbmdlJyk7XG4gIH1cblxuICByZW1vdmVWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgLy8gQWRkIHRoZSB2YXJpYWJsZSB0byB0aGUgaW5wdXQgZWxlbWVudCBhbGxvd2luZyB0byBjaG9vc2UgdmFyaWFibGVzOlxuICAgIHRoaXMuc2VsZWNfdmFyLnNlbGVjdChgb3B0aW9uW3ZhbHVlPSR7Y29kZV92YXJpYWJsZX1dYCkucmVtb3ZlKCk7XG4gICAgaWYgKHRoaXMucmF0aW9fdG9fdXNlID09PSBjb2RlX3ZhcmlhYmxlKSB7XG4gICAgICB0aGlzLnNlbGVjX3Zhci5ub2RlKCkudmFsdWUgPSB0aGlzLnNlbGVjX3Zhci5zZWxlY3QoJ29wdGlvbicpLm5vZGUoKS52YWx1ZTtcbiAgICAgIHRoaXMuc2VsZWNfdmFyLmRpc3BhdGNoKCdjaGFuZ2UnKTtcbiAgICB9XG4gIH1cblxuICBiaW5kTWVudSgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBtZW51ID0gZDMuc2VsZWN0KCcjbWVudV9zZWxlY3Rpb24nKTtcbiAgICBjb25zdCBhcHBseWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIC8vIHNlbGYubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICBjb25zdCB2YWx1ZSA9ICt0aGlzLnZhbHVlO1xuICAgICAgaWYgKHZhbHVlIDwgMSkge1xuICAgICAgICB0aGlzLnZhbHVlID0gMTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgc2VsZi5hcHBseVNlbGVjdGlvbih2YWx1ZSk7XG4gICAgfTtcbiAgICBtZW51LnNlbGVjdCgnLm5iX3NlbGVjdCcpXG4gICAgICAub24oJ2NoYW5nZScsIGFwcGx5Y2hhbmdlKTtcbiAgICBtZW51LnNlbGVjdCgnLm5iX3NlbGVjdCcpXG4gICAgICAub24oJ3doZWVsJywgYXBwbHljaGFuZ2UpO1xuICAgIG1lbnUuc2VsZWN0KCcubmJfc2VsZWN0JylcbiAgICAgIC5vbigna2V5dXAnLCBhcHBseWNoYW5nZSk7XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5tYXBfZWxlbS51bmJpbmRCcnVzaENsaWNrKCk7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG51bGw7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5yZW1vdmUoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzID0gbnVsbDtcbiAgICB0aGlzLnNlbGVjX3Zhci5yZW1vdmUoKTtcbiAgICBzdmdfYmFyLmh0bWwoJycpO1xuICB9XG5cbiAgYmluZE1hcChtYXBfZWxlbSkge1xuICAgIHRoaXMubWFwX2VsZW0gPSBtYXBfZWxlbTtcbiAgICB0aGlzLm1hcF9lbGVtLnJlc2V0Q29sb3JzKHRoaXMuY3VycmVudF9pZHMpO1xuICAgIGQzLnNlbGVjdCgnI21lbnVfc2VsZWN0aW9uJykuc2VsZWN0KCcubmJfc2VsZWN0JykuZGlzcGF0Y2goJ2NoYW5nZScpO1xuICB9XG5cbiAgdXBkYXRlVGFibGVTdGF0cygpIHtcbiAgICB0aGlzLnRhYmxlX3N0YXRzLnJlbW92ZUFsbCgpO1xuICAgIHRoaXMudGFibGVfc3RhdHMuYWRkRmVhdHVyZSh0aGlzLnByZXBhcmVUYWJsZVN0YXQoKSk7XG4gIH1cblxuICBwcmVwYXJlVGFibGVTdGF0KCkge1xuICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMucmF0aW9fdG9fdXNlXSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIE1pbjogZDMubWluKHZhbHVlcyksXG4gICAgICBNYXg6IGQzLm1heCh2YWx1ZXMpLFxuICAgICAgTW95ZW5uZTogZ2V0TWVhbih2YWx1ZXMpLFxuICAgICAgaWQ6IHRoaXMucmF0aW9fdG9fdXNlLFxuICAgICAgVmFyaWFibGU6IHRoaXMucmF0aW9fdG9fdXNlLFxuICAgICAgJ01hIHLDqWdpb24nOiB0aGlzLm15X3JlZ2lvbl92YWx1ZSxcbiAgICB9O1xuICB9XG5cbiAgbWFrZVRhYmxlU3RhdCgpIHtcbiAgICBjb25zdCBmZWF0dXJlID0gdGhpcy5wcmVwYXJlVGFibGVTdGF0KCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cyA9IG5ldyBUYWJsZVJlc3VtZVN0YXQoW2ZlYXR1cmVdKTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgY29udGV4dE1lbnUge1xuICBjb25zdHJ1Y3RvcihpdGVtcykge1xuICAgIGlmIChpdGVtcykge1xuICAgICAgdGhpcy5zZXRJdGVtcyhpdGVtcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaXRlbXMgPSBbXTtcbiAgICB9XG4gIH1cblxuICBhZGRJdGVtKGl0ZW0pIHtcbiAgICB0aGlzLml0ZW1zLnB1c2goe1xuICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgYWN0aW9uOiBpdGVtLmFjdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIHJlbW92ZUl0ZW0obmFtZSkge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLml0ZW1zLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICAgIGlmICh0aGlzLml0ZW1zW2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgdGhpcy5pdGVtcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNldEl0ZW1zKGl0ZW1zKSB7XG4gICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwLCBuYl9pdGVtcyA9IGl0ZW1zLmxlbmd0aDsgaSA8IG5iX2l0ZW1zOyBpKyspIHtcbiAgICAgIGlmIChpdGVtc1tpXS5uYW1lICYmIGl0ZW1zW2ldLmFjdGlvbikge1xuICAgICAgICB0aGlzLmFkZEl0ZW0oaXRlbXNbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHNob3dNZW51KGV2ZW50LCBwYXJlbnQsIGl0ZW1zLCBwb3NpdGlvbikge1xuICAgIGlmIChldmVudC5wcmV2ZW50RGVmYXVsdCkgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICBpZiAoZXZlbnQuc3RvcFByb3BhZ2F0aW9uKSBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICBpZiAodGhpcy5ET01vYmopIHtcbiAgICAgIHRoaXMuaGlkZU1lbnUoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGl0ZW1zKSB7XG4gICAgICB0aGlzLnNldEl0ZW1zKGl0ZW1zKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXRNZW51KHBhcmVudCk7XG4gICAgaWYgKCFwb3NpdGlvbikge1xuICAgICAgdGhpcy5ET01vYmouc3R5bGUudG9wID0gYCR7ZXZlbnQuY2xpZW50WSArIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wfXB4YDtcbiAgICAgIHRoaXMuRE9Nb2JqLnN0eWxlLmxlZnQgPSBgJHtldmVudC5jbGllbnRYfXB4YDtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5ET01vYmouc3R5bGUudG9wID0gYCR7cG9zaXRpb25bMV19cHhgO1xuICAgICAgdGhpcy5ET01vYmouc3R5bGUubGVmdCA9IGAke3Bvc2l0aW9uWzBdfXB4YDtcbiAgICB9XG4gICAgdGhpcy5kaXNwbGF5ZWQgPSB0cnVlO1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLmhpZGVNZW51KCkpO1xuICAgIH0sIDE1MCk7XG4gIH1cblxuICBoaWRlTWVudSgpIHtcbiAgICBpZiAodGhpcy5ET01vYmogJiYgdGhpcy5ET01vYmoucGFyZW50RWxlbWVudCAmJiB0aGlzLkRPTW9iai5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKSB7XG4gICAgICB0aGlzLkRPTW9iai5wYXJlbnRFbGVtZW50LnJlbW92ZUNoaWxkKHRoaXMuRE9Nb2JqKTtcbiAgICAgIHRoaXMuRE9Nb2JqID0gbnVsbDtcbiAgICB9XG4gICAgdGhpcy5kaXNwbGF5ZWQgPSBmYWxzZTtcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGlkZU1lbnUpO1xuICB9XG5cbiAgaW5pdE1lbnUocGFyZW50KSB7XG4gICAgaWYgKHRoaXMuRE9Nb2JqICYmIHRoaXMuRE9Nb2JqLnBhcmVudEVsZW1lbnQgJiYgdGhpcy5ET01vYmoucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCkge1xuICAgICAgdGhpcy5ET01vYmoucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLkRPTW9iaik7XG4gICAgICB0aGlzLkRPTW9iaiA9IG51bGw7XG4gICAgfVxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBjb25zdCBsaXN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndWwnKTtcbiAgICBtZW51LmNsYXNzTmFtZSA9ICdjb250ZXh0LW1lbnUnO1xuICAgIG1lbnUuYXBwZW5kQ2hpbGQobGlzdCk7XG4gICAgZm9yIChsZXQgaSA9IDAsIG5iX2l0ZW0gPSB0aGlzLml0ZW1zLmxlbmd0aDsgaSA8IG5iX2l0ZW07IGkrKykge1xuICAgICAgY29uc3QgaXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG4gICAgICBpdGVtLnNldEF0dHJpYnV0ZSgnZGF0YS1pbmRleCcsIGkpO1xuICAgICAgaXRlbS5pbm5lckhUTUwgPSBgPHNwYW4gY2xhc3M9XCJjb250ZXh0LW1lbnUtaXRlbS1uYW1lXCI+JHt0aGlzLml0ZW1zW2ldLm5hbWV9PC9zcGFuPmA7XG4gICAgICBsaXN0LmFwcGVuZENoaWxkKGl0ZW0pO1xuICAgICAgaXRlbS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpeCA9IHRoaXMuZ2V0QXR0cmlidXRlKCdkYXRhLWluZGV4Jyk7XG4gICAgICAgIHNlbGYuaXRlbXNbaXhdLmFjdGlvbigpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5ET01vYmogPSBtZW51O1xuICAgIHBhcmVudC5hcHBlbmRDaGlsZChtZW51KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY29tcCwgbWF0aF9yb3VuZCwgbWF0aF9hYnMsIFJlY3QsIGNvbXAyLCBwcmVwYXJlVG9vbHRpcCwgc3ZnUGF0aFRvQ29vcmRzLCBfZ2V0UFIsIGNvbXB1dGVQZXJjZW50aWxlUmFuaywgZ2V0TWVhbiB9IGZyb20gJy4vLi4vaGVscGVycyc7XG5pbXBvcnQgeyBjb2xvcl9kaXNhYmxlZCwgY29sb3JfY291bnRyaWVzLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuLy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQgfSBmcm9tICcuLy4uL3ByZXBhcmVfZGF0YSc7XG5pbXBvcnQgeyBzdmdfbWFwIH0gZnJvbSAnLi8uLi9tYXAnO1xuaW1wb3J0IHsgYXBwLCB2YXJpYWJsZXNfaW5mbywgcmVzZXRDb2xvcnMgfSBmcm9tICcuLy4uLy4uL21haW4nO1xuaW1wb3J0IENvbnRleHRNZW51IGZyb20gJy4vLi4vY29udGV4dE1lbnUnO1xuaW1wb3J0IFRhYmxlUmVzdW1lU3RhdCBmcm9tICcuLy4uL3RhYmxlUmVzdW1lU3RhdCc7XG5cbmNvbnN0IHN2Z19iYXIgPSBkMy5zZWxlY3QoJyNzdmdfYmFyJyk7XG5jb25zdCBtYXJnaW4gPSB7IHRvcDogMjAsIHJpZ2h0OiAyMCwgYm90dG9tOiA0MCwgbGVmdDogNDAgfTtcblxuY29uc3Qgd2lkdGggPSArc3ZnX2Jhci5hdHRyKCd3aWR0aCcpIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQsXG4gIGhlaWdodCA9ICtzdmdfYmFyLmF0dHIoJ2hlaWdodCcpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbi8qKiBDbGFzcyByZXByZXNlbnRpbmcgYSBzY2F0dGVycGxvdCAqL1xuZXhwb3J0IGNsYXNzIFNjYXR0ZXJQbG90MiB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSB0aGUgc2NhdHRlcnBsb3Qgb24gdGhlIGBzdmdfYmFyYCBzdmcgZWxlbWVudCBwcmV2aW91c2x5IGRlZmluZWRcbiAgICogQHBhcmFtIHtBcnJheX0gcmVmX2RhdGEgLSBBIHJlZmVyZW5jZSB0byB0aGUgc3Vic2V0IG9mIHRoZSBkYXRhc2V0IHRvIGJlIHVzZWRcbiAgICogdG8gY3JlYXRlIHRoZSBzY2F0dGVycGxvdCAoc2hvdWxkIGNvbnRhaW4gYXQgbGVhc3QgdHdvIGZpZWxkIGZsYWdnZWQgYXMgcmF0aW9cbiAgICogaW4gdGhlIGBhcHAuY3VycmVudF9jb25maWcucmF0aW9gIE9iamVjdCkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIHRoaXMuYnJ1c2hlZCA9ICgpID0+IHtcbiAgICAgIGlmIChkMy5ldmVudCAmJiAhZDMuZXZlbnQuc2VsZWN0aW9uKSB7XG4gICAgICAgIGlmIChkMy5ldmVudC50eXBlID09PSAnZW5kJyAmJiBkMy5ldmVudC5zb3VyY2VFdmVudC50eXBlID09PSAnbW91c2V1cCcpIHtcbiAgICAgICAgICB0aGlzLm1hcF9lbGVtLnJlbW92ZVJlY3RCcnVzaCgpO1xuICAgICAgICB9XG4gICAgICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICAgICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJlc2V0Q29sb3JzKCk7XG4gICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgIGNvbnN0IFt0b3BsZWZ0LCBib3R0b21yaWdodF0gPSBkMy5ldmVudC5zZWxlY3Rpb247XG4gICAgICBjb25zdCByYW5nZV94ID0gW1xuICAgICAgICB0aGlzLnguaW52ZXJ0KHRvcGxlZnRbMF0pLFxuICAgICAgICB0aGlzLnguaW52ZXJ0KGJvdHRvbXJpZ2h0WzBdKSxcbiAgICAgIF07XG4gICAgICBjb25zdCByYW5nZV95ID0gW1xuICAgICAgICB0aGlzLnkuaW52ZXJ0KGJvdHRvbXJpZ2h0WzFdKSxcbiAgICAgICAgdGhpcy55LmludmVydCh0b3BsZWZ0WzFdKSxcbiAgICAgIF07XG4gICAgICBjb25zdCB0MSA9IHRoaXMucmFua192YXJpYWJsZTE7XG4gICAgICBjb25zdCB0MiA9IHRoaXMucmFua192YXJpYWJsZTI7XG4gICAgICB0aGlzLmRhdGFcbiAgICAgICAgLmZpbHRlcihmdCA9PiBmdFt0MV0gPiByYW5nZV94WzBdXG4gICAgICAgICAgJiYgZnRbdDFdIDwgcmFuZ2VfeFsxXVxuICAgICAgICAgICYmIGZ0W3QyXSA+IHJhbmdlX3lbMF1cbiAgICAgICAgICAmJiBmdFt0Ml0gPCByYW5nZV95WzFdKVxuICAgICAgICAuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgICAgICBhcHAuY29sb3JzW2Z0LmlkXSA9IGNvbXAyKFxuICAgICAgICAgICAgZnRbdGhpcy52YXJpYWJsZTFdLCBmdFt0aGlzLnZhcmlhYmxlMl0sXG4gICAgICAgICAgICBzZWxmLnJlZl92YWx1ZTEsIHNlbGYucmVmX3ZhbHVlMixcbiAgICAgICAgICAgIHNlbGYueEludmVyc2VkLCBzZWxmLnlJbnZlcnNlZCk7XG4gICAgICAgIH0pO1xuICAgICAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gICAgICB0aGlzLm1hcF9lbGVtLnJlbW92ZVJlY3RCcnVzaCgpO1xuICAgIH07XG5cbiAgICAvLyBTZXQgdGhlIG1pbmltdW0gbnVtYmVyIG9mIHZhcmlhYmxlcyB0byBrZWVwIHNlbGVjdGVkIGZvciB0aGlzIGtpbmQgb2YgY2hhcnQ6XG4gICAgYXBwLmN1cnJlbnRfY29uZmlnLm5iX3ZhciA9IDI7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy52YXJpYWJsZTEgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW9bMF07XG4gICAgdGhpcy52YXJpYWJsZTIgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW9bMV07XG4gICAgdGhpcy5yYW5rX3ZhcmlhYmxlMSA9IGBwcl8ke3RoaXMudmFyaWFibGUxfWA7XG4gICAgdGhpcy5yYW5rX3ZhcmlhYmxlMiA9IGBwcl8ke3RoaXMudmFyaWFibGUyfWA7XG4gICAgdGhpcy5wcmV0dHlfbmFtZTEgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW9fcHJldHR5X25hbWVbMF07XG4gICAgdGhpcy5wcmV0dHlfbmFtZTIgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW9fcHJldHR5X25hbWVbMV07XG4gICAgdGhpcy5kYXRhID0gcmVmX2RhdGEuZmlsdGVyKGZ0ID0+ICEhZnRbdGhpcy52YXJpYWJsZTFdICYmICEhZnRbdGhpcy52YXJpYWJsZTJdKVxuICAgICAgLm1hcCgoZCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSB7IGlkOiBkLmlkIH07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMV0gPSBkW3RoaXMudmFyaWFibGUxXTtcbiAgICAgICAgcmVzW3RoaXMudmFyaWFibGUyXSA9IGRbdGhpcy52YXJpYWJsZTJdO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSk7XG4gICAgdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkLmlkKTtcbiAgICByZXNldENvbG9ycyh0aGlzLmN1cnJlbnRfaWRzKTtcbiAgICB0aGlzLm5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLmRhdGEsIHRoaXMudmFyaWFibGUxLCB0aGlzLnJhbmtfdmFyaWFibGUxKTtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMiwgdGhpcy5yYW5rX3ZhcmlhYmxlMik7XG5cbiAgICB0aGlzLnggPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAucmFuZ2UoWzAsIHdpZHRoXSlcbiAgICAgIC5uaWNlKCk7XG4gICAgdGhpcy55ID0gZDMuc2NhbGVMaW5lYXIoKVxuICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKVxuICAgICAgLm5pY2UoKTtcbiAgICB0aGlzLnhBeGlzID0gZDMuYXhpc0JvdHRvbSh0aGlzLngpLnRpY2tzKDEyKTtcbiAgICB0aGlzLnlBeGlzID0gZDMuYXhpc0xlZnQodGhpcy55KS50aWNrcygxMiAqIGhlaWdodCAvIHdpZHRoKTtcbiAgICB0aGlzLnhBeGlzMiA9IGQzLmF4aXNCb3R0b20odGhpcy54KS50aWNrcygxMik7XG4gICAgdGhpcy55QXhpczIgPSBkMy5heGlzTGVmdCh0aGlzLnkpLnRpY2tzKDEyICogaGVpZ2h0IC8gd2lkdGgpO1xuXG4gICAgdGhpcy5icnVzaCA9IGQzLmJydXNoKClcbiAgICAgIC5leHRlbnQoW1swLCAwXSwgW3dpZHRoLCBoZWlnaHRdXSlcbiAgICAgIC5vbignYnJ1c2ggZW5kJywgdGhpcy5icnVzaGVkKTtcblxuICAgIHRoaXMueEludmVyc2VkID0gZmFsc2U7XG4gICAgdGhpcy55SW52ZXJzZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlZl92YWx1ZTEgPSB0aGlzLmRhdGEuZmluZChcbiAgICAgIGQgPT4gZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbilbdGhpcy52YXJpYWJsZTFdO1xuICAgIHRoaXMucmVmX3ZhbHVlMiA9IHRoaXMuZGF0YS5maW5kKFxuICAgICAgZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVt0aGlzLnZhcmlhYmxlMl07XG5cbiAgICB0aGlzLnBsb3QgPSBzdmdfYmFyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1ttYXJnaW4ubGVmdCwgbWFyZ2luLnRvcF19KWApO1xuXG4gICAgdGhpcy5wbG90LmFwcGVuZCgnZGVmcycpXG4gICAgICAuYXBwZW5kKCdzdmc6Y2xpcFBhdGgnKVxuICAgICAgLmF0dHIoJ2lkJywgJ2NsaXAnKVxuICAgICAgLmFwcGVuZCgnc3ZnOnJlY3QnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgeDogMCxcbiAgICAgICAgeTogMCxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5zY2F0dGVyID0gdGhpcy5wbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCAnc2NhdHRlcnBsb3QnKVxuICAgICAgLmF0dHIoJ2NsaXAtcGF0aCcsICd1cmwoI2NsaXApJyk7XG5cbiAgICB0aGlzLnNjYXR0ZXIuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdicnVzaCcpXG4gICAgICAuY2FsbCh0aGlzLmJydXNoKTtcblxuICAgIHRoaXMueC5kb21haW4oZDMuZXh0ZW50KHRoaXMuZGF0YSwgZCA9PiBkW3RoaXMucmFua192YXJpYWJsZTFdKSkubmljZSgpO1xuICAgIHRoaXMueS5kb21haW4oZDMuZXh0ZW50KHRoaXMuZGF0YSwgZCA9PiBkW3RoaXMucmFua192YXJpYWJsZTJdKSkubmljZSgpO1xuICAgIHRoaXMubWVhbl92YXJpYWJsZTEgPSBfZ2V0UFIoXG4gICAgICBnZXRNZWFuKHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUxXSkpLCB0aGlzLmRhdGEubWFwKGQgPT4gZFt0aGlzLnZhcmlhYmxlMV0pKTtcbiAgICB0aGlzLm1lYW5fdmFyaWFibGUyID0gX2dldFBSKFxuICAgICAgZ2V0TWVhbih0aGlzLmRhdGEubWFwKGQgPT4gZFt0aGlzLnZhcmlhYmxlMl0pKSwgdGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy52YXJpYWJsZTJdKSk7XG5cbiAgICB0aGlzLm1ha2VHcmlkKCk7XG5cbiAgICBjb25zdCBncm91cGVfbGluZV9tZWFuID0gdGhpcy5wbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xpcC1wYXRoJywgJ3VybCgjY2xpcCknKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ21lYW4nKTtcbiAgICBncm91cGVfbGluZV9tZWFuLmFwcGVuZCgnbGluZScpXG4gICAgICAuYXR0cignY2xpcC1wYXRoJywgJ3VybCgjY2xpcCknKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgaWQ6ICdtZWFuX3gnLFxuICAgICAgICB4MTogdGhpcy54KHRoaXMubWVhbl92YXJpYWJsZTEpLFxuICAgICAgICB4MjogdGhpcy54KHRoaXMubWVhbl92YXJpYWJsZTEpLFxuICAgICAgICB5MTogMCxcbiAgICAgICAgeTI6IHdpZHRoLFxuICAgICAgICAnc3Ryb2tlLWRhc2hhcnJheSc6ICcxMCwgNScsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAnMnB4JyxcbiAgICAgIH0pXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICdyZWQnKTtcbiAgICBncm91cGVfbGluZV9tZWFuLmFwcGVuZCgnbGluZScpXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICdyZWQnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgaWQ6ICdtZWFuX3knLFxuICAgICAgICB4MTogMCxcbiAgICAgICAgeDI6IHdpZHRoLFxuICAgICAgICB5MTogdGhpcy55KHRoaXMubWVhbl92YXJpYWJsZTIpLFxuICAgICAgICB5MjogdGhpcy55KHRoaXMubWVhbl92YXJpYWJsZTIpLFxuICAgICAgICAnY2xpcC1wYXRoJzogJ3VybCgjY2xpcCknLFxuICAgICAgICAnc3Ryb2tlLWRhc2hhcnJheSc6ICcxMCwgNScsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAnMnB4JyxcbiAgICAgIH0pO1xuXG4gICAgdGhpcy5wbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICBjbGFzczogJ3ggYXhpcycsIGlkOiAnYXhpcy0teCcsIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgwLCAke2hlaWdodH0pYCxcbiAgICAgIH0pXG4gICAgICAuY2FsbCh0aGlzLnhBeGlzKTtcblxuICAgIHRoaXMucGxvdC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICd5IGF4aXMnLCBpZDogJ2F4aXMtLXknLCBvcGFjaXR5OiAwLjkgfSlcbiAgICAgIC5jYWxsKHRoaXMueUF4aXMpO1xuXG4gICAgLy8gUHJlcGFyZSB0aGUgdG9vbHRpcCBkaXNwbGF5ZWQgb24gbW91c2VvdmVyOlxuICAgIHByZXBhcmVUb29sdGlwKHRoaXMucGxvdCk7XG5cbiAgICB0aGlzLnByZXBhcmVUaXRsZUF4aXMoKTtcblxuICAgIHN2Z19iYXIuYXBwZW5kKCdpbWFnZScpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB4OiBtYXJnaW4ubGVmdCArIHdpZHRoIC8gMiAtIDIwIC0gc3ZnX2Jhci5zZWxlY3QoJyN0aXRsZS1heGlzLXgnKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggLyAyLFxuICAgICAgICB5OiBtYXJnaW4udG9wICsgaGVpZ2h0ICsgbWFyZ2luLmJvdHRvbSAvIDIgLSAyLjUsXG4gICAgICAgIHdpZHRoOiAxNSxcbiAgICAgICAgaGVpZ2h0OiAxNSxcbiAgICAgICAgJ3hsaW5rOmhyZWYnOiAnaW1nL3JldmVyc2VfcGx1cy5wbmcnLFxuICAgICAgICBpZDogJ2ltZ19yZXZlcnNlX3gnLFxuICAgICAgfSlcbiAgICAgIC5vbignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgIHRoaXMueEludmVyc2VkID0gIXRoaXMueEludmVyc2VkO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubmJGdDsgaSsrKSB7XG4gICAgICAgICAgc2VsZi5kYXRhW2ldW3NlbGYucmFua192YXJpYWJsZTFdID0gMTAwIC0gc2VsZi5kYXRhW2ldW3NlbGYucmFua192YXJpYWJsZTFdO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxhc3RfbWFwX3NlbGVjdGlvbikge1xuICAgICAgICAgIHRoaXMubWFwX2VsZW0uY2FsbEJydXNoKHRoaXMubGFzdF9tYXBfc2VsZWN0aW9uKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIHN2Z19iYXIuYXBwZW5kKCdpbWFnZScpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB4OiBtYXJnaW4ubGVmdCAvIDIgLSAyMCxcbiAgICAgICAgeTogbWFyZ2luLnRvcCArIChoZWlnaHQgLyAyKSArIHN2Z19iYXIuc2VsZWN0KCcjdGl0bGUtYXhpcy15Jykubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodCAvIDIgKyA1LFxuICAgICAgICB3aWR0aDogMTUsXG4gICAgICAgIGhlaWdodDogMTUsXG4gICAgICAgICd4bGluazpocmVmJzogJ2ltZy9yZXZlcnNlX3BsdXMucG5nJyxcbiAgICAgICAgaWQ6ICdpbWdfcmV2ZXJzZV95JyxcbiAgICAgIH0pXG4gICAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICB0aGlzLnlJbnZlcnNlZCA9ICF0aGlzLnlJbnZlcnNlZDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm5iRnQ7IGkrKykge1xuICAgICAgICAgIHRoaXMuZGF0YVtpXVt0aGlzLnJhbmtfdmFyaWFibGUyXSA9IDEwMCAtIHRoaXMuZGF0YVtpXVt0aGlzLnJhbmtfdmFyaWFibGUyXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYXN0X21hcF9zZWxlY3Rpb24pIHtcbiAgICAgICAgICB0aGlzLm1hcF9lbGVtLmNhbGxCcnVzaCh0aGlzLmxhc3RfbWFwX3NlbGVjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAvLyBDb21wdXRlIHRoZSBcImNvbXBsw6l0dWRlXCIgdmFsdWUgZm9yIHRoaXMgcmF0aW86XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCBbdGhpcy52YXJpYWJsZTEsIHRoaXMudmFyaWFibGUyXSk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIFwiY29tcGzDqXR1ZGVcIiB0ZXh0OlxuICAgIHRoaXMuY29tcGxldHVkZSA9IHN2Z19iYXIuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRycyh7IGlkOiAnY2hhcnRfY29tcGxldHVkZScsIHg6IDYwLCB5OiA0MCB9KVxuICAgICAgLnN0eWxlcyh7ICdmb250LWZhbWlseSc6ICdcXCdTaWduaWthXFwnLCBzYW5zLXNlcmlmJyB9KVxuICAgICAgLnRleHQoYENvbXBsw6l0dWRlIDogJHt0aGlzLmNvbXBsZXR1ZGVfdmFsdWV9JWApO1xuXG4gICAgLy8gRGVhY3RpdmF0ZSB0aGUgcmVjdCBicnVzaCBzZWxlY3Rpb24gb24gdGhlIG1hcFxuICAgIC8vIHdoaWxlIHRoZSB1c2VyIHByZXNzIHRoZSBDdHJsIGtleTpcbiAgICBkb2N1bWVudC5vbmtleWRvd24gPSAoZXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudCAmJiBldmVudC5rZXkgPT09ICdDb250cm9sJykge1xuICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpXG4gICAgICAgICAgLnNlbGVjdEFsbCgnLnNlbGVjdGlvbiwgLm92ZXJsYXknKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBSZWFjdGl2YXRlIHRoZSByZWN0IGJydXNoIHNlbGVjdGlvbiBvbiB0aGUgbWFwXG4gICAgLy8gd2hlbiB0aGUgdXNlciBkb2Vzbid0IHByZXNzIHRoZSBDdHJsIGtleSBhbnltb3JlXG4gICAgZG9jdW1lbnQub25rZXl1cCA9IChldmVudCkgPT4ge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LmtleSA9PT0gJ0NvbnRyb2wnKSB7XG4gICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJylcbiAgICAgICAgICAuc2VsZWN0QWxsKCcuc2VsZWN0aW9uLCAub3ZlcmxheScpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyB0aGlzLnVwZGF0ZSgpO1xuICAgIHRoaXMubWFrZVRhYmxlU3RhdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgdW5kZXJseWluZyBncmV5IGdyaWRcbiAgICovXG4gIG1ha2VHcmlkKCkge1xuICAgIHRoaXMucGxvdC5pbnNlcnQoJ2cnLCAnI3NjYXR0ZXJwbG90JylcbiAgICAgIC5hdHRycyh7XG4gICAgICAgIGNsYXNzOiAnZ3JpZCBncmlkLXgnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMCwgJHtoZWlnaHR9KWAsXG4gICAgICB9KVxuICAgICAgLmNhbGwodGhpcy54QXhpczJcbiAgICAgICAgLnRpY2tTaXplKC1oZWlnaHQpXG4gICAgICAgIC50aWNrRm9ybWF0KCcnKSk7XG4gICAgdGhpcy5wbG90Lmluc2VydCgnZycsICcjc2NhdHRlcnBsb3QnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dyaWQgZ3JpZC15JylcbiAgICAgIC5jYWxsKHRoaXMueUF4aXMyXG4gICAgICAgIC50aWNrU2l6ZSgtd2lkdGgpXG4gICAgICAgIC50aWNrRm9ybWF0KCcnKSk7XG4gICAgdGhpcy5wbG90LnNlbGVjdEFsbCgnLmdyaWQnKVxuICAgICAgLnNlbGVjdEFsbCgnbGluZScpXG4gICAgICAuYXR0cignc3Ryb2tlJywgJ2xpZ2h0Z3JheScpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgdGl0bGUgb2YgdGhlIFggYW5kIFkgYXhpcyB3aXRoIHRoZSBhc3NvY2lhdGVkIGNvbnRleHQgbWVudVxuICAgKiBkaXNwbGF5ZWQgd2hlbiB0aGV5IGFyZSBjbGlja2VkIGFuZCBhbGxvd2luZyB0byBzZWxlY3QgYW4gb3RoZXIgdmFyaWFibGVcbiAgICogZm9yIHRoaXMgYXhpcy5cbiAgICovXG4gIHByZXBhcmVUaXRsZUF4aXMoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5tZW51WCA9IG5ldyBDb250ZXh0TWVudSgpO1xuICAgIHRoaXMubWVudVkgPSBuZXcgQ29udGV4dE1lbnUoKTtcbiAgICB0aGlzLml0ZW1zWCA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5maWx0ZXIoZWxlbSA9PiBlbGVtICE9PSB0aGlzLnZhcmlhYmxlMilcbiAgICAgIC5tYXAoZWxlbSA9PiAoe1xuICAgICAgICBuYW1lOiBlbGVtLFxuICAgICAgICBhY3Rpb246ICgpID0+IHRoaXMuY2hhbmdlVmFyaWFibGVYKGVsZW0pLFxuICAgICAgfSkpO1xuICAgIHRoaXMuaXRlbXNZID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLmZpbHRlcihlbGVtID0+IGVsZW0gIT09IHRoaXMudmFyaWFibGUxKVxuICAgICAgLm1hcChlbGVtID0+ICh7XG4gICAgICAgIG5hbWU6IGVsZW0sXG4gICAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jaGFuZ2VWYXJpYWJsZVkoZWxlbSksXG4gICAgICB9KSk7XG5cbiAgICBzdmdfYmFyLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICBpZDogJ3RpdGxlLWF4aXMteCcsXG4gICAgICAgIHg6IG1hcmdpbi5sZWZ0ICsgd2lkdGggLyAyLFxuICAgICAgICB5OiBtYXJnaW4udG9wICsgaGVpZ2h0ICsgbWFyZ2luLmJvdHRvbSAvIDIgKyAxMCxcbiAgICAgIH0pXG4gICAgICAuc3R5bGVzKHsgJ2ZvbnQtZmFtaWx5JzogJ3NhbnMtc2VyaWYnLCAnZm9udC1zaXplJzogJzEycHgnLCAndGV4dC1hbmNob3InOiAnbWlkZGxlJyB9KVxuICAgICAgLnRleHQodGhpcy52YXJpYWJsZTEpXG4gICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBiYm94ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgaWYgKHNlbGYubWVudVkuZGlzcGxheWVkKSB7XG4gICAgICAgICAgc2VsZi5tZW51WS5oaWRlTWVudSgpO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYubWVudVguc2hvd01lbnUoZDMuZXZlbnQsIGRvY3VtZW50LmJvZHksIHNlbGYuaXRlbXNYLCBbYmJveC5sZWZ0IC0gMjAsIGJib3gudG9wICsgMjBdKTtcbiAgICAgIH0pO1xuXG4gICAgc3ZnX2Jhci5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgaWQ6ICd0aXRsZS1heGlzLXknLFxuICAgICAgICB4OiBtYXJnaW4ubGVmdCAvIDIsXG4gICAgICAgIHk6IG1hcmdpbi50b3AgKyAoaGVpZ2h0IC8gMikgLSAxMCxcbiAgICAgICAgdHJhbnNmb3JtOiBgcm90YXRlKC05MCwgJHttYXJnaW4ubGVmdCAvIDJ9LCAke21hcmdpbi50b3AgKyAoaGVpZ2h0IC8gMil9KWAsXG4gICAgICB9KVxuICAgICAgLnN0eWxlcyh7ICdmb250LWZhbWlseSc6ICdzYW5zLXNlcmlmJywgJ2ZvbnQtc2l6ZSc6ICcxMnB4JywgJ3RleHQtYW5jaG9yJzogJ21pZGRsZScgfSlcbiAgICAgIC50ZXh0KHRoaXMudmFyaWFibGUyKVxuICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYmJveCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChzZWxmLm1lbnVYLmRpc3BsYXllZCkge1xuICAgICAgICAgIHNlbGYubWVudVguaGlkZU1lbnUoKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLm1lbnVZLnNob3dNZW51KGQzLmV2ZW50LCBkb2N1bWVudC5ib2R5LCBzZWxmLml0ZW1zWSwgW2Jib3gubGVmdCwgYmJveC5ib3R0b20gKyAxMF0pO1xuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgZGF0YSA9IHNlbGYuZGF0YTtcbiAgICBjb25zdCByYW5rX3ZhcmlhYmxlMSA9IHRoaXMucmFua192YXJpYWJsZTE7XG4gICAgY29uc3QgcmFua192YXJpYWJsZTIgPSB0aGlzLnJhbmtfdmFyaWFibGUyO1xuICAgIGNvbnN0IHggPSB0aGlzLng7XG4gICAgY29uc3QgeSA9IHRoaXMueTtcbiAgICBjb25zdCBkZWZhdWx0X2NvbG9yID0gJ2dyYXknO1xuICAgIGNvbnN0IGRvdHMgPSB0aGlzLnNjYXR0ZXIuc2VsZWN0QWxsKCcuZG90JylcbiAgICAgIC5kYXRhKGRhdGEsIGQgPT4gZC5pZCk7XG5cbiAgICBkb3RzXG4gICAgICAuYXR0cnMoZCA9PiAoe1xuICAgICAgICByOiA1LFxuICAgICAgICBjeDogeChkW3JhbmtfdmFyaWFibGUxXSksXG4gICAgICAgIGN5OiB5KGRbcmFua192YXJpYWJsZTJdKSxcbiAgICAgIH0pKVxuICAgICAgLnN0eWxlcyhkID0+ICh7XG4gICAgICAgIGZpbGw6IGFwcC5jb2xvcnNbZC5pZF0gfHwgZGVmYXVsdF9jb2xvcixcbiAgICAgIH0pKTtcblxuICAgIGRvdHMuZW50ZXIoKVxuICAgICAgLmluc2VydCgnY2lyY2xlJylcbiAgICAgIC5zdHlsZXMoZCA9PiAoe1xuICAgICAgICBmaWxsOiBhcHAuY29sb3JzW2QuaWRdIHx8IGRlZmF1bHRfY29sb3IsXG4gICAgICB9KSlcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIHI6IDUsXG4gICAgICAgIGN4OiB4KGRbcmFua192YXJpYWJsZTFdKSxcbiAgICAgICAgY3k6IHkoZFtyYW5rX3ZhcmlhYmxlMl0pLFxuICAgICAgICBjbGFzczogJ2RvdCcsXG4gICAgICB9KSlcbiAgICAgIC5jYWxsKChzZWxlY3Rpb24pID0+IHtcbiAgICAgICAgc2VsZWN0aW9uLm9uKCdtb3VzZW92ZXIudG9vbHRpcCcsICgpID0+IHtcbiAgICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKS5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgICAgICB9KVxuICAgICAgICAub24oJ21vdXNlbW92ZS50b29sdGlwJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBjb25zdCB0b29sdGlwID0gc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJylcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7W2QzLm1vdXNlKHRoaXMpWzBdIC0gNSwgZDMubW91c2UodGhpcylbMV0gLSAzNV19KWApO1xuICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCdyZWN0JykuYXR0cnMoeyB3aWR0aDogMCwgaGVpZ2h0OiAwIH0pO1xuICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCd0ZXh0LmlkX2ZlYXR1cmUnKVxuICAgICAgICAgICAgLnRleHQoYCR7ZC5pZH1gKTtcbiAgICAgICAgICB0b29sdGlwLnNlbGVjdCgndGV4dC52YWx1ZV9mZWF0dXJlMScpXG4gICAgICAgICAgICAudGV4dChgJHtzZWxmLnZhcmlhYmxlMX0gKHJhbmcpIDogJHtNYXRoLnJvdW5kKGRbc2VsZi5yYW5rX3ZhcmlhYmxlMV0gKiAxMCkgLyAxMH0vMTAwYCk7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTInKVxuICAgICAgICAgICAgLnRleHQoYCR7c2VsZi52YXJpYWJsZTF9ICh2YWxldXIpIDogJHtNYXRoLnJvdW5kKGRbc2VsZi52YXJpYWJsZTFdICogMTApIC8gMTB9YCk7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTMnKVxuICAgICAgICAgICAgLnRleHQoYCR7c2VsZi52YXJpYWJsZTJ9IChyYW5nKSA6ICR7TWF0aC5yb3VuZChkW3NlbGYucmFua192YXJpYWJsZTJdICogMTApIC8gMTB9LzEwMGApO1xuICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCd0ZXh0LnZhbHVlX2ZlYXR1cmU0JylcbiAgICAgICAgICAudGV4dChgJHtzZWxmLnZhcmlhYmxlMn0gKHZhbGV1cikgOiAke01hdGgucm91bmQoZFtzZWxmLnZhcmlhYmxlMl0gKiAxMCkgLyAxMH1gKTtcbiAgICAgICAgICBjb25zdCBiID0gdG9vbHRpcC5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3JlY3QnKVxuICAgICAgICAgICAgLmF0dHJzKHsgd2lkdGg6IGIud2lkdGggKyAyMCwgaGVpZ2h0OiBiLmhlaWdodCArIDcuNSB9KTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtb3VzZW91dC50b29sdGlwJywgKCkgPT4ge1xuICAgICAgICAgIHN2Z19iYXIuc2VsZWN0KCcudG9vbHRpcCcpLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICBkb3RzLmV4aXQoKS50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjI1KS5yZW1vdmUoKTtcbiAgfVxuXG4gIHVwZGF0ZUNvbXBsZXR1ZGUoKSB7XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCBbdGhpcy52YXJpYWJsZTEsIHRoaXMudmFyaWFibGUyXSk7XG4gICAgdGhpcy5jb21wbGV0dWRlLnRleHQoYENvbXBsw6l0dWRlIDogJHt0aGlzLmNvbXBsZXR1ZGVfdmFsdWV9JWApO1xuICB9XG5cbiAgdXBkYXRlTWFwUmVnaW8oKSB7XG4gICAgaWYgKCF0aGlzLm1hcF9lbGVtKSByZXR1cm47XG4gICAgdGhpcy5tYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5hdHRyKCdmaWxsJywgZCA9PiAodGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV0pID4gLTFcbiAgICAgICAgPyAoYXBwLmNvbG9yc1tkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dXSB8fCBjb2xvcl9jb3VudHJpZXMpXG4gICAgICAgIDogY29sb3JfZGlzYWJsZWQpKTtcbiAgfVxuXG4gIGhhbmRsZV9icnVzaF9tYXAoZXZlbnQpIHtcbiAgICBpZiAoIWV2ZW50IHx8ICFldmVudC5zZWxlY3Rpb24pIHtcbiAgICAgIHRoaXMubGFzdF9tYXBfc2VsZWN0aW9uID0gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBzdmdfYmFyLnNlbGVjdCgnLmJydXNoJykuY2FsbCh0aGlzLmJydXNoLm1vdmUsIG51bGwpO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IFt0b3BsZWZ0LCBib3R0b21yaWdodF0gPSBldmVudC5zZWxlY3Rpb247XG4gICAgdGhpcy5sYXN0X21hcF9zZWxlY3Rpb24gPSBbdG9wbGVmdCwgYm90dG9tcmlnaHRdO1xuICAgIGNvbnN0IHJlY3QgPSBuZXcgUmVjdCh0b3BsZWZ0LCBib3R0b21yaWdodCk7XG4gICAgYXBwLmNvbG9ycyA9IHt9O1xuICAgIHNlbGYubWFwX2VsZW0udGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpXG4gICAgICAuYXR0cignZmlsbCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgIGNvbnN0IGlkID0gZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXTtcbiAgICAgICAgaWYgKGlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKSB7XG4gICAgICAgICAgYXBwLmNvbG9yc1tpZF0gPSBjb2xvcl9oaWdobGlnaHQ7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yX2hpZ2hsaWdodDtcbiAgICAgICAgfSBlbHNlIGlmIChzZWxmLmN1cnJlbnRfaWRzLmluZGV4T2YoaWQpIDwgMCkge1xuICAgICAgICAgIHJldHVybiBjb2xvcl9kaXNhYmxlZDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuX3B0cykge1xuICAgICAgICAgIHRoaXMuX3B0cyA9IHN2Z1BhdGhUb0Nvb3Jkcyh0aGlzLmdldEF0dHJpYnV0ZSgnZCcpLCBhcHAudHlwZV9wYXRoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwdHMgPSB0aGlzLl9wdHM7XG4gICAgICAgIGZvciAobGV0IGl4ID0gMCwgbmJfcHRzID0gcHRzLmxlbmd0aDsgaXggPCBuYl9wdHM7IGl4KyspIHtcbiAgICAgICAgICBpZiAocmVjdC5jb250YWlucyhwdHNbaXhdKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUxID0gZC5wcm9wZXJ0aWVzW3NlbGYudmFyaWFibGUxXTtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlMiA9IGQucHJvcGVydGllc1tzZWxmLnZhcmlhYmxlMl07XG4gICAgICAgICAgICBjb25zdCBjb2xvciA9IGNvbXAyKFxuICAgICAgICAgICAgICB2YWx1ZTEsIHZhbHVlMixcbiAgICAgICAgICAgICAgc2VsZi5yZWZfdmFsdWUxLCBzZWxmLnJlZl92YWx1ZTIsXG4gICAgICAgICAgICAgIHNlbGYueEludmVyc2VkLCBzZWxmLnlJbnZlcnNlZCk7XG4gICAgICAgICAgICBhcHAuY29sb3JzW2lkXSA9IGNvbG9yO1xuICAgICAgICAgICAgcmV0dXJuIGNvbG9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sb3JfY291bnRyaWVzO1xuICAgICAgfSk7XG4gICAgc2VsZi51cGRhdGUoKTtcbiAgfVxuXG4gIGhhbmRsZUNsaWNrTWFwKGQsIHBhcmVudCkge1xuICAgIGNvbnN0IGlkID0gZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXTtcbiAgICBpZiAodGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGlkKSA8IDAgfHwgaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pIHJldHVybjtcbiAgICBpZiAoYXBwLmNvbG9yc1tpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQ2hhbmdlIGl0cyBjb2xvciBpbiB0aGUgZ2xvYmFsIGNvbG9ycyBvYmplY3Q6XG4gICAgICBhcHAuY29sb3JzW2lkXSA9IHVuZGVmaW5lZDtcbiAgICAgIC8vIENoYW5nZSB0aGUgY29sb3Igb24gdGhlIG1hcDpcbiAgICAgIGQzLnNlbGVjdChwYXJlbnQpLmF0dHIoJ2ZpbGwnLCBjb2xvcl9jb3VudHJpZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB2YWx1ZTEgPSBkLnByb3BlcnRpZXNbdGhpcy52YXJpYWJsZTFdO1xuICAgICAgY29uc3QgdmFsdWUyID0gZC5wcm9wZXJ0aWVzW3RoaXMudmFyaWFibGUyXTtcbiAgICAgIGNvbnN0IGNvbG9yID0gY29tcDIoXG4gICAgICAgIHZhbHVlMSwgdmFsdWUyLFxuICAgICAgICB0aGlzLnJlZl92YWx1ZTEsIHRoaXMucmVmX3ZhbHVlMixcbiAgICAgICAgdGhpcy54SW52ZXJzZWQsIHRoaXMueUludmVyc2VkKTtcbiAgICAgIGFwcC5jb2xvcnNbaWRdID0gY29sb3I7XG4gICAgICAvLyBDaGFuZ2UgdGhlIGNvbG9yIG9uIHRoZSBtYXA6XG4gICAgICBkMy5zZWxlY3QocGFyZW50KS5hdHRyKCdmaWxsJywgY29sb3IpO1xuICAgICAgLy8gQWRkIHRoZSBjbGlja2VkIGZlYXR1cmUgb24gdGhlIGNvbG9yZWQgc2VsZWN0aW9uIG9uIHRoZSBjaGFydDpcbiAgICB9XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHVwZGF0ZU1lYW5WYWx1ZSgpIHtcbiAgICB0aGlzLm1lYW5fdmFyaWFibGUxID0gX2dldFBSKFxuICAgICAgZ2V0TWVhbih0aGlzLmRhdGEubWFwKGQgPT4gZFt0aGlzLnZhcmlhYmxlMV0pKSwgdGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy52YXJpYWJsZTFdKSk7XG4gICAgdGhpcy5tZWFuX3ZhcmlhYmxlMiA9IF9nZXRQUihcbiAgICAgIGdldE1lYW4odGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy52YXJpYWJsZTJdKSksIHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUyXSkpO1xuICAgIGNvbnN0IGdycF9tZWFuID0gdGhpcy5wbG90LnNlbGVjdCgnZy5tZWFuJyk7XG4gICAgZ3JwX21lYW4uc2VsZWN0KCcjbWVhbl94JylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbigyMjUpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB4MTogdGhpcy54KHRoaXMubWVhbl92YXJpYWJsZTEpLFxuICAgICAgICB4MjogdGhpcy54KHRoaXMubWVhbl92YXJpYWJsZTEpLFxuICAgICAgfSk7XG4gICAgZ3JwX21lYW4uc2VsZWN0KCcjbWVhbl95JylcbiAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgIC5kdXJhdGlvbigyMjUpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICB5MTogdGhpcy55KHRoaXMubWVhbl92YXJpYWJsZTIpLFxuICAgICAgICB5MjogdGhpcy55KHRoaXMubWVhbl92YXJpYWJsZTIpLFxuICAgICAgfSk7XG4gIH1cblxuICB1cGRhdGVDaGFuZ2VSZWdpb24oKSB7XG4gICAgaWYgKGFwcC5jdXJyZW50X2NvbmZpZy5maWx0ZXJfa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuY2hhbmdlU3R1ZHlab25lKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVmX3ZhbHVlMSA9IHRoaXMuZGF0YS5maW5kKFxuICAgICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMudmFyaWFibGUxXTtcbiAgICAgIHRoaXMucmVmX3ZhbHVlMiA9IHRoaXMuZGF0YS5maW5kKFxuICAgICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMudmFyaWFibGUyXTtcbiAgICAgIHRoaXMubWFwX2VsZW0ucmVtb3ZlUmVjdEJydXNoKCk7XG4gICAgICB0aGlzLm1hcF9lbGVtLnVwZGF0ZUxlZ2VuZCgpO1xuICAgICAgdGhpcy5tYXBfZWxlbS5yZXNldENvbG9ycyh0aGlzLmN1cnJlbnRfaWRzKTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlU3R1ZHlab25lKCkge1xuICAgIHRoaXMuZGF0YSA9IGFwcC5jdXJyZW50X2RhdGEuZmlsdGVyKGZ0ID0+ICEhZnRbdGhpcy52YXJpYWJsZTFdICYmICEhZnRbdGhpcy52YXJpYWJsZTJdKVxuICAgICAgLm1hcCgoZCkgPT4ge1xuICAgICAgICBjb25zdCByZXMgPSB7IGlkOiBkLmlkIH07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMV0gPSBkW3RoaXMudmFyaWFibGUxXTtcbiAgICAgICAgcmVzW3RoaXMudmFyaWFibGUyXSA9IGRbdGhpcy52YXJpYWJsZTJdO1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfSk7XG4gICAgdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkLmlkKTtcbiAgICByZXNldENvbG9ycygpO1xuICAgIHRoaXMubmJGdCA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgY29tcHV0ZVBlcmNlbnRpbGVSYW5rKHRoaXMuZGF0YSwgdGhpcy52YXJpYWJsZTEsIHRoaXMucmFua192YXJpYWJsZTEpO1xuICAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLmRhdGEsIHRoaXMudmFyaWFibGUyLCB0aGlzLnJhbmtfdmFyaWFibGUyKTtcblxuICAgIHRoaXMueEludmVyc2VkID0gZmFsc2U7XG4gICAgdGhpcy55SW52ZXJzZWQgPSBmYWxzZTtcbiAgICBjb25zdCB0bXBfbXlfcmVnaW9uID0gdGhpcy5kYXRhLmZpbHRlcihkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pWzBdO1xuICAgIHRoaXMucmVmX3ZhbHVlMSA9IHRtcF9teV9yZWdpb25bdGhpcy52YXJpYWJsZTFdO1xuICAgIHRoaXMucmVmX3ZhbHVlMiA9IHRtcF9teV9yZWdpb25bdGhpcy52YXJpYWJsZTJdO1xuXG4gICAgdGhpcy54LmRvbWFpbihkMy5leHRlbnQodGhpcy5kYXRhLCBkID0+IGRbdGhpcy5yYW5rX3ZhcmlhYmxlMV0pKS5uaWNlKCk7XG4gICAgdGhpcy55LmRvbWFpbihkMy5leHRlbnQodGhpcy5kYXRhLCBkID0+IGRbdGhpcy5yYW5rX3ZhcmlhYmxlMl0pKS5uaWNlKCk7XG4gICAgdGhpcy5tYXBfZWxlbS5yZW1vdmVSZWN0QnJ1c2goKTtcbiAgICB0aGlzLnVwZGF0ZUl0ZW1zQ3R4TWVudSgpO1xuICAgIHRoaXMudXBkYXRlTWVhblZhbHVlKCk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgIHRoaXMudXBkYXRlVGFibGVTdGF0KCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIGNoYW5nZVZhcmlhYmxlWChjb2RlX3ZhcmlhYmxlKSB7XG4gICAgdGhpcy52YXJpYWJsZTEgPSBjb2RlX3ZhcmlhYmxlO1xuICAgIHRoaXMucmFua192YXJpYWJsZTEgPSBgcHJfJHt0aGlzLnZhcmlhYmxlMX1gO1xuICAgIHRoaXMucHJldHR5X25hbWUxID0gdmFyaWFibGVzX2luZm8uZmluZChmdCA9PiBmdC5yYXRpbyA9PT0gY29kZV92YXJpYWJsZSkubmFtZTtcbiAgICBzdmdfYmFyLnNlbGVjdCgnI3RpdGxlLWF4aXMteCcpXG4gICAgICAudGV4dChjb2RlX3ZhcmlhYmxlKTtcbiAgICAvLyBUT0RPOiBBbHNvIGNoYW5nZSB0aGUgcG9zaXRpb24gb2YgdGhlIGJ1dHRvbiBhbG93aW5nIHRvIGludmVyc2UgdGhlIHNlcmllXG4gICAgdGhpcy51cGRhdGVJdGVtc0N0eE1lbnUoKTtcbiAgICB0aGlzLmRhdGEgPSBhcHAuY3VycmVudF9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMudmFyaWFibGUxXSAmJiAhIWZ0W3RoaXMudmFyaWFibGUyXSlcbiAgICAgIC5tYXAoKGQpID0+IHtcbiAgICAgICAgY29uc3QgcmVzID0geyBpZDogZC5pZCB9O1xuICAgICAgICByZXNbdGhpcy52YXJpYWJsZTFdID0gZFt0aGlzLnZhcmlhYmxlMV07XG4gICAgICAgIHJlc1t0aGlzLnZhcmlhYmxlMl0gPSBkW3RoaXMudmFyaWFibGUyXTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgIH0pO1xuICAgIHRoaXMuY3VycmVudF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgcmVzZXRDb2xvcnMoKTtcbiAgICB0aGlzLm5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLmRhdGEsIHRoaXMudmFyaWFibGUxLCB0aGlzLnJhbmtfdmFyaWFibGUxKTtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMiwgdGhpcy5yYW5rX3ZhcmlhYmxlMik7XG4gICAgdGhpcy5yZWZfdmFsdWUxID0gdGhpcy5kYXRhLmZpbmQoXG4gICAgICBkID0+IGQuaWQgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb24pW3RoaXMudmFyaWFibGUxXTtcbiAgICB0aGlzLnguZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUxXSkpLm5pY2UoKTtcbiAgICAvLyB0aGlzLnkuZG9tYWluKGQzLmV4dGVudCh0aGlzLmRhdGEsIGQgPT4gZFt0aGlzLnJhbmtfdmFyaWFibGUyXSkpLm5pY2UoKTtcbiAgICB0aGlzLnVwZGF0ZU1lYW5WYWx1ZSgpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZVRhYmxlU3RhdCgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBjaGFuZ2VWYXJpYWJsZVkoY29kZV92YXJpYWJsZSkge1xuICAgIHRoaXMudmFyaWFibGUyID0gY29kZV92YXJpYWJsZTtcbiAgICB0aGlzLnJhbmtfdmFyaWFibGUyID0gYHByXyR7dGhpcy52YXJpYWJsZTJ9YDtcbiAgICB0aGlzLnByZXR0eV9uYW1lMiA9IHZhcmlhYmxlc19pbmZvLmZpbmQoZnQgPT4gZnQucmF0aW8gPT09IGNvZGVfdmFyaWFibGUpLm5hbWU7XG4gICAgc3ZnX2Jhci5zZWxlY3QoJyN0aXRsZS1heGlzLXknKVxuICAgICAgLnRleHQoY29kZV92YXJpYWJsZSk7XG4gICAgLy8gVE9ETzogQWxzbyBjaGFuZ2UgdGhlIHBvc2l0aW9uIG9mIHRoZSBidXR0b24gYWxvd2luZyB0byBpbnZlcnNlIHRoZSBzZXJpZVxuICAgIHRoaXMudXBkYXRlSXRlbXNDdHhNZW51KCk7XG4gICAgdGhpcy5kYXRhID0gYXBwLmN1cnJlbnRfZGF0YS5maWx0ZXIoZnQgPT4gISFmdFt0aGlzLnZhcmlhYmxlMV0gJiYgISFmdFt0aGlzLnZhcmlhYmxlMl0pXG4gICAgICAubWFwKChkKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHsgaWQ6IGQuaWQgfTtcbiAgICAgICAgcmVzW3RoaXMudmFyaWFibGUxXSA9IGRbdGhpcy52YXJpYWJsZTFdO1xuICAgICAgICByZXNbdGhpcy52YXJpYWJsZTJdID0gZFt0aGlzLnZhcmlhYmxlMl07XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgICB9KTtcbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIHJlc2V0Q29sb3JzKCk7XG4gICAgdGhpcy5uYkZ0ID0gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICBjb21wdXRlUGVyY2VudGlsZVJhbmsodGhpcy5kYXRhLCB0aGlzLnZhcmlhYmxlMSwgdGhpcy5yYW5rX3ZhcmlhYmxlMSk7XG4gICAgY29tcHV0ZVBlcmNlbnRpbGVSYW5rKHRoaXMuZGF0YSwgdGhpcy52YXJpYWJsZTIsIHRoaXMucmFua192YXJpYWJsZTIpO1xuICAgIHRoaXMucmVmX3ZhbHVlMiA9IHRoaXMuZGF0YS5maW5kKFxuICAgICAgZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKVt0aGlzLnZhcmlhYmxlMl07XG4gICAgLy8gdGhpcy54LmRvbWFpbihkMy5leHRlbnQodGhpcy5kYXRhLCBkID0+IGRbdGhpcy5yYW5rX3ZhcmlhYmxlMV0pKS5uaWNlKCk7XG4gICAgdGhpcy55LmRvbWFpbihkMy5leHRlbnQodGhpcy5kYXRhLCBkID0+IGRbdGhpcy5yYW5rX3ZhcmlhYmxlMl0pKS5uaWNlKCk7XG4gICAgdGhpcy51cGRhdGVNZWFuVmFsdWUoKTtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gICAgdGhpcy51cGRhdGVUYWJsZVN0YXQoKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgdXBkYXRlSXRlbXNDdHhNZW51KCkge1xuICAgIHRoaXMuaXRlbXNYID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLmZpbHRlcihlbGVtID0+IGVsZW0gIT09IHRoaXMudmFyaWFibGUyKVxuICAgICAgLm1hcChlbGVtID0+ICh7XG4gICAgICAgIG5hbWU6IGVsZW0sXG4gICAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jaGFuZ2VWYXJpYWJsZVgoZWxlbSksXG4gICAgICB9KSk7XG4gICAgdGhpcy5pdGVtc1kgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW8uZmlsdGVyKGVsZW0gPT4gZWxlbSAhPT0gdGhpcy52YXJpYWJsZTEpXG4gICAgICAubWFwKGVsZW0gPT4gKHtcbiAgICAgICAgbmFtZTogZWxlbSxcbiAgICAgICAgYWN0aW9uOiAoKSA9PiB0aGlzLmNoYW5nZVZhcmlhYmxlWShlbGVtKSxcbiAgICAgIH0pKTtcbiAgfVxuXG4gIGFkZFZhcmlhYmxlKGNvZGVfdmFyaWFibGUsIG5hbWVfdmFyaWFibGUpIHtcbiAgICB0aGlzLml0ZW1zWC5wdXNoKHtcbiAgICAgIG5hbWU6IGNvZGVfdmFyaWFibGUsXG4gICAgICBhY3Rpb246ICgpID0+IHRoaXMuY2hhbmdlVmFyaWFibGVYKGNvZGVfdmFyaWFibGUpLFxuICAgIH0pO1xuICAgIHRoaXMuaXRlbXNZLnB1c2goe1xuICAgICAgbmFtZTogY29kZV92YXJpYWJsZSxcbiAgICAgIGFjdGlvbjogKCkgPT4gdGhpcy5jaGFuZ2VWYXJpYWJsZVkoY29kZV92YXJpYWJsZSksXG4gICAgfSk7XG4gIH1cblxuICByZW1vdmVWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgLy8gUmVtb3ZlIHRoZSB2YXJpYWJsZSBmcm9tIHRoZSBYIGFuZCBZIGxpc3Qgb2YgaXRlbXM6XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuaXRlbXNYLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICBpZiAodGhpcy5pdGVtc1hbaV0ubmFtZSA9PT0gY29kZV92YXJpYWJsZSkge1xuICAgICAgICB0aGlzLml0ZW1zWC5zcGxpY2UoaSwgMSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gdGhpcy5pdGVtc1kubGVuZ3RoIC0gMTsgaSA+IC0xOyBpLS0pIHtcbiAgICAgIGlmICh0aGlzLml0ZW1zWVtpXS5uYW1lID09PSBjb2RlX3ZhcmlhYmxlKSB7XG4gICAgICAgIHRoaXMuaXRlbXNZLnNwbGljZShpLCAxKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIHZhcmlhYmxlIHRvIHJlbW92ZSB3YXMgY3VycmVudGx5IHVzZWQgZm9yIGRyYXdpbmcgdGhpcyBjaGFydCxcbiAgICAvLyBzZXQgYSBuZXcgdmFyaWFibGUgZm9yIHRoaXMgYXhpcyBhbmQgcmVkcmF3IHRoZSBjaGFydDpcbiAgICBpZiAoY29kZV92YXJpYWJsZSA9PT0gdGhpcy52YXJpYWJsZTEpIHtcbiAgICAgIGNvbnN0IG5ld192YXJfeCA9IHRoaXMuaXRlbXNYLmZpbHRlcihmdCA9PiBmdC5uYW1lICE9PSB0aGlzLnZhcmlhYmxlMilbMF0ubmFtZTtcbiAgICAgIHRoaXMuY2hhbmdlVmFyaWFibGVYKG5ld192YXJfeCk7XG4gICAgfSBlbHNlIGlmIChjb2RlX3ZhcmlhYmxlID09PSB0aGlzLnZhcmlhYmxlMikge1xuICAgICAgY29uc3QgbmV3X3Zhcl95ID0gdGhpcy5pdGVtc1kuZmlsdGVyKGZ0ID0+IGZ0Lm5hbWUgIT09IHRoaXMudmFyaWFibGUxKVswXS5uYW1lO1xuICAgICAgdGhpcy5jaGFuZ2VWYXJpYWJsZVkobmV3X3Zhcl95KTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5yZW1vdmUoKTtcbiAgICB0aGlzLm1hcF9lbGVtLnVuYmluZEJydXNoQ2xpY2soKTtcbiAgICB0aGlzLm1hcF9lbGVtID0gbnVsbDtcbiAgICBzdmdfYmFyLmh0bWwoJycpO1xuICB9XG5cbiAgYmluZE1hcChtYXBfZWxlbSkge1xuICAgIHRoaXMubWFwX2VsZW0gPSBtYXBfZWxlbTtcbiAgICB0aGlzLnVwZGF0ZU1hcFJlZ2lvKCk7XG4gICAgdGhpcy51cGRhdGUoKTtcbiAgfVxuXG4gIHByZXBhcmVUYWJsZVN0YXQoKSB7XG4gICAgY29uc3QgdmFsdWVzMSA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUxXSk7XG4gICAgY29uc3QgdmFsdWVzMiA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkW3RoaXMudmFyaWFibGUyXSk7XG4gICAgY29uc3QgZmVhdHVyZXMgPSBbXG4gICAgICB7XG4gICAgICAgIE1pbjogZDMubWluKHZhbHVlczEpLFxuICAgICAgICBNYXg6IGQzLm1heCh2YWx1ZXMxKSxcbiAgICAgICAgTW95ZW5uZTogZ2V0TWVhbih2YWx1ZXMxKSxcbiAgICAgICAgaWQ6IHRoaXMudmFyaWFibGUxLFxuICAgICAgICBWYXJpYWJsZTogdGhpcy52YXJpYWJsZTEsXG4gICAgICAgICdNYSByw6lnaW9uJzogdGhpcy5yZWZfdmFsdWUxLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgTWluOiBkMy5taW4odmFsdWVzMiksXG4gICAgICAgIE1heDogZDMubWF4KHZhbHVlczIpLFxuICAgICAgICBNb3llbm5lOiBnZXRNZWFuKHZhbHVlczIpLFxuICAgICAgICBpZDogdGhpcy52YXJpYWJsZTIsXG4gICAgICAgIFZhcmlhYmxlOiB0aGlzLnZhcmlhYmxlMixcbiAgICAgICAgJ01hIHLDqWdpb24nOiB0aGlzLnJlZl92YWx1ZTIsXG4gICAgICB9XTtcbiAgICByZXR1cm4gZmVhdHVyZXM7XG4gIH1cblxuICB1cGRhdGVUYWJsZVN0YXQoKSB7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5yZW1vdmVBbGwoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzLmFkZEZlYXR1cmVzKHRoaXMucHJlcGFyZVRhYmxlU3RhdCgpKTtcbiAgfVxuXG4gIG1ha2VUYWJsZVN0YXQoKSB7XG4gICAgY29uc3QgZmVhdHVyZXMgPSB0aGlzLnByZXBhcmVUYWJsZVN0YXQoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzID0gbmV3IFRhYmxlUmVzdW1lU3RhdChmZWF0dXJlcyk7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtcbiAgbWF0aF9tYXgsIG1hdGhfc2luLCBtYXRoX2NvcywgSEFMRl9QSSwgX2dldFBSLCBjb21wdXRlUGVyY2VudGlsZVJhbmssIGdldE1lYW4gfSBmcm9tICcuLy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgY29sb3JfZGlzYWJsZWQsIGNvbG9yX2NvdW50cmllcywgY29sb3JfaGlnaGxpZ2h0LCBjb2xvcl9kZWZhdWx0X2Rpc3NpbSB9IGZyb20gJy4vLi4vb3B0aW9ucyc7XG5pbXBvcnQgeyBjYWxjUG9wQ29tcGxldHVkZVN1YnNldCB9IGZyb20gJy4vLi4vcHJlcGFyZV9kYXRhJztcbmltcG9ydCB7IGFwcCwgdmFyaWFibGVzX2luZm8sIHJlc2V0Q29sb3JzIH0gZnJvbSAnLi8uLi8uLi9tYWluJztcbmltcG9ydCBUYWJsZVJlc3VtZVN0YXQgZnJvbSAnLi8uLi90YWJsZVJlc3VtZVN0YXQnO1xuXG5jb25zdCBzdmdfYmFyID0gZDMuc2VsZWN0KCcjc3ZnX2JhcicpO1xuY29uc3QgbWFyZ2luID0geyB0b3A6IDcwLCByaWdodDogNzAsIGJvdHRvbTogNzAsIGxlZnQ6IDcwIH07XG5cbmNvbnN0IHdpZHRoID0gK3N2Z19iYXIuYXR0cignd2lkdGgnKSAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0LFxuICBoZWlnaHQgPSArc3ZnX2Jhci5hdHRyKCdoZWlnaHQnKSAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tO1xuXG5jb25zdCB3cmFwID0gKF90ZXh0LCBfd2lkdGgpID0+IHtcbiAgX3RleHQuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgIHdvcmRzID0gdGV4dC50ZXh0KCkuc3BsaXQoL1xccysvKS5yZXZlcnNlKCksXG4gICAgICBsaW5lSGVpZ2h0ID0gMS40LCAvLyBlbXNcbiAgICAgIHkgPSB0ZXh0LmF0dHIoJ3knKSxcbiAgICAgIHggPSB0ZXh0LmF0dHIoJ3gnKSxcbiAgICAgIGR5ID0gcGFyc2VGbG9hdCh0ZXh0LmF0dHIoJ2R5JykpO1xuICAgIGxldCBsaW5lID0gW10sXG4gICAgICBsaW5lTnVtYmVyID0gMDtcbiAgICBsZXQgdHNwYW4gPSB0ZXh0LnRleHQobnVsbClcbiAgICAgIC5hcHBlbmQoJ3RzcGFuJylcbiAgICAgIC5hdHRyKCd4JywgeClcbiAgICAgIC5hdHRyKCd5JywgeSlcbiAgICAgIC5hdHRyKCdkeScsIGAke2R5fWVtYCk7XG4gICAgbGV0IHdvcmQgPSB3b3Jkcy5wb3AoKTtcbiAgICB3aGlsZSAod29yZCkge1xuICAgICAgbGluZS5wdXNoKHdvcmQpO1xuICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oJyAnKSk7XG4gICAgICBpZiAodHNwYW4ubm9kZSgpLmdldENvbXB1dGVkVGV4dExlbmd0aCgpID4gX3dpZHRoKSB7XG4gICAgICAgIGxpbmUucG9wKCk7XG4gICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKCcgJykpO1xuICAgICAgICBsaW5lID0gW3dvcmRdO1xuICAgICAgICB0c3BhbiA9IHRleHQuYXBwZW5kKCd0c3BhbicpXG4gICAgICAgICAgLmF0dHIoJ3gnLCB4KVxuICAgICAgICAgIC5hdHRyKCd5JywgeSlcbiAgICAgICAgICAuYXR0cignZHknLCBgJHsrK2xpbmVOdW1iZXIgKiBsaW5lSGVpZ2h0ICsgZHl9ZW1gKVxuICAgICAgICAgIC50ZXh0KHdvcmQpO1xuICAgICAgfVxuICAgICAgd29yZCA9IHdvcmRzLnBvcCgpO1xuICAgIH1cbiAgfSk7XG59O1xuXG5jb25zdCBtb3ZlID0gZnVuY3Rpb24gbW92ZShhcnJheSwgZnJvbSwgdG8pIHtcbiAgYXJyYXkuc3BsaWNlKHRvLCAwLCBhcnJheS5zcGxpY2UoZnJvbSwgMSlbMF0pO1xuICByZXR1cm4gYXJyYXk7XG59O1xuXG5jb25zdCBzd2FwID0gZnVuY3Rpb24gc3dhcChhcnJheSwgaXgxLCBpeDIpIHtcbiAgW2FycmF5W2l4MV0sIGFycmF5W2l4Ml1dID0gW2FycmF5W2l4Ml0sIGFycmF5W2l4MV1dOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIHJldHVybiBhcnJheTtcbn07XG5cbmV4cG9ydCBjb25zdCBwcmVwYXJlX2RhdGFfcmFkYXJfZGVmYXVsdCA9IChkYXRhLCB2YXJpYWJsZXMpID0+IHtcbiAgY29uc3QgZmVhdHVyZXMgPSBbXTtcbiAgLy8gUHJlcGFyZSB0aGUgZGF0YSBmb3IgXCJNeSBSw6lnaW9uXCI6XG4gIGNvbnN0IHZfbXlfcmVnaW9uID0gZGF0YS5maW5kKGQgPT4gZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbik7XG4gIGNvbnN0IG9qYl9teV9yZWdpb24gPSB7XG4gICAgbmFtZTogYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbixcbiAgICBheGVzOiBbXSxcbiAgfTtcbiAgdmFyaWFibGVzLmZvckVhY2goKHYpID0+IHtcbiAgICBjb25zdCB0ID0gdmFyaWFibGVzX2luZm8uZmluZChkID0+IGQucmF0aW8gPT09IHYpLm5hbWU7XG4gICAgY29uc3QgX3YgPSBgcHJfJHt2fWA7XG4gICAgb2piX215X3JlZ2lvbi5heGVzLnB1c2goe1xuICAgICAgYXhpczogdCwgdmFsdWU6IHZfbXlfcmVnaW9uW192XSxcbiAgICB9KTtcbiAgfSk7XG4gIGZlYXR1cmVzLnB1c2gob2piX215X3JlZ2lvbik7XG4gIGNvbnN0IG9ial9tZWFuID0ge1xuICAgIG5hbWU6ICdNb3llbm5lIGR1IGNvbnRleHRlIGRcXCfDqXR1ZGUnLFxuICAgIGF4ZXM6IFtdLFxuICB9O1xuICB2YXJpYWJsZXMuZm9yRWFjaCgodikgPT4ge1xuICAgIGNvbnN0IHQgPSB2YXJpYWJsZXNfaW5mby5maW5kKGQgPT4gZC5yYXRpbyA9PT0gdikubmFtZTtcbiAgICBjb25zdCBfdiA9IGBwcl8ke3Z9YDtcbiAgICBvYmpfbWVhbi5heGVzLnB1c2goe1xuICAgICAgYXhpczogdCxcbiAgICAgIHZhbHVlOiBfZ2V0UFIoZ2V0TWVhbihkYXRhLm1hcChkID0+IGRbX3ZdKSksIGRhdGEubWFwKGQgPT4gZFtfdl0pKSxcbiAgICB9KTtcbiAgfSk7XG4gIGZlYXR1cmVzLnB1c2gob2JqX21lYW4pO1xuICByZXR1cm4gZmVhdHVyZXM7XG59O1xuXG5leHBvcnQgY29uc3QgcHJlcGFyZV9kYXRhX3JhZGFyX2Z0ID0gKGRhdGEsIHZhcmlhYmxlcywgZnQpID0+IHtcbiAgY29uc3QgZnRfdmFsdWVzID0gZGF0YS5maW5kKGQgPT4gZC5pZCA9PT0gZnQpO1xuICBpZiAoIWZ0X3ZhbHVlcykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIGNvbnN0IG9iaiA9IHtcbiAgICBuYW1lOiBmdCxcbiAgICBheGVzOiBbXSxcbiAgfTtcbiAgdmFyaWFibGVzLmZvckVhY2goKHYpID0+IHtcbiAgICBjb25zdCB0ID0gdmFyaWFibGVzX2luZm8uZmluZChkID0+IGQucmF0aW8gPT09IHYpLm5hbWU7XG4gICAgY29uc3QgX3YgPSBgcHJfJHt2fWA7XG4gICAgb2JqLmF4ZXMucHVzaCh7XG4gICAgICBheGlzOiB0LCB2YWx1ZTogZnRfdmFsdWVzW192XSxcbiAgICB9KTtcbiAgfSk7XG4gIHJldHVybiBvYmo7XG59O1xuXG5leHBvcnQgY2xhc3MgUmFkYXJDaGFydDMge1xuICBjb25zdHJ1Y3RvcihkYXRhLCBvcHRpb25zKSB7XG4gICAgY29uc3QgY2ZnID0ge1xuICAgICAgdzogd2lkdGgsIC8vIFdpZHRoIG9mIHRoZSBjaXJjbGVcbiAgICAgIGg6IGhlaWdodCwgLy8gSGVpZ2h0IG9mIHRoZSBjaXJjbGVcbiAgICAgIG1hcmdpbjogbWFyZ2luLCAvLyBUaGUgbWFyZ2lucyBvZiB0aGUgU1ZHXG4gICAgICBsZXZlbHM6IDEwLCAvLyBIb3cgbWFueSBsZXZlbHMgb3IgaW5uZXIgY2lyY2xlcyBzaG91bGQgdGhlcmUgYmUgZHJhd25cbiAgICAgIG1heFZhbHVlOiAxMDAsIC8vIFdoYXQgaXMgdGhlIHZhbHVlIHRoYXQgdGhlIGJpZ2dlc3QgY2lyY2xlIHdpbGwgcmVwcmVzZW50XG4gICAgICBsYWJlbEZhY3RvcjogMS4zLCAvLyBIb3cgbXVjaCBmYXJ0aGVyIHRoYW4gdGhlIHJhZGl1cyBvZiB0aGUgb3V0ZXIgY2lyY2xlIHNob3VsZCB0aGUgbGFiZWxzIGJlIHBsYWNlZFxuICAgICAgd3JhcFdpZHRoOiA4NSwgLy8gVGhlIG51bWJlciBvZiBwaXhlbHMgYWZ0ZXIgd2hpY2ggYSBsYWJlbCBuZWVkcyB0byBiZSBnaXZlbiBhIG5ldyBsaW5lXG4gICAgICBvcGFjaXR5QXJlYTogMC4zNSwgLy8gVGhlIG9wYWNpdHkgb2YgdGhlIGFyZWEgb2YgdGhlIGJsb2JcbiAgICAgIGRvdFJhZGl1czogNCwgLy8gVGhlIHNpemUgb2YgdGhlIGNvbG9yZWQgY2lyY2xlcyBvZiBlYWNoIGJsb2dcbiAgICAgIG9wYWNpdHlDaXJjbGVzOiAwLjEsIC8vIFRoZSBvcGFjaXR5IG9mIHRoZSBjaXJjbGVzIG9mIGVhY2ggYmxvYlxuICAgICAgc3Ryb2tlV2lkdGg6IDIsIC8vIFRoZSB3aWR0aCBvZiB0aGUgc3Ryb2tlIGFyb3VuZCBlYWNoIGJsb2JcbiAgICAgIHJvdW5kU3Ryb2tlczogZmFsc2UsIC8vIElmIHRydWUgdGhlIGFyZWEgYW5kIHN0cm9rZSB3aWxsIGZvbGxvdyBhIHJvdW5kIHBhdGggKGNhcmRpbmFsLWNsb3NlZClcbiAgICAgIGNvbG9yOiBkMy5zY2FsZU9yZGluYWwoZDMuc2NoZW1lQ2F0ZWdvcnkxMCksIC8vIENvbG9yIGZ1bmN0aW9uLFxuICAgICAgZm9ybWF0OiAnLjInLCAvLyBUaGUgZm9ybWF0IHN0cmluZyB0byBiZSB1c2VkIGJ5IGQzLmZvcm1hdFxuICAgICAgdW5pdDogJyUnLCAvLyBUaGUgdW5pdCB0byBkaXNwbGF5IGFmdGVyIHRoZSBudW1iZXIgb24gdGhlIGF4aXMgYW5kIHBvaW50IHRvb2x0aXBzIChsaWtlICQsIOKCrCwgJSwgZXRjKVxuICAgICAgbGVnZW5kOiBmYWxzZSxcbiAgICAgIGFsbG93SW52ZXJzZURhdGE6IHRydWUsXG4gICAgfTtcbiAgICB0aGlzLmNmZyA9IGNmZztcbiAgICAvLyBQdXQgYWxsIG9mIHRoZSBvcHRpb25zIGludG8gYSB2YXJpYWJsZSBjYWxsZWQgY2ZnXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgZm9yIChjb25zdCBpIGluIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zW2ldICE9PSAndW5kZWZpbmVkJykgeyBjZmdbaV0gPSBvcHRpb25zW2ldOyB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5nID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2lkJywgJ1JhZGFyR3JwJylcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7Y2ZnLncgLyAyICsgY2ZnLm1hcmdpbi5sZWZ0fSwke2NmZy5oIC8gMiArIGNmZy5tYXJnaW4udG9wfSlgKTtcblxuICAgIHRoaXMucHJlcGFyZURhdGEoZGF0YSk7XG4gICAgdGhpcy5kcmF3QXhpc0dyaWQoKTtcbiAgICB0aGlzLmRyYXdBcmVhKCk7XG4gICAgdGhpcy5oYW5kbGVMZWdlbmQoKTtcbiAgICAvLyBDb21wdXRlIHRoZSBcImNvbXBsw6l0dWRlXCIgdmFsdWUgZm9yIHRoZXNlIHJhdGlvczpcbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIHRoaXMudmFyaWFibGVzKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgXCJjb21wbMOpdHVkZVwiIHRleHQ6XG4gICAgdGhpcy5jb21wbGV0dWRlID0gc3ZnX2Jhci5hcHBlbmQoJ3RleHQnKVxuICAgICAgLmF0dHJzKHsgaWQ6ICdjaGFydF9jb21wbGV0dWRlJywgeDogNjAsIHk6IDQwIH0pXG4gICAgICAuc3R5bGVzKHsgJ2ZvbnQtZmFtaWx5JzogJ1xcJ1NpZ25pa2FcXCcsIHNhbnMtc2VyaWYnIH0pXG4gICAgICAudGV4dChgQ29tcGzDqXR1ZGUgOiAke3RoaXMuY29tcGxldHVkZV92YWx1ZX0lYCk7XG5cbiAgICBpZiAoY2ZnLmFsbG93SW52ZXJzZURhdGEpIHtcbiAgICAgIHRoaXMuaW52ZXJzZV9kYXRhID0gKGZpZWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGFfbGVuZ3RoID0gdGhpcy5kYXRhLmxlbmd0aDtcbiAgICAgICAgaWYgKCFmaWVsZCkge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YV9sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXggPSB0aGlzLmRhdGFbaV0uYXhlcztcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXgubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgYXhbal0udmFsdWUgPSAxMDAgLSBheFtqXS52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhX2xlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBheCA9IHRoaXMuZGF0YVtpXS5heGVzO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBheC5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICBpZiAoYXhbal0uYXhpcyA9PT0gZmllbGQpIHtcbiAgICAgICAgICAgICAgICBheFtqXS52YWx1ZSA9IDEwMCAtIGF4W2pdLnZhbHVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLm1ha2VUYWJsZVN0YXQoKTtcbiAgfVxuXG4gIGFkZF9lbGVtZW50KGVsZW0pIHtcbiAgICBjb25zdCBuX2F4aXMgPSBlbGVtLmF4ZXMubWFwKGkgPT4gaS5heGlzKTtcbiAgICBpZiAoIShKU09OLnN0cmluZ2lmeShuX2F4aXMpID09PSBKU09OLnN0cmluZ2lmeSh0aGlzLmFsbEF4aXMpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBlbGVtZW50IHdpdGggc2FtZSBheGVzIG5hbWUgdGhhbiBleGlzdGluZyBkYXRhLicpO1xuICAgIH1cbiAgICB0aGlzLmRhdGEucHVzaChlbGVtKTtcbiAgICB0aGlzLmRpc3BsYXllZF9pZHMucHVzaChlbGVtLm5hbWUpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBvbl9heGVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YVtqXS5heGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZGF0YVtqXS5heGVzW2ldLmlkID0gdGhpcy5kYXRhW2pdLm5hbWU7XG4gICAgICAgIG9uX2F4ZXMucHVzaCh0aGlzLmRhdGFbal0ubmFtZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgY2ZnID0gdGhpcy5jZmc7XG4gICAgY29uc3QgbiA9IHRoaXMuZGF0YS5sZW5ndGggLSAxO1xuICAgIGNvbnN0IGJsb2JXcmFwcGVyID0gdGhpcy5nXG4gICAgICAuaW5zZXJ0KCdnJywgJy5yYWRhckNpcmNsZVdyYXBwZXInKVxuICAgICAgLmF0dHIoJ2lkJywgZWxlbS5uYW1lLmluZGV4T2YoJyAnKSA+IC0xID8gJ2N0eCcgOiBlbGVtLm5hbWUpXG4gICAgICAuYXR0cignY2xhc3MnLCAncmFkYXJXcmFwcGVyJyk7XG5cbiAgICAvLyBBcHBlbmQgdGhlIGJhY2tncm91bmRzXG4gICAgYmxvYldyYXBwZXJcbiAgICAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3JhZGFyQXJlYScpXG4gICAgICAuYXR0cignZCcsIHRoaXMucmFkYXJMaW5lKGVsZW0uYXhlcykpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBjZmcuY29sb3IobikpXG4gICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIDApXG4gICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIGNmZy5vcGFjaXR5QXJlYSlcbiAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBEaW0gYWxsIGJsb2JzXG4gICAgICAgIGJsb2JXcmFwcGVyLnNlbGVjdEFsbCgnLnJhZGFyQXJlYScpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApXG4gICAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwLjEpO1xuICAgICAgICAvLyBCcmluZyBiYWNrIHRoZSBob3ZlcmVkIG92ZXIgYmxvYlxuICAgICAgICBkMy5zZWxlY3QodGhpcylcbiAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMClcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIDAuNyk7XG4gICAgICB9KVxuICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgLy8gQnJpbmcgYmFjayBhbGwgYmxvYnNcbiAgICAgICAgYmxvYldyYXBwZXIuc2VsZWN0QWxsKCcucmFkYXJBcmVhJylcbiAgICAgICAgICAudHJhbnNpdGlvbigpLmR1cmF0aW9uKDIwMClcbiAgICAgICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIGNmZy5vcGFjaXR5QXJlYSk7XG4gICAgICB9KTtcbiAgICAgIC8vIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAvLyAgIGNvbnN0IHAgPSB0aGlzLnBhcmVudEVsZW1lbnQ7XG4gICAgICAvLyAgIGlmIChwLnByZXZpb3VzU2libGluZy5jbGFzc05hbWUgIT09ICd0b29sdGlwJykge1xuICAgICAgLy8gICAgIGNvbnN0IGdyb3VwID0gZy5ub2RlKCk7XG4gICAgICAvLyAgICAgZ3JvdXAuaW5zZXJ0QmVmb3JlKHAsIGdyb3VwLnF1ZXJ5U2VsZWN0b3IoJy50b29sdGlwJykpO1xuICAgICAgLy8gICAgIGNvbnN0IG5ld19vcmRlciA9IFtdO1xuICAgICAgLy8gICAgIGcuc2VsZWN0QWxsKCcucmFkYXJXcmFwcGVyJykuZWFjaChkID0+IG5ld19vcmRlci5wdXNoKGQubmFtZSkpO1xuICAgICAgLy8gICAgIG5ld19vcmRlci5yZXZlcnNlKCk7XG4gICAgICAvLyAgICAgdXBkYXRlTGVnZW5kKG5ld19vcmRlcik7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHRoZSBvdXRsaW5lc1xuICAgIGJsb2JXcmFwcGVyLmFwcGVuZCgncGF0aCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAncmFkYXJTdHJva2UnKVxuICAgICAgLmF0dHIoJ2QnLCB0aGlzLnJhZGFyTGluZShlbGVtLmF4ZXMpKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBgJHtjZmcuc3Ryb2tlV2lkdGh9cHhgKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBjZmcuY29sb3IobikpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAnbm9uZScpXG4gICAgICAuc3R5bGUoJ2ZpbHRlcicsICd1cmwoI2dsb3cpJyk7XG5cbiAgICAvLyBBcHBlbmQgdGhlIGNpcmNsZXNcbiAgICBibG9iV3JhcHBlci5zZWxlY3RBbGwoJy5yYWRhckNpcmNsZScpXG4gICAgICAuZGF0YShlbGVtLmF4ZXMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdyYWRhckNpcmNsZScpXG4gICAgICAuYXR0cigncicsIGNmZy5kb3RSYWRpdXMpXG4gICAgICAuYXR0cignY3gnLCAoZCwgaSkgPT4gdGhpcy5yU2NhbGUoZC52YWx1ZSkgKiBtYXRoX2Nvcyh0aGlzLmFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAuYXR0cignY3knLCAoZCwgaSkgPT4gdGhpcy5yU2NhbGUoZC52YWx1ZSkgKiBtYXRoX3Npbih0aGlzLmFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGNmZy5jb2xvcihkLmlkKSlcbiAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgMC44KTtcblxuICAgIGJsb2JXcmFwcGVyLm5vZGUoKS5fX2RhdGFfXyA9IGVsZW07XG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gLy8vLy8vIEFwcGVuZCBpbnZpc2libGUgY2lyY2xlcyBmb3IgdG9vbHRpcCAvLy8vLy8vLy8vL1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFdyYXBwZXIgZm9yIHRoZSBpbnZpc2libGUgY2lyY2xlcyBvbiB0b3BcbiAgICBjb25zdCBibG9iQ2lyY2xlV3JhcHBlciA9IHRoaXMuZ1xuICAgICAgLmluc2VydCgnZycsICcudG9vbHRpcCcpXG4gICAgICAuYXR0cignaWQnLCBlbGVtLm5hbWUuaW5kZXhPZignICcpID4gLTEgPyAnY3R4JyA6IGVsZW0ubmFtZSlcbiAgICAgIC5hdHRyKCdjbGFzcycsICdyYWRhckNpcmNsZVdyYXBwZXInKTtcblxuICAgIC8vIEFwcGVuZCBhIHNldCBvZiBpbnZpc2libGUgY2lyY2xlcyBvbiB0b3AgZm9yIHRoZSBtb3VzZW92ZXIgcG9wLXVwXG4gICAgYmxvYkNpcmNsZVdyYXBwZXIuc2VsZWN0QWxsKCcucmFkYXJJbnZpc2libGVDaXJjbGUnKVxuICAgICAgLmRhdGEoZWxlbS5heGVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY2xhc3MnLCAncmFkYXJJbnZpc2libGVDaXJjbGUnKVxuICAgICAgLmF0dHIoJ3InLCBjZmcuZG90UmFkaXVzICogMS41KVxuICAgICAgLmF0dHIoJ2N4JywgKGQsIGkpID0+IHRoaXMuclNjYWxlKGQudmFsdWUpICogbWF0aF9jb3ModGhpcy5hbmdsZVNsaWNlICogaSAtIEhBTEZfUEkpKVxuICAgICAgLmF0dHIoJ2N5JywgKGQsIGkpID0+IHRoaXMuclNjYWxlKGQudmFsdWUpICogbWF0aF9zaW4odGhpcy5hbmdsZVNsaWNlICogaSAtIEhBTEZfUEkpKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdhbGwnKVxuICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZCkge1xuICAgICAgICBzZWxmLmcuc2VsZWN0KCcudG9vbHRpcCcpXG4gICAgICAgICAgLmF0dHIoJ3gnLCB0aGlzLmN4LmJhc2VWYWwudmFsdWUgLSAxMClcbiAgICAgICAgICAuYXR0cigneScsIHRoaXMuY3kuYmFzZVZhbC52YWx1ZSAtIDEwKVxuICAgICAgICAgIC50cmFuc2l0aW9uKClcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnYmxvY2snKVxuICAgICAgICAgIC50ZXh0KHRoaXMuRm9ybWF0KGQudmFsdWUpICsgY2ZnLnVuaXQpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgIHNlbGYuZy5zZWxlY3QoJy50b29sdGlwJykudHJhbnNpdGlvbigpXG4gICAgICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKS50ZXh0KCcnKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlT3JkZXIoKSB7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLnNsaWNlKDEsIHRoaXMuZGF0YS5sZW5ndGgpLmNvbmNhdCh0aGlzLmRhdGEuc2xpY2UoMCwgMSkpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICBwcmVwYXJlRGF0YShkYXRhKSB7XG4gICAgLy8gU2V0IHRoZSBtaW5pbXVtIG51bWJlciBvZiB2YXJpYWJsZXMgdG8ga2VlcCBzZWxlY3RlZCBmb3IgdGhpcyBraW5kIG9mIGNoYXJ0OlxuICAgIGFwcC5jdXJyZW50X2NvbmZpZy5uYl92YXIgPSAzO1xuICAgIHRoaXMudmFyaWFibGVzID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvO1xuICAgIHRoaXMucmVmX2RhdGEgPSBkYXRhLnNsaWNlKCkuZmlsdGVyKFxuICAgICAgZnQgPT4gdGhpcy52YXJpYWJsZXMubWFwKHYgPT4gISFmdFt2XSkuZXZlcnkoZCA9PiBkID09PSB0cnVlKSk7XG4gICAgdGhpcy5yYW5rX3ZhcmlhYmxlcyA9IHRoaXMudmFyaWFibGVzLm1hcChkID0+IGBwcl8ke2R9YCk7XG4gICAgdGhpcy52YXJpYWJsZXMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgICAgY29tcHV0ZVBlcmNlbnRpbGVSYW5rKHRoaXMucmVmX2RhdGEsIGQsIHRoaXMucmFua192YXJpYWJsZXNbaV0pO1xuICAgIH0pO1xuICAgIHRoaXMuZGF0YSA9IHByZXBhcmVfZGF0YV9yYWRhcl9kZWZhdWx0KHRoaXMucmVmX2RhdGEsIHRoaXMudmFyaWFibGVzKTtcbiAgICB0aGlzLmRpc3BsYXllZF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5uYW1lKTtcbiAgICB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5yZWZfZGF0YS5tYXAoZCA9PiBkLmlkKTtcbiAgICB0aGlzLmlkX215X3JlZ2lvbiA9IGFwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb247XG4gICAgLy8gY29uc3QgcmVmX2lkcyA9IFtdO1xuICAgIC8vIElmIHRoZSBzdXBwbGllZCBtYXhWYWx1ZSBpcyBzbWFsbGVyIHRoYW4gdGhlIGFjdHVhbCBvbmUsIHJlcGxhY2UgYnkgdGhlIG1heCBpbiB0aGUgZGF0YVxuICAgIC8vIHZhciBtYXhWYWx1ZSA9IG1heChjZmcubWF4VmFsdWUsIGQzLm1heChkYXRhLCBmdW5jdGlvbihpKXtyZXR1cm4gZDMubWF4KGkubWFwKGZ1bmN0aW9uKG8pe3JldHVybiBvLnZhbHVlO30pKX0pKTtcbiAgICBsZXQgbWF4VmFsdWUgPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICBjb25zdCBvbl9heGVzID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YVtqXS5heGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZGF0YVtqXS5heGVzW2ldLmlkID0gdGhpcy5kYXRhW2pdLm5hbWU7XG4gICAgICAgIC8vIG9uX2F4ZXMucHVzaCh0aGlzLmRhdGFbal0ubmFtZSk7XG4gICAgICAgIGlmICh0aGlzLmRhdGFbal0uYXhlc1tpXS52YWx1ZSA+IG1heFZhbHVlKSB7XG4gICAgICAgICAgbWF4VmFsdWUgPSB0aGlzLmRhdGFbal0uYXhlc1tpXS52YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWZfaWRzLnB1c2gob25fYXhlcyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5tYXhWYWx1ZSA9IG1hdGhfbWF4KHRoaXMuY2ZnLm1heFZhbHVlLCBtYXhWYWx1ZSk7XG4gICAgdGhpcy5hbGxBeGlzID0gdGhpcy5kYXRhWzBdLmF4ZXMubWFwKGkgPT4gaS5heGlzKTsgLy8gTmFtZXMgb2YgZWFjaCBheGlzXG4gICAgdGhpcy50b3RhbCA9IHRoaXMuYWxsQXhpcy5sZW5ndGg7IC8vIFRoZSBudW1iZXIgb2YgZGlmZmVyZW50IGF4ZXNcbiAgICB0aGlzLnJhZGl1cyA9IE1hdGgubWluKHRoaXMuY2ZnLncgLyAyLCB0aGlzLmNmZy5oIC8gMik7IC8vIFJhZGl1cyBvZiB0aGUgb3V0ZXJtb3N0IGNpcmNsZVxuICAgIHRoaXMuRm9ybWF0ID0gZDMuZm9ybWF0KHRoaXMuY2ZnLmZvcm1hdCk7IC8vIEZvcm1hdHRpbmdcbiAgICB0aGlzLmFuZ2xlU2xpY2UgPSBNYXRoLlBJICogMiAvIHRoaXMudG90YWw7IC8vIFRoZSB3aWR0aCBpbiByYWRpYW5zIG9mIGVhY2ggXCJzbGljZVwiXG4gICAgLy8gU2NhbGUgZm9yIHRoZSByYWRpdXNcbiAgICB0aGlzLnJTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5yYW5nZShbMCwgdGhpcy5yYWRpdXNdKVxuICAgICAgLmRvbWFpbihbMCwgdGhpcy5tYXhWYWx1ZV0pO1xuICAgIC8vIFRoZSByYWRpYWwgbGluZSBmdW5jdGlvblxuICAgIHRoaXMucmFkYXJMaW5lID0gZDMucmFkaWFsTGluZSgpXG4gICAgICAuY3VydmUodGhpcy5jZmcucm91bmRTdHJva2VzID8gZDMuY3VydmVDYXJkaW5hbENsb3NlZCA6IGQzLmN1cnZlTGluZWFyQ2xvc2VkKVxuICAgICAgLnJhZGl1cyhkID0+IHRoaXMuclNjYWxlKGQudmFsdWUpKVxuICAgICAgLmFuZ2xlKChkLCBpKSA9PiBpICogdGhpcy5hbmdsZVNsaWNlKTtcbiAgfVxuXG4gIGRyYXdBeGlzR3JpZCgpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBjb25zdCBjZmcgPSB0aGlzLmNmZztcbiAgICBjb25zdCBnID0gdGhpcy5nO1xuICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMucmFkaXVzO1xuICAgIGNvbnN0IEZvcm1hdCA9IHRoaXMuRm9ybWF0O1xuICAgIGNvbnN0IG1heFZhbHVlID0gdGhpcy5tYXhWYWx1ZTtcbiAgICBjb25zdCByU2NhbGUgPSB0aGlzLnJTY2FsZTtcbiAgICBjb25zdCBhbmdsZVNsaWNlID0gdGhpcy5hbmdsZVNsaWNlO1xuXG4gICAgY29uc3QgbGFiZWxDbGlja2VkID0gZnVuY3Rpb24gbGFiZWxDbGlja2VkKCkge1xuICAgICAgY29uc3QgaXggPSArdGhpcy5pZDtcbiAgICAgIGlmIChpeCArIDEgPT09IHNlbGYuYWxsQXhpcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxmLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBzd2FwKHNlbGYuZGF0YVtpXS5heGVzLCBpeCwgMCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5ld19peCA9IGl4ICsgMTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWxmLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBtb3ZlKHNlbGYuZGF0YVtpXS5heGVzLCBpeCwgbmV3X2l4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICB9O1xuXG4gICAgY29uc3QgbGFiZWxDdHhNZW51ID0gZnVuY3Rpb24gbGFiZWxDdHhNZW51KGxhYmVsKSB7XG4gICAgICBkMy5ldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIGQzLmV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCBpeCA9ICt0aGlzLmlkO1xuICAgICAgc2VsZi5pbnZlcnNlX2RhdGEobGFiZWwpO1xuICAgIH07XG5cbiAgICBjb25zdCBheGlzR3JpZCA9IGcuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAnYXhpc1dyYXBwZXInKTtcblxuICAgIC8vIERyYXcgdGhlIGJhY2tncm91bmQgY2lyY2xlc1xuICAgIGF4aXNHcmlkLnNlbGVjdEFsbCgnLmxldmVscycpXG4gICAgICAuZGF0YShkMy5yYW5nZSgxLCAoY2ZnLmxldmVscyArIDEpKS5yZXZlcnNlKCkpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdncmlkQ2lyY2xlJylcbiAgICAgIC5hdHRyKCdyJywgZCA9PiByYWRpdXMgLyBjZmcubGV2ZWxzICogZClcbiAgICAgIC5zdHlsZSgnZmlsbCcsICcjQ0RDRENEJylcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgJyNDRENEQ0QnKVxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBjZmcub3BhY2l0eUNpcmNsZXMpXG4gICAgICAuc3R5bGUoJ2ZpbHRlcicsICd1cmwoI2dsb3cpJyk7XG5cbiAgICAvLyBUZXh0IGluZGljYXRpbmcgYXQgd2hhdCAlIGVhY2ggbGV2ZWwgaXNcbiAgICBheGlzR3JpZC5zZWxlY3RBbGwoJy5heGlzTGFiZWwnKVxuICAgICAgLmRhdGEoZDMucmFuZ2UoMSwgKGNmZy5sZXZlbHMgKyAxKSkucmV2ZXJzZSgpKVxuICAgICAgLmVudGVyKCkuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzTGFiZWwnKVxuICAgICAgLmF0dHIoJ3gnLCA0KVxuICAgICAgLmF0dHIoJ3knLCBkID0+IC1kICogcmFkaXVzIC8gY2ZnLmxldmVscylcbiAgICAgIC5hdHRyKCdkeScsICcwLjRlbScpXG4gICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxMHB4JylcbiAgICAgIC5hdHRyKCdmaWxsJywgJyM3MzczNzMnKVxuICAgICAgLnRleHQoZCA9PiBGb3JtYXQobWF4VmFsdWUgKiBkIC8gY2ZnLmxldmVscykgKyBjZmcudW5pdCk7XG5cbiAgICAvLyBDcmVhdGUgdGhlIHN0cmFpZ2h0IGxpbmVzIHJhZGlhdGluZyBvdXR3YXJkIGZyb20gdGhlIGNlbnRlclxuICAgIGNvbnN0IGF4aXMgPSBheGlzR3JpZC5zZWxlY3RBbGwoJy5heGlzJylcbiAgICAgIC5kYXRhKHRoaXMuYWxsQXhpcylcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzJyk7XG4gICAgLy8gQXBwZW5kIHRoZSBsaW5lc1xuICAgIGF4aXMuYXBwZW5kKCdsaW5lJylcbiAgICAgIC5hdHRyKCd4MScsIDApXG4gICAgICAuYXR0cigneTEnLCAwKVxuICAgICAgLmF0dHIoJ3gyJywgKGQsIGkpID0+IHJTY2FsZShtYXhWYWx1ZSAqIDEuMSkgKiBtYXRoX2NvcyhhbmdsZVNsaWNlICogaSAtIEhBTEZfUEkpKVxuICAgICAgLmF0dHIoJ3kyJywgKGQsIGkpID0+IHJTY2FsZShtYXhWYWx1ZSAqIDEuMSkgKiBtYXRoX3NpbihhbmdsZVNsaWNlICogaSAtIEhBTEZfUEkpKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmUnKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAnd2hpdGUnKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCAnMnB4Jyk7XG5cbiAgICAvLyBBcHBlbmQgdGhlIGxhYmVscyBhdCBlYWNoIGF4aXNcbiAgICBheGlzLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAnbGVnZW5kJylcbiAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzExcHgnKVxuICAgICAgLmF0dHIoJ2lkJywgKGQsIGkpID0+IGkpXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcbiAgICAgIC5hdHRyKCdkeScsICcwLjM1ZW0nKVxuICAgICAgLmF0dHIoJ3gnLCAoZCwgaSkgPT4gclNjYWxlKG1heFZhbHVlICogY2ZnLmxhYmVsRmFjdG9yKSAqIG1hdGhfY29zKGFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAuYXR0cigneScsIChkLCBpKSA9PiByU2NhbGUobWF4VmFsdWUgKiBjZmcubGFiZWxGYWN0b3IpICogbWF0aF9zaW4oYW5nbGVTbGljZSAqIGkgLSBIQUxGX1BJKSlcbiAgICAgIC50ZXh0KGQgPT4gZClcbiAgICAgIC5vbignY2xpY2snLCBsYWJlbENsaWNrZWQpXG4gICAgICAub24oJ2NvbnRleHRtZW51JywgY2ZnLmFsbG93SW52ZXJzZURhdGEgPyBsYWJlbEN0eE1lbnUgOiBudWxsKVxuICAgICAgLmNhbGwod3JhcCwgY2ZnLndyYXBXaWR0aCk7XG5cbiAgICAvLyBGaWx0ZXIgZm9yIHRoZSBvdXRzaWRlIGdsb3dcbiAgICBjb25zdCBmaWx0ZXIgPSBnLmFwcGVuZCgnZGVmcycpXG4gICAgICAuYXBwZW5kKCdmaWx0ZXInKVxuICAgICAgLmF0dHIoJ2lkJywgJ2dsb3cnKTtcbiAgICBmaWx0ZXIuYXBwZW5kKCdmZUdhdXNzaWFuQmx1cicpXG4gICAgICAuYXR0cignc3RkRGV2aWF0aW9uJywgJzIuNScpXG4gICAgICAuYXR0cigncmVzdWx0JywgJ2NvbG9yZWRCbHVyJyk7XG4gICAgY29uc3QgZmVNZXJnZSA9IGZpbHRlci5hcHBlbmQoJ2ZlTWVyZ2UnKTtcbiAgICBmZU1lcmdlLmFwcGVuZCgnZmVNZXJnZU5vZGUnKS5hdHRyKCdpbicsICdjb2xvcmVkQmx1cicpO1xuICAgIGZlTWVyZ2UuYXBwZW5kKCdmZU1lcmdlTm9kZScpLmF0dHIoJ2luJywgJ1NvdXJjZUdyYXBoaWMnKTtcblxuICAgIHRoaXMuYXhpc0dyaWQgPSBheGlzR3JpZDtcbiAgfVxuXG4gIGhhbmRsZUxlZ2VuZCgpIHtcbiAgICBjb25zdCBjZmcgPSB0aGlzLmNmZztcbiAgICBpZiAoY2ZnLmxlZ2VuZCAhPT0gZmFsc2UgJiYgdHlwZW9mIGNmZy5sZWdlbmQgPT09ICdvYmplY3QnKSB7XG4gICAgICBjb25zdCBuYW1lcyA9IHRoaXMuZGF0YS5tYXAoZWwgPT4gZWwubmFtZSk7XG4gICAgICBpZiAoY2ZnLmxlZ2VuZC50aXRsZSkge1xuICAgICAgICB0aGlzLmxlZ2VuZFpvbmUuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndGl0bGUnKVxuICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsIC0yMCknKVxuICAgICAgICAgIC5hdHRyKCd4JywgY2ZnLncgLSA3MClcbiAgICAgICAgICAuYXR0cigneScsIDEwKVxuICAgICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMTJweCcpXG4gICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnIzQwNDA0MCcpXG4gICAgICAgICAgLnRleHQoY2ZnLmxlZ2VuZC50aXRsZSk7XG4gICAgICB9XG4gICAgICBjb25zdCBsZWdlbmQgPSB0aGlzLmxlZ2VuZFpvbmVcbiAgICAgICAgLnNlbGVjdEFsbCgnZycpXG4gICAgICAgIC5kYXRhKG5hbWVzKTtcbiAgICAgIGNvbnN0IGxlZ2VuZEVudGVyID0gbGVnZW5kXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ2cnKTtcblxuICAgICAgLy8gQ3JlYXRlIHJlY3RhbmdsZXMgbWFya2Vyc1xuICAgICAgbGVnZW5kRW50ZXJcbiAgICAgICAgLmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5hdHRyKCd4JywgY2ZnLncgLSA2NSlcbiAgICAgICAgLmF0dHIoJ3knLCAoZCwgaSkgPT4gaSAqIDIwKVxuICAgICAgICAuYXR0cignd2lkdGgnLCAxMClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDEwKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGNmZy5jb2xvcihkKSk7XG4gICAgICAvLyBDcmVhdGUgbGFiZWxzXG4gICAgICBsZWdlbmRFbnRlclxuICAgICAgICAuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ3gnLCBjZmcudyAtIDUyKVxuICAgICAgICAuYXR0cigneScsIChkLCBpKSA9PiBpICogMjAgKyA5KVxuICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzExcHgnKVxuICAgICAgICAuYXR0cignZmlsbCcsICcjNzM3MzczJylcbiAgICAgICAgLnRleHQoZCA9PiBkKTtcblxuICAgICAgbGVnZW5kLm1lcmdlKGxlZ2VuZEVudGVyKS5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgICAuYXR0cigneScsIChkLCBpKSA9PiBpICogMjApXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gY2ZnLmNvbG9yKGQpKTtcblxuICAgICAgbGVnZW5kLm1lcmdlKGxlZ2VuZEVudGVyKS5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAuYXR0cigneCcsIGNmZy53IC0gNTIpXG4gICAgICAgIC5hdHRyKCd5JywgKGQsIGkpID0+IGkgKiAyMCArIDkpXG4gICAgICAgIC50ZXh0KGQgPT4gZCk7XG5cbiAgICAgIGxlZ2VuZC5leGl0KCkucmVtb3ZlKCk7XG4gICAgfVxuICB9XG5cbiAgZHJhd0FyZWEoKSB7XG4gICAgY29uc3QgY2ZnID0gdGhpcy5jZmc7XG4gICAgY29uc3QgZyA9IHRoaXMuZztcbiAgICBjb25zdCBGb3JtYXQgPSB0aGlzLkZvcm1hdDtcbiAgICBjb25zdCByU2NhbGUgPSB0aGlzLnJTY2FsZTtcbiAgICBjb25zdCBhbmdsZVNsaWNlID0gdGhpcy5hbmdsZVNsaWNlO1xuXG4gICAgLy8gQ3JlYXRlIGEgd3JhcHBlciBmb3IgdGhlIGJsb2JzXG4gICAgY29uc3QgYmxvYldyYXBwZXIgPSBnLnNlbGVjdEFsbCgnLnJhZGFyV3JhcHBlcicpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEsIGQgPT4gZC5uYW1lKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2lkJywgZCA9PiAoZC5uYW1lLmluZGV4T2YoJyAnKSA+IC0xID8gJ2N0eCcgOiBkLm5hbWUpKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3JhZGFyV3JhcHBlcicpO1xuXG4gICAgLy8gQXBwZW5kIHRoZSBiYWNrZ3JvdW5kc1xuICAgIGJsb2JXcmFwcGVyXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdyYWRhckFyZWEnKVxuICAgICAgLmF0dHIoJ2QnLCBkID0+IHRoaXMucmFkYXJMaW5lKGQuYXhlcykpXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCAoZCwgaSkgPT4gY2ZnLmNvbG9yKGkpKVxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwKVxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBjZmcub3BhY2l0eUFyZWEpXG4gICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gRGltIGFsbCBibG9ic1xuICAgICAgICBibG9iV3JhcHBlci5zZWxlY3RBbGwoJy5yYWRhckFyZWEnKVxuICAgICAgICAgIC50cmFuc2l0aW9uKCkuZHVyYXRpb24oMjAwKVxuICAgICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgMC4xKTtcbiAgICAgICAgLy8gQnJpbmcgYmFjayB0aGUgaG92ZXJlZCBvdmVyIGJsb2JcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApXG4gICAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwLjcpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgIC8vIEJyaW5nIGJhY2sgYWxsIGJsb2JzXG4gICAgICAgIGJsb2JXcmFwcGVyLnNlbGVjdEFsbCgnLnJhZGFyQXJlYScpXG4gICAgICAgICAgLnRyYW5zaXRpb24oKS5kdXJhdGlvbigyMDApXG4gICAgICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBjZmcub3BhY2l0eUFyZWEpO1xuICAgICAgfSk7XG4gICAgICAvLyAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgLy8gICBjb25zdCBwID0gdGhpcy5wYXJlbnRFbGVtZW50O1xuICAgICAgLy8gICBpZiAocC5wcmV2aW91c1NpYmxpbmcuY2xhc3NOYW1lICE9PSAndG9vbHRpcCcpIHtcbiAgICAgIC8vICAgICBjb25zdCBncm91cCA9IGcubm9kZSgpO1xuICAgICAgLy8gICAgIGdyb3VwLmluc2VydEJlZm9yZShwLCBncm91cC5xdWVyeVNlbGVjdG9yKCcudG9vbHRpcCcpKTtcbiAgICAgIC8vICAgICBjb25zdCBuZXdfb3JkZXIgPSBbXTtcbiAgICAgIC8vICAgICBnLnNlbGVjdEFsbCgnLnJhZGFyV3JhcHBlcicpLmVhY2goZCA9PiBuZXdfb3JkZXIucHVzaChkLm5hbWUpKTtcbiAgICAgIC8vICAgICBuZXdfb3JkZXIucmV2ZXJzZSgpO1xuICAgICAgLy8gICAgIHVwZGF0ZUxlZ2VuZChuZXdfb3JkZXIpO1xuICAgICAgLy8gICB9XG4gICAgICAvLyB9KTtcblxuICAgIC8vIENyZWF0ZSB0aGUgb3V0bGluZXNcbiAgICBibG9iV3JhcHBlci5hcHBlbmQoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3JhZGFyU3Ryb2tlJylcbiAgICAgIC5hdHRyKCdkJywgZCA9PiB0aGlzLnJhZGFyTGluZShkLmF4ZXMpKVxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBgJHtjZmcuc3Ryb2tlV2lkdGh9cHhgKVxuICAgICAgLnN0eWxlKCdzdHJva2UnLCAoZCwgaSkgPT4gY2ZnLmNvbG9yKGkpKVxuICAgICAgLnN0eWxlKCdmaWxsJywgJ25vbmUnKVxuICAgICAgLnN0eWxlKCdmaWx0ZXInLCAndXJsKCNnbG93KScpO1xuXG4gICAgLy8gQXBwZW5kIHRoZSBjaXJjbGVzXG4gICAgYmxvYldyYXBwZXIuc2VsZWN0QWxsKCcucmFkYXJDaXJjbGUnKVxuICAgICAgLmRhdGEoZCA9PiBkLmF4ZXMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgnY2lyY2xlJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdyYWRhckNpcmNsZScpXG4gICAgICAuYXR0cigncicsIGNmZy5kb3RSYWRpdXMpXG4gICAgICAuYXR0cignY3gnLCAoZCwgaSkgPT4gclNjYWxlKGQudmFsdWUpICogbWF0aF9jb3MoYW5nbGVTbGljZSAqIGkgLSBIQUxGX1BJKSlcbiAgICAgIC5hdHRyKCdjeScsIChkLCBpKSA9PiByU2NhbGUoZC52YWx1ZSkgKiBtYXRoX3NpbihhbmdsZVNsaWNlICogaSAtIEhBTEZfUEkpKVxuICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBjZmcuY29sb3IoZC5pZCkpXG4gICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIDAuOCk7XG5cbiAgICAvLyAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gLy8vLy8vIEFwcGVuZCBpbnZpc2libGUgY2lyY2xlcyBmb3IgdG9vbHRpcCAvLy8vLy8vLy8vL1xuICAgIC8vIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICAgIC8vIFdyYXBwZXIgZm9yIHRoZSBpbnZpc2libGUgY2lyY2xlcyBvbiB0b3BcbiAgICBjb25zdCBibG9iQ2lyY2xlV3JhcHBlciA9IGcuc2VsZWN0QWxsKCcucmFkYXJDaXJjbGVXcmFwcGVyJylcbiAgICAgIC5kYXRhKHRoaXMuZGF0YSwgZCA9PiBkLm5hbWUpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCBkID0+IChkLm5hbWUuaW5kZXhPZignICcpID4gLTEgPyAnY3R4JyA6IGQubmFtZSkpXG4gICAgICAuYXR0cignY2xhc3MnLCAncmFkYXJDaXJjbGVXcmFwcGVyJyk7XG5cbiAgICAvLyBBcHBlbmQgYSBzZXQgb2YgaW52aXNpYmxlIGNpcmNsZXMgb24gdG9wIGZvciB0aGUgbW91c2VvdmVyIHBvcC11cFxuICAgIGJsb2JDaXJjbGVXcmFwcGVyLnNlbGVjdEFsbCgnLnJhZGFySW52aXNpYmxlQ2lyY2xlJylcbiAgICAgIC5kYXRhKGQgPT4gZC5heGVzKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ2NpcmNsZScpXG4gICAgICAuYXR0cignY2xhc3MnLCAncmFkYXJJbnZpc2libGVDaXJjbGUnKVxuICAgICAgLmF0dHIoJ3InLCBjZmcuZG90UmFkaXVzICogMS41KVxuICAgICAgLmF0dHIoJ2N4JywgKGQsIGkpID0+IHJTY2FsZShkLnZhbHVlKSAqIG1hdGhfY29zKGFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAuYXR0cignY3knLCAoZCwgaSkgPT4gclNjYWxlKGQudmFsdWUpICogbWF0aF9zaW4oYW5nbGVTbGljZSAqIGkgLSBIQUxGX1BJKSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsICdub25lJylcbiAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnYWxsJylcbiAgICAgIC5vbignbW91c2VvdmVyJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgZy5zZWxlY3QoJy50b29sdGlwJylcbiAgICAgICAgICAuYXR0cigneCcsIHRoaXMuY3guYmFzZVZhbC52YWx1ZSAtIDEwKVxuICAgICAgICAgIC5hdHRyKCd5JywgdGhpcy5jeS5iYXNlVmFsLnZhbHVlIC0gMTApXG4gICAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdibG9jaycpXG4gICAgICAgICAgLnRleHQoRm9ybWF0KGQudmFsdWUpICsgY2ZnLnVuaXQpO1xuICAgICAgfSlcbiAgICAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgICAgIGcuc2VsZWN0KCcudG9vbHRpcCcpLnRyYW5zaXRpb24oKVxuICAgICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJykudGV4dCgnJyk7XG4gICAgICB9KTtcblxuICAgIGNvbnN0IHRvb2x0aXAgPSBnLmFwcGVuZCgndGV4dCcpXG4gICAgICAuYXR0cignY2xhc3MnLCAndG9vbHRpcCcpXG4gICAgICAuYXR0cigneCcsIDApXG4gICAgICAuYXR0cigneScsIDApXG4gICAgICAuc3R5bGUoJ2ZvbnQtc2l6ZScsICcxMnB4JylcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJylcbiAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgLmF0dHIoJ2R5JywgJzAuMzVlbScpO1xuXG4gICAgdGhpcy5sZWdlbmRab25lID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ2lkJywgJ2xlZ2VuZFpvbmUnKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2NmZy5sZWdlbmQudHJhbnNsYXRlWH0sJHtjZmcubGVnZW5kLnRyYW5zbGF0ZVkgKyAyMH0pYCk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgclNjYWxlID0gdGhpcy5yU2NhbGU7XG4gICAgY29uc3QgbWF4VmFsdWUgPSB0aGlzLm1heFZhbHVlO1xuICAgIGNvbnN0IGNmZyA9IHRoaXMuY2ZnO1xuICAgIGNvbnN0IGFuZ2xlU2xpY2UgPSB0aGlzLmFuZ2xlU2xpY2U7XG4gICAgLy8gY29uc29sZS5sb2codGhpcy5jdXJyZW50X2lkcyk7XG4gICAgLy8gaWYgKG5ld19kYXRhKSB7XG4gICAgLy8gICBjb25zdCBuZXdfYXhpcyA9IG5ld19kYXRhWzBdLmF4ZXMubWFwKGVsZW0gPT4gZWxlbS5heGlzKTtcbiAgICAvLyAgIGlmICghKEpTT04uc3RyaW5naWZ5KG5ld19heGlzKSA9PT0gSlNPTi5zdHJpbmdpZnkodGhpcy5hbGxBeGlzKSkpIHtcbiAgICAvLyAgICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBlbGVtZW50IHdpdGggc2FtZSBheGVzIG5hbWUgdGhhbiBleGlzdGluZyBkYXRhLicpO1xuICAgIC8vICAgfVxuICAgIC8vICAgdGhpcy5kYXRhID0gbmV3X2RhdGE7XG4gICAgLy8gICB0aGlzLmFsbEF4aXMgPSBuZXdfYXhpcztcbiAgICAvLyB9IGVsc2Uge1xuICAgIHRoaXMuYWxsQXhpcyA9IHRoaXMuZGF0YVswXS5heGVzLm1hcChlbGVtID0+IGVsZW0uYXhpcyk7XG4gICAgLy8gfVxuICAgIGNvbnN0IHVwZGF0ZV9heGlzID0gdGhpcy5heGlzR3JpZC5zZWxlY3RBbGwoJy5heGlzJylcbiAgICAgIC5kYXRhKHRoaXMuYWxsQXhpcyk7XG5cbiAgICBjb25zdCB0ID0gdGhpcy5nLnNlbGVjdEFsbCgnLnJhZGFyV3JhcHBlcicpXG4gICAgICAudHJhbnNpdGlvbigpXG4gICAgICAuZHVyYXRpb24oMjI1KTtcbiAgICAgIC8vIC5vbignZW5kJywgKCkgPT4ge1xuICAgICAgLy8gICBwYXJlbnQuc2VsZWN0QWxsKCd0ZXh0LmxlZ2VuZCcpXG4gICAgICAvLyAgICAgLnRleHQoZCA9PiBkKVxuICAgICAgLy8gICAgIC5jYWxsKHdyYXAsIGNmZy53cmFwV2lkdGgpO1xuICAgICAgLy8gICAvLyB3cmFwKHBhcmVudC5zZWxlY3RBbGwoJ3RleHQubGVnZW5kJyksIGNmZy53cmFwV2lkdGgpO1xuICAgICAgLy8gfSk7XG4gICAgdXBkYXRlX2F4aXMuc2VsZWN0KCd0ZXh0LmxlZ2VuZCcpXG4gICAgICAuYXR0cignaWQnLCAoZCwgaSkgPT4gaSlcbiAgICAgIC5hdHRyKCd4JywgKGQsIGkpID0+IHJTY2FsZShtYXhWYWx1ZSAqIGNmZy5sYWJlbEZhY3RvcikgKiBtYXRoX2NvcyhhbmdsZVNsaWNlICogaSAtIEhBTEZfUEkpKVxuICAgICAgLmF0dHIoJ3knLCAoZCwgaSkgPT4gclNjYWxlKG1heFZhbHVlICogY2ZnLmxhYmVsRmFjdG9yKSAqIG1hdGhfc2luKGFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAudGV4dChkID0+IGQpXG4gICAgICAuY2FsbCh3cmFwLCBjZmcud3JhcFdpZHRoKTtcblxuICAgIGNvbnN0IHVwZGF0ZV9ibG9iV3JhcHBlciA9IHRoaXMuZy5zZWxlY3RBbGwoJy5yYWRhcldyYXBwZXInKVxuICAgICAgLmRhdGEodGhpcy5kYXRhLCBkID0+IGQubmFtZSk7XG4gICAgY29uc29sZS5sb2codGhpcy5kYXRhKTtcbiAgICB1cGRhdGVfYmxvYldyYXBwZXIuc2VsZWN0KCcucmFkYXJBcmVhJylcbiAgICAgIC50cmFuc2l0aW9uKHQpXG4gICAgICAuYXR0cignZCcsIGQgPT4gdGhpcy5yYWRhckxpbmUoZC5heGVzKSk7XG5cbiAgICB1cGRhdGVfYmxvYldyYXBwZXIuc2VsZWN0KCcucmFkYXJTdHJva2UnKVxuICAgICAgLnRyYW5zaXRpb24odClcbiAgICAgIC5hdHRyKCdkJywgZCA9PiB0aGlzLnJhZGFyTGluZShkLmF4ZXMpKTtcblxuICAgIGNvbnN0IGNpcmNsZSA9IHVwZGF0ZV9ibG9iV3JhcHBlci5zZWxlY3RBbGwoJy5yYWRhckNpcmNsZScpXG4gICAgICAuZGF0YShkID0+IGQuYXhlcyk7XG4gICAgY2lyY2xlXG4gICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgLmF0dHIoJ2N4JywgKGQsIGkpID0+IHJTY2FsZShkLnZhbHVlKSAqIG1hdGhfY29zKGFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAuYXR0cignY3knLCAoZCwgaSkgPT4gclNjYWxlKGQudmFsdWUpICogbWF0aF9zaW4oYW5nbGVTbGljZSAqIGkgLSBIQUxGX1BJKSlcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gY2ZnLmNvbG9yKGQuaWQpKVxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAwLjgpO1xuXG4gICAgY29uc3QgdXBkYXRlX2Jsb2JDaXJjbGVXcmFwcGVyID0gdGhpcy5nLnNlbGVjdEFsbCgnLnJhZGFyQ2lyY2xlV3JhcHBlcicpXG4gICAgICAuZGF0YSh0aGlzLmRhdGEsIGQgPT4gZC5uYW1lKTtcblxuICAgIGNvbnN0IGludmlzaWJsZUNpcmNsZSA9IHVwZGF0ZV9ibG9iQ2lyY2xlV3JhcHBlci5zZWxlY3RBbGwoJy5yYWRhckludmlzaWJsZUNpcmNsZScpXG4gICAgICAuZGF0YShkID0+IGQuYXhlcyk7XG4gICAgaW52aXNpYmxlQ2lyY2xlXG4gICAgICAudHJhbnNpdGlvbih0KVxuICAgICAgLmF0dHIoJ2N4JywgKGQsIGkpID0+IHJTY2FsZShkLnZhbHVlKSAqIG1hdGhfY29zKGFuZ2xlU2xpY2UgKiBpIC0gSEFMRl9QSSkpXG4gICAgICAuYXR0cignY3knLCAoZCwgaSkgPT4gclNjYWxlKGQudmFsdWUpICogbWF0aF9zaW4oYW5nbGVTbGljZSAqIGkgLSBIQUxGX1BJKSk7XG4gIH1cblxuICByb3VuZF9zdHJva2UodmFsKSB7XG4gICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5jZmcucm91bmRTdHJva2VzO1xuICAgIH0gZWxzZSBpZiAodmFsICE9PSB0aGlzLmNmZy5yb3VuZFN0cm9rZXMpIHtcbiAgICAgIHRoaXMuY2ZnLnJvdW5kU3Ryb2tlcyA9IHZhbDtcbiAgICAgIHRoaXMucmFkYXJMaW5lID0gZDMucmFkaWFsTGluZSgpXG4gICAgICAgIC5jdXJ2ZSh0aGlzLmNmZy5yb3VuZFN0cm9rZXMgPyBkMy5jdXJ2ZUNhcmRpbmFsQ2xvc2VkIDogZDMuY3VydmVMaW5lYXJDbG9zZWQpXG4gICAgICAgIC5yYWRpdXMoZCA9PiB0aGlzLnJTY2FsZShkLnZhbHVlKSlcbiAgICAgICAgLmFuZ2xlKChkLCBpKSA9PiBpICogdGhpcy5hbmdsZVNsaWNlKTtcbiAgICAgIHRoaXMudXBkYXRlKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBiaW5kTWFwKG1hcF9lbGVtKSB7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG1hcF9lbGVtO1xuICAgIHRoaXMubWFwX2VsZW0ucmVzZXRDb2xvcnModGhpcy5jdXJyZW50X2lkcyk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICB9XG5cbiAgcmVtb3ZlKCkge1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cyA9IG51bGw7XG4gICAgdGhpcy5tYXBfZWxlbS51bmJpbmRCcnVzaENsaWNrKCk7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG51bGw7XG4gICAgc3ZnX2Jhci5odG1sKCcnKTtcbiAgfVxuXG4gIHVwZGF0ZUNoYW5nZVJlZ2lvbigpIHtcbiAgICB0aGlzLmNoYW5nZVN0dWR5Wm9uZSgpO1xuICB9XG5cbiAgY2hhbmdlU3R1ZHlab25lKCkge1xuICAgIC8vIHRoaXMudmFyaWFibGVzID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvO1xuICAgIC8vIHRoaXMucmVmX2RhdGEgPSBhcHAuY3VycmVudF9kYXRhLnNsaWNlKCkuZmlsdGVyKFxuICAgIC8vICAgZnQgPT4gdGhpcy52YXJpYWJsZXMubWFwKHYgPT4gISFmdFt2XSkuZXZlcnkoZCA9PiBkID09PSB0cnVlKSk7XG4gICAgLy8gdGhpcy5yYW5rX3ZhcmlhYmxlcyA9IHRoaXMudmFyaWFibGVzLm1hcChkID0+IGBwcl8ke2R9YCk7XG4gICAgLy8gdGhpcy52YXJpYWJsZXMuZm9yRWFjaCgoZCwgaSkgPT4ge1xuICAgIC8vICAgY29tcHV0ZVBlcmNlbnRpbGVSYW5rKHRoaXMucmVmX2RhdGEsIGQsIHRoaXMucmFua192YXJpYWJsZXNbaV0pO1xuICAgIC8vIH0pO1xuICAgIC8vIHRoaXMuZGF0YSA9IHByZXBhcmVfZGF0YV9yYWRhcl9kZWZhdWx0KHRoaXMucmVmX2RhdGEsIHRoaXMudmFyaWFibGVzKTtcbiAgICAvLyB0aGlzLmN1cnJlbnRfaWRzID0gdGhpcy5yZWZfZGF0YS5tYXAoZCA9PiBkLmlkKTtcbiAgICAvLyB0aGlzLmRpc3BsYXllZF9pZHMgPSB0aGlzLmRhdGEubWFwKGQgPT4gZC5uYW1lKTtcbiAgICAvLyByZXNldENvbG9ycygpO1xuICAgIC8vIHRoaXMubmJGdCA9IHRoaXMuZGF0YS5sZW5ndGg7XG4gICAgLy8gdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgIC8vIHRoaXMudXBkYXRlVGFibGVTdGF0KCk7XG4gICAgLy8gdGhpcy51cGRhdGUoKTtcbiAgICBjb25zdCBvbGRfbXlfcmVnaW9uID0gdGhpcy5pZF9teV9yZWdpb247XG4gICAgY29uc3Qgb3RoZXJfZmVhdHVyZXMgPSB0aGlzLmRpc3BsYXllZF9pZHMuZmlsdGVyKGQgPT4gZCAhPT0gb2xkX215X3JlZ2lvbiAmJiBkICE9PSAnTW95ZW5uZSBkdSBjb250ZXh0ZSBkXFwnw6l0dWRlJyk7XG4gICAgdGhpcy5nLnJlbW92ZSgpO1xuICAgIHRoaXMuZyA9IHN2Z19iYXIuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdpZCcsICdSYWRhckdycCcpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuY2ZnLncgLyAyICsgdGhpcy5jZmcubWFyZ2luLmxlZnR9LCR7dGhpcy5jZmcuaCAvIDIgKyB0aGlzLmNmZy5tYXJnaW4udG9wfSlgKTtcblxuICAgIHRoaXMuaWRfbXlfcmVnaW9uID0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbjtcbiAgICB0aGlzLnByZXBhcmVEYXRhKGFwcC5jdXJyZW50X2RhdGEpO1xuICAgIHRoaXMuZHJhd0F4aXNHcmlkKCk7XG4gICAgdGhpcy5kcmF3QXJlYSgpO1xuICAgIHRoaXMuaGFuZGxlTGVnZW5kKCk7XG4gICAgb3RoZXJfZmVhdHVyZXMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBwcmVwYXJlX2RhdGFfcmFkYXJfZnQodGhpcy5yZWZfZGF0YSwgdGhpcy52YXJpYWJsZXMsIGlkKTtcbiAgICAgIHRoaXMuYWRkX2VsZW1lbnQoYSk7XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgIHRoaXMudXBkYXRlVGFibGVTdGF0KCk7XG4gIH1cblxuICBhZGRWYXJpYWJsZShjb2RlX3ZhcmlhYmxlLCBuYW1lX3ZhcmlhYmxlKSB7XG4gICAgY29uc3Qgb3RoZXJfZmVhdHVyZXMgPSB0aGlzLmRpc3BsYXllZF9pZHMuZmlsdGVyKGQgPT4gZCAhPT0gdGhpcy5pZF9teV9yZWdpb24gJiYgZCAhPT0gJ01veWVubmUgZHUgY29udGV4dGUgZFxcJ8OpdHVkZScpO1xuICAgIHRoaXMuZy5yZW1vdmUoKTtcbiAgICB0aGlzLmcgPSBzdmdfYmFyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCAnUmFkYXJHcnAnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt0aGlzLmNmZy53IC8gMiArIHRoaXMuY2ZnLm1hcmdpbi5sZWZ0fSwke3RoaXMuY2ZnLmggLyAyICsgdGhpcy5jZmcubWFyZ2luLnRvcH0pYCk7XG5cbiAgICB0aGlzLnByZXBhcmVEYXRhKGFwcC5jdXJyZW50X2RhdGEpO1xuICAgIHRoaXMuZHJhd0F4aXNHcmlkKCk7XG4gICAgdGhpcy5kcmF3QXJlYSgpO1xuICAgIHRoaXMuaGFuZGxlTGVnZW5kKCk7XG4gICAgb3RoZXJfZmVhdHVyZXMuZm9yRWFjaCgoaWQpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBwcmVwYXJlX2RhdGFfcmFkYXJfZnQodGhpcy5yZWZfZGF0YSwgdGhpcy52YXJpYWJsZXMsIGlkKTtcbiAgICAgIHRoaXMuYWRkX2VsZW1lbnQoYSk7XG4gICAgfSk7XG4gICAgdGhpcy51cGRhdGVNYXBSZWdpbygpO1xuICAgIHRoaXMudXBkYXRlVGFibGVTdGF0KCk7XG4gICAgLy8gdGhpcy51cGRhdGUoKTtcbiAgICAvLyB0aGlzLnZhcmlhYmxlcyA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpbztcbiAgICAvLyB0aGlzLnJlZl9kYXRhID0gYXBwLmN1cnJlbnRfZGF0YS5zbGljZSgpLmZpbHRlcihcbiAgICAvLyAgIGZ0ID0+IHRoaXMudmFyaWFibGVzLm1hcCh2ID0+ICEhZnRbdl0pLmV2ZXJ5KGQgPT4gZCA9PT0gdHJ1ZSkpO1xuICAgIC8vIHRoaXMucmFua192YXJpYWJsZXMgPSB0aGlzLnZhcmlhYmxlcy5tYXAoZCA9PiBgcHJfJHtkfWApO1xuICAgIC8vIHRoaXMudmFyaWFibGVzLmZvckVhY2goKGQsIGkpID0+IHtcbiAgICAvLyAgIGNvbXB1dGVQZXJjZW50aWxlUmFuayh0aGlzLnJlZl9kYXRhLCBkLCB0aGlzLnJhbmtfdmFyaWFibGVzW2ldKTtcbiAgICAvLyB9KTtcbiAgICAvLyB0aGlzLmRhdGEgPSBwcmVwYXJlX2RhdGFfcmFkYXJfZGVmYXVsdCh0aGlzLnJlZl9kYXRhLCB0aGlzLnZhcmlhYmxlcyk7XG4gICAgLy8gdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMucmVmX2RhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgLy8gcmVzZXRDb2xvcnMoKTtcbiAgICAvLyB0aGlzLm5iRnQgPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIC8vIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICAvLyB0aGlzLnVwZGF0ZVRhYmxlU3RhdCgpO1xuICAgIC8vIHRoaXMudXBkYXRlKCk7XG4gIH1cblxuICByZW1vdmVWYXJpYWJsZShjb2RlX3ZhcmlhYmxlKSB7XG4gICAgdGhpcy5nLnJlbW92ZSgpO1xuICAgIHRoaXMuZyA9IHN2Z19iYXIuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdpZCcsICdSYWRhckdycCcpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3RoaXMuY2ZnLncgLyAyICsgdGhpcy5jZmcubWFyZ2luLmxlZnR9LCR7dGhpcy5jZmcuaCAvIDIgKyB0aGlzLmNmZy5tYXJnaW4udG9wfSlgKTtcblxuICAgIHRoaXMucHJlcGFyZURhdGEoYXBwLmN1cnJlbnRfZGF0YSk7XG4gICAgdGhpcy5kcmF3QXhpc0dyaWQoKTtcbiAgICB0aGlzLmRyYXdBcmVhKCk7XG4gICAgdGhpcy5oYW5kbGVMZWdlbmQoKTtcbiAgICB0aGlzLnVwZGF0ZVRhYmxlU3RhdCgpO1xuICB9XG5cbiAgcHJlcGFyZVRhYmxlU3RhdCgpIHtcbiAgICBjb25zdCBhbGxfdmFsdWVzID0gdGhpcy52YXJpYWJsZXMubWFwKHYgPT4gdGhpcy5yZWZfZGF0YS5tYXAoZCA9PiBkW3ZdKSk7XG4gICAgY29uc3QgbXlfcmVnaW9uID0gdGhpcy5yZWZfZGF0YS5maW5kKGQgPT4gZC5pZCA9PT0gdGhpcy5pZF9teV9yZWdpb24pO1xuICAgIGNvbnN0IGZlYXR1cmVzID0gYWxsX3ZhbHVlcy5tYXAoKHZhbHVlcywgaSkgPT4gKHtcbiAgICAgIE1pbjogZDMubWluKHZhbHVlcyksXG4gICAgICBNYXg6IGQzLm1heCh2YWx1ZXMpLFxuICAgICAgTW95ZW5uZTogZ2V0TWVhbih2YWx1ZXMpLFxuICAgICAgaWQ6IHRoaXMudmFyaWFibGVzW2ldLFxuICAgICAgVmFyaWFibGU6IHRoaXMudmFyaWFibGVzW2ldLFxuICAgICAgJ01hIHLDqWdpb24nOiBteV9yZWdpb25bdGhpcy52YXJpYWJsZXNbaV1dLFxuICAgIH0pKTtcbiAgICByZXR1cm4gZmVhdHVyZXM7XG4gIH1cblxuICBoYW5kbGVDbGlja01hcChkLCBwYXJlbnQpIHtcbiAgICBjb25zdCBpZCA9IGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV07XG4gICAgaWYgKHRoaXMuY3VycmVudF9pZHMuaW5kZXhPZihpZCkgPCAwIHx8IGlkID09PSB0aGlzLmlkX215X3JlZ2lvbikgcmV0dXJuO1xuICAgIGlmICh0aGlzLmRpc3BsYXllZF9pZHMuaW5kZXhPZihpZCkgPCAwKSB7XG4gICAgICBjb25zdCBhID0gcHJlcGFyZV9kYXRhX3JhZGFyX2Z0KHRoaXMucmVmX2RhdGEsIHRoaXMudmFyaWFibGVzLCBpZCk7XG4gICAgICB0aGlzLmFkZF9lbGVtZW50KGEpO1xuICAgICAgdGhpcy51cGRhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nLnNlbGVjdEFsbChgIyR7aWR9LnJhZGFyV3JhcHBlcmApLnJlbW92ZSgpO1xuICAgICAgdGhpcy5nLnNlbGVjdEFsbChgIyR7aWR9LnJhZGFyQ2lyY2xlV3JhcHBlcmApLnJlbW92ZSgpO1xuICAgICAgY29uc3QgaXggPSB0aGlzLmRhdGEubWFwKChfZCwgaSkgPT4gW2ksIF9kLm5hbWUgPT09IGlkXSkuZmluZChfZCA9PiBfZFsxXSA9PT0gdHJ1ZSk7XG4gICAgICB0aGlzLmRhdGEuc3BsaWNlKGl4LCAxKTtcbiAgICAgIHRoaXMuZGlzcGxheWVkX2lkcyA9IHRoaXMuZGF0YS5tYXAoX2QgPT4gX2QubmFtZSk7XG4gICAgICB0aGlzLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUNvbXBsZXR1ZGUoKSB7XG4gICAgdGhpcy5jb21wbGV0dWRlX3ZhbHVlID0gY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQoYXBwLCB0aGlzLnZhcmlhYmxlcyk7XG4gICAgdGhpcy5jb21wbGV0dWRlXG4gICAgICAudGV4dChgQ29tcGzDqXR1ZGUgOiAke3RoaXMuY29tcGxldHVkZV92YWx1ZX0lYCk7XG4gIH1cblxuICB1cGRhdGVNYXBSZWdpbygpIHtcbiAgICBpZiAoIXRoaXMubWFwX2VsZW0pIHJldHVybjtcbiAgICB0aGlzLm1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IChkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dID09PSB0aGlzLmlkX215X3JlZ2lvblxuICAgICAgICA/IGNvbG9yX2hpZ2hsaWdodFxuICAgICAgICA6IHRoaXMuY3VycmVudF9pZHMuaW5kZXhPZihkLnByb3BlcnRpZXNbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkX2dlb21dKSA+IC0xXG4gICAgICAgID8gKHRoaXMuZGlzcGxheWVkX2lkcy5pbmRleE9mKGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV0pID4gLTFcbiAgICAgICAgPyBjb2xvcl9kZWZhdWx0X2Rpc3NpbSA6IGNvbG9yX2NvdW50cmllcykgOiBjb2xvcl9kaXNhYmxlZCkpO1xuICB9XG5cbiAgdXBkYXRlVGFibGVTdGF0KCkge1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlQWxsKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5hZGRGZWF0dXJlcyh0aGlzLnByZXBhcmVUYWJsZVN0YXQoKSk7XG4gIH1cblxuICBtYWtlVGFibGVTdGF0KCkge1xuICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5wcmVwYXJlVGFibGVTdGF0KCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cyA9IG5ldyBUYWJsZVJlc3VtZVN0YXQoZmVhdHVyZXMpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wLCBtYXRoX3JvdW5kLCBtYXRoX3BvdywgbWF0aF9zcXJ0LCBnZXRNZWFuLCBnZXRTdGFuZGFyZGl6ZWRNZWFuU3RkRGV2LCBwcmVwYXJlVG9vbHRpcCwgc2h1ZmZsZSB9IGZyb20gJy4vLi4vaGVscGVycyc7XG5pbXBvcnQgeyBjb2xvcl9kaXNhYmxlZCwgY29sb3JfY291bnRyaWVzLCBjb2xvcl9oaWdobGlnaHQsIGNvbG9yX2RlZmF1bHRfZGlzc2ltIH0gZnJvbSAnLi8uLi9vcHRpb25zJztcbmltcG9ydCB7IGNhbGNQb3BDb21wbGV0dWRlU3Vic2V0IH0gZnJvbSAnLi8uLi9wcmVwYXJlX2RhdGEnO1xuaW1wb3J0IHsgYXBwLCByZXNldENvbG9ycyB9IGZyb20gJy4vLi4vLi4vbWFpbic7XG5pbXBvcnQgVGFibGVSZXN1bWVTdGF0IGZyb20gJy4vLi4vdGFibGVSZXN1bWVTdGF0JztcblxuY29uc3Qgc3ZnX2JhciA9IGQzLnNlbGVjdCgnI3N2Z19iYXInKTtcbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDQwLCBsZWZ0OiA0MCB9O1xuXG5jb25zdCB3aWR0aCA9ICtzdmdfYmFyLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgaGVpZ2h0ID0gK3N2Z19iYXIuYXR0cignaGVpZ2h0JykgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuXG4vKipcbiogQ2xhc3MgcmVwcmVzZW50aW5nIHNvbWUgXCJzcGVjaWFsXCIgYmFyIGNoYXJ0LCBhbGxvd2luZyB0byB0b29nbGUgdGhlXG4qIHJlcHJzZW50YXRpb24gYmV0d2VlbiBhIHNpbXBsZSBiYXIgY2hhcnQgKGZvciAqKnNpbWlsYXJpdHkqKilcbiogYW5kIGEgZ3JvdXBlZCBiYXIgY2hhcnQgd2l0aCBuZWdhdGl2ZSB2YWx1ZSAoZm9yICoqZGlzc2ltaWxhcml0eSoqKVxuKi9cbmV4cG9ydCBjbGFzcyBTaW1pbGFyaXR5Q2hhcnQge1xuICAvKipcbiAgICogQ3JlYXRlIGEgdGhlIGJhciBjaGFydCBvbiB0aGUgYHN2Z19iYXJgIHN2ZyBlbGVtZW50IHByZXZpb3VzbHkgZGVmaW5lZC5cbiAgICogQHBhcmFtIHtBcnJheX0gcmVmX2RhdGEgLSBBIHJlZmVyZW5jZSB0byB0aGUgc3Vic2V0IG9mIHRoZSBkYXRhc2V0IHRvIGJlIHVzZWRcbiAgICogdG8gY3JlYXRlIHRoZSBzY2F0dGVycGxvdCAoc2hvdWxkIGNvbnRhaW4gYXQgbGVhc3QgdHdvIGZpZWxkIGZsYWdnZWQgYXMgcmF0aW9cbiAgICogaW4gdGhlIGBhcHAuY3VycmVudF9jb25maWcucmF0aW9gIE9iamVjdCkuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIC8vIFNldCB0aGUgbWluaW11bSBudW1iZXIgb2YgdmFyaWFibGVzIHRvIGtlZXAgc2VsZWN0ZWQgZm9yIHRoaXMga2luZCBvZiBjaGFydDpcbiAgICBhcHAuY3VycmVudF9jb25maWcubmJfdmFyID0gMjtcbiAgICBjb25zdCB4ID0gZDMuc2NhbGVCYW5kKCkucmFuZ2UoWzAsIHdpZHRoXSkucGFkZGluZygwLjEpO1xuICAgIGNvbnN0IHgxID0gZDMuc2NhbGVCYW5kKCkucGFkZGluZygwLjA1KTtcbiAgICBjb25zdCB5ID0gZDMuc2NhbGVMaW5lYXIoKS5yYW5nZShbaGVpZ2h0LCAwXSk7XG4gICAgY29uc29sZS5sb2coZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XG4gICAgY29uc3QgeiA9IGQzLnNjYWxlT3JkaW5hbCgpXG4gICAgICAucmFuZ2Uoc2h1ZmZsZShkMy5zY2hlbWVDYXRlZ29yeTEwKSk7XG4gICAgY29uc29sZS5sb2coZDMuc2NoZW1lQ2F0ZWdvcnkxMCk7XG4gICAgY29uc3QgeEF4aXMgPSBkMy5heGlzQm90dG9tKHgpO1xuICAgIGNvbnN0IHlBeGlzID0gZDMuYXhpc0xlZnQoeSk7XG4gICAgdGhpcy54ID0geDtcbiAgICB0aGlzLngxID0geDE7XG4gICAgdGhpcy55ID0geTtcbiAgICB0aGlzLnogPSB6O1xuICAgIHRoaXMueEF4aXMgPSB4QXhpcztcbiAgICB0aGlzLnlBeGlzID0geUF4aXM7XG4gICAgdGhpcy5uYl9kaXNwbGF5ID0gNTtcbiAgICB0aGlzLnZhcmlhYmxlcyA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpbztcbiAgICB0aGlzLmN1cnJlbnRfdHlwZSA9ICdnbG9iYWwnO1xuICAgIC8vIEZpbHRlciB0aGUgZGF0YSBhZ2FpbnN0IGVtcHR5IGZlYXR1cmVzOlxuICAgIHRoaXMucmVmX2RhdGEgPSByZWZfZGF0YS5maWx0ZXIoXG4gICAgICBmdCA9PiB0aGlzLnZhcmlhYmxlcy5tYXAodiA9PiAhIWZ0W3ZdKS5ldmVyeSh2ID0+IHYgPT09IHRydWUpKS5zbGljZSgpO1xuICAgIC8vIFN0YW5kYXJkaXplIGFsbCB2YXJpYWJsZXM6XG4gICAgdGhpcy52YXJpYWJsZXMuZm9yRWFjaCgodikgPT4ge1xuICAgICAgY29uc3Qgc2VyaWUgPSB0aGlzLnJlZl9kYXRhLm1hcChmdCA9PiBmdFt2XSk7XG4gICAgICBjb25zdCBzdGFuZGFyZGl6ZWQgPSBnZXRTdGFuZGFyZGl6ZWRNZWFuU3RkRGV2KHNlcmllKTtcbiAgICAgIGNvbnN0IG5hbWVfc3RhbmRhcmRpemVkID0gYHN0XyR7dn1gO1xuICAgICAgdGhpcy5yZWZfZGF0YS5mb3JFYWNoKChmdCwgaSkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgZnRbbmFtZV9zdGFuZGFyZGl6ZWRdID0gc3RhbmRhcmRpemVkW2ldO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBGaW5kIHZhbHVlIG9mIG15IHJlZ2lvbjpcbiAgICB0aGlzLm9ial9teV9yZWdpb24gPSB0aGlzLnJlZl9kYXRhLmZpbmQoZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKTtcblxuICAgIHRoaXMucmVmX2RhdGEuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLnZhcmlhYmxlcy5tYXAodiA9PiBtYXRoX3Bvdyh0aGlzLm9ial9teV9yZWdpb25bYHN0XyR7dn1gXSAtIGZ0W2BzdF8ke3Z9YF0sIDIpKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZnQuZGlzc2ltaWxhcml0eSA9IG1hdGhfc3FydChzKTtcbiAgICAgIHRoaXMudmFyaWFibGVzLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgY29uc3QgdmFyX25hbWUgPSBgZWNfJHt2fWA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBmdFt2YXJfbmFtZV0gPSAoZnRbdl0gLyB0aGlzLm9ial9teV9yZWdpb25bdl0gKiAxMDApIC0gMTAwO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWZfZGF0YSA9IHRoaXMucmVmX2RhdGEuc29ydCgoYSwgYikgPT4gYS5kaXNzaW1pbGFyaXR5IC0gYi5kaXNzaW1pbGFyaXR5KTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnJlZl9kYXRhLnNsaWNlKDEsIDEgKyB0aGlzLm5iX2Rpc3BsYXkpO1xuXG4gICAgdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMucmVmX2RhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgdGhpcy5kaXNwbGF5ZWRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuXG4gICAgcmVzZXRDb2xvcnMoKTtcblxuICAgIHN2Z19iYXIuYXBwZW5kKCdkZWZzJylcbiAgICAgIC5hcHBlbmQoJ2NsaXBQYXRoJylcbiAgICAgIC5hdHRyKCdpZCcsICdjbGlwJylcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHJzKHsgd2lkdGgsIGhlaWdodCB9KTtcblxuICAgIGNvbnN0IHBsb3QgPSBzdmdfYmFyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke21hcmdpbi5sZWZ0fSwgJHttYXJnaW4udG9wfSlgKTtcblxuICAgIHRoaXMucGxvdCA9IHBsb3Q7XG5cbiAgICBjb25zdCBfbWF4ID0gZDMubWF4KHRoaXMuZGF0YSwgZCA9PiBkLmRpc3NpbWlsYXJpdHkpO1xuXG4gICAgeC5kb21haW4odGhpcy5kaXNwbGF5ZWRfaWRzKTtcbiAgICB5LmRvbWFpbihbMCwgX21heCArIF9tYXggLyAxMl0pO1xuXG4gICAgcGxvdC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdheGlzIGF4aXMtLXgnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMCwgJHtoZWlnaHR9KWAgfSlcbiAgICAgIC5jYWxsKHhBeGlzKTtcblxuICAgIHBsb3Quc2VsZWN0KCcuYXhpcy0teCcpXG4gICAgICAuc2VsZWN0QWxsKCd0ZXh0JylcbiAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAnZW5kJylcbiAgICAgIC5hdHRycyh7IGR4OiAnLTAuOGVtJywgZHk6ICcwLjE1ZW0nLCB0cmFuc2Zvcm06ICdyb3RhdGUoLTY1KScgfSk7XG5cbiAgICBwbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYXhpcyBheGlzLS15JylcbiAgICAgIC5jYWxsKHlBeGlzKTtcblxuICAgIHRoaXMuZ19iYXIgPSBwbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignaWQnLCAnYmFyJyk7XG5cbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIHRoaXMudmFyaWFibGVzKTtcblxuICAgIHRoaXMuY29tcGxldHVkZSA9IHN2Z19iYXIuYXBwZW5kKCd0ZXh0JylcbiAgICAgIC5hdHRycyh7IGlkOiAnY2hhcnRfY29tcGxldHVkZScsIHg6IDYwLCB5OiA0MCB9KVxuICAgICAgLnN0eWxlcyh7ICdmb250LWZhbWlseSc6ICdcXCdTaWduaWthXFwnLCBzYW5zLXNlcmlmJyB9KVxuICAgICAgLnRleHQoYENvbXBsw6l0dWRlIDogJHt0aGlzLmNvbXBsZXR1ZGVfdmFsdWV9JWApO1xuXG4gICAgLy8gUHJlcGFyZSB0aGUgdG9vbHRpcCBkaXNwbGF5ZWQgb24gbW91c2VvdmVyOlxuICAgIGNvbnN0IHRvb2x0aXAgPSBwcmVwYXJlVG9vbHRpcChzdmdfYmFyKTtcblxuICAgIC8vIENyZWF0ZSB0aGUgc2VjdGlvbiBjb250YWluaW5nIHRoZSBpbnB1dCBlbGVtZW50IGFsbG93aW5nIHRvIGNob3NlXG4gICAgLy8gaG93IG1hbnkgXCJjbG9zZVwiIHJlZ2lvbnMgd2Ugd2FudCB0byBoaWdobGlnaHQuXG4gICAgY29uc3QgbWVudV9zZWxlY3Rpb24gPSBkMy5zZWxlY3Qoc3ZnX2Jhci5ub2RlKCkucGFyZW50RWxlbWVudClcbiAgICAgIC5hcHBlbmQoJ2RpdicpXG4gICAgICAuYXR0cignaWQnLCAnbWVudV9zZWxlY3Rpb24nKVxuICAgICAgLnN0eWxlcyh7IHRvcDogJy0yMHB4JywgJ21hcmdpbi1sZWZ0JzogJzMwcHgnLCBwb3NpdGlvbjogJ3JlbGF0aXZlJyB9KTtcbiAgICBjb25zdCBzZWxlY3Rpb25fY2xvc2UgPSBtZW51X3NlbGVjdGlvbi5hcHBlbmQoJ3AnKVxuICAgICAgLnN0eWxlKCdmbG9hdCcsICdsZWZ0Jyk7XG5cbiAgICBzZWxlY3Rpb25fY2xvc2UuYXBwZW5kKCdzcGFuJylcbiAgICAgIC5wcm9wZXJ0eSgndmFsdWUnLCAnY2xvc2UnKVxuICAgICAgLmF0dHJzKHsgdmFsdWU6ICdjbG9zZScsIGNsYXNzOiAndHlwZV9zZWxlY3Rpb24gc3F1YXJlIGNoZWNrZWQnIH0pO1xuICAgIHNlbGVjdGlvbl9jbG9zZS5hcHBlbmQoJ3NwYW4nKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdsYWJlbF9jaGsnIH0pXG4gICAgICAuaHRtbCgnTGVzJyk7XG4gICAgc2VsZWN0aW9uX2Nsb3NlLmFwcGVuZCgnaW5wdXQnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICduYl9zZWxlY3QnLCB0eXBlOiAnbnVtYmVyJyB9KVxuICAgICAgLnByb3BlcnR5KCd2YWx1ZScsIDUpO1xuICAgIHNlbGVjdGlvbl9jbG9zZS5hcHBlbmQoJ3NwYW4nKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdsYWJlbF9jaGsnIH0pXG4gICAgICAuaHRtbCgncsOpZ2lvbnMgbGVzIHBsdXMgcHJvY2hlcycpO1xuXG4gICAgY29uc3QgaW5kaWNlX2tpbmQgPSBtZW51X3NlbGVjdGlvbi5hcHBlbmQoJ3AnKVxuICAgICAgLnN0eWxlcyh7XG4gICAgICAgIGZsb2F0OiAncmlnaHQnLFxuICAgICAgICBkaXNwbGF5OiAnaW5saW5lLWdyaWQnLFxuICAgICAgfSk7XG5cbiAgICBpbmRpY2Vfa2luZC5hcHBlbmQoJ3NwYW4nKVxuICAgICAgLmF0dHJzKHtcbiAgICAgICAgaWQ6ICdpbmRfZ2xvYmFsJyxcbiAgICAgICAgY2xhc3M6ICdjaG9pY2VfaW5kIGFjdGl2ZScsXG4gICAgICB9KVxuICAgICAgLnRleHQoJ0luZGljZSBnbG9iYWwnKTtcblxuICAgIGluZGljZV9raW5kLmFwcGVuZCgnc3BhbicpXG4gICAgICAuYXR0cnMoe1xuICAgICAgICBpZDogJ2luZF9kZXRhaWwnLFxuICAgICAgICBjbGFzczogJ2Nob2ljZV9pbmQnLFxuICAgICAgfSlcbiAgICAgIC50ZXh0KCdJbmRpY2VzIGTDqXRhaWxsw6lzJyk7XG5cbiAgICB0aGlzLm1ha2VHcmlkKCk7XG4gICAgdGhpcy5iaW5kTWVudSgpO1xuICAgIHRoaXMudXBkYXRlKCk7XG4gICAgdGhpcy5tYWtlVGFibGVTdGF0KCk7XG4gIH1cblxuICBtYWtlR3JpZCgpIHtcbiAgICB0aGlzLnBsb3QuaW5zZXJ0KCdnJywgJyNiYXInKVxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ2dyaWQgZ3JpZC15JylcbiAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHRoaXMueSlcbiAgICAgICAgLnRpY2tTaXplKC13aWR0aClcbiAgICAgICAgLnRpY2tGb3JtYXQoJycpKVxuICAgICAgLnNlbGVjdEFsbCgnbGluZSwgcGF0aCcpXG4gICAgICAuYXR0cignc3Ryb2tlJywgJ2xpZ2h0Z3JheScpO1xuICB9XG5cbiAgdXBkYXRlQ29tcGxldHVkZSgpIHtcbiAgICB0aGlzLmNvbXBsZXR1ZGVfdmFsdWUgPSBjYWxjUG9wQ29tcGxldHVkZVN1YnNldChhcHAsIHRoaXMudmFyaWFibGVzKTtcbiAgICB0aGlzLmNvbXBsZXR1ZGVcbiAgICAgIC50ZXh0KGBDb21wbMOpdHVkZSA6ICR7dGhpcy5jb21wbGV0dWRlX3ZhbHVlfSVgKTtcbiAgfVxuXG4gIHVwZGF0ZUNvbnRleHQobWluLCBtYXgpIHtcbiAgICB0aGlzLmNvbnRleHQuc2VsZWN0QWxsKCcuYmFyJylcbiAgICAgICAuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIChfLCBpKSA9PiAoaSA+PSBtaW4gJiYgaSA8IG1heCA/ICcxJyA6ICcwLjMnKSk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJykuc2VsZWN0QWxsKCd0ZXh0JykudGV4dCgnJyk7XG4gICAgaWYgKHRoaXMuY3VycmVudF90eXBlID09PSAnZ2xvYmFsJykge1xuICAgICAgY29uc3QgX21heCA9IGQzLm1heCh0aGlzLmRhdGEsIGQgPT4gZC5kaXNzaW1pbGFyaXR5KTtcbiAgICAgIHRoaXMueC5kb21haW4odGhpcy5kaXNwbGF5ZWRfaWRzKTtcbiAgICAgIHRoaXMueS5kb21haW4oWzAsIF9tYXggKyBfbWF4IC8gMTJdKTtcblxuICAgICAgdGhpcy5wbG90LnNlbGVjdCgnI3plcm9fbGluZScpLnJlbW92ZSgpO1xuXG4gICAgICBjb25zdCBiYXJzID0gdGhpcy5nX2Jhci5zZWxlY3RBbGwoJy5iYXInKVxuICAgICAgICAuZGF0YSh0aGlzLmRhdGEsIGQgPT4gZC5pZCk7XG5cbiAgICAgIGJhcnNcbiAgICAgICAgLmF0dHJzKGQgPT4gKHtcbiAgICAgICAgICB4OiB0aGlzLngoZC5pZCksXG4gICAgICAgICAgeTogdGhpcy55KGQuZGlzc2ltaWxhcml0eSksXG4gICAgICAgICAgd2lkdGg6IHRoaXMueC5iYW5kd2lkdGgoKSxcbiAgICAgICAgICBoZWlnaHQ6IGhlaWdodCAtIHRoaXMueShkLmRpc3NpbWlsYXJpdHkpLFxuICAgICAgICB9KSlcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgY29sb3JfZGVmYXVsdF9kaXNzaW0pO1xuXG4gICAgICBiYXJzLmVudGVyKClcbiAgICAgICAgLmluc2VydCgncmVjdCcsICcubWVhbicpXG4gICAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgICAgY2xhc3M6ICdiYXInLFxuICAgICAgICAgIHg6IHRoaXMueChkLmlkKSxcbiAgICAgICAgICB5OiB0aGlzLnkoZC5kaXNzaW1pbGFyaXR5KSxcbiAgICAgICAgICB3aWR0aDogdGhpcy54LmJhbmR3aWR0aCgpLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC0gdGhpcy55KGQuZGlzc2ltaWxhcml0eSksXG4gICAgICAgIH0pKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBjb2xvcl9kZWZhdWx0X2Rpc3NpbSlcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgICAgc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJykuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBjb25zdCB0b29sdGlwID0gc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJyk7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3JlY3QnKS5hdHRycyh7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gICAgICAgICAgdG9vbHRpcFxuICAgICAgICAgICAgLnNlbGVjdCgndGV4dC5pZF9mZWF0dXJlJylcbiAgICAgICAgICAgIC50ZXh0KGAke2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb259IC0gJHtkLmlkfWApO1xuICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCd0ZXh0LnZhbHVlX2ZlYXR1cmUxJylcbiAgICAgICAgICAgIC50ZXh0KGBJbmRpY2UgZGUgZGlzc2ltaWxhcml0w6kgOiAke21hdGhfcm91bmQoZC5kaXNzaW1pbGFyaXR5ICogMTApIC8gMTB9YCk7XG4gICAgICAgICAgY29uc3QgYiA9IHRvb2x0aXAubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCdyZWN0JylcbiAgICAgICAgICAgIC5hdHRycyh7XG4gICAgICAgICAgICAgIHdpZHRoOiBiLndpZHRoICsgMjAsXG4gICAgICAgICAgICAgIGhlaWdodDogYi5oZWlnaHQgKyA3LjUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB0b29sdGlwXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1tkMy5tb3VzZSh0aGlzKVswXSAtIDUsIGQzLm1vdXNlKHRoaXMpWzFdIC0gMjVdfSlgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgIGJhcnMuZXhpdCgpLnJlbW92ZSgpO1xuXG4gICAgICBjb25zdCBheGlzX3ggPSB0aGlzLnBsb3Quc2VsZWN0KCcuYXhpcy0teCcpXG4gICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAoKSA9PiAodGhpcy5uYl9kaXNwbGF5ID4gNzUgPyA2IDogMTApKVxuICAgICAgICAuY2FsbCh0aGlzLnhBeGlzKTtcblxuICAgICAgYXhpc194XG4gICAgICAgIC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAuYXR0cnMoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLm5iX2Rpc3BsYXkgPiAxMDApIHtcbiAgICAgICAgICAgIHJldHVybiB7IGR4OiAnLTAuOGVtJywgZHk6ICcwLjE1ZW0nLCB0cmFuc2Zvcm06ICdyb3RhdGUoLTY1KScgfTtcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmJfZGlzcGxheSA+IDIwKSB7XG4gICAgICAgICAgICByZXR1cm4geyBkeDogJy0wLjhlbScsIGR5OiAnMC4xNWVtJywgdHJhbnNmb3JtOiAncm90YXRlKC02NSknIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGR4OiAnMCcsIGR5OiAnMC43MWVtJywgdHJhbnNmb3JtOiBudWxsIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAoKSA9PiAodGhpcy5uYl9kaXNwbGF5ID4gMjAgPyAnZW5kJyA6ICdtaWRkbGUnKSk7XG5cbiAgICAgIHRoaXMucGxvdC5zZWxlY3QoJy5heGlzLS15JylcbiAgICAgICAgLmNhbGwodGhpcy55QXhpcyk7XG5cbiAgICAgIHRoaXMucGxvdC5zZWxlY3QoJy5ncmlkLXknKVxuICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh0aGlzLnkpXG4gICAgICAgICAgLnRpY2tTaXplKC13aWR0aClcbiAgICAgICAgICAudGlja0Zvcm1hdCgnJykpXG4gICAgICAgIC5zZWxlY3RBbGwoJ2xpbmUsIHBhdGgnKVxuICAgICAgICAuYXR0cignc3Ryb2tlJywgJ2xpZ2h0Z3JheScpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5jdXJyZW50X3R5cGUgPT09ICdkZXRhaWwnKSB7XG4gICAgICBjb25zdCBrZXlzID0gdGhpcy52YXJpYWJsZXMubWFwKHYgPT4gYGVjXyR7dn1gKTtcbiAgICAgIHRoaXMueC5kb21haW4odGhpcy5kaXNwbGF5ZWRfaWRzKTtcbiAgICAgIHRoaXMueDEuZG9tYWluKGtleXMpLnJhbmdlUm91bmQoWzAsIHRoaXMueC5iYW5kd2lkdGgoKV0pO1xuICAgICAgdGhpcy56LmRvbWFpbihrZXlzKTtcbiAgICAgIGNvbnN0IG1taW4gPSBkMy5taW4odGhpcy5kYXRhLCBkID0+IGQzLm1pbihrZXlzLCBrZXkgPT4gZFtrZXldKSk7XG4gICAgICB0aGlzLnkuZG9tYWluKFtcbiAgICAgICAgbW1pbiA+IDAgPyAwIDogbW1pbixcbiAgICAgICAgZDMubWF4KHRoaXMuZGF0YSwgZCA9PiBkMy5tYXgoa2V5cywga2V5ID0+IGRba2V5XSkpLFxuICAgICAgXSkubmljZSgpO1xuXG4gICAgICB0aGlzLnBsb3Quc2VsZWN0KCcjemVyb19saW5lJykucmVtb3ZlKCk7XG4gICAgICB0aGlzLnBsb3QuaW5zZXJ0KCdsaW5lJylcbiAgICAgICAgLmF0dHJzKHtcbiAgICAgICAgICB4MTogMCxcbiAgICAgICAgICB4Mjogd2lkdGgsXG4gICAgICAgICAgeTE6IHRoaXMueSgwKSxcbiAgICAgICAgICB5MjogdGhpcy55KDApLFxuICAgICAgICAgICdzdHJva2Utd2lkdGgnOiAnMXB4JyxcbiAgICAgICAgICBzdHJva2U6ICcjMDAwJyxcbiAgICAgICAgICBpZDogJ3plcm9fbGluZScsXG4gICAgICAgIH0pO1xuXG4gICAgICBjb25zdCBiYXJzID0gdGhpcy5nX2Jhci5zZWxlY3RBbGwoJy5ncm91cF9iYXInKVxuICAgICAgICAuZGF0YSh0aGlzLmRhdGEsIGQgPT4gZC5pZCk7XG5cbiAgICAgIGJhcnNcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQgPT4gYHRyYW5zbGF0ZSgke3RoaXMueChkLmlkKX0sIDApYCk7XG5cbiAgICAgIGJhcnNcbiAgICAgICAgLnNlbGVjdEFsbCgncmVjdCcpXG4gICAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgICAgeDogdGhpcy54MShkLmtleSksXG4gICAgICAgICAgeTogdGhpcy55KE1hdGgubWF4KDAsIGQudmFsdWUpKSxcbiAgICAgICAgICB3aWR0aDogdGhpcy54MS5iYW5kd2lkdGgoKSxcbiAgICAgICAgICBoZWlnaHQ6IE1hdGguYWJzKHRoaXMueShkLnZhbHVlKSAtIHRoaXMueSgwKSksXG4gICAgICAgICAgZmlsbDogdGhpcy56KGQua2V5KSxcbiAgICAgICAgfSkpO1xuXG4gICAgICBiYXJzLmVudGVyKClcbiAgICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgICAgY2xhc3M6ICdncm91cF9iYXInLFxuICAgICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMueChkLmlkKX0sIDApYCxcbiAgICAgICAgfSkpXG4gICAgICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgICAuZGF0YShkID0+IGtleXMubWFwKGtleSA9PiAoeyBrZXksIHZhbHVlOiBkW2tleV0sIHZhbHVlX3JlZjogZFtrZXkucmVwbGFjZSgnZWNfJywgJycpXSwgaWQ6IGQuaWQgfSkpKVxuICAgICAgICAuZW50ZXIoKVxuICAgICAgICAuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLmF0dHJzKGQgPT4gKHtcbiAgICAgICAgICB4OiB0aGlzLngxKGQua2V5KSxcbiAgICAgICAgICB5OiB0aGlzLnkoTWF0aC5tYXgoMCwgZC52YWx1ZSkpLFxuICAgICAgICAgIHdpZHRoOiB0aGlzLngxLmJhbmR3aWR0aCgpLFxuICAgICAgICAgIGhlaWdodDogTWF0aC5hYnModGhpcy55KGQudmFsdWUpIC0gdGhpcy55KDApKSxcbiAgICAgICAgICBmaWxsOiB0aGlzLnooZC5rZXkpLFxuICAgICAgICB9KSlcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCAoKSA9PiB7XG4gICAgICAgICAgc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJykuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcbiAgICAgICAgfSlcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsICgpID0+IHtcbiAgICAgICAgICBzdmdfYmFyLnNlbGVjdCgnLnRvb2x0aXAnKS5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICBjb25zdCB0b29sdGlwID0gc3ZnX2Jhci5zZWxlY3QoJy50b29sdGlwJyk7XG4gICAgICAgICAgY29uc3QgaW5kaWMgPSBkLmtleS5yZXBsYWNlKCdlY18nLCAnJyk7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3JlY3QnKS5hdHRycyh7IHdpZHRoOiAwLCBoZWlnaHQ6IDAgfSk7XG4gICAgICAgICAgdG9vbHRpcFxuICAgICAgICAgICAgLnNlbGVjdCgndGV4dC5pZF9mZWF0dXJlJylcbiAgICAgICAgICAgIC50ZXh0KGAke2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb259IC0gJHtkLmlkfWApO1xuICAgICAgICAgIHRvb2x0aXAuc2VsZWN0KCd0ZXh0LnZhbHVlX2ZlYXR1cmUxJylcbiAgICAgICAgICAgIC50ZXh0KGBJbmRpY2F0ZXVyIDogJHtpbmRpY31gKTtcbiAgICAgICAgICB0b29sdGlwLnNlbGVjdCgndGV4dC52YWx1ZV9mZWF0dXJlMicpXG4gICAgICAgICAgICAudGV4dChgJHthcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9ufSA6ICR7bWF0aF9yb3VuZChzZWxmLm9ial9teV9yZWdpb25baW5kaWNdICogMTApIC8gMTB9YCk7XG4gICAgICAgICAgdG9vbHRpcC5zZWxlY3QoJ3RleHQudmFsdWVfZmVhdHVyZTMnKVxuICAgICAgICAgICAgLnRleHQoYCR7ZC5pZH0gOiAke21hdGhfcm91bmQoZC52YWx1ZV9yZWYgKiAxMCkgLyAxMH1gKTtcbiAgICAgICAgICB0b29sdGlwLnNlbGVjdCgndGV4dC52YWx1ZV9mZWF0dXJlNCcpXG4gICAgICAgICAgICAudGV4dChgw4ljYXJ0OiAke21hdGhfcm91bmQoZC52YWx1ZSAqIDEwKSAvIDEwfSAlYCk7XG4gICAgICAgICAgY29uc3QgdHggPSArdGhpcy5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZSgndHJhbnNmb3JtJykucmVwbGFjZSgndHJhbnNsYXRlKCcsICcnKS5yZXBsYWNlKCcsIDApJywgJycpO1xuICAgICAgICAgIGNvbnN0IGIgPSB0b29sdGlwLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICB0b29sdGlwLnNlbGVjdCgncmVjdCcpXG4gICAgICAgICAgICAuYXR0cnMoe1xuICAgICAgICAgICAgICB3aWR0aDogYi53aWR0aCArIDIwLFxuICAgICAgICAgICAgICBoZWlnaHQ6IGIuaGVpZ2h0ICsgNy41LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgdG9vbHRpcFxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtbZDMubW91c2UodGhpcylbMF0gLSA1ICsgdHgsIGQzLm1vdXNlKHRoaXMpWzFdIC0gNzIuNV19KWApO1xuICAgICAgICB9KTtcblxuICAgICAgYmFycy5leGl0KCkucmVtb3ZlKCk7XG5cbiAgICAgIGNvbnN0IGF4aXNfeCA9IHRoaXMucGxvdC5zZWxlY3QoJy5heGlzLS14JylcbiAgICAgICAgLnRyYW5zaXRpb24oKVxuICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHRoaXMueCkpO1xuICAgICAgdGhpcy5wbG90LnNlbGVjdCgnLmF4aXMtLXknKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHRoaXMueSkudGlja3MobnVsbCwgJ3MnKSk7XG5cbiAgICAgIHRoaXMucGxvdC5zZWxlY3QoJy5ncmlkLXknKVxuICAgICAgICAudHJhbnNpdGlvbigpXG4gICAgICAgIC5jYWxsKGQzLmF4aXNMZWZ0KHRoaXMueSlcbiAgICAgICAgICAudGlja1NpemUoLXdpZHRoKVxuICAgICAgICAgIC50aWNrRm9ybWF0KCcnKSlcbiAgICAgICAgLnNlbGVjdEFsbCgnbGluZScpXG4gICAgICAgIC5hdHRyKCdzdHJva2UnLCAnbGlnaHRncmF5Jyk7XG5cbiAgICAgIGF4aXNfeC5zZWxlY3RBbGwoJ3RleHQnKVxuICAgICAgICAuYXR0cnMoKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLm5iX2Rpc3BsYXkgPiAxOCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgZHg6ICctMC44ZW0nLFxuICAgICAgICAgICAgICBkeTogJzAuMTVlbScsXG4gICAgICAgICAgICAgIHRyYW5zZm9ybTogJ3JvdGF0ZSgtNjUpJyxcbiAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6IHRoaXMubmJfZGlzcGxheSA+IDQ1ID8gJzcuNXB4JyA6ICc5cHgnIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB7IGR4OiAnMCcsIGR5OiAnMC43MWVtJywgdHJhbnNmb3JtOiBudWxsIH07XG4gICAgICAgIH0pXG4gICAgICAgIC5zdHlsZSgndGV4dC1hbmNob3InLCAoKSA9PiAodGhpcy5uYl9kaXNwbGF5ID4gMTggPyAnZW5kJyA6ICdtaWRkbGUnKSk7XG5cbiAgICAgIGF4aXNfeC5zZWxlY3RBbGwoJy50aWNrID4gbGluZScpXG4gICAgICAgIC5hdHRycyh7XG4gICAgICAgICAgdHJhbnNmb3JtOiBgdHJhbnNsYXRlKCR7TWF0aC5jZWlsKHdpZHRoIC8gKHRoaXMuZGlzcGxheWVkX2lkcy5sZW5ndGggKiAyKSl9LDApYCxcbiAgICAgICAgICB5MTogNixcbiAgICAgICAgICB5MjogLWhlaWdodCxcbiAgICAgICAgfSlcbiAgICAgICAgLnN0eWxlcyh7XG4gICAgICAgICAgc3Ryb2tlOiAnZ3JheScsXG4gICAgICAgICAgJ3N0cm9rZS1vcGFjaXR5JzogMC40LFxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVNYXBSZWdpbygpIHtcbiAgICB0aGlzLm1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgICAgLmF0dHIoJ2ZpbGwnLCBkID0+IChcbiAgICAgICAgdGhpcy5jdXJyZW50X2lkcy5pbmRleE9mKGQucHJvcGVydGllc1thcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRfZ2VvbV0pID4gLTFcbiAgICAgICAgICA/IGFwcC5jb2xvcnNbZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXV0gfHwgY29sb3JfY291bnRyaWVzXG4gICAgICAgICAgOiBjb2xvcl9kaXNhYmxlZCkpO1xuICB9XG5cbiAgdXBkYXRlQ2hhbmdlUmVnaW9uKCkge1xuICAgIHRoaXMuY2hhbmdlU3R1ZHlab25lKCk7XG4gIH1cblxuICBjaGFuZ2VTdHVkeVpvbmUoKSB7XG4gICAgdGhpcy52YXJpYWJsZXMgPSBhcHAuY3VycmVudF9jb25maWcucmF0aW87XG4gICAgLy8gRmlsdGVyIHRoZSBkYXRhIGFnYWluc3QgZW1wdHkgZmVhdHVyZXM6XG4gICAgdGhpcy5yZWZfZGF0YSA9IGFwcC5jdXJyZW50X2RhdGFcbiAgICAgIC5maWx0ZXIoZnQgPT4gdGhpcy52YXJpYWJsZXMubWFwKHYgPT4gISFmdFt2XSkuZXZlcnkodiA9PiB2ID09PSB0cnVlKSlcbiAgICAgIC5zbGljZSgpO1xuICAgIC8vIFN0YW5kYXJkaXplIGFsbCB2YXJpYWJsZXM6XG4gICAgdGhpcy52YXJpYWJsZXMuZm9yRWFjaCgodikgPT4ge1xuICAgICAgY29uc3Qgc2VyaWUgPSB0aGlzLnJlZl9kYXRhLm1hcChmdCA9PiBmdFt2XSk7XG4gICAgICBjb25zdCBzdGFuZGFyZGl6ZWQgPSBnZXRTdGFuZGFyZGl6ZWRNZWFuU3RkRGV2KHNlcmllKTtcbiAgICAgIGNvbnN0IG5hbWVfc3RhbmRhcmRpemVkID0gYHN0XyR7dn1gO1xuICAgICAgdGhpcy5yZWZfZGF0YS5mb3JFYWNoKChmdCwgaSkgPT4ge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgZnRbbmFtZV9zdGFuZGFyZGl6ZWRdID0gc3RhbmRhcmRpemVkW2ldO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBGaW5kIHZhbHVlIG9mIG15IHJlZ2lvbjpcbiAgICB0aGlzLm9ial9teV9yZWdpb24gPSB0aGlzLnJlZl9kYXRhLmZpbmQoZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKTtcblxuICAgIHRoaXMucmVmX2RhdGEuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLnZhcmlhYmxlcy5tYXAodiA9PiBtYXRoX3Bvdyh0aGlzLm9ial9teV9yZWdpb25bYHN0XyR7dn1gXSAtIGZ0W2BzdF8ke3Z9YF0sIDIpKS5yZWR1Y2UoKGEsIGIpID0+IGEgKyBiLCAwKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgZnQuZGlzc2ltaWxhcml0eSA9IG1hdGhfc3FydChzKTtcbiAgICAgIHRoaXMudmFyaWFibGVzLmZvckVhY2goKHYpID0+IHtcbiAgICAgICAgY29uc3QgdmFyX25hbWUgPSBgZWNfJHt2fWA7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBmdFt2YXJfbmFtZV0gPSAoZnRbdl0gLyB0aGlzLm9ial9teV9yZWdpb25bdl0gKiAxMDApIC0gMTAwO1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5yZWZfZGF0YSA9IHRoaXMucmVmX2RhdGEuc29ydCgoYSwgYikgPT4gYS5kaXNzaW1pbGFyaXR5IC0gYi5kaXNzaW1pbGFyaXR5KTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnJlZl9kYXRhLnNsaWNlKDEsIDEgKyB0aGlzLm5iX2Rpc3BsYXkpO1xuXG4gICAgdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMucmVmX2RhdGEubWFwKGQgPT4gZC5pZCk7XG4gICAgdGhpcy5kaXNwbGF5ZWRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICB0aGlzLmRpc3BsYXllZF9pZHMuZm9yRWFjaCgoX2lkKSA9PiB7IGFwcC5jb2xvcnNbX2lkXSA9IGNvbG9yX2RlZmF1bHRfZGlzc2ltOyB9KTtcbiAgICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgIHRoaXMudXBkYXRlQ29tcGxldHVkZSgpO1xuICAgIHRoaXMudXBkYXRlVGFibGVTdGF0cygpO1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgYXBwbHlTZWxlY3Rpb24obmJfdmFsdWUpIHtcbiAgICB0aGlzLm5iX2Rpc3BsYXkgPSBuYl92YWx1ZTtcbiAgICB0aGlzLmRhdGEgPSB0aGlzLnJlZl9kYXRhLnNsaWNlKDEsIDEgKyBuYl92YWx1ZSk7XG4gICAgdGhpcy5kaXNwbGF5ZWRfaWRzID0gdGhpcy5kYXRhLm1hcChkID0+IGQuaWQpO1xuICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICB0aGlzLmRpc3BsYXllZF9pZHMuZm9yRWFjaCgoX2lkKSA9PiB7IGFwcC5jb2xvcnNbX2lkXSA9IGNvbG9yX2RlZmF1bHRfZGlzc2ltOyB9KTtcbiAgICBhcHAuY29sb3JzW2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb25dID0gY29sb3JfaGlnaGxpZ2h0O1xuICAgIHRoaXMudXBkYXRlTWFwUmVnaW8oKTtcbiAgICB0aGlzLnVwZGF0ZSgpO1xuICB9XG5cbiAgYmluZE1lbnUoKSB7XG4gICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgY29uc3QgbWVudSA9IGQzLnNlbGVjdCgnI21lbnVfc2VsZWN0aW9uJyk7XG4gICAgY29uc3QgYXBwbHljaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdmFsdWUgPSArdGhpcy52YWx1ZTtcbiAgICAgIGlmICh2YWx1ZSA8IDEpIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IDE7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChzZWxmLmN1cnJlbnRfdHlwZSA9PT0gJ2dsb2JhbCcgJiYgdmFsdWUgPiBzZWxmLnJlZl9kYXRhLmxlbmd0aCkge1xuICAgICAgICB2YWx1ZSA9IHRoaXMudmFsdWUgPSBzZWxmLnJlZl9kYXRhLmxlbmd0aDtcbiAgICAgIH0gZWxzZSBpZiAoc2VsZi5jdXJyZW50X3R5cGUgPT09ICdkZXRhaWwnICYmIHZhbHVlID4gNTApIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzLnZhbHVlID0gNTA7XG4gICAgICB9XG4gICAgICBzZWxmLmFwcGx5U2VsZWN0aW9uKHZhbHVlKTtcbiAgICB9O1xuICAgIG1lbnUuc2VsZWN0KCcubmJfc2VsZWN0JylcbiAgICAgIC5vbignY2hhbmdlJywgYXBwbHljaGFuZ2UpO1xuICAgIG1lbnUuc2VsZWN0KCcubmJfc2VsZWN0JylcbiAgICAgIC5vbignd2hlZWwnLCBhcHBseWNoYW5nZSk7XG4gICAgbWVudS5zZWxlY3QoJy5uYl9zZWxlY3QnKVxuICAgICAgLm9uKCdrZXl1cCcsIGFwcGx5Y2hhbmdlKTtcblxuICAgIG1lbnUuc2VsZWN0KCcjaW5kX2dsb2JhbCcpXG4gICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHNlbGYuY3VycmVudF90eXBlID0gJ2dsb2JhbCc7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIG1lbnUuc2VsZWN0KCcjaW5kX2RldGFpbCcpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Nob2ljZV9pbmQnKTtcbiAgICAgICAgc2VsZi5nX2Jhci5zZWxlY3RBbGwoJ2cnKS5yZW1vdmUoKTtcbiAgICAgICAgc2VsZi51cGRhdGUoKTtcbiAgICAgIH0pO1xuXG4gICAgbWVudS5zZWxlY3QoJyNpbmRfZGV0YWlsJylcbiAgICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucygnYWN0aXZlJykpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgc2VsZi5jdXJyZW50X3R5cGUgPSAnZGV0YWlsJztcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgbWVudS5zZWxlY3QoJyNpbmRfZ2xvYmFsJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAnY2hvaWNlX2luZCcpO1xuICAgICAgICBzZWxmLmdfYmFyLnNlbGVjdEFsbCgncmVjdCcpLnJlbW92ZSgpO1xuICAgICAgICBzZWxmLnVwZGF0ZSgpO1xuICAgICAgfSk7XG4gIH1cblxuICBhZGRWYXJpYWJsZShjb2RlX3ZhcmlhYmxlLCBuYW1lX3ZhcmlhYmxlKSB7XG4gICAgdGhpcy5nX2Jhci5zZWxlY3RBbGwoJ3JlY3QsIGcnKS5yZW1vdmUoKTtcbiAgICB0aGlzLmNoYW5nZVN0dWR5Wm9uZSgpO1xuICB9XG5cbiAgcmVtb3ZlVmFyaWFibGUoY29kZV92YXJpYWJsZSkge1xuICAgIHRoaXMuZ19iYXIuc2VsZWN0QWxsKCdyZWN0LCBnJykucmVtb3ZlKCk7XG4gICAgdGhpcy5jaGFuZ2VTdHVkeVpvbmUoKTtcbiAgfVxuXG4gIGNoYW5nZVZhcmlhYmxlKGNvZGVfdmFyaWFibGUpIHtcbiAgICB0aGlzLnJhdGlvX3RvX3VzZSA9IGNvZGVfdmFyaWFibGU7XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5wbG90LnJlbW92ZSgpO1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cyA9IG51bGw7XG4gICAgdGhpcy5tYXBfZWxlbS51bmJpbmRCcnVzaENsaWNrKCk7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG51bGw7XG4gICAgc3ZnX2Jhci5odG1sKCcnKTtcbiAgfVxuXG4gIGJpbmRNYXAobWFwX2VsZW0pIHtcbiAgICB0aGlzLm1hcF9lbGVtID0gbWFwX2VsZW07XG4gICAgdGhpcy5tYXBfZWxlbS5yZXNldENvbG9ycyh0aGlzLmN1cnJlbnRfaWRzKTtcbiAgICB0aGlzLmFwcGx5U2VsZWN0aW9uKDUpO1xuXG4gICAgLy8gVE9ETyA6IGRlZmluZSBpbiBlYWNoIGNoYXJ0IHdhcyBraW5kIG9mIHRvb2x0aXAgdG8gZGlzcGxheSBvbiB0aGUgbWFwXG4gICAgLy8gdGhpcy5tYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAvLyAgIC5vbignbW91c2VvdmVyJywgKCkgPT4ge1xuICAgIC8vICAgICBzdmdfbWFwLnNlbGVjdCgnLnRvb2x0aXAnKVxuICAgIC8vICAgICAgIC5zdHlsZSgnZGlzcGxheScsIG51bGwpO1xuICAgIC8vICAgfSlcbiAgICAvLyAgIC5vbignbW91c2VvdXQnLCAoKSA9PiB7XG4gICAgLy8gICAgIHN2Z19tYXAuc2VsZWN0KCcudG9vbHRpcCcpXG4gICAgLy8gICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAvLyAgIH0pXG4gICAgLy8gICAub24oJ21vdXNlbW92ZScsIGZ1bmN0aW9uIChkKSB7XG4gICAgLy8gICAgIGNvbnN0IHRvb2x0aXAgPSBzdmdfbWFwLnNlbGVjdCgnLnRvb2x0aXAnKTtcbiAgICAvLyAgICAgdG9vbHRpcFxuICAgIC8vICAgICAgIC5zZWxlY3QoJ3RleHQuaWRfZmVhdHVyZScpXG4gICAgLy8gICAgICAgLnRleHQoYCR7ZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5pZF9maWVsZF9nZW9tXX1gKTtcbiAgICAvLyAgICAgbGV0IF9peCwgbmJfdmFsO1xuICAgIC8vICAgICBmb3IgKF9peCA9IDAsIG5iX3ZhbCA9IE1hdGgubWluKGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpby5sZW5ndGgsIDUpOyBfaXggPCBuYl92YWw7IF9peCsrKSB7XG4gICAgLy8gICAgICAgdG9vbHRpcC5zZWxlY3QoYHRleHQudmFsdWVfZmVhdHVyZSR7X2l4ICsgMX1gKVxuICAgIC8vICAgICAgICAgLnRleHQoYCR7YXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvX3ByZXR0eV9uYW1lW19peF19OiAke21hdGhfcm91bmQoZC5wcm9wZXJ0aWVzW2FwcC5jdXJyZW50X2NvbmZpZy5yYXRpb1tfaXhdXSAqIDEwKSAvIDEwfWApO1xuICAgIC8vICAgICB9XG4gICAgLy8gICAgIHRvb2x0aXBcbiAgICAvLyAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1tkMy5tb3VzZSh0aGlzKVswXSAtIDUsIGQzLm1vdXNlKHRoaXMpWzFdIC0gNDUgLSBfaXggKiAxMl19KWApO1xuICAgIC8vICAgfSk7XG4gIH1cblxuICB1cGRhdGVUYWJsZVN0YXRzKCkge1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlQWxsKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5hZGRGZWF0dXJlcyh0aGlzLnByZXBhcmVUYWJsZVN0YXQoKSk7XG4gIH1cblxuICBwcmVwYXJlVGFibGVTdGF0KCkge1xuICAgIGNvbnN0IGFsbF92YWx1ZXMgPSB0aGlzLnZhcmlhYmxlcy5tYXAodiA9PiB0aGlzLnJlZl9kYXRhLm1hcChkID0+IGRbdl0pKTtcbiAgICBjb25zdCBteV9yZWdpb24gPSB0aGlzLnJlZl9kYXRhLmZpbmQoZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKTtcbiAgICBjb25zdCBmZWF0dXJlcyA9IGFsbF92YWx1ZXMubWFwKCh2YWx1ZXMsIGkpID0+ICh7XG4gICAgICBNaW46IGQzLm1pbih2YWx1ZXMpLFxuICAgICAgTWF4OiBkMy5tYXgodmFsdWVzKSxcbiAgICAgIE1veWVubmU6IGdldE1lYW4odmFsdWVzKSxcbiAgICAgIGlkOiB0aGlzLnZhcmlhYmxlc1tpXSxcbiAgICAgIFZhcmlhYmxlOiB0aGlzLnZhcmlhYmxlc1tpXSxcbiAgICAgICdNYSByw6lnaW9uJzogbXlfcmVnaW9uW3RoaXMudmFyaWFibGVzW2ldXSxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xuICB9XG5cbiAgbWFrZVRhYmxlU3RhdCgpIHtcbiAgICB0aGlzLnRhYmxlX3N0YXRzID0gbmV3IFRhYmxlUmVzdW1lU3RhdCh0aGlzLnByZXBhcmVUYWJsZVN0YXQoKSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNvbXAsIG1hdGhfcm91bmQsIG1hdGhfYWJzLCBSZWN0LCBQcm9wU2l6ZXIsIHByZXBhcmVUb29sdGlwLCBzdmdQYXRoVG9Db29yZHMsIGdldE1lYW4gfSBmcm9tICcuLy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgY29sb3JfZGlzYWJsZWQsIGNvbG9yX2NvdW50cmllcywgY29sb3Jfc3VwLCBjb2xvcl9pbmYsIGNvbG9yX2hpZ2hsaWdodCB9IGZyb20gJy4vLi4vb3B0aW9ucyc7XG5pbXBvcnQgeyBjYWxjUG9wQ29tcGxldHVkZVN1YnNldCB9IGZyb20gJy4vLi4vcHJlcGFyZV9kYXRhJztcbmltcG9ydCB7IHN2Z19tYXAgfSBmcm9tICcuLy4uL21hcCc7XG5pbXBvcnQgeyBhcHAsIHZhcmlhYmxlc19pbmZvLCByZXNldENvbG9ycyB9IGZyb20gJy4vLi4vLi4vbWFpbic7XG5pbXBvcnQgVGFibGVSZXN1bWVTdGF0IGZyb20gJy4vLi4vdGFibGVSZXN1bWVTdGF0JztcblxuY29uc3Qgc3ZnX2JhciA9IGQzLnNlbGVjdCgnI3N2Z19iYXInKTtcbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDQwLCBsZWZ0OiAzMCB9O1xuXG5jb25zdCB3aWR0aCA9ICtzdmdfYmFyLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodCxcbiAgaGVpZ2h0ID0gK3N2Z19iYXIuYXR0cignaGVpZ2h0JykgLSBtYXJnaW4udG9wIC0gbWFyZ2luLmJvdHRvbTtcblxuY29uc3QgYm94UXVhcnRpbGVzID0gdmFsdWVzID0+IFtcbiAgZDMucXVhbnRpbGVzKHZhbHVlcywgMC4yNSksIGQzLnF1YW50aWxlcyh2YWx1ZXMsIDAuNSksIGQzLnF1YW50aWxlcyh2YWx1ZXMsIDAuNzUpLFxuXTtcblxuLyoqXG4qIENsYXNzIHJlcHJlc2VudGluZyBhIGNoYXJ0IG9mIFwicGFyYWxsZWwgY29vcmRpbmF0ZXNcIi5cbiovXG5leHBvcnQgY2xhc3MgQm94UGxvdDEge1xuICBjb25zdHJ1Y3RvcihyZWZfZGF0YSkge1xuICAgIC8vIFNldCB0aGUgbWluaW11bSBudW1iZXIgb2YgdmFyaWFibGVzIHRvIGtlZXAgc2VsZWN0ZWQgZm9yIHRoaXMga2luZCBvZiBjaGFydDpcbiAgICBhcHAuY3VycmVudF9jb25maWcubmJfdmFyID0gMTtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICB0aGlzLnJhdGlvX3RvX3VzZSA9IGFwcC5jdXJyZW50X2NvbmZpZy5yYXRpb1swXTtcbiAgICB0aGlzLmN1cnJlbnRfbGV2ZWwgPSArYXBwLmN1cnJlbnRfY29uZmlnLmN1cnJlbnRfbGV2ZWw7XG4gICAgdGhpcy5pbmZfbGV2ZWwgPSArdGhpcy5jdXJyZW50X2xldmVsICsgMTtcbiAgICB0aGlzLnBsb3QgPSBzdmdfYmFyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1ttYXJnaW4ubGVmdCwgbWFyZ2luLnRvcF19KWApO1xuXG4gICAgdGhpcy5yZWZfZGF0YSA9IHJlZl9kYXRhLmZpbHRlcihmdCA9PiAhIWZ0W3RoaXMucmF0aW9fdG9fdXNlXSk7XG4gICAgY29uc3QgaW5mX2xldmVsX2ZlYXR1cmVzID0gYXBwLmZ1bGxfZGF0YXNldC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSB0aGlzLmluZl9sZXZlbCk7XG4gICAgbGV0IF9hbGxfdmFsdWVzO1xuICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgIHRoaXMucmVmX2RhdGEuZm9yRWFjaCgoZnQpID0+IHtcbiAgICAgIGNvbnN0IGlkID0gZnQuaWQ7XG4gICAgICBjb25zdCBjaGlsZHJlbiA9IGluZl9sZXZlbF9mZWF0dXJlcy5maWx0ZXIoXG4gICAgICAgIGQgPT4gZFthcHAuY3VycmVudF9jb25maWcuaWRfZmllbGRdLmluZGV4T2YoaWQpID4gLTEpLm1hcChkID0+IGRbdGhpcy5yYXRpb190b191c2VdKTtcbiAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPCAyKSB7XG4gICAgICAgIGZ0LnJlbW92ZSA9IHRydWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW4uc29ydCgoYSwgYikgPT4gYSAtIGIpO1xuICAgICAgY29uc3QgcmVjb3JkID0ge1xuICAgICAgICBrZXk6IGlkLFxuICAgICAgICBjb3VudHM6IGNoaWxkcmVuLFxuICAgICAgICBxdWFydGlsZTogYm94UXVhcnRpbGVzKGNoaWxkcmVuKSxcbiAgICAgICAgd2hpc2tlcnM6IFtkMy5taW4oY2hpbGRyZW4pLCBkMy5tYXgoY2hpbGRyZW4pXSxcbiAgICAgICAgY29sb3I6IGlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uID8gY29sb3JfaGlnaGxpZ2h0IDogY29sb3JfY291bnRyaWVzLFxuICAgICAgfTtcbiAgICAgIF9hbGxfdmFsdWVzID0gX2FsbF92YWx1ZXMuY29uY2F0KGNoaWxkcmVuKTtcbiAgICAgIHRoaXMuZGF0YS5wdXNoKHJlY29yZCk7XG4gICAgfSk7XG4gICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IGEucXVhcnRpbGVbMV0gLSBiLnF1YXJ0aWxlWzFdKTtcbiAgICBjb25zdCBtaW4gPSBkMy5taW4oX2FsbF92YWx1ZXMpIC0gNTtcbiAgICBjb25zdCBtYXggPSBkMy5tYXgoX2FsbF92YWx1ZXMpICsgNTtcbiAgICBjb25zdCB4U2NhbGUgPSBkMy5zY2FsZUJhbmQoKVxuICAgICAgLmRvbWFpbih0aGlzLmRhdGEubWFwKGQgPT4gZC5rZXkpKVxuICAgICAgLnJhbmdlKFswLCB3aWR0aF0pXG4gICAgICAucGFkZGluZygxKTtcbiAgICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXG4gICAgICAuZG9tYWluKFttaW4sIG1heF0pXG4gICAgICAucmFuZ2UoW2hlaWdodCwgMF0pO1xuXG4gICAgbGV0IG1heF9uYl9mdCA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkLmNvdW50cy5sZW5ndGgpO1xuICAgIG1heF9uYl9mdC5zb3J0KChhLCBiKSA9PiBhIC0gYik7XG4gICAgbWF4X25iX2Z0ID0gbWF4X25iX2Z0W21heF9uYl9mdC5sZW5ndGggLSAxXTtcbiAgICBjb25zdCBiYXJXaWR0aCA9IHhTY2FsZS5zdGVwKCkgLSAxO1xuICAgIGNvbnN0IGdldF9iYXJfd2lkdGggPSBuYl9mdCA9PiAoYmFyV2lkdGggKiBuYl9mdCkgLyBtYXhfbmJfZnQ7XG5cbiAgICB0aGlzLnBsb3QgPSBzdmdfYmFyLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke1ttYXJnaW4ubGVmdCwgbWFyZ2luLnRvcF19KWApO1xuICAgIHRoaXMucGxvdC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdheGlzIGF4aXMtLXgnLCB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoMTAsICR7aGVpZ2h0fSlgIH0pXG4gICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkpO1xuICAgIHRoaXMucGxvdC5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHJzKHsgY2xhc3M6ICdheGlzIGF4aXMtLXknLCB0cmFuc2Zvcm06ICd0cmFuc2xhdGUoMTAsIDApJyB9KVxuICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeVNjYWxlKSk7XG5cbiAgICB0aGlzLmdfYm94ID0gdGhpcy5wbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgxMCwgMCknKTtcblxuICAgIHRoaXMudmVydGljYWxfbGluZXMgPSB0aGlzLmdfYm94LnNlbGVjdEFsbCgnLnZlcnRpY2FsX2xpbmVzJylcbiAgICAgIC5kYXRhKHRoaXMuZGF0YSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdsaW5lJylcbiAgICAgIC5hdHRycyhkID0+ICh7XG4gICAgICAgIHgxOiB4U2NhbGUoZC5rZXkpICsgZ2V0X2Jhcl93aWR0aChkLmNvdW50cy5sZW5ndGgpIC8gMixcbiAgICAgICAgeTE6IHlTY2FsZShkLndoaXNrZXJzWzBdKSxcbiAgICAgICAgeDI6IHhTY2FsZShkLmtleSkgKyBnZXRfYmFyX3dpZHRoKGQuY291bnRzLmxlbmd0aCkgLyAyLFxuICAgICAgICB5MjogeVNjYWxlKGQud2hpc2tlcnNbMV0pLFxuICAgICAgICBzdHJva2U6ICcjMDAwJyxcbiAgICAgICAgJ3N0cm9rZS13aWR0aCc6IDAuNSxcbiAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgfSkpO1xuXG4gICAgdGhpcy5nX2JveC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgICAgLmRhdGEodGhpcy5kYXRhKVxuICAgICAgLmVudGVyKClcbiAgICAgIC5hcHBlbmQoJ3JlY3QnKVxuICAgICAgLmF0dHJzKGQgPT4gKHtcbiAgICAgICAgd2lkdGg6IGdldF9iYXJfd2lkdGgoZC5jb3VudHMubGVuZ3RoKSxcbiAgICAgICAgaGVpZ2h0OiB5U2NhbGUoZC5xdWFydGlsZVswXSkgLSB5U2NhbGUoZC5xdWFydGlsZVsyXSksXG4gICAgICAgIHg6IHhTY2FsZShkLmtleSksXG4gICAgICAgIHk6IHlTY2FsZShkLnF1YXJ0aWxlWzJdKSxcbiAgICAgICAgZmlsbDogZC5jb2xvcixcbiAgICAgICAgc3Ryb2tlOiAnIzAwMCcsXG4gICAgICAgICdzdHJva2Utd2lkdGgnOiAwLjUsXG4gICAgICB9KSk7XG5cbiAgICBjb25zdCBob3Jpem9udGFsTGluZUNvbmZpZ3MgPSBbXG4gICAgICB7XG4gICAgICAgIHgxOiBkYXR1bSA9PiB4U2NhbGUoZGF0dW0ua2V5KSxcbiAgICAgICAgeTE6IGRhdHVtID0+IHlTY2FsZShkYXR1bS53aGlza2Vyc1sxXSksXG4gICAgICAgIHgyOiBkYXR1bSA9PiB4U2NhbGUoZGF0dW0ua2V5KSArIGdldF9iYXJfd2lkdGgoZGF0dW0uY291bnRzLmxlbmd0aCksXG4gICAgICAgIHkyOiBkYXR1bSA9PiB5U2NhbGUoZGF0dW0ud2hpc2tlcnNbMV0pLFxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgeDE6IGRhdHVtID0+IHhTY2FsZShkYXR1bS5rZXkpLFxuICAgICAgICB5MTogZGF0dW0gPT4geVNjYWxlKGRhdHVtLnF1YXJ0aWxlWzFdKSxcbiAgICAgICAgeDI6IGRhdHVtID0+IHhTY2FsZShkYXR1bS5rZXkpICsgZ2V0X2Jhcl93aWR0aChkYXR1bS5jb3VudHMubGVuZ3RoKSxcbiAgICAgICAgeTI6IGRhdHVtID0+IHlTY2FsZShkYXR1bS5xdWFydGlsZVsxXSksXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB4MTogZGF0dW0gPT4geFNjYWxlKGRhdHVtLmtleSksXG4gICAgICAgIHkxOiBkYXR1bSA9PiB5U2NhbGUoZGF0dW0ud2hpc2tlcnNbMF0pLFxuICAgICAgICB4MjogZGF0dW0gPT4geFNjYWxlKGRhdHVtLmtleSkgKyBnZXRfYmFyX3dpZHRoKGRhdHVtLmNvdW50cy5sZW5ndGgpLFxuICAgICAgICB5MjogZGF0dW0gPT4geVNjYWxlKGRhdHVtLndoaXNrZXJzWzBdKSxcbiAgICAgIH0sXG4gICAgXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhvcml6b250YWxMaW5lQ29uZmlncy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgbGluZUNvbmZpZyA9IGhvcml6b250YWxMaW5lQ29uZmlnc1tpXTtcbiAgICAgIGNvbnN0IGhvcml6b250YWxMaW5lID0gdGhpcy5nX2JveFxuICAgICAgICAvLyAuc2VsZWN0QWxsKCcud2hpc2tlcnMnKVxuICAgICAgICAvLyAuZGF0YSh0aGlzLmRhdGEpXG4gICAgICAgIC8vIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoJ2xpbmUnKVxuICAgICAgICAuYXR0cnMoZCA9PiAoe1xuICAgICAgICAgIHgxOiBsaW5lQ29uZmlnLngxLFxuICAgICAgICAgIHkxOiBsaW5lQ29uZmlnLnkxLFxuICAgICAgICAgIHgyOiBsaW5lQ29uZmlnLngyLFxuICAgICAgICAgIHkyOiBsaW5lQ29uZmlnLnkyLFxuICAgICAgICAgIHN0cm9rZTogJyMwMDAnLFxuICAgICAgICAgICdzdHJva2Utd2lkdGgnOiAwLjUsXG4gICAgICAgICAgZmlsbDogJ25vbmUnLFxuICAgICAgICB9KSk7XG4gICAgfVxuICB9XG5cbiAgYWRkVmFyaWFibGUoY29kZV92YXJpYWJsZSwgbmFtZV92YXJpYWJsZSkge1xuICB9XG5cbiAgcmVtb3ZlVmFyaWFibGUoY29kZV92YXJpYWJsZSkge1xuICB9XG5cbiAgY2hhbmdlVmFyaWFibGUoY29kZV92YXJpYWJsZSkge1xuICB9XG5cbiAgcmVtb3ZlKCkge1xuICAgIHRoaXMucGxvdC5yZW1vdmUoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzLnJlbW92ZSgpO1xuICAgIHRoaXMudGFibGVfc3RhdHMgPSBudWxsO1xuICAgIHRoaXMubWFwX2VsZW0udW5iaW5kQnJ1c2hDbGljaygpO1xuICAgIHRoaXMubWFwX2VsZW0gPSBudWxsO1xuICAgIHN2Z19iYXIuaHRtbCgnJyk7XG4gIH1cblxuICBiaW5kTWFwKG1hcF9lbGVtKSB7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG1hcF9lbGVtO1xuICAgIHRoaXMubWFwX2VsZW0ucmVzZXRDb2xvcnModGhpcy5jdXJyZW50X2lkcyk7XG4gIH1cblxuICB1cGRhdGVUYWJsZVN0YXRzKCkge1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlQWxsKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5hZGRGZWF0dXJlKHRoaXMucHJlcGFyZVRhYmxlU3RhdCgpKTtcbiAgfVxuXG4gIHByZXBhcmVUYWJsZVN0YXQoKSB7XG4gICAgY29uc3QgdmFsdWVzID0gdGhpcy5kYXRhLm1hcChkID0+IGRbdGhpcy5yYXRpb190b191c2VdKTtcbiAgICByZXR1cm4ge1xuICAgICAgTWluOiBkMy5taW4odmFsdWVzKSxcbiAgICAgIE1heDogZDMubWF4KHZhbHVlcyksXG4gICAgICBNb3llbm5lOiBnZXRNZWFuKHZhbHVlcyksXG4gICAgICBpZDogdGhpcy5yYXRpb190b191c2UsXG4gICAgICBWYXJpYWJsZTogdGhpcy5yYXRpb190b191c2UsXG4gICAgICAnTWEgcsOpZ2lvbic6IHRoaXMucmVmX3ZhbHVlLFxuICAgIH07XG4gIH1cblxuICBtYWtlVGFibGVTdGF0KCkge1xuICAgIGNvbnN0IGZlYXR1cmUgPSB0aGlzLnByZXBhcmVUYWJsZVN0YXQoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzID0gbmV3IFRhYmxlUmVzdW1lU3RhdChbZmVhdHVyZV0pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjb21wLCBtYXRoX3JvdW5kLCBtYXRoX2FicywgUmVjdCwgcHJlcGFyZVRvb2x0aXAsIHN2Z1BhdGhUb0Nvb3JkcywgZ2V0TWVhbiwgZ2V0U3RkRGV2IH0gZnJvbSAnLi8uLi9oZWxwZXJzJztcbmltcG9ydCB7IGNvbG9yX2Rpc2FibGVkLCBjb2xvcl9jb3VudHJpZXMsIGNvbG9yX3N1cCwgY29sb3JfaW5mLCBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuLy4uL29wdGlvbnMnO1xuaW1wb3J0IHsgY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQgfSBmcm9tICcuLy4uL3ByZXBhcmVfZGF0YSc7XG5pbXBvcnQgeyBzdmdfbWFwIH0gZnJvbSAnLi8uLi9tYXAnO1xuaW1wb3J0IHsgYXBwLCByZXNldENvbG9ycyB9IGZyb20gJy4vLi4vLi4vbWFpbic7XG5pbXBvcnQgVGFibGVSZXN1bWVTdGF0IGZyb20gJy4vLi4vdGFibGVSZXN1bWVTdGF0JztcblxuY29uc3Qgc3ZnX2JhciA9IGQzLnNlbGVjdCgnI3N2Z19iYXInKTtcbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiAyMCwgcmlnaHQ6IDIwLCBib3R0b206IDQwLCBsZWZ0OiAyMCB9O1xuXG5jb25zdCB3aWR0aCA9ICtzdmdfYmFyLmF0dHIoJ3dpZHRoJykgLSBtYXJnaW4ubGVmdCAtIG1hcmdpbi5yaWdodDtcbmNvbnN0IGhlaWdodCA9ICtzdmdfYmFyLmF0dHIoJ2hlaWdodCcpIC0gbWFyZ2luLnRvcCAtIG1hcmdpbi5ib3R0b207XG5cbi8qKlxuKiBDbGFzcyByZXByZXNlbnRpbmcgYSBjaGFydCBvZiBcInBhcmFsbGVsIGNvb3JkaW5hdGVzXCIuXG4qL1xuZXhwb3J0IGNsYXNzIFBhcmFsbGVsQ29vcmRzMiB7XG4gIGNvbnN0cnVjdG9yKHJlZl9kYXRhKSB7XG4gICAgLy8gU2V0IHRoZSBtaW5pbXVtIG51bWJlciBvZiB2YXJpYWJsZXMgdG8ga2VlcCBzZWxlY3RlZCBmb3IgdGhpcyBraW5kIG9mIGNoYXJ0OlxuICAgIGFwcC5jdXJyZW50X2NvbmZpZy5uYl92YXIgPSAyO1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIHRoaXMudmFyaWFibGVzID0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLnNsaWNlKCk7XG4gICAgdGhpcy5jdXJyZW50X2xldmVsID0gK2FwcC5jdXJyZW50X2NvbmZpZy5jdXJyZW50X2xldmVsO1xuICAgIHRoaXMuaW5mX2xldmVsID0gK3RoaXMuY3VycmVudF9sZXZlbCArIDE7XG4gICAgdGhpcy5wbG90ID0gc3ZnX2Jhci5hcHBlbmQoJ2cnKVxuICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtbbWFyZ2luLmxlZnQsIG1hcmdpbi50b3BdfSlgKTtcblxuICAgIHRoaXMueCA9IGQzLnNjYWxlQmFuZCgpLnJhbmdlUm91bmQoWzAsIHdpZHRoXSk7XG4gICAgdGhpcy55ID0ge307XG4gICAgdGhpcy5saW5lID0gZDMubGluZSgpO1xuICAgIC8vIHRoaXMuYWxsX2tleXMgPSB0aGlzLnZhcmlhYmxlcztcbiAgICB0aGlzLmRhdGEgPSByZWZfZGF0YS5maWx0ZXIoZnQgPT4gdGhpcy52YXJpYWJsZXMubWFwKHYgPT4gISFmdFt2XSkuZXZlcnkodiA9PiB2ID09PSB0cnVlKSk7XG4gICAgY29uc3QgaW5mX2xldmVsX2ZlYXR1cmVzID0gYXBwLmZ1bGxfZGF0YXNldC5maWx0ZXIoZnQgPT4gK2Z0LmxldmVsID09PSB0aGlzLmluZl9sZXZlbCk7XG4gICAgdGhpcy5kYXRhLmZvckVhY2goKGZ0KSA9PiB7XG4gICAgICBjb25zdCBpZCA9IGZ0LmlkO1xuICAgICAgY29uc3QgY2hpbGRyZW4gPSBpbmZfbGV2ZWxfZmVhdHVyZXMuZmlsdGVyKFxuICAgICAgICBkID0+IGRbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkXS5pbmRleE9mKGlkKSA+IC0xKTtcbiAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPCAyKSB7XG4gICAgICAgIGZ0LnJlbW92ZSA9IHRydWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gQ29tcHV0ZSBSZWxhdGl2ZSBTdGFuZGFyZCBEZXZpYXRpb24gKFwiY29lZmZpY2llbnQgZGUgdmFyaWF0aW9uXCIpIGZvciBlYWNoIHZhcmlhYmxlOlxuICAgICAgdGhpcy52YXJpYWJsZXMuZm9yRWFjaCgodikgPT4ge1xuICAgICAgICBjb25zdCB2X25hbWUgPSBgcnNkXyR7dn1gO1xuICAgICAgICBjb25zdCBzZXJpZSA9IGNoaWxkcmVuLm1hcChkID0+ICtkW3ZdKTtcbiAgICAgICAgY29uc3QgbWVhbiA9IGdldE1lYW4oc2VyaWUpO1xuICAgICAgICBjb25zdCByc2QgPSBtZWFuIC8gZ2V0U3RkRGV2KHNlcmllLCBtZWFuKTtcbiAgICAgICAgZnRbdl9uYW1lXSA9IHJzZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgfSk7XG4gICAgfSk7XG4gICAgdGhpcy5kYXRhID0gdGhpcy5kYXRhLmZpbHRlcihkID0+ICFkLnJlbW92ZSk7XG4gICAgdGhpcy5jdXJyZW50X2lkcyA9IHRoaXMuZGF0YS5tYXAoZCA9PiBkLmlkKTtcbiAgICB0aGlzLmRpbWVuc2lvbnMgPSBkMy5rZXlzKHRoaXMuZGF0YVswXSkuZmlsdGVyKChkKSA9PiB7XG4gICAgICByZXR1cm4gZC5pbmRleE9mKCdyc2RfJykgPT09IDAgJiYgKHRoaXMueVtkXSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgICAgLmRvbWFpbihkMy5leHRlbnQodGhpcy5kYXRhLCBwID0+ICtwW2RdKSlcbiAgICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKSk7XG4gICAgfSk7XG4gICAgdGhpcy54LmRvbWFpbih0aGlzLmRpbWVuc2lvbnMpO1xuICAgIHRoaXMueC5yYW5nZVJvdW5kKFswLCB3aWR0aCArIHRoaXMueC5zdGVwKCkgKiAxLjVdKTtcbiAgICBjb25zdCBiYWNrZ3JvdW5kID0gdGhpcy5wbG90LmFwcGVuZCgnZycpXG4gICAgICAuYXR0cignY2xhc3MnLCAnYmFja2dyb3VuZCcpXG4gICAgICAuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgIC5kYXRhKHRoaXMuZGF0YSlcbiAgICAgIC5lbnRlcigpXG4gICAgICAuYXBwZW5kKCdwYXRoJylcbiAgICAgIC5hdHRyKCdkJywgZCA9PiB0aGlzLnBhdGgoZCkpXG4gICAgICAuYXR0cignaWQnLCBkID0+IGBmXyR7ZC5pZH1gKTtcblxuICAgIC8vIGNvbnN0IGZvcmVncm91bmQgPSB0aGlzLnBsb3QuYXBwZW5kKCdnJylcbiAgICAvLyAgIC5hdHRyKCdjbGFzcycsICdmb3JlZ3JvdW5kJylcbiAgICAvLyAgIC5zZWxlY3RBbGwoJ3BhdGgnKVxuICAgIC8vICAgLmRhdGEodGhpcy5kYXRhKVxuICAgIC8vICAgLmVudGVyKClcbiAgICAvLyAgIC5hcHBlbmQoJ3BhdGgnKVxuICAgIC8vICAgLmF0dHIoJ2QnLCBkID0+IHRoaXMucGF0aChkKSk7XG5cbiAgICBjb25zdCBnID0gdGhpcy5wbG90LnNlbGVjdEFsbCgnLmRpbWVuc2lvbicpXG4gICAgICAuZGF0YSh0aGlzLmRpbWVuc2lvbnMpXG4gICAgICAuZW50ZXIoKVxuICAgICAgLmFwcGVuZCgnZycpXG4gICAgICAuYXR0cnMoZCA9PiAoe1xuICAgICAgICBjbGFzczogJ2RpbWVuc2lvbicsXG4gICAgICAgIHRyYW5zZm9ybTogYHRyYW5zbGF0ZSgke3RoaXMueChkKX0pYCxcbiAgICAgIH0pKTtcblxuICAgIGcuYXBwZW5kKCdnJylcbiAgICAgIC5hdHRyKCdjbGFzcycsICdheGlzJylcbiAgICAgIC5lYWNoKGZ1bmN0aW9uIChkKSB7IGQzLnNlbGVjdCh0aGlzKS5jYWxsKGQzLmF4aXNMZWZ0KHNlbGYueVtkXSkpOyB9KVxuICAgICAgLmFwcGVuZCgndGV4dCcpXG4gICAgICAuc3R5bGVzKHtcbiAgICAgICAgJ3RleHQtYW5jaG9yJzogJ21pZGRsZScsXG4gICAgICAgICdmb250LXNpemUnOiAnMTFweCcsXG4gICAgICB9KVxuICAgICAgLmF0dHIoJ3knLCAtNSlcbiAgICAgIC50ZXh0KGQgPT4gZCk7XG5cbiAgICAvLyBmb3JlZ3JvdW5kXG4gICAgLy8gICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uIChkKSB7XG4gICAgLy8gICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA/IDIuOCA6IDIpO1xuICAgIC8vICAgICBzdmdfYmFyLmFwcGVuZCgndGV4dCcpXG4gICAgLy8gICAgICAgLmF0dHJzKHtcbiAgICAvLyAgICAgICAgIGlkOiAnaWRfZmVhdHVyZScsXG4gICAgLy8gICAgICAgICB4OiA3NSxcbiAgICAvLyAgICAgICAgIHk6IHNlbGYueVtzZWxmLmRpbWVuc2lvbnNbMF1dKGRbc2VsZi5kaW1lbnNpb25zXSksXG4gICAgLy8gICAgICAgfSk7XG4gICAgLy8gICB9KVxuICAgIC8vICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uIChkKSB7XG4gICAgLy8gICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgZC5pZCA9PT0gYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbiA/IDEuNyA6IDEpO1xuICAgIC8vICAgICBzdmdfYmFyLnNlbGVjdCgnI2lkX2ZlYXR1cmUnKS5yZW1vdmUoKTtcbiAgICAvLyAgIH0pO1xuICAgIC8vXG4gICAgLy8gdGhpcy5wbG90LnNlbGVjdChgLmZvcmVncm91bmQgPiAjZl8ke2FwcC5jdXJyZW50X2NvbmZpZy5teV9yZWdpb259YCk7XG4gICAgdGhpcy5tYWtlVGFibGVTdGF0KCk7XG4gIH1cblxuICBwYXRoKGQpIHtcbiAgICByZXR1cm4gdGhpcy5saW5lKHRoaXMuZGltZW5zaW9ucy5tYXAocCA9PiBbdGhpcy54KHApLCB0aGlzLnlbcF0oZFtwXSldKSk7XG4gIH1cblxuICBiaW5kTWFwKG1hcF9lbGVtKSB7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG1hcF9lbGVtO1xuICAgIHRoaXMubWFwX2VsZW0ucmVzZXRDb2xvcnModGhpcy5jdXJyZW50X2lkcyk7XG4gIH1cblxuICByZW1vdmUoKSB7XG4gICAgdGhpcy5wbG90LnJlbW92ZSgpO1xuICAgIHRoaXMudGFibGVfc3RhdHMucmVtb3ZlKCk7XG4gICAgdGhpcy50YWJsZV9zdGF0cyA9IG51bGw7XG4gICAgdGhpcy5tYXBfZWxlbS51bmJpbmRCcnVzaENsaWNrKCk7XG4gICAgdGhpcy5tYXBfZWxlbSA9IG51bGw7XG4gICAgc3ZnX2Jhci5odG1sKCcnKTtcbiAgfVxuXG4gIHVwZGF0ZVRhYmxlU3RhdHMoKSB7XG4gICAgdGhpcy50YWJsZV9zdGF0cy5yZW1vdmVBbGwoKTtcbiAgICB0aGlzLnRhYmxlX3N0YXRzLmFkZEZlYXR1cmVzKHRoaXMucHJlcGFyZVRhYmxlU3RhdCgpKTtcbiAgfVxuXG4gIHByZXBhcmVUYWJsZVN0YXQoKSB7XG4gICAgY29uc3QgYWxsX3ZhbHVlcyA9IHRoaXMudmFyaWFibGVzLm1hcCh2ID0+IHRoaXMuZGF0YS5tYXAoZCA9PiBkW3ZdKSk7XG4gICAgY29uc3QgbXlfcmVnaW9uID0gdGhpcy5kYXRhLmZpbmQoZCA9PiBkLmlkID09PSBhcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uKTtcbiAgICBjb25zdCBmZWF0dXJlcyA9IGFsbF92YWx1ZXMubWFwKCh2YWx1ZXMsIGkpID0+ICh7XG4gICAgICBNaW46IGQzLm1pbih2YWx1ZXMpLFxuICAgICAgTWF4OiBkMy5tYXgodmFsdWVzKSxcbiAgICAgIE1veWVubmU6IGdldE1lYW4odmFsdWVzKSxcbiAgICAgIGlkOiB0aGlzLnZhcmlhYmxlc1tpXSxcbiAgICAgIFZhcmlhYmxlOiB0aGlzLnZhcmlhYmxlc1tpXSxcbiAgICAgICdNYSByw6lnaW9uJzogbXlfcmVnaW9uW3RoaXMudmFyaWFibGVzW2ldXSxcbiAgICB9KSk7XG4gICAgcmV0dXJuIGZlYXR1cmVzO1xuICB9XG5cbiAgbWFrZVRhYmxlU3RhdCgpIHtcbiAgICB0aGlzLnRhYmxlX3N0YXRzID0gbmV3IFRhYmxlUmVzdW1lU3RhdCh0aGlzLnByZXBhcmVUYWJsZVN0YXQoKSk7XG4gIH1cblxuICB1cGRhdGVDaGFuZ2VSZWdpb24oKSB7XG4gICAgdGhpcy5jaGFuZ2VTdHVkeVpvbmUoKTtcbiAgfVxuXG4gIGNoYW5nZVN0dWR5Wm9uZSgpIHt9XG59XG4iLCIvLyBpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHRpbmdsZSBmcm9tICd0aW5nbGUuanMnO1xuaW1wb3J0IHsgY3JlYXRlTWVudSB9IGZyb20gJy4vbW9kdWxlcy9tZW51bGVmdCc7XG5pbXBvcnQgeyBtYWtlVG9wTWVudSwgbWFrZUhlYWRlckNoYXJ0LCBtYWtlSGVhZGVyTWFwU2VjdGlvbiB9IGZyb20gJy4vbW9kdWxlcy9tZW51dG9wJztcbmltcG9ydCB7IE1hcFNlbGVjdCwgbWFrZVNvdXJjZVNlY3Rpb24sIG1ha2VNYXBMZWdlbmQsIHN2Z19tYXAgfSBmcm9tICcuL21vZHVsZXMvbWFwJztcbmltcG9ydCB7IG1ha2VUYWJsZSB9IGZyb20gJy4vbW9kdWxlcy90YWJsZSc7XG5pbXBvcnQgeyBjb2xvcl9oaWdobGlnaHQgfSBmcm9tICcuL21vZHVsZXMvb3B0aW9ucyc7XG5pbXBvcnQgeyBCYXJDaGFydDEgfSBmcm9tICcuL21vZHVsZXMvY2hhcnRzL2JhckNoYXJ0XzF2JztcbmltcG9ydCB7IEJ1YmJsZUNoYXJ0MSB9IGZyb20gJy4vbW9kdWxlcy9jaGFydHMvYnViYmxlQ2hhcnRfMXYnO1xuaW1wb3J0IHsgU2NhdHRlclBsb3QyIH0gZnJvbSAnLi9tb2R1bGVzL2NoYXJ0cy9zY2F0dGVyUGxvdF8ydic7XG5pbXBvcnQgeyBSYWRhckNoYXJ0MyB9IGZyb20gJy4vbW9kdWxlcy9jaGFydHMvcmFkYXJDaGFydF8zdic7XG5pbXBvcnQgeyBTaW1pbGFyaXR5Q2hhcnQgfSBmcm9tICcuL21vZHVsZXMvY2hhcnRzL3NpbWlsYXJpdHlfMnYnO1xuaW1wb3J0IHsgQm94UGxvdDEgfSBmcm9tICcuL21vZHVsZXMvY2hhcnRzL2JveFBsb3RfMXYnO1xuaW1wb3J0IHsgUGFyYWxsZWxDb29yZHMyIH0gZnJvbSAnLi9tb2R1bGVzL2NoYXJ0cy9wYXJhbGxlbENvb3Jkc18ydic7XG5pbXBvcnQgeyB1bmJpbmRVSSB9IGZyb20gJy4vbW9kdWxlcy9oZWxwZXJzJztcbmltcG9ydCB7XG4gIHByZXBhcmVfZGF0YXNldCxcbiAgZmlsdGVyTGV2ZWxWYXIsXG4gIGFwcGx5RmlsdGVyLFxuICBjaGFuZ2VSZWdpb24sXG4gIGFkZFZhcmlhYmxlLFxuICByZW1vdmVWYXJpYWJsZSxcbiAgcmVzZXRWYXJpYWJsZXMsXG4gIHByZXBhcmVWYXJpYWJsZXNJbmZvLFxufSBmcm9tICcuL21vZHVsZXMvcHJlcGFyZV9kYXRhJztcblxuZXhwb3J0IGxldCB2YXJpYWJsZXNfaW5mbztcblxuY29uc3Qgc3R1ZHlfem9uZXMgPSBbXG4gIHsgaWQ6ICdub19maWx0ZXInLCBuYW1lOiAnVUUyOCcgfSxcbiAgeyBpZDogJ2ZpbHRlcl9GUicsIG5hbWU6ICdGaWx0cmUgbmF0aW9uYWwgKEZyYW5jZSknIH0sXG4gIHsgaWQ6ICdmaWx0ZXJfcGFyYW0yJywgbmFtZTogJ0VzcGFjZSBkZSBjb21wYXJhaXNvbiBuwrAyJyB9LFxuXTtcblxuY29uc3QgdGVycml0b3JpYWxfbWVzaCA9IFtcbiAgeyBpZDogJ05VVFMxJywgbmFtZTogJ05VVFMxJyB9LFxuICB7IGlkOiAnTlVUUzEyc3RhdCcsIG5hbWU6ICdOVVRTMS8yIChzdGF0aXN0aXF1ZSknIH0sXG5dO1xuXG5leHBvcnQgY29uc3QgYXBwID0ge1xuICAvLyBBIG1hcHBpbmcgaWQgLT4gY29sb3IsIGNvbnRhaW5pbmcgdGhlIGNvbG9yIHRvIHVzZSBmb3IgZWFjaFxuICAvLyBmZWF0dXJlIG5vdCB1c2luZyB0aGUgZGVmYXVsdCBjb2xvciBvciB0aGUgZGlzYWJsZWQgY29sb3JcbiAgY29sb3JzOiB7fSxcbiAgLy8gVGhlIGZpbHRlcmVkIGRhdGFzZXQgKGFjY2NvcmRpbmcgdG86IHRoZSBjdXJyZW50IHRlcnJpdG9yaWFsIGxldmVsLFxuICAvLyB0aGUgZmlsdGVyIGtleSAoaWYgYW55KSBhbmQgdGhlIHJhdGlvKHMpIHNlbGVjdGVkIG9uIHRoZSBsZWZ0IG1lbnU6XG4gIGN1cnJlbnRfZGF0YTogW10sXG4gIC8vIFRoZSBmdWxsIGRhdGFzZXQgcHJvdmlkZWQgKGNvbnRhaW5pbmcgYWxsIHRoZSBmZWF0dXJlcyBhdCBhbnkgbGV2ZWwgaW4gb25lIHRhYmxlKVxuICAvLyBSb3cgd2l0aG91dCBkYXRhIGFyZSBleHBlY3RlZCB0byBiZSBlbXB0eSBvciB0byBjb250YWluIHRoZSBcIk5BXCIgc3RyaW5nLlxuICBmdWxsX2RhdGFzZXQ6IFtdLFxuICAvLyBUaGUgaWRzIG9mIHRoZSBjdXJyZW50IGZlYXR1cmUgaW4gdXNlIChhY2Njb3JkaW5nIHRvOiB0aGUgY3VycmVudCB0ZXJyaXRvcmlhbCBsZXZlbCxcbiAgLy8gdGhlIGZpbHRlciBrZXkgKGlmIGFueSkgYW5kIHRoZSByYXRpbyhzKSB1c2VkIGluIHRoZSBjdXJyZW50IGNoYXJ0OyBmaWx0ZXJlZFxuICAvLyB0byBub3QgY29udGFpbiBmZWF0dXJlIHdpdGggZW1wdHkgcmF0aW8gdmFsdWVzIHdpdGhpbiB0aGUgcmF0aW9zIGluIHVzZSkuXG4gIGN1cnJlbnRfaWRzOiBbXSxcbn07XG5cbmZ1bmN0aW9uIHNldERlZmF1bHRDb25maWcoY29kZSA9ICdGUkUnLCB2YXJpYWJsZSA9ICdSVF9DSE9NXzE1NzQnKSB7IC8vIH0sIGxldmVsID0gJ05VVFMxJykge1xuICBhcHAuY3VycmVudF9jb25maWcgPSB7XG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIG9mIHRoZSBkYXRhc2V0IGNvbnRhaW5pbmcgdGhlIElEIG9mIGVhY2ggZmVhdHVyZTpcbiAgICBpZF9maWVsZDogJ2dlbycsXG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIG9mIHRoZSBkYXRhc2V0IGNvbnRhaW5pbmcgdGhlIG5hbWUgb2YgZWFjaCBmZWF0dXJlOlxuICAgIG5hbWVfZmllbGQ6ICdOb20nLFxuICAgIC8vIFRoZSBuYW1lIG9mIHRoZSBmaWVsZCBvZiB0aGUgZGF0YXNldCBjb250YWluaW5nIHRoZSBwb3B1bGF0aW9uIG9mIGVhY2ggZmVhdHVyZTpcbiAgICBwb3BfZmllbGQ6ICdQT1BfQUdFX1RfMjAxNicsXG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIGZpZWxkIG9mIHRoZSBnZW9qc29uIGxheWVyIGNvbnRhaW5pbmcgdGhlIElEIG9mIGVhY2ggZmVhdHVyZVxuICAgIC8vICh0aGVzZSB2YWx1ZXMgc2hvdWxkIG1hdGNoIHdpdGggdGhlIHZhbHVlcyBvZiB0aGUgXCJpZF9maWVsZFwiIGluIHRoZVxuICAgIC8vIHRhYnVsYXIgZGF0YXNldClcbiAgICBpZF9maWVsZF9nZW9tOiAnTlVUUzFfMjAxNicsXG4gICAgbnVtOiBbJ0NIT01fMTU3NF8yMDE2J10sXG4gICAgZGVudW06IFsnQUNUXzE1NzRfMjAxNiddLFxuICAgIHJhdGlvOiBbdmFyaWFibGVdLFxuICAgIHJhdGlvX3ByZXR0eV9uYW1lOiBbJ1RhdXggZGUgY2jDtG1hZ2UgKDE1LTc0IGFucykgKDIwMTYpJ10sXG4gICAgLy8gVGhlIGxldmVsIGN1cnJlbnRseSBpbiB1c2U6XG4gICAgY3VycmVudF9sZXZlbDogMSxcbiAgICAvLyBUaGUgSUQgb2YgdGhlIHJlZ2lvbiBjdXJyZW50bHkgaW4gdXNlOlxuICAgIG15X3JlZ2lvbjogY29kZSxcbiAgICAvLyBUaGUgbmFtZSBvZiB0aGUgcmVnaW9uIGN1cnJlbnRseSBpbiB1c2U6XG4gICAgbXlfcmVnaW9uX3ByZXR0eV9uYW1lOiBhcHAuZmVhdHVyZV9uYW1lc1tjb2RlXSxcbiAgICAvLyBIb3cgbWFueSByYXRpbyBvbiB0aGUgY3VycmVudCBjaGFydDpcbiAgICBuYl92YXI6IDEsXG4gIH07XG4gIGFwcC5jb2xvcnNbYXBwLmN1cnJlbnRfY29uZmlnLm15X3JlZ2lvbl0gPSBjb2xvcl9oaWdobGlnaHQ7XG59XG5cbmZ1bmN0aW9uIHNldERlZmF1bHRDb25maWdNZW51KGNvZGUgPSAnRlJFJywgdmFyaWFibGUgPSAnUlRfQ0hPTV8xNTc0JywgbGV2ZWwgPSAnTlVUUzEnKSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC50YXJnZXRfcmVnaW9uLnNxdWFyZVt2YWx1ZT1cIiR7Y29kZX1cIl1gKS5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYC50YXJnZXRfdmFyaWFibGUuc21hbGxfc3F1YXJlW3ZhbHVlPVwiJHt2YXJpYWJsZX1cIl1gKS5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5maWx0ZXJfdi5zcXVhcmVbZmlsdGVyLXZhbHVlPVwibm9fZmlsdGVyXCJdJykuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAudGVycml0X2xldmVsLnNxdWFyZVt2YWx1ZT1cIiR7bGV2ZWx9XCJdYCkuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiByZXNldENvbG9ycygpIHtcbiAgYXBwLmNvbG9ycyA9IHt9O1xuICAvLyBmb3IgKGxldCBpID0gMCwgbGVuX2kgPSBjdXJyZW50X2lkcy5sZW5ndGg7IGkgPCBsZW5faTsgaSsrKSB7XG4gIC8vICAgYXBwLmNvbG9yc1tjdXJyZW50X2lkc1tpXV0gPSBjb2xvcl9jb3VudHJpZXM7XG4gIC8vIH1cbiAgYXBwLmNvbG9yc1thcHAuY3VycmVudF9jb25maWcubXlfcmVnaW9uXSA9IGNvbG9yX2hpZ2hsaWdodDtcbn1cblxuLyoqXG4qIEZ1bmN0aW9uIHRvIHNlbGVjdCB0aGUgZmlyc3QgdmFyaWFibGUgb24gdGhlIGxlZnQgbWVudVxuKiAodHJpZ2dlcmVkIGFmdGVyIGNoYW5naW5nIHJlZ2lvbiwgaWYgbm8gbW9yZSB2YXJpYWJsZSB3YXMgc2VsZWN0ZWQpXG4qXG4qIEByZXR1cm4ge3ZvaWR9XG4qL1xuZnVuY3Rpb24gc2VsZWN0Rmlyc3RBdmFpbGFibGVWYXIoKSB7XG4gIGNvbnN0IG1lbnUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudScpO1xuICBjb25zdCB2ID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZ2V0X3ZhcmlhYmxlJyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdi5sZW5ndGg7IGkrKykge1xuICAgIGlmICghdltpXS5jbGFzc0xpc3QuY29udGFpbnMoJ2Rpc2FibGVkJykpIHtcbiAgICAgIHZbaV0uY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgICAgcmV0dXJuIHZbaV0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiogRnVuY3Rpb24gdG8gdXBkYXRlIHRoZSBhdmFpbGFibGVzIHJhdGlvcyBpbiB0aGUgbGVmdCBtZW51IChhZnRlciBjaGFuZ2luZyByZWdpb24pXG4qIElmIGEgc2VsZWN0ZWQgdmFyaWFibGUgaXMgbm90IGF2YWlsYWJsZSBhbnltb3JlIGl0IHdpbGwgYmUgZGVzZWxlY3RlZC5cbiogSWYgdGhlcmUgc2VsZWN0ZWQgdmFyaWFibGUgKGFsbCB0aGUgcHJldmlvdXNseSBzZWxlY3RlZCB2YXJpYWJsZXMgYXJlIHVuYXZhaWxhYmxlIGZvciB0aGlzIHJlZ2lvbilcbiogdGhlIGZpcnN0IHZhcmlhYmxlIG9uIHRoZSBtZW51IHdpbGwgYmUgc2VsZWN0ZWQuXG4qIElmIHRoZSBuZXcgbnVtYmVyIG9mIHNlbGVjdGVkIGZlYXR1cmUgaXMgaW5mZXJpb3IgdG8gdGhlIG51bWJlciBvZiB2YXJpYWJsZXMgb24gdGhlIGN1cnJlbnRcbiogY2hhcnQsIGEgbmV3IGNoYXJ0IChzdWl0YWJsZSBmb3Igb25seSAxIHZhcmlhYmxlKSB3aWxsIGJlIHNlbGVjdGVkLlxuKlxuKlxuKiBAcGFyYW0ge1N0cmluZ30gbXlfcmVnaW9uIC0gVGhlIElEIG9mIHRoZSBuZXdseSBzZWxlY3RlZCByZWdpb24uXG4qIEByZXR1cm4ge051bWJlcn0gLSBUaGUgbmV3IG51bWJlciBvZiBzZWxlY3RlZCByYXRpb3MuXG4qXG4qL1xuZnVuY3Rpb24gdXBkYXRlQXZhaWxhYmxlc1JhdGlvcyhteV9yZWdpb24pIHtcbiAgY29uc3QgZGF0YV9teV9mZWF0dXJlID0gYXBwLmZ1bGxfZGF0YXNldC5maWx0ZXIoXG4gICAgZnQgPT4gZnRbYXBwLmN1cnJlbnRfY29uZmlnLmlkX2ZpZWxkXSA9PT0gbXlfcmVnaW9uKVswXTtcbiAgY29uc3QgbWVudSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZW51Jyk7XG4gIGNvbnN0IGxpbmVzID0gbWVudS5xdWVyeVNlbGVjdG9yQWxsKCcudGFyZ2V0X3ZhcmlhYmxlJyk7XG4gIGZvciAobGV0IGkgPSAwLCBuYl9saW5lcyA9IGxpbmVzLmxlbmd0aDsgaSA8IG5iX2xpbmVzOyBpKyspIHtcbiAgICBjb25zdCBjb2RlX3ZhcmlhYmxlID0gbGluZXNbaV0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgIGlmIChkYXRhX215X2ZlYXR1cmVbY29kZV92YXJpYWJsZV0gIT09IHVuZGVmaW5lZFxuICAgICAgICAmJiBkYXRhX215X2ZlYXR1cmVbY29kZV92YXJpYWJsZV0gIT09ICdOQScpIHtcbiAgICAgIGxpbmVzW2ldLmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICBsaW5lc1tpXS5uZXh0U2libGluZy5jbGFzc0xpc3QucmVtb3ZlKCdkaXNhYmxlZCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsaW5lc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdjaGVja2VkJyk7XG4gICAgICBsaW5lc1tpXS5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xuICAgICAgbGluZXNbaV0ubmV4dFNpYmxpbmcuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICB9XG4gIH1cbiAgY29uc3QgbmV3X3ZhciA9IG1lbnUucXVlcnlTZWxlY3RvckFsbCgnLnRhcmdldF92YXJpYWJsZS5jaGVja2VkJyk7XG4gIGlmIChuZXdfdmFyLmxlbmd0aCAhPT0gYXBwLmN1cnJlbnRfY29uZmlnLnJhdGlvLmxlbmd0aCkge1xuICAgIGxldCBuZXdfdmFyX25hbWVzO1xuICAgIGlmIChuZXdfdmFyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgbmFtZSA9IHNlbGVjdEZpcnN0QXZhaWxhYmxlVmFyKCk7XG4gICAgICBuZXdfdmFyX25hbWVzID0gW25hbWVdO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdfdmFyX25hbWVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXG4gICAgICAgIG5ld192YXIpLm1hcChlbGVtID0+IGVsZW0uZ2V0QXR0cmlidXRlKCd2YWx1ZScpKTtcbiAgICB9XG4gICAgcmVzZXRWYXJpYWJsZXMoYXBwLCBuZXdfdmFyX25hbWVzKTtcbiAgfVxuICByZXR1cm4gbmV3X3Zhci5sZW5ndGg7XG59XG5cbi8qKlxuKiBDcmVhdGUgaGFuZGxlcnMgZm9yIHVzZXIgZXZlbnQgb24gdGhlIGxlZnQgbWVudSBhbmQgb24gdGhlIG1hcCBmb3IgY2hhcnRzIG9ubHlcbiogYWxsb3dpbmcgdG8gdXNlIDEgdmFyaWFibGUuXG4qXG4qIEBwYXJhbSB7T2JqZWN0fSBjaGFydCAtIFRoZSBjaGFydCBvYmplY3QuXG4qIEBwYXJhbSB7T2JqZWN0fSBtYXBfZWxlbSAtIFRoZSBtYXAgb2JqZWN0LlxuKiBAcmV0dXJuIHt2b2lkfVxuKlxuKi9cbmZ1bmN0aW9uIGJpbmRVSV9jaGFydChjaGFydCwgbWFwX2VsZW0pIHtcbiAgLy8gVXNlciBjaGFuZ2UgdGhlIHN0dWR5IHpvbmU6XG4gIGQzLnNlbGVjdEFsbCgnc3Bhbi5maWx0ZXJfdicpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAgICAgICBkMy5zZWxlY3RBbGwoJ3NwYW4uZmlsdGVyX3YnKS5hdHRyKCdjbGFzcycsICdmaWx0ZXJfdiBzcXVhcmUnKTtcbiAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdjaGVja2VkJyk7XG4gICAgICAgIGNvbnN0IGZpbHRlcl90eXBlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ2ZpbHRlci12YWx1ZScpO1xuICAgICAgICBhcHBseUZpbHRlcihhcHAsIGZpbHRlcl90eXBlKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0LmNoYW5nZVN0dWR5Wm9uZSgpO1xuICAgICAgICBjaGFydC51cGRhdGVDb21wbGV0dWRlKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgLy8gVXNlciBjaGFuZ2UgdGhlIHRhcmdldGVkIHJlZ2lvbjpcbiAgZDMuc2VsZWN0QWxsKCdzcGFuLnRhcmdldF9yZWdpb24nKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpIHtcbiAgICAgICAgZDMuc2VsZWN0QWxsKCdzcGFuLnRhcmdldF9yZWdpb24nKS5hdHRyKCdjbGFzcycsICd0YXJnZXRfcmVnaW9uIHNxdWFyZScpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2NoZWNrZWQnKTtcbiAgICAgICAgY29uc3QgaWRfcmVnaW9uID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIGNoYW5nZVJlZ2lvbihhcHAsIGlkX3JlZ2lvbik7XG4gICAgICAgIC8vIFVwZGF0ZSB0aGUgYXZhaWxhYmxlcyByYXRpbyBvbiB0aGUgbGVmdCBtZW51XG4gICAgICAgIC8vICh0aGlzIG1heSBjaGFuZ2UgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgcmF0aW8ocykgYXMgc29tZSB2YXJpYWJsZXMgYXJlXG4gICAgICAgIC8vIG5vdCBhdmFpbGFibGUgZm9yIHNvbWUgZmVhdHVyZXMpIGFuZCBmZXRjaCB0aGUgbnVtYmVyIG9mIHNlbGVjdGVkXG4gICAgICAgIC8vIHZhcmlhYmxlcyBhZnRlciB0aGF0OlxuICAgICAgICBjb25zdCBuZXdfbmJfdmFyID0gdXBkYXRlQXZhaWxhYmxlc1JhdGlvcyhpZF9yZWdpb24pO1xuICAgICAgICBpZiAobmV3X25iX3ZhciA+PSBhcHAuY3VycmVudF9jb25maWcubmJfdmFyKSB7XG4gICAgICAgICAgY2hhcnQudXBkYXRlQ2hhbmdlUmVnaW9uKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gSWYgdGhlcmUgZmV3ZXIgc2VsZWN0ZWQgdmFyaWFibGVzIHRoYW4gcmVxdWVzdGVkIGJ5IHRoZSBjdXJyZW50IGNoYXJ0LFxuICAgICAgICAgIC8vIHJlZHJhdyB0aGUgZmlyc3QgKGRlZmF1bHQpIGtpbmQgb2YgY2hhcnQ6XG4gICAgICAgICAgZDMuc2VsZWN0KCdzcGFuLmNoYXJ0X3QxW3ZhbHVlPVwiQmFyQ2hhcnQxXCJdJykuZGlzcGF0Y2goJ2NsaWNrJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAvLyBVc2VyIGNsaWNrIG9uIHRoZSBuYW1lIG9mIGEgZ3JvdXAgb2YgdmFyaWFibGVzXG4gIC8vIHRvIGV4cGFuZCBvciBjb2xsYXBzZSBpdHMgY29udGVudDpcbiAgZDMuc2VsZWN0QWxsKCcubmFtZV9ncm91cF92YXInKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBncm91cF92YXIgPSB0aGlzLm5leHRTaWJsaW5nO1xuICAgICAgaWYgKGdyb3VwX3Zhci5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScpIHtcbiAgICAgICAgZ3JvdXBfdmFyLnN0eWxlLmRpc3BsYXkgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZ3JvdXBfdmFyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgLy8gVXNlciBjbGljayB0byBhZGQvcmVtb3ZlIGEgdmFyaWFibGUgZnJvbSB0aGUgY29tcGFyaXNvbjpcbiAgZDMuc2VsZWN0QWxsKCdzcGFuLnRhcmdldF92YXJpYWJsZScpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkgcmV0dXJuO1xuICAgICAgbGV0IG5iX3ZhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLnRhcmdldF92YXJpYWJsZScpKS5maWx0ZXIoXG4gICAgICAgICAgZWxlbSA9PiAhIWVsZW0uY2xhc3NMaXN0LmNvbnRhaW5zKCdjaGVja2VkJykpLmxlbmd0aDtcbiAgICAgIC8vIFNlbGVjdCBhIG5ldyB2YXJpYWJsZSBhbmQgdHJpZ2dlciB0aGUgYXBwcm9wcmlhdGUgY2hhbmdlcyBvbiB0aGUgY3VycmVudCBjaGFydDpcbiAgICAgIGlmICghdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2NoZWNrZWQnKSkge1xuICAgICAgICAvLyBXZSBkb24ndCB3YW50IHRoZSB1c2VyIHRvIGJlIGFibGUgdG8gc2VsZWN0IG1vcmUgdGhhbiA4IHZhcmlhYmxlcyBzaW11bHRhbmVvdXNseTpcbiAgICAgICAgaWYgKG5iX3ZhciA+PSA4KSByZXR1cm47XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnY2hlY2tlZCcpO1xuICAgICAgICBjb25zdCBjb2RlX3ZhcmlhYmxlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAgIGNvbnN0IG5hbWVfdmFyaWFibGUgPSB2YXJpYWJsZXNfaW5mby5maW5kKGQgPT4gZC5yYXRpbyA9PT0gY29kZV92YXJpYWJsZSkubmFtZTtcbiAgICAgICAgYWRkVmFyaWFibGUoYXBwLCBjb2RlX3ZhcmlhYmxlKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0LmFkZFZhcmlhYmxlKGNvZGVfdmFyaWFibGUsIG5hbWVfdmFyaWFibGUpO1xuICAgICAgICBuYl92YXIgKz0gMTtcbiAgICAgIH0gZWxzZSB7IC8vIFJlbW92ZSBhIHZhcmlhYmxlIGZyb20gdGhlIHNlbGVjdGlvbjpcbiAgICAgICAgbmJfdmFyIC09IDE7XG4gICAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gbGV0IHRoZSB1c2VyIHJlbW92ZSB0aGUgdmFyaWFibGUgaWZcbiAgICAgICAgLy8gaXQncyB0aGUgb25seSBvbmUgc2VsZWN0ZWQgb3IgaWYgdGhlIGN1cnJlbnRseSBkaXNwbGF5ZWRcbiAgICAgICAgLy8gY2hhcnQgbmVlZCBhIG1pbmltdW0gbnVtYmVyIG9mIHZhcmlhYmxlczpcbiAgICAgICAgaWYgKG5iX3ZhciA8IGFwcC5jdXJyZW50X2NvbmZpZy5uYl92YXIpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29kZV92YXJpYWJsZSA9IHRoaXMuZ2V0QXR0cmlidXRlKCd2YWx1ZScpO1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2NoZWNrZWQnKTtcbiAgICAgICAgcmVtb3ZlVmFyaWFibGUoYXBwLCBjb2RlX3ZhcmlhYmxlKTtcbiAgICAgICAgY2hhcnQucmVtb3ZlVmFyaWFibGUoY29kZV92YXJpYWJsZSk7XG4gICAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgfVxuICAgICAgLy8gVXBkYXRlIHRoZSB0b3AgbWVudSB0byBkaXNwbGF5IGF2YWlsYWJsZSBjaGFydHMgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50XG4gICAgICAvLyBudW1iZXIgb2YgYXZhaWxhYmxlIHZhcmlhYmxlczpcbiAgICAgIGlmIChuYl92YXIgPT09IDEpIHsgLy8gQWxsb3cgYWxsIGtpbmQgb2Ygdml6dSB3aXRoIDEgdmFyaWFibGU6XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNoYXJ0X3QxJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MScpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jaGFydF90MicpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDIgZGlzYWJsZWQnKTtcbiAgICAgICAgZDMuc2VsZWN0QWxsKCcuY2hhcnRfdDMnKVxuICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd0eXBlX2NoYXJ0IGNoYXJ0X3QzIGRpc2FibGVkJyk7XG4gICAgICB9IGVsc2UgaWYgKG5iX3ZhciA9PT0gMikgeyAvLyBBbGxvdyBhbGwga2luZCBvZiB2aXp1IHdpdGggMiB2YXJpYWJsZXM6XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNoYXJ0X3QyJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MicpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jaGFydF90MycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDMgZGlzYWJsZWQnKTtcbiAgICAgIH0gZWxzZSBpZiAobmJfdmFyID4gMikgeyAvLyBBbGxvdyBhbGwga2luZCBvZiB2aXp1IHdpdGggMyB2YXJpYWJsZXM6XG4gICAgICAgIGQzLnNlbGVjdEFsbCgnLmNoYXJ0X3QyJylcbiAgICAgICAgICAuYXR0cignY2xhc3MnLCAndHlwZV9jaGFydCBjaGFydF90MicpO1xuICAgICAgICBkMy5zZWxlY3RBbGwoJy5jaGFydF90MycpXG4gICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3R5cGVfY2hhcnQgY2hhcnRfdDMnKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAvLyBEaXNwYXRjaCBhIGNsaWNrIGV2ZW50IG9uIHRoZSBhc3NvY2lhdGVkIGNoZWNrYm94IHdoZW4gdGhlIHRleHQgaXMgY2xpY2tlZDpcbiAgZDMuc2VsZWN0QWxsKCdzcGFuLmxhYmVsX2NoaycpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucHJldmlvdXNTaWJsaW5nLmNsaWNrKCk7XG4gICAgfSk7XG5cbiAgY29uc3QgaGVhZGVyX21hcF9zZWN0aW9uID0gZDMuc2VsZWN0KCcjbWFwX3NlY3Rpb24gPiAjaGVhZGVyX21hcCcpO1xuXG4gIGhlYWRlcl9tYXBfc2VjdGlvbi5zZWxlY3QoJyNpbWdfcmVjdF9zZWxlYycpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghdGhpcy5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKSB7XG4gICAgICAgIHRoaXMuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbWdfbWFwX3pvb20nKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfc2VsZWN0JykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHN2Z19tYXAub24oJy56b29tJywgbnVsbCk7XG4gICAgICAgIGlmIChtYXBfZWxlbS5icnVzaF9tYXApIHtcbiAgICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XG4gICAgICAgIH1cbiAgICAgICAgbWFwX2VsZW0udGFyZ2V0X2xheWVyLnNlbGVjdEFsbCgncGF0aCcpLm9uKCdjbGljaycsIG51bGwpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIGhlYWRlcl9tYXBfc2VjdGlvbi5zZWxlY3QoJyNpbWdfbWFwX3pvb20nKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX3JlY3Rfc2VsZWMnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfc2VsZWN0JykuY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG4gICAgICAgIHN2Z19tYXAuY2FsbChtYXBfZWxlbS56b29tX21hcCk7XG4gICAgICAgIGlmIChtYXBfZWxlbS5icnVzaF9tYXApIHtcbiAgICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpLmNhbGwobWFwX2VsZW0uYnJ1c2hfbWFwLm1vdmUsIG51bGwpO1xuICAgICAgICAgIHN2Z19tYXAuc2VsZWN0KCcuYnJ1c2hfbWFwJykuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgICAgICB9XG4gICAgICAgIG1hcF9lbGVtLnRhcmdldF9sYXllci5zZWxlY3RBbGwoJ3BhdGgnKS5vbignY2xpY2snLCBudWxsKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICBoZWFkZXJfbWFwX3NlY3Rpb24uc2VsZWN0KCcjaW1nX21hcF9zZWxlY3QnKVxuICAgIC5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMuY2xhc3NMaXN0LmNvbnRhaW5zKCdhY3RpdmUnKSkge1xuICAgICAgICB0aGlzLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW1nX3JlY3Rfc2VsZWMnKS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2ltZ19tYXBfem9vbScpLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICBzdmdfbWFwLm9uKCcuem9vbScsIG51bGwpO1xuICAgICAgICBpZiAobWFwX2VsZW0uYnJ1c2hfbWFwKSB7XG4gICAgICAgICAgc3ZnX21hcC5zZWxlY3QoJy5icnVzaF9tYXAnKS5jYWxsKG1hcF9lbGVtLmJydXNoX21hcC5tb3ZlLCBudWxsKTtcbiAgICAgICAgICBzdmdfbWFwLnNlbGVjdCgnLmJydXNoX21hcCcpLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBtYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgIGNoYXJ0LmhhbmRsZUNsaWNrTWFwKGQsIHRoaXMpO1xuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gIGlmICghbWFwX2VsZW0uYnJ1c2hfbWFwKSB7XG4gICAgaWYgKGNoYXJ0LmhhbmRsZUNsaWNrTWFwKSB7XG4gICAgICBtYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uIChkKSB7XG4gICAgICAgICAgY2hhcnQuaGFuZGxlQ2xpY2tNYXAoZCwgdGhpcyk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXBfZWxlbS50YXJnZXRfbGF5ZXIuc2VsZWN0QWxsKCdwYXRoJylcbiAgICAgICAgLm9uKCdjbGljaycsIG51bGwpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGhlYWRlcl90YWJsZV9zZWN0aW9uID0gZDMuc2VsZWN0KCcjbWFwX3NlY3Rpb24nKVxuICAgICAgLmluc2VydCgncCcsICdzdmcnKVxuICAgICAgLmF0dHIoJ2lkJywgJ2hlYWRlcl90YWJsZScpXG4gICAgICAuc3R5bGVzKHsgZGlzcGxheTogJ25vbmUnLCBtYXJnaW46ICdhdXRvJywgJ3RleHQtYWxpZ24nOiAncmlnaHQnIH0pO1xuXG4gIGhlYWRlcl90YWJsZV9zZWN0aW9uLmFwcGVuZCgnc3BhbicpXG4gICAgLmF0dHIoJ2NsYXNzJywgJ2J1dHRvbl9ibHVlJylcbiAgICAuaHRtbCgnQ1NWJylcbiAgICAub24oJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgY29uc3QgY29udGVudCA9IFtcbiAgICAgICAgJ2lkLE51bcOpcmF0ZXVyLETDqW5vbWluYXRldXIsUmF0aW8sUmFuZ1xcclxcbicsXG4gICAgICAgIGFwcC5jdXJyZW50X2RhdGEubWFwKGQgPT4gW2QuaWQsIGQubnVtLCBkLmRlbnVtLCBkLnJhdGlvLCBkLnJhbmddLmpvaW4oJywnKSkuam9pbignXFxyXFxuJyksXG4gICAgICBdLmpvaW4oJycpO1xuICAgICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICAgIGVsZW0uc2V0QXR0cmlidXRlKCdocmVmJywgYGRhdGE6dGV4dC9wbGFpbjtjaGFyc2V0PXV0Zi04LCR7ZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpfWApO1xuICAgICAgZWxlbS5zZXRBdHRyaWJ1dGUoJ2Rvd25sb2FkJywgJ3RhYmxlLmNzdicpO1xuICAgICAgZWxlbS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChlbGVtKTtcbiAgICAgIGVsZW0uY2xpY2soKTtcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZWxlbSk7XG4gICAgfSk7XG4gIGJpbmRUb3BCdXR0b25zKGNoYXJ0LCBtYXBfZWxlbSk7XG59XG5cbi8qKlxuKiBGdW5jdGlvbiB0byBoYW5kbGUgY2xpY2sgb24gdGhlIHRvcCBtZW51LCBpbiBvcmRlciB0byBjaG9vc2VcbiogdGhlIGtpbmQgb2YgYXZhaWxhYmxlcyByZXByZXNlbnRhdGlvblxuKlxuKiBAcGFyYW0ge09iamVjdH0gY2hhcnQgLVxuKiBAcGFyYW0ge09iamVjdH0gbWFwX2VsZW0gLVxuKiBAcmV0dXJuIHt2b2lkfVxuKi9cbmV4cG9ydCBmdW5jdGlvbiBiaW5kVG9wQnV0dG9ucyhjaGFydCwgbWFwX2VsZW0pIHtcbiAgZDMuc2VsZWN0QWxsKCcudHlwZV9jaGFydCcpXG4gICAgLm9uKCdjbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLmNsYXNzTGlzdC5jb250YWlucygnZGlzYWJsZWQnKSkgcmV0dXJuO1xuICAgICAgY2hhcnQucmVtb3ZlKCk7XG4gICAgICBjaGFydCA9IG51bGw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIHVuYmluZFVJKCk7XG4gICAgICBtYXBfZWxlbS5yZXNldFpvb20oKTtcbiAgICAgIGFwcC5jb2xvcnMgPSB7fTtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICBpZiAodmFsdWUgPT09ICdCYXJDaGFydDEnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdCYXJDaGFydDEnKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0ID0gbmV3IEJhckNoYXJ0MShhcHAuY3VycmVudF9kYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBiaW5kVUlfY2hhcnQoY2hhcnQsIG1hcF9lbGVtKTtcbiAgICAgICAgbWFwX2VsZW0uYmluZEJydXNoQ2xpY2soY2hhcnQpO1xuICAgICAgICBjaGFydC5iaW5kTWFwKG1hcF9lbGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdCdWJibGVDaGFydDEnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdCdWJibGVDaGFydDEnKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0ID0gbmV3IEJ1YmJsZUNoYXJ0MShhcHAuY3VycmVudF9kYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBiaW5kVUlfY2hhcnQoY2hhcnQsIG1hcF9lbGVtKTtcbiAgICAgICAgbWFwX2VsZW0uYmluZEJydXNoQ2xpY2soY2hhcnQpO1xuICAgICAgICBjaGFydC5iaW5kTWFwKG1hcF9lbGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdTY2F0dGVyUGxvdDInKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdTY2F0dGVyUGxvdDInKTtcbiAgICAgICAgbWFrZVRhYmxlKGFwcC5jdXJyZW50X2RhdGEsIGFwcC5jdXJyZW50X2NvbmZpZyk7XG4gICAgICAgIGNoYXJ0ID0gbmV3IFNjYXR0ZXJQbG90MihhcHAuY3VycmVudF9kYXRhKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBiaW5kVUlfY2hhcnQoY2hhcnQsIG1hcF9lbGVtKTtcbiAgICAgICAgbWFwX2VsZW0uYmluZEJydXNoQ2xpY2soY2hhcnQpO1xuICAgICAgICBjaGFydC5iaW5kTWFwKG1hcF9lbGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdSYWRhckNoYXJ0MycpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1JhZGFyQ2hhcnQzJyk7XG4gICAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgICBjaGFydCA9IG5ldyBSYWRhckNoYXJ0MyhhcHAuY3VycmVudF9kYXRhKTtcbiAgICAgICAgYmluZFVJX2NoYXJ0KGNoYXJ0LCBtYXBfZWxlbSk7XG4gICAgICAgIG1hcF9lbGVtLmJpbmRCcnVzaENsaWNrKGNoYXJ0KTtcbiAgICAgICAgY2hhcnQuYmluZE1hcChtYXBfZWxlbSk7XG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnU2ltaWxhcml0eUNoYXJ0Jykge1xuICAgICAgICBjb25zb2xlLmxvZygnU2ltaWxhcml0eUNoYXJ0Jyk7XG4gICAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgICBjaGFydCA9IG5ldyBTaW1pbGFyaXR5Q2hhcnQoYXBwLmN1cnJlbnRfZGF0YSk7XG4gICAgICAgIGJpbmRVSV9jaGFydChjaGFydCwgbWFwX2VsZW0pO1xuICAgICAgICBtYXBfZWxlbS5iaW5kQnJ1c2hDbGljayhjaGFydCk7XG4gICAgICAgIGNoYXJ0LmJpbmRNYXAobWFwX2VsZW0pO1xuICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gJ1BhcmFsbGVsQ29vcmRzMicpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1BhcmFsbGVsQ29vcmRzMicpO1xuICAgICAgICAvLyBtYWtlVGFibGUoYXBwLmN1cnJlbnRfZGF0YSwgYXBwLmN1cnJlbnRfY29uZmlnKTtcbiAgICAgICAgY2hhcnQgPSBuZXcgUGFyYWxsZWxDb29yZHMyKGFwcC5jdXJyZW50X2RhdGEpO1xuICAgICAgICBiaW5kVUlfY2hhcnQoY2hhcnQsIG1hcF9lbGVtKTtcbiAgICAgICAgbWFwX2VsZW0uYmluZEJydXNoQ2xpY2soY2hhcnQpO1xuICAgICAgICBjaGFydC5iaW5kTWFwKG1hcF9lbGVtKTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdCb3hQbG90MScpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0JveFBsb3QxJyk7XG4gICAgICAgIC8vIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgICBjaGFydCA9IG5ldyBCb3hQbG90MShhcHAuY3VycmVudF9kYXRhKTtcbiAgICAgICAgYmluZFVJX2NoYXJ0KGNoYXJ0LCBtYXBfZWxlbSk7XG4gICAgICAgIG1hcF9lbGVtLmJpbmRCcnVzaENsaWNrKGNoYXJ0KTtcbiAgICAgICAgY2hhcnQuYmluZE1hcChtYXBfZWxlbSk7XG4gICAgICB9XG4gICAgfSk7XG59XG5cblxuZnVuY3Rpb24gbG9hZERhdGEoKSB7XG4gIGQzLnF1ZXVlKDQpXG4gICAgLmRlZmVyKGQzLmNzdiwgJ2RhdGEvUkVHSU9WSVpfREFUQS5jc3YnKVxuICAgIC5kZWZlcihkMy5qc29uLCAnZGF0YS9jZ2V0LW51dHMxLTMwMzUuZ2VvanNvbicpXG4gICAgLmRlZmVyKGQzLmpzb24sICdkYXRhL2NvdW50cmllczMwMzUuZ2VvanNvbicpXG4gICAgLmRlZmVyKGQzLmpzb24sICdkYXRhL3JlbW90ZTMwMzUuZ2VvanNvbicpXG4gICAgLmRlZmVyKGQzLmpzb24sICdkYXRhL3RlbXBsYXRlMzAzNS5nZW9qc29uJylcbiAgICAuZGVmZXIoZDMuanNvbiwgJ2RhdGEvc2VhX2JveGVzLmdlb2pzb24nKVxuICAgIC5kZWZlcihkMy5jc3YsICdkYXRhL2luZGljYXRldXJzX21ldGEuY3N2JylcbiAgICAuZGVmZXIoZDMuY3N2LCAnZGF0YS9udXRzMl9hZ2dyZWcuY3N2JylcbiAgICAuYXdhaXRBbGwoKGVycm9yLCByZXN1bHRzKSA9PiB7XG4gICAgICBpZiAoZXJyb3IpIHRocm93IGVycm9yO1xuICAgICAgY29uc3QgW1xuICAgICAgICBmdWxsX2RhdGFzZXQsIG51dHMxLCBjb3VudHJpZXMsIHJlbW90ZSwgdGVtcGxhdGUsIHNlYWJveGVzLCBtZXRhZGF0YV9pbmRpY2F0ZXVycywgYWdnX24yLFxuICAgICAgXSA9IHJlc3VsdHM7XG4gICAgICBjb25zb2xlLmxvZyhhZ2dfbjIpO1xuICAgICAgdmFyaWFibGVzX2luZm8gPSBwcmVwYXJlVmFyaWFibGVzSW5mbyhtZXRhZGF0YV9pbmRpY2F0ZXVycyk7XG4gICAgICBwcmVwYXJlX2RhdGFzZXQoZnVsbF9kYXRhc2V0LCBhcHApO1xuICAgICAgc2V0RGVmYXVsdENvbmZpZygnRlJCJywgJ1JUX0NIT01fMTU3NCcsICdOVVRTMScpO1xuICAgICAgY29uc3QgZmVhdHVyZXNfbWVudSA9IGZ1bGxfZGF0YXNldC5maWx0ZXIoZnQgPT4gZnQuZ2VvLmluZGV4T2YoJ0ZSJykgPiAtMVxuICAgICAgICAmJiArZnQubGV2ZWwgPT09IGFwcC5jdXJyZW50X2NvbmZpZy5jdXJyZW50X2xldmVsKTtcbiAgICAgIGNyZWF0ZU1lbnUoZmVhdHVyZXNfbWVudSwgdmFyaWFibGVzX2luZm8sIHN0dWR5X3pvbmVzLCB0ZXJyaXRvcmlhbF9tZXNoKTtcbiAgICAgIGJpbmRIZWxwTWVudSgpO1xuICAgICAgbWFrZVRvcE1lbnUoKTtcbiAgICAgIG1ha2VIZWFkZXJDaGFydCgpO1xuICAgICAgc2V0RGVmYXVsdENvbmZpZ01lbnUoJ0ZSQicsICdSVF9DSE9NXzE1NzQnLCAnTlVUUzEnKTtcbiAgICAgIGZpbHRlckxldmVsVmFyKGFwcCk7XG4gICAgICBjb25zb2xlLmxvZyhhcHApO1xuICAgICAgY29uc3QgbWFwX2VsZW0gPSBuZXcgTWFwU2VsZWN0KG51dHMxLCBjb3VudHJpZXMsIHJlbW90ZSwgdGVtcGxhdGUsIHNlYWJveGVzKTtcbiAgICAgIGNvbnN0IGNoYXJ0ID0gbmV3IEJhckNoYXJ0MShhcHAuY3VycmVudF9kYXRhKTtcbiAgICAgIG1ha2VUYWJsZShhcHAuY3VycmVudF9kYXRhLCBhcHAuY3VycmVudF9jb25maWcpO1xuICAgICAgbWFrZUhlYWRlck1hcFNlY3Rpb24oKTtcbiAgICAgIG1ha2VTb3VyY2VTZWN0aW9uKCk7XG4gICAgICBtYWtlTWFwTGVnZW5kKCk7XG4gICAgICBiaW5kVUlfY2hhcnQoY2hhcnQsIG1hcF9lbGVtKTtcbiAgICAgIG1hcF9lbGVtLmJpbmRCcnVzaENsaWNrKGNoYXJ0KTtcbiAgICAgIGNoYXJ0LmJpbmRNYXAobWFwX2VsZW0pO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBiaW5kSGVscE1lbnUoKSB7XG4gIGNvbnN0IGhlbHBfYnV0dG9uc192YXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudV92YXJpYWJsZXMnKS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLmlfaW5mbycpO1xuICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChoZWxwX2J1dHRvbnNfdmFyKS5mb3JFYWNoKChidG5faSkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGJ0bl9pLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBjb2RlX3ZhcmlhYmxlID0gdGhpcy5wcmV2aW91c1NpYmxpbmcucHJldmlvdXNTaWJsaW5nLmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgIGNvbnN0IG8gPSB2YXJpYWJsZXNfaW5mby5maW5kKGQgPT4gZC5yYXRpbyA9PT0gY29kZV92YXJpYWJsZSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgY29uc3QgbW9kYWwgPSBuZXcgdGluZ2xlLm1vZGFsKHtcbiAgICAgICAgc3RpY2t5Rm9vdGVyOiBmYWxzZSxcbiAgICAgICAgY2xvc2VNZXRob2RzOiBbJ292ZXJsYXknLCAnYnV0dG9uJywgJ2VzY2FwZSddLFxuICAgICAgICBjbG9zZUxhYmVsOiAnQ2xvc2UnLFxuICAgICAgICBvbk9wZW4oKSB7XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnRpbmdsZS1tb2RhbC50aW5nbGUtbW9kYWwtLXZpc2libGUnKS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEoMCwwLDAsMC40KSc7XG4gICAgICAgIH0sXG4gICAgICAgIG9uQ2xvc2UoKSB7XG4gICAgICAgICAgbW9kYWwuZGVzdHJveSgpO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBtb2RhbC5zZXRDb250ZW50KFxuICAgICAgICBgPHAgc3R5bGU9XCJmb250LWZhbWlseTogJ1NpZ25pa2EnLHNhbnMtc2VyaWY7Y29sb3I6ICM0ZjgxYmQ7Zm9udC1zaXplOiAxLjNyZW07XCI+RGVzY3JpcHRpb24gZGUgbCdpbmRpY2F0ZXVyPC9wPlxuICAgICAgICA8cCBzdHlsZT1cImZvbnQtZmFtaWx5OiAnU2lnbmlrYScsc2Fucy1zZXJpZjt0ZXh0LWFsaWduOiBqdXN0aWZ5O1wiPiR7by5tZXRob2RvLnNwbGl0KCdcXG4nKS5qb2luKCc8YnI+Jyl9PC9wPlxuICAgICAgICA8cCBzdHlsZT1cImZvbnQtZmFtaWx5OiAnU2lnbmlrYScsc2Fucy1zZXJpZjtmb250LXNpemU6IDAuOGVtXCI+JHtvLnNvdXJjZX08L3A+XG4gICAgICAgIDxwIHN0eWxlPVwiZm9udC1mYW1pbHk6ICdTaWduaWthJyxzYW5zLXNlcmlmO2ZvbnQtc2l6ZTogMC44ZW1cIj5EYXRlIGRlIHTDqWzDqWNoYXJnZW1lbnQgZGUgbGEgZG9ubsOpZXMgOiAke28ubGFzdF91cGRhdGV9PC9wPmApO1xuICAgICAgbW9kYWwub3BlbigpO1xuICAgIH07XG4gIH0pO1xuXG4gIGNvbnN0IGhlbHBzX2J1dHRvbnNfc3R1ZHlfem9uZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNtZW51X3N0dWR5em9uZScpLnF1ZXJ5U2VsZWN0b3JBbGwoJ3NwYW4uaV9pbmZvJyk7XG4gIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGhlbHBzX2J1dHRvbnNfc3R1ZHlfem9uZSkuZm9yRWFjaCgoYnRuX2kpID0+IHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICBidG5faS5vbmNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZmlsdGVyX25hbWUgPSB0aGlzLnByZXZpb3VzU2libGluZy5wcmV2aW91c1NpYmxpbmcuZ2V0QXR0cmlidXRlKCdmaWx0ZXItdmFsdWUnKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuZXctY2FwXG4gICAgICBjb25zdCBtb2RhbCA9IG5ldyB0aW5nbGUubW9kYWwoe1xuICAgICAgICBzdGlja3lGb290ZXI6IGZhbHNlLFxuICAgICAgICBjbG9zZU1ldGhvZHM6IFsnb3ZlcmxheScsICdidXR0b24nLCAnZXNjYXBlJ10sXG4gICAgICAgIGNsb3NlTGFiZWw6ICdDbG9zZScsXG4gICAgICAgIG9uT3BlbigpIHtcbiAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdkaXYudGluZ2xlLW1vZGFsLnRpbmdsZS1tb2RhbC0tdmlzaWJsZScpLnN0eWxlLmJhY2tncm91bmQgPSAncmdiYSgwLDAsMCwwLjQpJztcbiAgICAgICAgfSxcbiAgICAgICAgb25DbG9zZSgpIHtcbiAgICAgICAgICBtb2RhbC5kZXN0cm95KCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vZGFsLnNldENvbnRlbnQoXG4gICAgICAgIGA8cCBzdHlsZT1cImZvbnQtZmFtaWx5OiAnU2lnbmlrYScsc2Fucy1zZXJpZjtjb2xvcjogIzRmODFiZDtmb250LXNpemU6IDEuM3JlbTtcIj5Nw6l0aG9kb2xvZ2llPC9wPlxuICAgICAgICA8cCBzdHlsZT1cImZvbnQtZmFtaWx5OiAnU2lnbmlrYScsc2Fucy1zZXJpZjt0ZXh0LWFsaWduOiBqdXN0aWZ5O1wiPiR7ZmlsdGVyX25hbWV9PC9wPmApO1xuICAgICAgbW9kYWwub3BlbigpO1xuICAgIH07XG4gIH0pO1xuXG4gIGNvbnN0IGhlbHBzX2J1dHRvbnNfdGVycml0X3VuaXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudV90ZXJyaXRfbGV2ZWwnKS5xdWVyeVNlbGVjdG9yQWxsKCdzcGFuLmlfaW5mbycpO1xuICBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChoZWxwc19idXR0b25zX3RlcnJpdF91bml0KS5mb3JFYWNoKChidG5faSkgPT4ge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgIGJ0bl9pLm9uY2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCB0ZXJyaXRfbGV2ZWxfbmFtZSA9IHRoaXMucHJldmlvdXNTaWJsaW5nLnByZXZpb3VzU2libGluZy5nZXRBdHRyaWJ1dGUoJ3ZhbHVlJyk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbmV3LWNhcFxuICAgICAgY29uc3QgbW9kYWwgPSBuZXcgdGluZ2xlLm1vZGFsKHtcbiAgICAgICAgc3RpY2t5Rm9vdGVyOiBmYWxzZSxcbiAgICAgICAgY2xvc2VNZXRob2RzOiBbJ292ZXJsYXknLCAnYnV0dG9uJywgJ2VzY2FwZSddLFxuICAgICAgICBjbG9zZUxhYmVsOiAnQ2xvc2UnLFxuICAgICAgICBvbk9wZW4oKSB7XG4gICAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignZGl2LnRpbmdsZS1tb2RhbC50aW5nbGUtbW9kYWwtLXZpc2libGUnKS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEoMCwwLDAsMCwwLjQpJztcbiAgICAgICAgfSxcbiAgICAgICAgb25DbG9zZSgpIHtcbiAgICAgICAgICBtb2RhbC5kZXN0cm95KCk7XG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIG1vZGFsLnNldENvbnRlbnQoYFxuICAgICAgICA8cCBzdHlsZT1cImZvbnQtZmFtaWx5OiAnU2lnbmlrYScsc2Fucy1zZXJpZjsgY29sb3I6ICM0ZjgxYmQ7Zm9udC1zaXplOiAxLjNyZW07XCI+VGl0cmU8L3A+XG4gICAgICAgIDxwIHN0eWxlPVwiZm9udC1mYW1pbHk6ICdTaWduaWthJyxzYW5zLXNlcmlmO3RleHQtYWxpZ246IGp1c3RpZnk7XCI+JHt0ZXJyaXRfbGV2ZWxfbmFtZX08L3A+YCk7XG4gICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfTtcbiAgfSk7XG59XG5cbmxvYWREYXRhKCk7XG4iXSwibmFtZXMiOlsiZGVmaW5lIiwidGhpcyIsImNvbG9yX2NvdW50cmllcyIsImNvbG9yX2Rpc2FibGVkIiwiY29sb3Jfc3VwIiwiY29sb3JfaW5mIiwiY29sb3JfaGlnaGxpZ2h0IiwiY29sb3JfZGVmYXVsdF9kaXNzaW0iLCJtYXRoX3BvdyIsIk1hdGgiLCJwb3ciLCJtYXRoX2FicyIsImFicyIsIm1hdGhfcm91bmQiLCJyb3VuZCIsIm1hdGhfbWF4IiwibWF4IiwibWF0aF9zaW4iLCJzaW4iLCJtYXRoX2NvcyIsImNvcyIsIm1hdGhfc3FydCIsInNxcnQiLCJIQUxGX1BJIiwiUEkiLCJwcmVwYXJlVG9vbHRpcCIsInBhcmVudF9zdmdfZWxlbSIsInRvb2x0aXAiLCJhcHBlbmQiLCJhdHRyIiwic3R5bGUiLCJhdHRycyIsIngiLCJ3aWR0aCIsImhlaWdodCIsImZpbGwiLCJjbGFzcyIsImR5IiwidW5iaW5kVUkiLCJzZWxlY3RBbGwiLCJvbiIsInNlbGVjdCIsInJlbW92ZSIsIm9ua2V5dXAiLCJvbmtleWRvd24iLCJjb21wIiwidGVzdF92YWx1ZSIsInJlZl92YWx1ZSIsInNlcmllX2ludmVyc2VkIiwiY29tcDIiLCJ2YWwxIiwidmFsMiIsInJlZl92YWwxIiwicmVmX3ZhbDIiLCJ4SW52ZXJzZWQiLCJ5SW52ZXJzZWQiLCJSZWN0IiwidG9wbGVmdCIsImJvdHRvbXJpZ2h0IiwieG1pbiIsInhtYXgiLCJ5bWluIiwieW1heCIsInB0IiwiUHJvcFNpemVyIiwiZml4ZWRfdmFsdWUiLCJmaXhlZF9zaXplIiwic21heCIsInNjYWxlIiwidmFsIiwiZ2V0X3ZhbHVlIiwic2l6ZSIsInJlbW92ZUR1cGxpY2F0ZXMiLCJhcnIiLCJ0bXAiLCJpIiwibGVuX2FyciIsImxlbmd0aCIsImluZGV4T2YiLCJwdXNoIiwiZ2V0U3ZnUGF0aFR5cGUiLCJwYXRoIiwic3ZnUGF0aFRvQ29vcmRzIiwidHlwZV9wYXRoIiwic2xpY2UiLCJzcGxpdCIsIm1hcCIsImEiLCJjb21wdXRlUGVyY2VudGlsZVJhbmsiLCJvYmoiLCJmaWVsZF9uYW1lIiwicmVzdWx0X2ZpZWxkX25hbWUiLCJ2YWx1ZXMiLCJkIiwibGVuX3ZhbHVlcyIsImdldFBSIiwidiIsImNvdW50IiwiaXgiLCJfZ2V0UFIiLCJzZXJpZSIsImdldE1lYW4iLCJuYl92YWx1ZXMiLCJzdW0iLCJnZXRTdGREZXYiLCJtZWFuX3ZhbHVlIiwiZ2V0U3RhbmRhcmRpemVkTWVhblN0ZERldiIsIm1lYW4iLCJzdGRkZXYiLCJzaHVmZmxlIiwiYXJyYXkiLCJqIiwiZmxvb3IiLCJyYW5kb20iLCJjcmVhdGVNZW51IiwibmFtZXMiLCJ2YXJpYWJsZXMiLCJzdHVkeV96b25lcyIsInRlcnJpdG9yaWFsX21lc2giLCJ0aXRsZV9zZWN0aW9uMSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTmFtZSIsImlubmVySFRNTCIsInNlY3Rpb24xIiwib3ZlcmZsb3ciLCJsZW5faSIsImlkIiwiZ2VvIiwibmFtZSIsIk5vbSIsImVudHJ5IiwiYXBwZW5kQ2hpbGQiLCJ0aXRsZV9zZWN0aW9uMiIsInNlY3Rpb24yIiwiZ3JvdXBzX3ZhciIsImdyb3VwIiwiZ3BfbmFtZSIsImRpdl9ncnAiLCJkaXNwbGF5IiwidmFyX25hbWVzIiwiZmlsdGVyIiwibGVuX2oiLCJuYW1lX3ZhciIsImNvZGVfdmFyIiwicmF0aW8iLCJzdWJfZW50cnkiLCJ0aXRsZV9zZWN0aW9uMyIsInNlY3Rpb24zIiwiem9uZSIsInRpdGxlX3NlY3Rpb240Iiwic2VjdGlvbjQiLCJ0ZXJyaXRfbGV2ZWwiLCJtZW51IiwiZ2V0RWxlbWVudEJ5SWQiLCJmbG9hdCIsIm1ha2VUb3BNZW51IiwidG9wX21lbnUiLCJkMyIsInN0eWxlcyIsInBhZGRpbmciLCJ3aWR0aF9sZWZ0IiwicXVlcnlTZWxlY3RvciIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInQiLCJ3aWR0aF9jZW50cmFsX2NoYXJ0Iiwid2lkdGhfbWFwIiwid2lkdGhfdHlwZV9jb21wIiwibWFyZ2luIiwiaHRtbCIsInR5cGVfY2hhcnQiLCJwb3NpdGlvbiIsInZhbHVlIiwicmVzc2VtYmxhbmNlIiwiaW5lZ2FsaXRlIiwibWFrZUhlYWRlck1hcFNlY3Rpb24iLCJoZWFkZXJfbWFwX3NlY3Rpb24iLCJpbnNlcnQiLCJtYWtlSGVhZGVyQ2hhcnQiLCJoZWFkZXJfYmFyX3NlY3Rpb24iLCJzdmdfbWFwIiwibWFyZ2luX21hcCIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImhlaWdodF9tYXAiLCJzdHJva2UiLCJwcm9qZWN0aW9uIiwiZ2V0X2Jib3hfbGF5ZXJfcGF0aCIsImJib3hfbGF5ZXIiLCJJbmZpbml0eSIsImVhY2giLCJiYm94X3BhdGgiLCJib3VuZHMiLCJnZW9tZXRyeSIsImZpdExheWVyIiwidHJhbnNsYXRlIiwiYiIsInMiLCJtYXBfem9vbWVkIiwidHJhbnNmb3JtIiwiZXZlbnQiLCJrIiwieSIsImxheWVycyIsInRyYW5zaXRpb24iLCJkdXJhdGlvbiIsIk1hcFNlbGVjdCIsIm51dHMxIiwiY291bnRyaWVzIiwicmVtb3RlIiwidGVtcGxhdGUiLCJzZWFib3hlcyIsImdlb0lkZW50aXR5IiwiZml0RXh0ZW50IiwicmVmbGVjdFkiLCJnZW9QYXRoIiwiem9vbV9tYXAiLCJ6b29tIiwic2NhbGVFeHRlbnQiLCJ0cmFuc2xhdGVFeHRlbnQiLCJjYWxsIiwiZGF0YSIsImZlYXR1cmVzIiwiZW50ZXIiLCJzZWFib3hlczIiLCJ0YXJnZXRfbGF5ZXIiLCJwcm9wZXJ0aWVzIiwiYXBwIiwiY3VycmVudF9jb25maWciLCJpZF9maWVsZF9nZW9tIiwibXlfcmVnaW9uIiwibm9kZSIsImdldEF0dHJpYnV0ZSIsImN1cnJlbnRfaWRzIiwiY29sb3JzIiwiem9vbUlkZW50aXR5IiwidGV4dCIsIm15X3JlZ2lvbl9wcmV0dHlfbmFtZSIsImJydXNoX21hcCIsIm1vdmUiLCJzZWxlY3Rpb24iLCJjaGFydCIsImhhbmRsZUNsaWNrTWFwIiwiY2xhc3NMaXN0IiwiYWRkIiwiaGFuZGxlX2JydXNoX21hcCIsImJydXNoIiwiZXh0ZW50IiwibWFrZVNvdXJjZVNlY3Rpb24iLCJ0ZXh0X3pvbmUiLCJtYWtlTWFwTGVnZW5kIiwibGVnZW5kX2VsZW1zIiwiY29sb3IiLCJyZWN0X3NpemUiLCJzcGFjaW5nIiwibGdkX2hlaWdodCIsIm9mZnNldCIsImdycF9sZ2QiLCJsZWdlbmRzIiwidHgiLCJ0eSIsImNyZWF0ZVRhYmxlRE9NIiwib3B0cyIsImNvbmZpZyIsIm51bSIsImRlbnVtIiwib3B0aW9ucyIsImRvYyIsIm5iX2ZlYXR1cmVzIiwiY29sdW1uX25hbWVzIiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIm5iX2NvbHVtbnMiLCJteVRhYmxlIiwiaGVhZGVycyIsImJvZHkiLCJoZWFkZXJzX3JvdyIsImNlbGwiLCJjb2xfbmFtZSIsInJvdyIsInNldEF0dHJpYnV0ZSIsIm1ha2VUYWJsZSIsImRhdGFfbm9fZW1wdHkiLCJ0YWJsZSIsInVuZGVmaW5lZCIsImRhdGFUYWJsZSIsIkRhdGFUYWJsZSIsIm1hcmdpblRvcCIsImZvbnRTaXplIiwicHJvdG90eXBlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJlbCIsIm9uY2xpY2siLCJwYXJlbnRFbGVtZW50IiwiY2xpY2siLCJwcmVwYXJlX2RhdGFzZXQiLCJmdWxsX2RhdGFzZXQiLCJmZWF0dXJlX25hbWVzIiwiZWxlbSIsImZpbHRlckxldmVsVmFyIiwiZmlsdGVyX2lkIiwiY3VycmVudF9sZXZlbCIsImlkX2ZpZWxkIiwiZmlsdGVyX2tleSIsIm5hbWVfZmllbGQiLCJhbGxfdmFyaWFibGVzIiwiY29uY2F0IiwidGVtcCIsImZ0IiwibGV2ZWwiLCJteV9jYXRlZ29yeSIsInByb3BzX2ZlYXR1cmUiLCJjdXJyZW50X2RhdGEiLCJwcmVwYXJlVmFyaWFibGVzSW5mbyIsIm1ldGFkYXRhX2luZGljYXRldXJzIiwibG9nIiwiYXBwbHlGaWx0ZXIiLCJmaWx0ZXJfdHlwZSIsImNoYW5nZVJlZ2lvbiIsImlkX3JlZ2lvbiIsImFkZFZhcmlhYmxlIiwiY29kZV9yYXRpbyIsInZhcmlhYmxlX2luZm8iLCJ2YXJpYWJsZXNfaW5mbyIsInJhdGlvX3ByZXR0eV9uYW1lIiwicmVtb3ZlVmFyaWFibGUiLCJzcGxpY2UiLCJyZXNldFZhcmlhYmxlcyIsImNvZGVzX3JhdGlvIiwibGVuIiwiY2FsY1BvcENvbXBsZXR1ZGVTdWJzZXQiLCJ2YXJzIiwicG9wX2ZpZWxkIiwiZmluZCIsInRvdGFsX3BvcCIsImlzTmFOIiwicmF0aW9fbmFtZSIsImV2ZXJ5Iiwic3Vic2V0X3BvcCIsInBvcCIsIlRhYmxlUmVzdW1lU3RhdCIsInN1bW1hcnlfZmVhdHVyZXMiLCJjb250YWluZXJfZGl2IiwidGFibGVfYm9keSIsImFkZEZlYXR1cmUiLCJzdW1tYXJ5IiwiaWRfdmFyaWFibGUiLCJyb3dzIiwic3ZnX2JhciIsIm1hcmdpbjIiLCJoZWlnaHQyIiwibmJGdCIsImN1cnJlbnRfcmFuZ2VfYnJ1c2giLCJjdXJyZW50X3JhbmdlIiwiZGlzcGxheWVkIiwiZ2V0TWVhblJhbmsiLCJyYXRpb190b191c2UiLCJtZWFuX3JhbmsiLCJzb3J0IiwiQmFyQ2hhcnQxIiwicmVmX2RhdGEiLCJicnVzaGVkIiwic291cmNlRXZlbnQiLCJ0eXBlIiwieDIiLCJyYW5nZSIsImRvbWFpbiIsInVwZGF0ZSIsInVwZGF0ZUNvbnRleHQiLCJicnVzaF90b3AiLCJicnVzaGVkX3RvcCIsIl9mb2N1cyIsIm1hcF9lbGVtIiwiZDNfZXZlbnQiLCJ0YXJnZXQiLCJyZW1vdmVSZWN0QnJ1c2giLCJ1cGRhdGVNYXBSZWdpbyIsImRldGFpbCIsIm5iX3ZhciIsInNjYWxlQmFuZCIsInNjYWxlTGluZWFyIiwieTIiLCJ4QXhpcyIsImF4aXNCb3R0b20iLCJ4QXhpczIiLCJ5QXhpcyIsImF4aXNMZWZ0Iiwic2VsZiIsImF2YWlsYWJsZV9yYXRpb3MiLCJjdXJyZW50X3JhbmtzIiwiZm9jdXMiLCJjb250ZXh0IiwibWluIiwiYnJ1c2hfYm90dG9tIiwiYnJ1c2hYIiwiZHgiLCJnX2JhciIsImdyb3VwZV9saW5lX21lYW4iLCJ4MSIsInkxIiwidXBkYXRlTWluaUJhcnMiLCJjb21wbGV0dWRlX3ZhbHVlIiwiY29tcGxldHVkZSIsImtleSIsInNlbGVjX3ZhciIsImNvZGVfdmFyaWFibGUiLCJjaGFuZ2VWYXJpYWJsZSIsImNoYW5nZVN0dWR5Wm9uZSIsInVwZGF0ZUNvbXBsZXR1ZGUiLCJtZW51X3NlbGVjdGlvbiIsInNlbGVjdEJlbG93TWVhbiIsInNlbGVjdEFib3ZlTWVhbiIsInNlbGVjdEJlbG93TXlSZWdpb24iLCJzZWxlY3RBYm92ZU15UmVnaW9uIiwibWFrZVRhYmxlU3RhdCIsIl8iLCJiYXIiLCJiYW5kd2lkdGgiLCJ0b19kaXNwbGF5IiwibW91c2UiLCJleGl0IiwiYXhpc194IiwibWluaV9iYXJzIiwibXlfcmFuayIsImxhc3RfbWFwX3NlbGVjdGlvbiIsInJlY3QiLCJfcHRzIiwicHRzIiwibmJfcHRzIiwiY29udGFpbnMiLCJpZHMiLCJrZXlzIiwicmFua3MiLCJjMSIsImMyIiwicGFyZW50IiwidXBkYXRlVGFibGVTdGF0cyIsInVwZGF0ZUxlZ2VuZCIsImdycF9tZWFuIiwibWluX3NlcmllIiwibWF4X3NlcmllIiwib2Zmc2V0X3kiLCJ1cGRhdGVNZWFuVmFsdWUiLCJuYW1lX3ZhcmlhYmxlIiwiZGlzcGF0Y2giLCJ0YWJsZV9zdGF0cyIsInVuYmluZEJydXNoQ2xpY2siLCJyZXNldENvbG9ycyIsInJlbW92ZUFsbCIsInByZXBhcmVUYWJsZVN0YXQiLCJmZWF0dXJlIiwiQnViYmxlQ2hhcnQxIiwiYXZhaWxhYmxlX251bXMiLCJzdG9ja190b191c2UiLCJteV9yZWdpb25fdmFsdWUiLCJkaXN0IiwiaGlnaGxpZ2h0X3NlbGVjdGlvbiIsImRyYXdfZ3JvdXAiLCJhcHBseVNlbGVjdGlvbiIsInNlbGVjdGlvbl9jbG9zZSIsInByb3BlcnR5IiwiYmluZE1lbnUiLCJuYiIsIl9taW4iLCJfbWF4IiwiZGlzdF9taW4iLCJkaXN0X21heCIsImRpc3RfYXhpcyIsIm1hcmdpbl9taW5fbWF4IiwicHJvcF9zaXplciIsInhTY2FsZSIsImJ1YmJsZXMiLCJ4X3ZhbHVlIiwiX3JhdGlvX3RvX3VzZSIsIl9zdG9ja190b191c2UiLCJpZF90b19yZW1vdmUiLCJhcHBseWNoYW5nZSIsImNvbnRleHRNZW51IiwiaXRlbXMiLCJzZXRJdGVtcyIsIml0ZW0iLCJhY3Rpb24iLCJuYl9pdGVtcyIsImFkZEl0ZW0iLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsIkRPTW9iaiIsImhpZGVNZW51IiwiaW5pdE1lbnUiLCJjbGllbnRZIiwic2Nyb2xsVG9wIiwiY2xpZW50WCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJsaXN0IiwibmJfaXRlbSIsIlNjYXR0ZXJQbG90MiIsInJhbmdlX3giLCJpbnZlcnQiLCJyYW5nZV95IiwidDEiLCJyYW5rX3ZhcmlhYmxlMSIsInQyIiwicmFua192YXJpYWJsZTIiLCJ2YXJpYWJsZTEiLCJ2YXJpYWJsZTIiLCJyZWZfdmFsdWUxIiwicmVmX3ZhbHVlMiIsInByZXR0eV9uYW1lMSIsInByZXR0eV9uYW1lMiIsInJlcyIsIm5pY2UiLCJ0aWNrcyIsInlBeGlzMiIsInBsb3QiLCJzY2F0dGVyIiwibWVhbl92YXJpYWJsZTEiLCJtZWFuX3ZhcmlhYmxlMiIsIm1ha2VHcmlkIiwib3BhY2l0eSIsInByZXBhcmVUaXRsZUF4aXMiLCJjYWxsQnJ1c2giLCJ0aWNrU2l6ZSIsInRpY2tGb3JtYXQiLCJtZW51WCIsIkNvbnRleHRNZW51IiwibWVudVkiLCJpdGVtc1giLCJjaGFuZ2VWYXJpYWJsZVgiLCJpdGVtc1kiLCJjaGFuZ2VWYXJpYWJsZVkiLCJiYm94Iiwic2hvd01lbnUiLCJkZWZhdWx0X2NvbG9yIiwiZG90cyIsInZhbHVlMSIsInZhbHVlMiIsInRtcF9teV9yZWdpb24iLCJ1cGRhdGVJdGVtc0N0eE1lbnUiLCJ1cGRhdGVUYWJsZVN0YXQiLCJuZXdfdmFyX3giLCJuZXdfdmFyX3kiLCJ2YWx1ZXMxIiwidmFsdWVzMiIsImFkZEZlYXR1cmVzIiwid3JhcCIsIl90ZXh0IiwiX3dpZHRoIiwid29yZHMiLCJyZXZlcnNlIiwibGluZUhlaWdodCIsInBhcnNlRmxvYXQiLCJsaW5lIiwibGluZU51bWJlciIsInRzcGFuIiwid29yZCIsImpvaW4iLCJnZXRDb21wdXRlZFRleHRMZW5ndGgiLCJmcm9tIiwidG8iLCJzd2FwIiwiaXgxIiwiaXgyIiwicHJlcGFyZV9kYXRhX3JhZGFyX2RlZmF1bHQiLCJ2X215X3JlZ2lvbiIsIm9qYl9teV9yZWdpb24iLCJfdiIsImF4ZXMiLCJvYmpfbWVhbiIsInByZXBhcmVfZGF0YV9yYWRhcl9mdCIsImZ0X3ZhbHVlcyIsIlJhZGFyQ2hhcnQzIiwiY2ZnIiwic2NhbGVPcmRpbmFsIiwic2NoZW1lQ2F0ZWdvcnkxMCIsImciLCJ3IiwiaCIsInByZXBhcmVEYXRhIiwiZHJhd0F4aXNHcmlkIiwiZHJhd0FyZWEiLCJoYW5kbGVMZWdlbmQiLCJhbGxvd0ludmVyc2VEYXRhIiwiaW52ZXJzZV9kYXRhIiwiZmllbGQiLCJkYXRhX2xlbmd0aCIsImF4IiwiYXhpcyIsIm5fYXhpcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJhbGxBeGlzIiwiRXJyb3IiLCJkaXNwbGF5ZWRfaWRzIiwib25fYXhlcyIsIm4iLCJibG9iV3JhcHBlciIsInJhZGFyTGluZSIsIm9wYWNpdHlBcmVhIiwic3Ryb2tlV2lkdGgiLCJkb3RSYWRpdXMiLCJyU2NhbGUiLCJhbmdsZVNsaWNlIiwiX19kYXRhX18iLCJibG9iQ2lyY2xlV3JhcHBlciIsImN4IiwiYmFzZVZhbCIsImN5IiwiRm9ybWF0IiwidW5pdCIsInJhbmtfdmFyaWFibGVzIiwiaWRfbXlfcmVnaW9uIiwibWF4VmFsdWUiLCJ0b3RhbCIsInJhZGl1cyIsImZvcm1hdCIsInJhZGlhbExpbmUiLCJjdXJ2ZSIsInJvdW5kU3Ryb2tlcyIsImN1cnZlQ2FyZGluYWxDbG9zZWQiLCJjdXJ2ZUxpbmVhckNsb3NlZCIsImFuZ2xlIiwibGFiZWxDbGlja2VkIiwibmV3X2l4IiwibGFiZWxDdHhNZW51IiwibGFiZWwiLCJheGlzR3JpZCIsImxldmVscyIsIm9wYWNpdHlDaXJjbGVzIiwibGFiZWxGYWN0b3IiLCJ3cmFwV2lkdGgiLCJmZU1lcmdlIiwibGVnZW5kIiwiYmFiZWxIZWxwZXJzLnR5cGVvZiIsInRpdGxlIiwibGVnZW5kWm9uZSIsImxlZ2VuZEVudGVyIiwibWVyZ2UiLCJ0cmFuc2xhdGVYIiwidHJhbnNsYXRlWSIsInVwZGF0ZV9heGlzIiwidXBkYXRlX2Jsb2JXcmFwcGVyIiwiY2lyY2xlIiwidXBkYXRlX2Jsb2JDaXJjbGVXcmFwcGVyIiwiaW52aXNpYmxlQ2lyY2xlIiwib2xkX215X3JlZ2lvbiIsIm90aGVyX2ZlYXR1cmVzIiwiYWRkX2VsZW1lbnQiLCJhbGxfdmFsdWVzIiwiX2QiLCJTaW1pbGFyaXR5Q2hhcnQiLCJ6IiwibmJfZGlzcGxheSIsImN1cnJlbnRfdHlwZSIsInN0YW5kYXJkaXplZCIsIm5hbWVfc3RhbmRhcmRpemVkIiwib2JqX215X3JlZ2lvbiIsInJlZHVjZSIsImRpc3NpbWlsYXJpdHkiLCJ2YXJfbmFtZSIsImluZGljZV9raW5kIiwiYmFycyIsInJhbmdlUm91bmQiLCJtbWluIiwidmFsdWVfcmVmIiwicmVwbGFjZSIsImluZGljIiwiY2VpbCIsIl9pZCIsIm5iX3ZhbHVlIiwiYm94UXVhcnRpbGVzIiwicXVhbnRpbGVzIiwiQm94UGxvdDEiLCJpbmZfbGV2ZWwiLCJpbmZfbGV2ZWxfZmVhdHVyZXMiLCJfYWxsX3ZhbHVlcyIsImNoaWxkcmVuIiwicmVjb3JkIiwicXVhcnRpbGUiLCJ5U2NhbGUiLCJtYXhfbmJfZnQiLCJjb3VudHMiLCJiYXJXaWR0aCIsInN0ZXAiLCJnZXRfYmFyX3dpZHRoIiwibmJfZnQiLCJnX2JveCIsInZlcnRpY2FsX2xpbmVzIiwid2hpc2tlcnMiLCJob3Jpem9udGFsTGluZUNvbmZpZ3MiLCJkYXR1bSIsImxpbmVDb25maWciLCJob3Jpem9udGFsTGluZSIsIlBhcmFsbGVsQ29vcmRzMiIsInZfbmFtZSIsInJzZCIsImRpbWVuc2lvbnMiLCJwIiwiYmFja2dyb3VuZCIsInNldERlZmF1bHRDb25maWciLCJjb2RlIiwidmFyaWFibGUiLCJzZXREZWZhdWx0Q29uZmlnTWVudSIsInNlbGVjdEZpcnN0QXZhaWxhYmxlVmFyIiwidXBkYXRlQXZhaWxhYmxlc1JhdGlvcyIsImRhdGFfbXlfZmVhdHVyZSIsImxpbmVzIiwibmJfbGluZXMiLCJuZXh0U2libGluZyIsIm5ld192YXIiLCJuZXdfdmFyX25hbWVzIiwiQXJyYXkiLCJiaW5kVUlfY2hhcnQiLCJuZXdfbmJfdmFyIiwidXBkYXRlQ2hhbmdlUmVnaW9uIiwiZ3JvdXBfdmFyIiwicHJldmlvdXNTaWJsaW5nIiwiaGVhZGVyX3RhYmxlX3NlY3Rpb24iLCJjb250ZW50IiwicmFuZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImJpbmRUb3BCdXR0b25zIiwicmVzZXRab29tIiwiYmluZEJydXNoQ2xpY2siLCJiaW5kTWFwIiwibG9hZERhdGEiLCJxdWV1ZSIsImRlZmVyIiwiY3N2IiwianNvbiIsImF3YWl0QWxsIiwiZXJyb3IiLCJyZXN1bHRzIiwiYWdnX24yIiwiZmVhdHVyZXNfbWVudSIsImJpbmRIZWxwTWVudSIsImhlbHBfYnV0dG9uc192YXIiLCJidG5faSIsIm8iLCJtb2RhbCIsInRpbmdsZSIsImRlc3Ryb3kiLCJzZXRDb250ZW50IiwibWV0aG9kbyIsInNvdXJjZSIsImxhc3RfdXBkYXRlIiwib3BlbiIsImhlbHBzX2J1dHRvbnNfc3R1ZHlfem9uZSIsImZpbHRlcl9uYW1lIiwiaGVscHNfYnV0dG9uc190ZXJyaXRfdW5pdCIsInRlcnJpdF9sZXZlbF9uYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxFQUFFLE9BQU9BLFNBQU0sRUFBRUEsU0FBTSxDQUFDLEdBQUcsQ0FBQ0EsU0FBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEFBQXlCLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQUFBYSxDQUFBLENBQUMsQ0FBQ0MsY0FBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLE9BQU8sQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDJCQUEyQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFBLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFBLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLHVCQUF1QixDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxVQUFVLEVBQUUsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDLENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMseURBQXlELENBQUMsQ0FBQSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZ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
