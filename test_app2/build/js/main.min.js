(function (exports) {
'use strict';

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};





function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

var ms = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  if (ms >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (ms >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (ms >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (ms >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  return plural(ms, d, 'day') ||
    plural(ms, h, 'hour') ||
    plural(ms, m, 'minute') ||
    plural(ms, s, 'second') ||
    ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) {
    return;
  }
  if (ms < n * 1.5) {
    return Math.floor(ms / n) + ' ' + name;
  }
  return Math.ceil(ms / n) + ' ' + name + 's';
}

var debug$1 = createCommonjsModule(function (module, exports) {
/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = createDebug.debug = createDebug['default'] = createDebug;
exports.coerce = coerce;
exports.disable = disable;
exports.enable = enable;
exports.enabled = enabled;
exports.humanize = ms;

/**
 * The currently active debug mode names, and names to skip.
 */

exports.names = [];
exports.skips = [];

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
 */

exports.formatters = {};

/**
 * Previous log timestamp.
 */

var prevTime;

/**
 * Select a color.
 * @param {String} namespace
 * @return {Number}
 * @api private
 */

function selectColor(namespace) {
  var hash = 0, i;

  for (i in namespace) {
    hash  = ((hash << 5) - hash) + namespace.charCodeAt(i);
    hash |= 0; // Convert to 32bit integer
  }

  return exports.colors[Math.abs(hash) % exports.colors.length];
}

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

function createDebug(namespace) {

  function debug() {
    // disabled?
    if (!debug.enabled) return;

    var self = debug;

    // set `diff` timestamp
    var curr = +new Date();
    var ms$$1 = curr - (prevTime || curr);
    self.diff = ms$$1;
    self.prev = prevTime;
    self.curr = curr;
    prevTime = curr;

    // turn the `arguments` into a proper Array
    var args = new Array(arguments.length);
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i];
    }

    args[0] = exports.coerce(args[0]);

    if ('string' !== typeof args[0]) {
      // anything else let's inspect with %O
      args.unshift('%O');
    }

    // apply any `formatters` transformations
    var index = 0;
    args[0] = args[0].replace(/%([a-zA-Z%])/g, function(match, format) {
      // if we encounter an escaped % then don't increase the array index
      if (match === '%%') return match;
      index++;
      var formatter = exports.formatters[format];
      if ('function' === typeof formatter) {
        var val = args[index];
        match = formatter.call(self, val);

        // now we need to remove `args[index]` since it's inlined in the `format`
        args.splice(index, 1);
        index--;
      }
      return match;
    });

    // apply env-specific formatting (colors, etc.)
    exports.formatArgs.call(self, args);

    var logFn = debug.log || exports.log || console.log.bind(console);
    logFn.apply(self, args);
  }

  debug.namespace = namespace;
  debug.enabled = exports.enabled(namespace);
  debug.useColors = exports.useColors();
  debug.color = selectColor(namespace);

  // env-specific initialization logic for debug instances
  if ('function' === typeof exports.init) {
    exports.init(debug);
  }

  return debug;
}

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

function enable(namespaces) {
  exports.save(namespaces);

  exports.names = [];
  exports.skips = [];

  var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
  var len = split.length;

  for (var i = 0; i < len; i++) {
    if (!split[i]) continue; // ignore empty strings
    namespaces = split[i].replace(/\*/g, '.*?');
    if (namespaces[0] === '-') {
      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    } else {
      exports.names.push(new RegExp('^' + namespaces + '$'));
    }
  }
}

/**
 * Disable debug output.
 *
 * @api public
 */

function disable() {
  exports.enable('');
}

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

function enabled(name) {
  var i, len;
  for (i = 0, len = exports.skips.length; i < len; i++) {
    if (exports.skips[i].test(name)) {
      return false;
    }
  }
  for (i = 0, len = exports.names.length; i < len; i++) {
    if (exports.names[i].test(name)) {
      return true;
    }
  }
  return false;
}

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

function coerce(val) {
  if (val instanceof Error) return val.stack || val.message;
  return val;
}
});

var browser$1 = createCommonjsModule(function (module, exports) {
/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

exports = module.exports = debug$1;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = 'undefined' != typeof chrome
               && 'undefined' != typeof chrome.storage
                  ? chrome.storage.local
                  : localstorage();

/**
 * Colors.
 */

exports.colors = [
  'lightseagreen',
  'forestgreen',
  'goldenrod',
  'dodgerblue',
  'darkorchid',
  'crimson'
];

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && window.process.type === 'renderer') {
    return true;
  }

  // is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
  return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    // is firebug? http://stackoverflow.com/a/398120/376773
    (typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    // is firefox >= v31?
    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    // double check webkit in userAgent just in case we are in a worker
    (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
}

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

exports.formatters.j = function(v) {
  try {
    return JSON.stringify(v);
  } catch (err) {
    return '[UnexpectedJSONParseError]: ' + err.message;
  }
};


/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

function formatArgs(args) {
  var useColors = this.useColors;

  args[0] = (useColors ? '%c' : '')
    + this.namespace
    + (useColors ? ' %c' : ' ')
    + args[0]
    + (useColors ? '%c ' : ' ')
    + '+' + exports.humanize(this.diff);

  if (!useColors) return;

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit');

  // the final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into
  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function(match) {
    if ('%%' === match) return;
    index++;
    if ('%c' === match) {
      // we only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });

  args.splice(lastC, 0, c);
}

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

function log() {
  // this hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return 'object' === typeof console
    && console.log
    && Function.prototype.apply.call(console.log, console, arguments);
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

function save(namespaces) {
  try {
    if (null == namespaces) {
      exports.storage.removeItem('debug');
    } else {
      exports.storage.debug = namespaces;
    }
  } catch(e) {}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
  var r;
  try {
    r = exports.storage.debug;
  } catch(e) {}

  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG
  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

exports.enable(load());

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

function localstorage() {
  try {
    return window.localStorage;
  } catch (e) {}
}
});

var color_countries = 'rgb(147,144,252)';
var color_disabled = 'rgb(214, 214, 214)';
var color_sup = 'green';
var color_inf = 'red';
var color_highlight = 'yellow';

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();



























var slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

var math_abs = Math.abs;
var math_round = Math.round;

function prepareTooltip(parent_svg_elem) {
  var tooltip = parent_svg_elem.append('g').attr('class', 'tooltip').style('display', 'none');

  tooltip.append('rect').attrs({ width: 50, height: 40, fill: 'white' }).style('opacity', 0.5);

  tooltip.append('text').attrs({ class: 'id_feature', x: 25, dy: '1.2em', 'font-size': '14px' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature1',
    x: 25,
    dy: '2.4em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature2',
    x: 25,
    dy: '3.5em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature3',
    x: 25,
    dy: '4.6em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  tooltip.append('text').attrs({
    class: 'value_feature4',
    x: 25,
    dy: '5.7em',
    'font-size': '14px',
    'font-weight': 'bold' }).style('text-anchor', 'middle');

  return tooltip;
}

function unbindUI() {
  // Removes the current behavior corresponding to clicking on the left menu:
  d3.selectAll('span.filter_v').on('click', null);
  d3.selectAll('span.target_region').on('click', null);
  d3.selectAll('span.label_chk').on('click', null);

  // Remove the table:
  d3.select('.dataTable-wrapper').remove();

  // Unbind buttons on the top of the map:
  d3.select('#header_map').selectAll('img').on('click', null);

  // Remove the selection menu (or buttons) under the chart:
  d3.select('#bar_section > #buttons_under_chart').remove();

  // Removes the current behavior corresponding to clicking on the top menu:
  d3.selectAll('.type_chart.title_menu').on('click', null);

  // Removes the current behavior corresponding to pressing the Control key:
  document.onkeyup = null;
  document.onkeydown = null;
}

/**
*
*
*
*
*/
var comp = function comp(test_value, ref_value, serie_inversed) {
  if (test_value < ref_value) {
    return serie_inversed ? color_sup : color_inf;
  }
  return serie_inversed ? color_inf : color_sup;
};

/**
*
*
*
*
*/
var comp2 = function comp2(val1, val2, ref_val1, ref_val2, xInversed, yInversed) {
  if (val1 < ref_val1 && !xInversed || val1 > ref_val1 && xInversed) {
    // val1 is inferior:
    if (val2 < ref_val2) {
      return yInversed ? 'rgb(160, 30, 160)' : color_inf;
    }
    return yInversed ? color_inf : 'rgb(160, 30, 160)';
  }
  // val1 is superior :
  if (val2 > ref_val2) {
    return !yInversed ? color_sup : 'rgb(160, 30, 160)';
  }
  return !yInversed ? 'rgb(160, 30, 160)' : color_sup;
};

var Rect = function () {
  function Rect(topleft, bottomright) {
    classCallCheck(this, Rect);

    this.xmin = topleft[0];
    this.xmax = bottomright[0];
    this.ymin = topleft[1];
    this.ymax = bottomright[1];
  }

  createClass(Rect, [{
    key: 'contains',
    value: function contains(pt) {
      if (pt[0] >= this.xmin && pt[0] <= this.xmax && pt[1] >= this.ymin && pt[1] <= this.ymax) {
        return true;
      }
      return false;
    }
  }]);
  return Rect;
}();

var PropSizer = function PropSizer(fixed_value, fixed_size) {
  var _this = this;

  this.fixed_value = fixed_value;
  var sqrt = Math.sqrt;
  var abs = Math.abs;
  var PI = Math.PI;
  this.smax = fixed_size * fixed_size * PI;
  this.scale = function (val) {
    return sqrt(abs(val) * _this.smax / _this.fixed_value) / PI;
  };
  // this.get_value = size => ((size * PI) ** 2) / this.smax * this.fixed_value;
  // Use Math pow to support browser without ** operator:
  // eslint-disable-next-line no-restricted-properties
  this.get_value = function (size) {
    return Math.pow(size * PI, 2) / _this.smax * _this.fixed_value;
  };
};

var removeDuplicates = function removeDuplicates(arr) {
  var tmp = [];
  for (var i = 0, len_arr = arr.length; i < len_arr; i++) {
    if (tmp.indexOf(arr[i]) === -1) {
      tmp.push(arr[i]);
    }
  }
  return tmp;
};

var getSvgPathType = function getSvgPathType(path) {
  if (path.indexOf('M ') > -1 && path.indexOf(' L ') > -1) {
    return 2;
  }
  return 1;
};

var svgPathToCoords = function svgPathToCoords(path, type_path) {
  if (type_path === 1) {
    return path.slice(1).split('L').map(function (pt) {
      return pt.split(',').map(function (a) {
        return +a;
      });
    });
  }
  return path.slice(2).split(' L ').map(function (pt) {
    return pt.split(' ').map(function (a) {
      return +a;
    });
  });
};

function computePercentileRank(obj, field_name, result_field_name) {
  var values = obj.map(function (d) {
    return d[field_name];
  });
  var len_values = values.length;
  var getPR = function getPR(v) {
    var count = 0;
    for (var i = 0; i < len_values; i++) {
      if (values[i] <= v) {
        count += 1;
      }
    }
    return 100 * count / len_values;
  };
  for (var ix = 0; ix < len_values; ix++) {
    obj[ix][result_field_name] = getPR(values[ix]);
  }
}

var _getPR = function _getPR(v, serie) {
  var count = 0;
  for (var i = 0; i < serie.length; i++) {
    if (serie[i] <= v) {
      count += 1;
    }
  }
  return 100 * count / serie.length;
};

var createMenu = function createMenu(names, variables, study_zones, territorial_mesh) {
  // First section, regions names:
  var title_section1 = document.createElement('p');
  title_section1.className = 'title_menu';
  title_section1.innerHTML = 'Ma région';
  var section1 = document.createElement('div');
  section1.className = 'box';
  section1.style.overflow = 'auto';
  section1.style.height = '200px';
  for (var i = 0, len_i = names.length; i < len_i; i++) {
    var id = names[i].geo;
    var name = names[i].Nom;
    var entry = document.createElement('p');
    entry.innerHTML = '<span value="' + id + '" class=\'target_region square\'></span><span class="label_chk">' + name + '</span>';
    section1.appendChild(entry);
  }

  // Second section, groups of variables:
  var title_section2 = document.createElement('p');
  title_section2.className = 'title_menu';
  title_section2.innerHTML = 'Mon/mes indicateurs';
  var section2 = document.createElement('div');
  section2.className = 'box';

  // Filter the "variables" variable to fetch the group names :
  var groups_var = removeDuplicates(variables.map(function (d) {
    return d.group;
  }));

  var _loop = function _loop(_i, _len_i) {
    var gp_name = groups_var[_i];
    var entry = document.createElement('p');
    entry.innerHTML = '<span class=\'square\'></span><span>' + gp_name + '</span>';
    section2.appendChild(entry);
    var var_names = variables.filter(function (d) {
      return d.group === gp_name;
    });
    for (var j = 0, len_j = var_names.length; j < len_j; j++) {
      var name_var = var_names[j].name;
      var code_var = var_names[j].ratio;
      var sub_entry = document.createElement('p');
      sub_entry.className = 'small';
      sub_entry.innerHTML = '<span value="' + code_var + '" class="target_variable small_square"></span><span class="label_chk">' + name_var + '</span>';
      section2.appendChild(sub_entry);
    }
  };

  for (var _i = 0, _len_i = groups_var.length; _i < _len_i; _i++) {
    _loop(_i, _len_i);
  }

  // Third section, study zone:
  var title_section3 = document.createElement('p');
  title_section3.className = 'title_menu';
  title_section3.innerHTML = 'Mon espace d\'étude';
  var section3 = document.createElement('div');
  section3.className = 'box';
  for (var _i2 = 0, _len_i2 = study_zones.length; _i2 < _len_i2; _i2++) {
    var _entry = document.createElement('p');
    var zone = study_zones[_i2];
    _entry.innerHTML = '<span filter-value="' + zone.id + '" class=\'filter_v square\'></span><span class="label_chk">' + zone.name + '</span>';
    section3.appendChild(_entry);
  }

  // Fourth section:
  var title_section4 = document.createElement('p');
  title_section4.className = 'title_menu';
  title_section4.innerHTML = 'Maillage territorial d\'analyse';
  var section4 = document.createElement('div');
  section4.className = 'box';
  for (var _i3 = 0, _len_i3 = territorial_mesh.length; _i3 < _len_i3; _i3++) {
    var _entry2 = document.createElement('p');
    var territ_level = territorial_mesh[_i3];
    _entry2.innerHTML = '<span value="' + territ_level.id + '" class=\'square territ_level\'></span><span class="label_chk">' + territ_level.name + '</span>';
    section4.appendChild(_entry2);
  }

  // The actual menu containing these 4 sections:
  var menu = document.getElementById('menu');
  menu.id = 'menu';
  menu.style.width = '340px';
  menu.style.float = 'left';
  menu.appendChild(title_section1);
  menu.appendChild(section1);
  menu.appendChild(title_section2);
  menu.appendChild(section2);
  menu.appendChild(title_section3);
  menu.appendChild(section3);
  menu.appendChild(title_section4);
  menu.appendChild(section4);
};

function makeTopMenu() {
  var top_menu = d3.select('#menutop').styles({ 'font-family': "'Signika', sans-serif", 'font-size': '0.80em', padding: '0.3px' });
  var width_left = document.querySelector('#menu').getBoundingClientRect().width + 25 + 'px';
  var t = document.querySelector('#bar_section').getBoundingClientRect().width;
  var width_central_chart = t + 'px';
  var width_map = document.querySelector('#map_section').getBoundingClientRect().width - 35 + 'px';
  var width_type_comp = (t - 80) / 3 - 2 + 'px';
  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_left, float: 'left', margin: '0 3px' }).html('SÉLECTION');

  var type_chart = top_menu.append('div').attr('class', 'top_section').styles({ width: width_central_chart, float: 'left', margin: '0 3px', 'text-align': 'center' });

  var position = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  position.append('p').attr('class', 'title_type_comp').html('POSITION');

  position.append('span').attrs({ class: 'type_chart chart_t1', value: 'BarChart1' }).html('1 ind.');

  position.append('span').attrs({ class: 'type_chart chart_t2 disabled', value: 'ScatterPlot2' }).html('2 ind.');

  position.append('span').attr('class', 'type_chart chart_t3 disabled').html('+3 ind.');

  var ressemblance = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  ressemblance.append('p').attr('class', 'title_type_comp').html('RESSEMBLANCES');

  ressemblance.append('span').attrs({ class: 'type_chart chart_t1', value: 'BubbleChart1' }).html('1 ind.');

  ressemblance.append('span').attr('class', 'type_chart chart_t2 disabled').html('+2 ind.');

  var inegalite = type_chart.append('div').attr('class', 'type_comparaison').styles({ width: width_type_comp });

  inegalite.append('p').attr('class', 'title_type_comp').html('INÉGALITÉS');

  inegalite.append('span').attr('class', 'type_chart chart_t1 disabled').html('1 ind.');

  inegalite.append('span').attr('class', 'type_chart chart_t2 disabled').html('+2 ind.');

  top_menu.append('div').attrs({ class: 'title_section' }).styles({ width: width_map, float: 'left', margin: '0 0 0 20px' }).html('QUELLES REGIONS ?');
}

function makeHeaderMapSection() {
  var header_map_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_map').style('margin', '0 0 0 10px');

  header_map_section.insert('img').attrs({
    class: 'map_button active',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-rect-select.png',
    id: 'img_rect_selec'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-tool-zoom.png',
    id: 'img_map_zoom'
  });

  header_map_section.insert('img').attrs({
    class: 'map_button',
    width: 20,
    height: 20,
    src: 'img/gimp-cursor.png',
    id: 'img_map_select'
  });
}

function makeHeaderChart() {
  var header_bar_section = d3.select('#bar_section').insert('p', 'svg').attr('id', 'header_chart').style('margin-bottom', '0').style('clear', 'both');

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/edit-table-insert-row-above.svg',
    id: 'img_table'
  }).styles({ margin: '3px', float: 'right' }).on('click', function () {
    if (document.querySelector('.dataTable-wrapper').style.display) {
      document.querySelector('#svg_map').style.display = 'none';
      document.querySelector('#svg_legend').style.display = 'none';
      document.querySelector('#header_map').style.display = 'none';
      document.querySelector('#header_table').style.display = null;
      document.querySelector('.dataTable-wrapper').style.display = null;
      this.style.filter = 'invert(75%)';
    } else {
      document.querySelector('#svg_map').style.display = null;
      document.querySelector('#svg_legend').style.display = null;
      document.querySelector('#header_map').style.display = null;
      document.querySelector('#header_table').style.display = 'none';
      document.querySelector('.dataTable-wrapper').style.display = 'none';
      this.style.filter = null;
    }
  });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/printer.svg',
    id: 'img_printer'
  }).styles({ margin: '3px', float: 'right' });

  header_bar_section.insert('img').attrs({
    width: 24,
    height: 24,
    src: 'img/gtk-info.svg',
    id: 'img_info'
  }).styles({ margin: '3px', float: 'right' });
}

var vanillaDataTables = createCommonjsModule(function (module, exports) {
/*!
 *
 * Vanilla-DataTables
 * Copyright (c) 2015-2017 Karl Saunders (http://mobius.ovh)
 * Licensed under MIT (http://www.opensource.org/licenses/mit-license.php)
 *
 * Version: 1.4.15
 *
 */
(function (root, factory) {
    var plugin = "DataTable";

    if (typeof undefined === "function" && undefined.amd) {
        undefined([], factory(plugin));
    } else {
        module.exports = factory(plugin);
    }
})(commonjsGlobal, function (plugin) {
    "use strict";
    var win = window,
        doc = document,
        body = doc.body;

    /**
     * Default configuration
     * @typ {Object}
     */
    var defaultConfig = {
        perPage: 10,
        perPageSelect: [5, 10, 15, 20, 25],

        sortable: true,
        searchable: true,

        // Pagination
        nextPrev: true,
        firstLast: false,
        prevText: "&lsaquo;",
        nextText: "&rsaquo;",
        firstText: "&laquo;",
        lastText: "&raquo;",
        ellipsisText: "&hellip;",
        ascText: "▴",
        descText: "▾",
        truncatePager: true,
        pagerDelta: 2,

        fixedColumns: true,
        fixedHeight: false,

        header: true,
        footer: false,

        // Customise the display text
        labels: {
            placeholder: "Search...", // The search input placeholder
            perPage: "{select} entries per page", // per-page dropdown label
            noRows: "No entries found", // Message shown when there are no search results
            info: "Showing {start} to {end} of {rows} entries" //
        },

        // Customise the layout
        layout: {
            top: "{select}{search}",
            bottom: "{info}{pager}"
        }
    };

    /**
     * Check is item is object
     * @return {Boolean}
     */
    var isObject = function (val) {
        return Object.prototype.toString.call(val) === "[object Object]";
    };

    /**
     * Check is item is array
     * @return {Boolean}
     */
    var isArray = function (val) {
        return Array.isArray(val);
    };

    /**
     * Check for valid JSON string
     * @param  {String}   str
     * @return {Boolean|Array|Object}
     */
    var isJson = function (str) {
        var t = !1;
        try {
            t = JSON.parse(str);
        } catch (e) {
            return !1;
        }
        return !(null === t || (!isArray(t) && !isObject(t))) && t;
    };

    /**
     * Merge objects (reccursive)
     * @param  {Object} r
     * @param  {Object} t
     * @return {Object}
     */
    var extend = function (src, props) {
        for (var prop in props) {
            if (props.hasOwnProperty(prop)) {
                var val = props[prop];
                if (val && isObject(val)) {
                    src[prop] = src[prop] || {};
                    extend(src[prop], val);
                } else {
                    src[prop] = val;
                }
            }
        }
        return src;
    };

    /**
     * Iterator helper
     * @param  {(Array|Object)}   arr     Any object, array or array-like collection.
     * @param  {Function}         fn      Callback
     * @param  {Object}           scope   Change the value of this
     * @return {Void}
     */
    var each = function (arr, fn, scope) {
        var n;
        if (isObject(arr)) {
            for (n in arr) {
                if (Object.prototype.hasOwnProperty.call(arr, n)) {
                    fn.call(scope, arr[n], n);
                }
            }
        } else {
            for (n = 0; n < arr.length; n++) {
                fn.call(scope, arr[n], n);
            }
        }
    };

    /**
     * Add event listener to target
     * @param  {Object} el
     * @param  {String} e
     * @param  {Function} fn
     */
    var on = function (el, e, fn) {
        el.addEventListener(e, fn, false);
    };

    /**
     * Create DOM element node
     * @param  {String}   a nodeName
     * @param  {Object}   b properties and attributes
     * @return {Object}
     */
    var createElement = function (a, b) {
        var d = doc.createElement(a);
        if (b && "object" == typeof b) {
            var e;
            for (e in b) {
                if ("html" === e) {
                    d.innerHTML = b[e];
                } else {
                    d.setAttribute(e, b[e]);
                }
            }
        }
        return d;
    };

    var flush = function (el, ie) {
        if (el instanceof NodeList) {
            each(el, function (e) {
                flush(e, ie);
            });
        } else {
            if (ie) {
                while (el.hasChildNodes()) {
                    el.removeChild(el.firstChild);
                }
            } else {
                el.innerHTML = "";
            }
        }
    };

    /**
     * Create button helper
     * @param  {String}   c
     * @param  {Number}   p
     * @param  {String}   t
     * @return {Object}
     */
    var button = function (c, p, t) {
        return createElement("li", {
            class: c,
            html: '<a href="#" data-page="' + p + '">' + t + "</a>"
        });
    };

    /**
     * classList shim
     * @type {Object}
     */
    var classList = {
        add: function (s, a) {
            if (s.classList) {
                s.classList.add(a);
            } else {
                if (!classList.contains(s, a)) {
                    s.className = s.className.trim() + " " + a;
                }
            }
        },
        remove: function (s, a) {
            if (s.classList) {
                s.classList.remove(a);
            } else {
                if (classList.contains(s, a)) {
                    s.className = s.className.replace(
                        new RegExp("(^|\\s)" + a.split(" ").join("|") + "(\\s|$)", "gi"),
                        " "
                    );
                }
            }
        },
        contains: function (s, a) {
            if (s)
                return s.classList ?
                    s.classList.contains(a) :
                    !!s.className &&
                    !!s.className.match(new RegExp("(\\s|^)" + a + "(\\s|$)"));
        }
    };

    /**
     * Bubble sort algorithm
     */
    var sortItems = function (a, b) {
        var c, d;
        if (1 === b) {
            c = 0;
            d = a.length;
        } else {
            if (b === -1) {
                c = a.length - 1;
                d = -1;
            }
        }
        for (var e = !0; e;) {
            e = !1;
            for (var f = c; f != d; f += b) {
                if (a[f + b] && a[f].value > a[f + b].value) {
                    var g = a[f],
                        h = a[f + b],
                        i = g;
                    a[f] = h;
                    a[f + b] = i;
                    e = !0;
                }
            }
        }
        return a;
    };

    /**
     * Pager truncation algorithm
     */
    var truncate = function (a, b, c, d, ellipsis) {
        d = d || 2;
        var j,
            e = 2 * d,
            f = b - d,
            g = b + d,
            h = [],
            i = [];
        if (b < 4 - d + e) {
            g = 3 + e;
        } else if (b > c - (3 - d + e)) {
            f = c - (2 + e);
        }
        for (var k = 1; k <= c; k++) {
            if (1 == k || k == c || (k >= f && k <= g)) {
                var l = a[k - 1];
                classList.remove(l, "active");
                h.push(l);
            }
        }
        each(h, function (c) {
            var d = c.children[0].getAttribute("data-page");
            if (j) {
                var e = j.children[0].getAttribute("data-page");
                if (d - e == 2) i.push(a[e]);
                else if (d - e != 1) {
                    var f = createElement("li", {
                        class: "ellipsis",
                        html: '<a href="#">' + ellipsis + "</a>"
                    });
                    i.push(f);
                }
            }
            i.push(c);
            j = c;
        });

        return i;
    };

    /**
     * Parse data to HTML table
     */
    var dataToTable = function (data) {
        var thead = false,
            tbody = false;

        data = data || this.options.data;

        if (data.headings) {
            thead = createElement("thead");
            var tr = createElement("tr");
            each(data.headings, function (col) {
                var td = createElement("th", {
                    html: col
                });
                tr.appendChild(td);
            });

            thead.appendChild(tr);
        }

        if (data.data) {
            tbody = createElement("tbody");
            each(data.data, function (rows) {
                if (data.headings) {
                    if (data.headings.length !== rows.length) {
                        throw new Error(
                            "The number of rows do not match the number of headings."
                        );
                    }
                }
                var tr = createElement("tr");
                each(rows, function (value) {
                    var td = createElement("td", {
                        html: value
                    });
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
        }

        if (thead) {
            if (this.table.tHead !== null) {
                this.table.removeChild(this.table.tHead);
            }
            this.table.appendChild(thead);
        }

        if (tbody) {
            if (this.table.tBodies.length) {
                this.table.removeChild(this.table.tBodies[0]);
            }
            this.table.appendChild(tbody);
        }
    };

    /**
     * Use moment.js to parse cell contents for sorting
     * @param  {String} content     The datetime string to parse
     * @param  {String} format      The format for moment to use
     * @return {String|Boolean}     Datatime string or false
     */
    var parseDate = function (content, format) {
        var date = false;

        // moment() throws a fit if the string isn't a valid datetime string
        // so we need to supply the format to the constructor (https://momentjs.com/docs/#/parsing/string-format/)

        // Converting to YYYYMMDD ensures we can accurately sort the column numerically

        if (format) {
            switch (format) {
            case "ISO_8601":
                date = moment(content, moment.ISO_8601).format("YYYYMMDD");
                break;
            case "RFC_2822":
                date = moment(content, "ddd, MM MMM YYYY HH:mm:ss ZZ").format("YYYYMMDD");
                break;
            case "MYSQL":
                date = moment(content, "YYYY-MM-DD hh:mm:ss").format("YYYYMMDD");
                break;
            case "UNIX":
                date = moment(content).unix();
                break;
                // User defined format using the data-format attribute or columns[n].format option
            default:
                date = moment(content, format).format("YYYYMMDD");
                break;
            }
        }

        return date;
    };

    /**
     * Columns API
     * @param {Object} instance DataTable instance
     * @param {Mixed} columns  Column index or array of column indexes
     */
    var Columns = function (dt) {
        this.dt = dt;
        return this;
    };

    /**
     * Swap two columns
     * @return {Void}
     */
    Columns.prototype.swap = function (columns) {
        if (columns.length && columns.length === 2) {
            var cols = [];

            // Get the current column indexes
            each(this.dt.headings, function (h, i) {
                cols.push(i);
            });

            var x = columns[0];
            var y = columns[1];
            var b = cols[y];
            cols[y] = cols[x];
            cols[x] = b;

            this.order(cols);
        }
    };

    /**
     * Reorder the columns
     * @return {Array} columns  Array of ordered column indexes
     */
    Columns.prototype.order = function (columns) {
        var a, b, c, d, h, s;

        var temp_a = [];
        var temp_b = [];
        var temp_c = [];
        var temp_d = [];

        var dt = this.dt;

        // Order the headings
        each(columns, function (column, x) {
            h = dt.headings[column];
            s = h.getAttribute("data-sortable") !== "false";
            a = h.cloneNode(true);
            a.originalCellIndex = x;
            a.sortable = s;

            temp_a.push(a);

            if (dt.hiddenColumns.indexOf(column) < 0) {
                b = h.cloneNode(true);
                b.originalCellIndex = x;
                b.sortable = s;

                temp_b.push(b);
            }
        });

        // Order the row cells
        each(dt.data, function (row, i) {
            c = row.cloneNode();
            d = row.cloneNode();

            c.dataIndex = i;
            d.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                c.searchIndex = row.searchIndex;
                d.searchIndex = row.searchIndex;
            }

            // Append to cell to the fragment in the correct order
            each(
                columns,
                function (x, column) {
                    c.appendChild(row.cells[column].cloneNode(true));

                    if (dt.hiddenColumns.indexOf(column) < 0) {
                        d.appendChild(row.cells[column].cloneNode(true));
                    }
                },
                this
            );

            temp_c.push(c);
            temp_d.push(d);
        });

        dt.headings = temp_a;
        dt.activeHeadings = temp_b;

        dt.data = temp_c;
        dt.activeRows = temp_d;

        // Update
        dt.update();
    };

    /**
     * Hide columns
     * @return {Void}
     */
    Columns.prototype.hide = function (columns) {
        if (columns.length) {
            var dt = this.dt;

            each(columns, function (column) {
                if (dt.hiddenColumns.indexOf(column) < 0) {
                    dt.hiddenColumns.push(column);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Show columns
     * @return {Void}
     */
    Columns.prototype.show = function (columns) {
        if (columns.length) {
            var index, dt = this.dt;

            each(columns, function (column) {
                index = dt.hiddenColumns.indexOf(column);
                if (index > -1) {
                    dt.hiddenColumns.splice(index, 1);
                }
            });

            this.rebuild();
        }
    };

    /**
     * Check column(s) visibility
     * @return {Boolean}
     */
    Columns.prototype.visible = function (columns) {
        var cols, dt = this.dt;

        columns = columns || dt.headings.map(function (th) {
            return th.originalCellIndex;
        });

        if (!isNaN(columns)) {
            cols = dt.hiddenColumns.indexOf(columns) < 0;
        } else if (isArray(columns)) {
            cols = [];
            each(columns, function (column) {
                cols.push(dt.hiddenColumns.indexOf(column) < 0);
            });
        }

        return cols;
    };

    /**
     * Check column(s) visibility
     * @return {Boolean}
     */
    Columns.prototype.hidden = function (columns) {
        var cols, dt = this.dt;

        columns = columns || this.dt.headings.map(function (th) {
            return th.originalCellIndex;
        });

        if (!isNaN(columns)) {
            cols = dt.hiddenColumns.indexOf(this.columns) > -1;
        } else if (isArray(columns)) {
            cols = [];
            each(columns, function (column) {
                cols.push(dt.hiddenColumns.indexOf(column) > -1);
            });
        }

        return cols;
    };

    /**
     * Add a new column
     * @param {Object} data
     */
    Columns.prototype.add = function (data) {
        var that = this,
            td, th = document.createElement("th");

        if (!this.dt.headings.length) {
            this.dt.insert({
                headings: [data.heading],
                data: data.data.map(function (i) {
                    return [i];
                })
            });
            this.rebuild();
            return;
        }

        if (!this.dt.hiddenHeader) {
            if (data.heading.nodeName) {
                th.appendChild(data.heading);
            } else {
                th.innerHTML = data.heading;
            }
        } else {
            th.innerHTML = "";
        }

        this.dt.headings.push(th);

        each(this.dt.data, function (row, i) {
            if (data.data[i]) {
                td = document.createElement("td");

                if (data.data[i].nodeName) {
                    td.appendChild(data.data[i]);
                } else {
                    td.innerHTML = data.data[i];
                }

                td.data = td.innerHTML;

                if (data.render) {
                    td.innerHTML = data.render.call(that, td.data, td, row);
                }

                row.appendChild(td);
            }
        });

        if (data.type) {
            th.setAttribute("data-type", data.type);
        }
        if (data.format) {
            th.setAttribute("data-format", data.format);
        }

        if (data.hasOwnProperty("sortable")) {
            th.sortable = data.sortable;
            th.setAttribute("data-sortable", data.sortable === true ? "true" : "false");
        }

        this.rebuild();

        this.dt.renderHeader();
    };

    /**
     * Remove column(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Columns.prototype.remove = function (select) {
        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (column) {
                this.remove(column);
            }, this);
        } else {
            this.dt.headings.splice(select, 1);

            each(this.dt.data, function (row) {
                row.removeChild(row.cells[select]);
            });
        }

        this.rebuild();
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    Columns.prototype.sort = function (column, direction, init) {

        var dt = this.dt;

        // Check column is present
        if (dt.hasHeadings && (column < 1 || column > dt.activeHeadings.length)) {
            return false;
        }

        dt.sorting = true;

        // Convert to zero-indexed
        column = column - 1;

        var dir,
            rows = dt.data,
            alpha = [],
            numeric = [],
            a = 0,
            n = 0,
            th = dt.activeHeadings[column];

        column = th.originalCellIndex;

        each(rows, function (tr) {
            var cell = tr.cells[column];
            var content = cell.data;
            var num = content.replace(/(\$|\,|\s|%)/g, "");

            // Check for date format and moment.js
            if (th.getAttribute("data-type") === "date" && win.moment) {
                var format = false,
                    formatted = th.hasAttribute("data-format");

                if (formatted) {
                    format = th.getAttribute("data-format");
                }

                num = parseDate(content, format);
            }

            if (parseFloat(num) == num) {
                numeric[n++] = {
                    value: Number(num),
                    row: tr
                };
            } else {
                alpha[a++] = {
                    value: content,
                    row: tr
                };
            }
        });

        /* Sort according to direction (ascending or descending) */
        var top, btm;
        if (classList.contains(th, "asc") || direction == "asc") {
            top = sortItems(alpha, -1);
            btm = sortItems(numeric, -1);
            dir = "descending";
            classList.remove(th, "asc");
            classList.add(th, "desc");
        } else {
            top = sortItems(numeric, 1);
            btm = sortItems(alpha, 1);
            dir = "ascending";
            classList.remove(th, "desc");
            classList.add(th, "asc");
        }

        /* Clear asc/desc class names from the last sorted column's th if it isn't the same as the one that was just clicked */
        if (dt.lastTh && th != dt.lastTh) {
            classList.remove(dt.lastTh, "desc");
            classList.remove(dt.lastTh, "asc");
        }

        dt.lastTh = th;

        /* Reorder the table */
        rows = top.concat(btm);

        dt.data = [];
        var indexes = [];

        each(rows, function (v, i) {
            dt.data.push(v.row);

            if (v.row.searchIndex !== null && v.row.searchIndex !== undefined) {
                indexes.push(i);
            }
        }, dt);

        dt.searchData = indexes;

        this.rebuild();

        dt.update();

        if (!init) {
            dt.emit("datatable.sort", column, dir);
        }
    };

    /**
     * Rebuild the columns
     * @return {Void}
     */
    Columns.prototype.rebuild = function () {
        var a, b, c, d;
        var dt = this.dt,
            temp = [];

        dt.activeRows = [];
        dt.activeHeadings = [];

        each(dt.headings, function (th, i) {
            th.originalCellIndex = i;
            th.sortable = th.getAttribute("data-sortable") !== "false";
            if (dt.hiddenColumns.indexOf(i) < 0) {
                dt.activeHeadings.push(th);
            }
        }, this);

        // Loop over the rows and reorder the cells
        each(dt.data, function (row, i) {
            a = row.cloneNode();
            b = row.cloneNode();

            a.dataIndex = i;
            b.dataIndex = i;

            if (row.searchIndex !== null && row.searchIndex !== undefined) {
                a.searchIndex = row.searchIndex;
                b.searchIndex = row.searchIndex;
            }

            // Append to cell to the fragment in the correct order
            each(row.cells, function (cell) {
                c = cell.cloneNode(true);
                c.data = cell.data;
                a.appendChild(c);

                if (dt.hiddenColumns.indexOf(cell.cellIndex) < 0) {
                    d = cell.cloneNode(true);
                    d.data = cell.data;
                    b.appendChild(d);
                }
            });

            // Append the fragment with the ordered cells
            temp.push(a);
            dt.activeRows.push(b);
        });

        dt.data = temp;

        dt.update();
    };

    /**
     * Rows API
     * @param {Object} instance DataTable instance
     * @param {Array} rows
     */
    var Rows = function (dt, rows) {
        this.dt = dt;
        this.rows = rows;

        return this;
    };

    /**
     * Build a new row
     * @param  {Array} row
     * @return {HTMLElement}
     */
    Rows.prototype.build = function (row) {
        var td, tr = createElement("tr");

        var headings = this.dt.headings;

        if (!headings.length) {
            headings = row.map(function () {
                return "";
            });
        }

        each(headings, function (h, i) {
            td = createElement("td");

            if (row[i] && row[i].length) {
                td.innerHTML = row[i];
            }

            td.data = row[i];

            tr.appendChild(td);
        });

        return tr;
    };

    Rows.prototype.render = function (row) {
        return row;
    };

    /**
     * Add new row
     * @param {Array} select
     */
    Rows.prototype.add = function (data) {

        if (isArray(data)) {
            var dt = this.dt;
            // Check for multiple rows
            if (isArray(data[0])) {
                each(data, function (row, i) {
                    dt.data.push(this.build(row));
                }, this);
            } else {
                dt.data.push(this.build(data));
            }

            this.update();

            dt.columns().rebuild();
        }
    };

    /**
     * Remove row(s)
     * @param  {Array|Number} select
     * @return {Void}
     */
    Rows.prototype.remove = function (select) {

        var dt = this.dt;

        if (isArray(select)) {
            // Remove in reverse otherwise the indexes will be incorrect
            select.sort(function (a, b) {
                return b - a;
            });

            each(select, function (row, i) {
                dt.data.splice(row, 1);
            });
        } else {
            dt.data.splice(select, 1);
        }

        this.update();
        dt.columns().rebuild();
    };

    /**
     * Update row indexes
     * @return {Void}
     */
    Rows.prototype.update = function () {
        each(this.dt.data, function (row, i) {
            row.dataIndex = i;
        });
    };

    ////////////////////
    //    MAIN LIB    //
    ////////////////////

    var DataTable = function (table, options) {
        this.initialized = false;

        // user options
        this.options = extend(defaultConfig, options);

        if (typeof table === "string") {
            var selector = table;
            table = document.querySelector(table);

            if (!table) {
                throw new Error("The element '" + selector + "' can not be found.");
            }
        }

        if (table.tagName.toLowerCase() !== "table") {
            throw new Error("The selected element is not a table.");
        }

        this.initialLayout = table.innerHTML;
        this.initialSortable = this.options.sortable;

        // Disable manual sorting if no header is present (#4)
        if (!this.options.header) {
            this.options.sortable = false;
        }

        if (table.tHead === null) {
            if (!this.options.data ||
                (this.options.data && !this.options.data.headings)
            ) {
                this.options.sortable = false;
            }
        }

        if (table.tBodies.length && !table.tBodies[0].rows.length) {
            if (this.options.data) {
                if (!this.options.data.data) {
                    throw new Error(
                        "You seem to be using the data option, but you've not defined any rows."
                    );
                }
            }
        }

        this.table = table;

        this.init();
    };

    var proto = DataTable.prototype;

    /**
     * Add custom property or method to extend DataTable
     * @param  {String} prop    - Method name or property
     * @param  {Mixed} val      - Function or property value
     * @return {Void}
     */
    DataTable.extend = function (prop, val) {
        if (typeof val === "function") {
            DataTable.prototype[prop] = val;
        } else {
            DataTable[prop] = val;
        }
    };

    /**
     * Initialize the instance
     * @param  {Object} options
     * @return {Void}
     */
    proto.init = function (options) {
        if (this.initialized || classList.contains(this.table, "dataTable-table")) {
            return false;
        }

        var that = this;

        this.options = extend(this.options, options || {});

        // IE detection
        this.isIE = !!/(msie|trident)/i.test(navigator.userAgent);

        this.currentPage = 1;
        this.onFirstPage = true;

        this.hiddenColumns = [];
        this.columnRenderers = [];
        this.selectedColumns = [];

        this.render();

        if (this.options.plugins) {
            each(this.options.plugins, function (options, plugin) {
                this[plugin](options);
            }, this);
        }

        setTimeout(function () {
            that.emit("datatable.init");
            that.initialized = true;
        }, 10);
    };

    /**
     * Render the instance
     * @param  {String} type
     * @return {Void}
     */
    proto.render = function (type) {
        if (type) {
            switch (type) {
            case "page":
                this.renderPage();
                break;
            case "pager":
                this.renderPager();
                break;
            case "header":
                this.renderHeader();
                break;
            }

            return false;
        }

        var that = this,
            o = that.options,
            template = "";

        // Convert data to HTML
        if (o.data) {
            dataToTable.call(that);
        }

        if (o.ajax) {
            var ajax = o.ajax;
            var xhr = new XMLHttpRequest();

            var xhrProgress = function (e) {
                that.emit("datatable.ajax.progress", e, xhr);
            };

            var xhrLoad = function (e) {
                if (xhr.readyState === 4) {
                    that.emit("datatable.ajax.loaded", e, xhr);

                    if (xhr.status === 200) {
                        var obj = {};
                        obj.data = ajax.load ? ajax.load.call(that, xhr) : xhr.responseText;

                        obj.type = "json";

                        if (ajax.content && ajax.content.type) {
                            obj.type = ajax.content.type;

                            obj = extend(obj, ajax.content);
                        }

                        that.import(obj);

                        that.setColumns(true);

                        that.emit("datatable.ajax.success", e, xhr);
                    } else {
                        that.emit("datatable.ajax.error", e, xhr);
                    }
                }
            };

            var xhrFailed = function (e) {
                that.emit("datatable.ajax.error", e, xhr);
            };

            var xhrCancelled = function (e) {
                that.emit("datatable.ajax.abort", e, xhr);
            };

            on(xhr, "progress", xhrProgress);
            on(xhr, "load", xhrLoad);
            on(xhr, "error", xhrFailed);
            on(xhr, "abort", xhrCancelled);

            that.emit("datatable.ajax.loading", xhr);

            xhr.open("GET", typeof ajax === "string" ? o.ajax : o.ajax.url);
            xhr.send();
        }

        // Store references
        that.body = that.table.tBodies[0];
        that.head = that.table.tHead;
        that.foot = that.table.tFoot;

        if (!that.body) {
            that.body = createElement("tbody");

            that.table.appendChild(that.body);
        }

        that.hasRows = that.body.rows.length > 0;

        // Make a tHead if there isn't one (fixes #8)
        if (!that.head) {
            var h = createElement("thead");
            var t = createElement("tr");

            if (that.hasRows) {
                each(that.body.rows[0].cells, function () {
                    t.appendChild(createElement("th"));
                });

                h.appendChild(t);
            }

            that.head = h;

            that.table.insertBefore(that.head, that.body);

            that.hiddenHeader = !o.ajax;
        }

        that.headings = [];
        that.hasHeadings = that.head.rows.length > 0;

        if (that.hasHeadings) {
            that.header = that.head.rows[0];
            that.headings = [].slice.call(that.header.cells);
        }

        // Header
        if (!o.header) {
            if (that.head) {
                that.table.removeChild(that.table.tHead);
            }
        }

        // Footer
        if (o.footer) {
            if (that.head && !that.foot) {
                that.foot = createElement("tfoot", {
                    html: that.head.innerHTML
                });
                that.table.appendChild(that.foot);
            }
        } else {
            if (that.foot) {
                that.table.removeChild(that.table.tFoot);
            }
        }

        // Build
        that.wrapper = createElement("div", {
            class: "dataTable-wrapper dataTable-loading"
        });

        // Template for custom layouts
        template += "<div class='dataTable-top'>";
        template += o.layout.top;
        template += "</div>";
        template += "<div class='dataTable-container'></div>";
        template += "<div class='dataTable-bottom'>";
        template += o.layout.bottom;
        template += "</div>";

        // Info placement
        template = template.replace("{info}", "<div class='dataTable-info'></div>");

        // Per Page Select
        if (o.perPageSelect) {
            var wrap = "<div class='dataTable-dropdown'><label>";
            wrap += o.labels.perPage;
            wrap += "</label></div>";

            // Create the select
            var select = createElement("select", {
                class: "dataTable-selector"
            });

            // Create the options
            each(o.perPageSelect, function (val) {
                var selected = val === o.perPage;
                var option = new Option(val, val, selected, selected);
                select.add(option);
            });

            // Custom label
            wrap = wrap.replace("{select}", select.outerHTML);

            // Selector placement
            template = template.replace("{select}", wrap);
        } else {
            template = template.replace("{select}", "");
        }

        // Searchable
        if (o.searchable) {
            var form =
                "<div class='dataTable-search'><input class='dataTable-input' placeholder='" +
                o.labels.placeholder +
                "' type='text'></div>";

            // Search input placement
            template = template.replace("{search}", form);
        } else {
            template = template.replace("{search}", "");
        }

        if (that.hasHeadings) {
            // Sortable
            this.render("header");
        }

        // Add table class
        classList.add(that.table, "dataTable-table");

        // Paginator
        var w = createElement("div", {
            class: "dataTable-pagination"
        });
        var paginator = createElement("ul");
        w.appendChild(paginator);

        // Pager(s) placement
        template = template.replace(/\{pager\}/g, w.outerHTML);

        that.wrapper.innerHTML = template;

        that.container = that.wrapper.querySelector(".dataTable-container");

        that.pagers = that.wrapper.querySelectorAll(".dataTable-pagination");

        that.label = that.wrapper.querySelector(".dataTable-info");

        // Insert in to DOM tree
        that.table.parentNode.replaceChild(that.wrapper, that.table);
        that.container.appendChild(that.table);

        // Store the table dimensions
        that.rect = that.table.getBoundingClientRect();

        // Convert rows to array for processing
        that.data = [].slice.call(that.body.rows);
        that.activeRows = that.data.slice();
        that.activeHeadings = that.headings.slice();

        // Update
        that.update();

        if (!o.ajax) {
            that.setColumns();
        }

        // Fixed height
        if (o.fixedHeight) {
            this.fixHeight();
        }

        that.fixColumns();

        // Class names
        if (!o.header) {
            classList.add(that.wrapper, "no-header");
        }

        if (!o.footer) {
            classList.add(that.wrapper, "no-footer");
        }

        if (o.sortable) {
            classList.add(that.wrapper, "sortable");
        }

        if (o.searchable) {
            classList.add(that.wrapper, "searchable");
        }

        if (o.fixedHeight) {
            classList.add(that.wrapper, "fixed-height");
        }

        if (o.fixedColumns) {
            classList.add(that.wrapper, "fixed-columns");
        }

        that.bindEvents();
    };

    /**
     * Render the page
     * @return {Void}
     */
    proto.renderPage = function () {
        if (this.hasRows && this.totalPages) {
            if (this.currentPage > this.totalPages) {
                this.currentPage = 1;
            }

            // Use a fragment to limit touching the DOM
            var index = this.currentPage - 1,
                frag = doc.createDocumentFragment();

            if (this.hasHeadings) {
                flush(this.header, this.isIE);

                each(this.activeHeadings, function (th) {
                    this.header.appendChild(th);
                }, this);
            }

            each(this.pages[index], function (row) {
                frag.appendChild(this.rows().render(row));
            }, this);

            this.clear(frag);

            this.onFirstPage = this.currentPage === 1;
            this.onLastPage = this.currentPage === this.lastPage;
        } else {
            this.clear();
        }

        // Update the info
        var current = 0,
            f = 0,
            t = 0,
            items;

        if (this.totalPages) {
            current = this.currentPage - 1;
            f = current * this.options.perPage;
            t = f + this.pages[current].length;
            f = f + 1;
            items = !!this.searching ? this.searchData.length : this.data.length;
        }

        if (this.label && this.options.labels.info.length) {
            // CUSTOM LABELS
            var string = this.options.labels.info
                .replace("{start}", f)
                .replace("{end}", t)
                .replace("{page}", this.currentPage)
                .replace("{pages}", this.totalPages)
                .replace("{rows}", items);

            this.label.innerHTML = items ? string : "";
        }

        if (this.options.fixedHeight && this.currentPage == 1) {
            this.fixHeight();
        }
    };

    /**
     * Render the pager(s)
     * @return {Void}
     */
    proto.renderPager = function () {
        flush(this.pagers, this.isIE);

        if (this.totalPages > 1) {
            var c = "pager",
                frag = doc.createDocumentFragment(),
                prev = this.onFirstPage ? 1 : this.currentPage - 1,
                next = this.onlastPage ? this.totalPages : this.currentPage + 1;

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, 1, this.options.firstText));
            }

            // prev button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, prev, this.options.prevText));
            }

            var pager = this.links;

            // truncate the links
            if (this.options.truncatePager) {
                pager = truncate(
                    this.links,
                    this.currentPage,
                    this.pages.length,
                    this.options.pagerDelta,
                    this.options.ellipsisText
                );
            }

            // active page link
            classList.add(this.links[this.currentPage - 1], "active");

            // append the links
            each(pager, function (p) {
                classList.remove(p, "active");
                frag.appendChild(p);
            });

            classList.add(this.links[this.currentPage - 1], "active");

            // next button
            if (this.options.nextPrev) {
                frag.appendChild(button(c, next, this.options.nextText));
            }

            // first button
            if (this.options.firstLast) {
                frag.appendChild(button(c, this.totalPages, this.options.lastText));
            }

            // We may have more than one pager
            each(this.pagers, function (pager) {
                pager.appendChild(frag.cloneNode(true));
            });
        }
    };

    /**
     * Render the header
     * @return {Void}
     */
    proto.renderHeader = function () {
        var that = this;

        that.labels = [];

        if (that.headings && that.headings.length) {
            each(that.headings, function (th, i) {

                that.labels[i] = th.textContent;

                if (classList.contains(th.firstElementChild, "dataTable-sorter")) {
                    th.innerHTML = th.firstElementChild.innerHTML;
                }

                th.sortable = th.getAttribute("data-sortable") !== "false";

                th.originalCellIndex = i;
                if (that.options.sortable && th.sortable) {
                    var link = createElement("a", {
                        href: "#",
                        class: "dataTable-sorter",
                        html: th.innerHTML
                    });

                    th.innerHTML = "";
                    th.setAttribute("data-sortable", "");
                    th.appendChild(link);
                }
            });
        }

        that.fixColumns();
    };

    /**
     * Bind event listeners
     * @return {[type]} [description]
     */
    proto.bindEvents = function () {
        var that = this,
            o = that.options;

        // Per page selector
        if (o.perPageSelect) {
            var selector = that.wrapper.querySelector(".dataTable-selector");
            if (selector) {
                // Change per page
                on(selector, "change", function (e) {
                    o.perPage = parseInt(this.value, 10);
                    that.update();

                    if (o.fixedHeight) {
                        this.fixHeight();
                    }

                    that.emit("datatable.perpage");
                });
            }
        }

        // Search input
        if (o.searchable) {
            that.input = that.wrapper.querySelector(".dataTable-input");
            if (that.input) {
                on(that.input, "keyup", function (e) {
                    that.search(this.value);
                });
            }
        }

        // Pager(s) / sorting
        on(that.wrapper, "click", function (e) {
            var t = e.target;
            if (t.nodeName.toLowerCase() === "a") {
                if (t.hasAttribute("data-page")) {
                    that.page(t.getAttribute("data-page"));
                    e.preventDefault();
                } else if (
                    o.sortable &&
                    classList.contains(t, "dataTable-sorter") &&
                    t.parentNode.getAttribute("data-sortable") != "false"
                ) {
                    that.columns().sort(that.activeHeadings.indexOf(t.parentNode) + 1);
                    e.preventDefault();
                }
            }
        });
    };

    /**
     * Set up columns
     * @return {[type]} [description]
     */
    proto.setColumns = function (ajax) {

        var that = this;

        if (!ajax) {
            each(that.data, function (row) {
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });
        }

        // Check for the columns option
        if (that.options.columns && that.headings.length) {

            each(that.options.columns, function (data) {

                // convert single column selection to array
                if (!isArray(data.select)) {
                    data.select = [data.select];
                }

                if (data.hasOwnProperty("render") && typeof data.render === "function") {
                    that.selectedColumns = that.selectedColumns.concat(data.select);

                    that.columnRenderers.push({
                        columns: data.select,
                        renderer: data.render
                    });
                }

                // Add the data attributes to the th elements
                each(data.select, function (column) {
                    var th = that.headings[column];
                    if (data.type) {
                        th.setAttribute("data-type", data.type);
                    }
                    if (data.format) {
                        th.setAttribute("data-format", data.format);
                    }
                    if (data.hasOwnProperty("sortable")) {
                        th.setAttribute("data-sortable", data.sortable);
                    }

                    if (data.hasOwnProperty("hidden")) {
                        if (data.hidden !== false) {
                            that.columns(column).hide();
                        }
                    }

                    if (data.hasOwnProperty("sort") && data.select.length === 1) {
                        that.columns().sort(data.select[0] + 1, data.sort, true);
                    }
                });
            });
        }

        if (that.hasRows) {
            each(that.data, function (row, i) {
                row.dataIndex = i;
                each(row.cells, function (cell) {
                    cell.data = cell.innerHTML;
                });
            });

            if (that.selectedColumns.length) {
                each(that.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (that.selectedColumns.indexOf(i) > -1) {
                            each(that.columnRenderers, function (o) {
                                if (o.columns.indexOf(i) > -1) {
                                    cell.innerHTML = o.renderer.call(that, cell.data, cell, row);
                                }
                            });
                        }
                    });
                });
            }

            that.columns().rebuild();
        }

        that.render("header");
    };

    /**
     * Destroy the instance
     * @return {void}
     */
    proto.destroy = function () {
        this.table.innerHTML = this.initialLayout;

        // Remove the className
        classList.remove(this.table, "dataTable-table");

        // Remove the containers
        this.wrapper.parentNode.replaceChild(this.table, this.wrapper);

        this.initialized = false;
    };

    /**
     * Update the instance
     * @return {Void}
     */
    proto.update = function () {
        this.paginate(this);
        this.render("page");

        this.links = [];

        var i = this.pages.length;
        while (i--) {
            var num = i + 1;
            this.links[i] = button(i === 0 ? "active" : "", num, num);
        }

        this.sorting = false;

        this.render("pager");

        this.rows().update();

        this.emit("datatable.update");
    };

    /**
     * Sort rows into pages
     * @return {Number}
     */
    proto.paginate = function () {
        var perPage = this.options.perPage,
            rows = this.activeRows;

        if (this.searching) {
            rows = [];

            each(this.searchData, function (index) {
                rows.push(this.activeRows[index]);
            }, this);
        }

        // Check for hidden columns
        this.pages = rows
            .map(function (tr, i) {
                return i % perPage === 0 ? rows.slice(i, i + perPage) : null;
            })
            .filter(function (page) {
                return page;
            });

        this.totalPages = this.lastPage = this.pages.length;

        return this.totalPages;
    };

    /**
     * Fix column widths
     * @return {Void}
     */
    proto.fixColumns = function () {

        if (this.options.fixedColumns && this.activeHeadings && this.activeHeadings.length) {

            var cells,
                hd = false;

            this.columnWidths = [];

            // If we have headings we need only set the widths on them
            // otherwise we need a temp header and the widths need applying to all cells
            if (this.table.tHead) {
                // Reset widths
                each(this.activeHeadings, function (cell) {
                    cell.style.width = "";
                }, this);

                each(this.activeHeadings, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    cell.style.width = w + "%";
                    this.columnWidths[i] = ow;
                }, this);
            } else {
                cells = [];

                // Make temperary headings
                hd = createElement("thead");
                var r = createElement("tr");
                var c = this.table.tBodies[0].rows[0].cells;
                each(c, function () {
                    var th = createElement("th");
                    r.appendChild(th);
                    cells.push(th);
                });

                hd.appendChild(r);
                this.table.insertBefore(hd, this.body);

                var widths = [];
                each(cells, function (cell, i) {
                    var ow = cell.offsetWidth;
                    var w = ow / this.rect.width * 100;
                    widths.push(w);
                    this.columnWidths[i] = ow;
                }, this);

                each(this.data, function (row) {
                    each(row.cells, function (cell, i) {
                        if (this.columns(cell.cellIndex).visible())
                            cell.style.width = widths[i] + "%";
                    }, this);
                }, this);

                // Discard the temp header
                this.table.removeChild(hd);
            }
        }
    };

    /**
     * Fix the container height;
     * @return {Void}
     */
    proto.fixHeight = function () {
        this.container.style.height = null;
        this.rect = this.container.getBoundingClientRect();
        this.container.style.height = this.rect.height + "px";
    };

    /**
     * Perform a search of the data set
     * @param  {string} query
     * @return {void}
     */
    proto.search = function (query) {
        if (!this.hasRows) return false;

        var that = this;

        query = query.toLowerCase();

        this.currentPage = 1;
        this.searching = true;
        this.searchData = [];

        if (!query.length) {
            this.searching = false;
            this.update();
            this.emit("datatable.search", query, this.searchData);
            classList.remove(this.wrapper, "search-results");
            return false;
        }

        this.clear();

        each(this.data, function (row, idx) {
            var inArray = this.searchData.indexOf(row) > -1;

            // https://github.com/Mobius1/Vanilla-DataTables/issues/12
            var doesQueryMatch = query.split(" ").reduce(function (bool, word) {
                var includes = false;

                for (var x = 0; x < row.cells.length; x++) {
                    if (
                        row.cells[x].textContent.toLowerCase().indexOf(word) > -1 &&
                        that.columns(row.cells[x].cellIndex).visible()
                    ) {
                        includes = true;
                        break;
                    }
                }

                return bool && includes;
            }, true);

            if (doesQueryMatch && !inArray) {
                row.searchIndex = idx;
                this.searchData.push(idx);
            } else {
                row.searchIndex = null;
            }
        }, this);

        classList.add(this.wrapper, "search-results");

        if (!that.searchData.length) {
            classList.remove(that.wrapper, "search-results");

            that.setMessage(that.options.labels.noRows);
        } else {
            that.update();
        }

        this.emit("datatable.search", query, this.searchData);
    };

    /**
     * Change page
     * @param  {int} page
     * @return {void}
     */
    proto.page = function (page) {
        // We don't want to load the current page again.
        if (page == this.currentPage) {
            return false;
        }

        if (!isNaN(page)) {
            this.currentPage = parseInt(page, 10);
        }

        if (page > this.pages.length || page < 0) {
            return false;
        }

        this.render("page");
        this.render("pager");

        this.emit("datatable.page", page);
    };

    /**
     * Sort by column
     * @param  {int} column - The column no.
     * @param  {string} direction - asc or desc
     * @return {void}
     */
    proto.sortColumn = function (column, direction) {
        // Use columns API until sortColumn method is removed
        this.columns().sort(column, direction);
    };

    /**
     * Add new row data
     * @param {object} data
     */
    proto.insert = function (data) {

        var that = this,
            rows = [];
        if (isObject(data)) {
            if (data.headings) {
                if (!that.hasHeadings && !that.hasRows) {
                    var tr = createElement("tr"),
                        th;
                    each(data.headings, function (heading) {
                        th = createElement("th", {
                            html: heading
                        });

                        tr.appendChild(th);
                    });
                    that.head.appendChild(tr);

                    that.header = tr;
                    that.headings = [].slice.call(tr.cells);
                    that.hasHeadings = true;

                    // Re-enable sorting if it was disabled due
                    // to missing header
                    that.options.sortable = that.initialSortable;

                    // Allow sorting on new header
                    that.render("header");
                }
            }

            if (data.data && isArray(data.data)) {
                rows = data.data;
            }
        } else if (isArray(data)) {
            each(data, function (row) {
                var r = [];
                each(row, function (cell, heading) {

                    var index = that.labels.indexOf(heading);

                    if (index > -1) {
                        r[index] = cell;
                    }
                });
                rows.push(r);
            });
        }

        if (rows.length) {
            that.rows().add(rows);

            that.hasRows = true;
        }

        that.update();

        that.fixColumns();
    };

    /**
     * Refresh the instance
     * @return {void}
     */
    proto.refresh = function () {
        if (this.options.searchable) {
            this.input.value = "";
            this.searching = false;
        }
        this.currentPage = 1;
        this.onFirstPage = true;
        this.update();

        this.emit("datatable.refresh");
    };

    /**
     * Truncate the table
     * @param  {mixes} html - HTML string or HTMLElement
     * @return {void}
     */
    proto.clear = function (html) {
        if (this.body) {
            flush(this.body, this.isIE);
        }

        var parent = this.body;
        if (!this.body) {
            parent = this.table;
        }

        if (html) {
            if (typeof html === "string") {
                var frag = doc.createDocumentFragment();
                frag.innerHTML = html;
            }

            parent.appendChild(html);
        }
    };

    /**
     * Export table to various formats (csv, txt or sql)
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.export = function (options) {
        if (!this.hasHeadings && !this.hasRows) return false;

        var headers = this.activeHeadings,
            rows = [],
            arr = [],
            i,
            x,
            str,
            link;

        var defaults = {
            download: true,
            skipColumn: [],

            // csv
            lineDelimiter: "\n",
            columnDelimiter: ",",

            // sql
            tableName: "myTable",

            // json
            replacer: null,
            space: 4
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        var o = extend(defaults, options);

        if (o.type) {
            if (o.type === "txt" || o.type === "csv") {
                // Include headings
                rows[0] = this.header;
            }

            // Selection or whole table
            if (o.selection) {
                // Page number
                if (!isNaN(o.selection)) {
                    rows = rows.concat(this.pages[o.selection - 1]);
                } else if (isArray(o.selection)) {
                    // Array of page numbers
                    for (i = 0; i < o.selection.length; i++) {
                        rows = rows.concat(this.pages[o.selection[i] - 1]);
                    }
                }
            } else {
                rows = rows.concat(this.activeRows);
            }

            // Only proceed if we have data
            if (rows.length) {
                if (o.type === "txt" || o.type === "csv") {
                    str = "";

                    for (i = 0; i < rows.length; i++) {
                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += rows[i].cells[x].textContent + o.columnDelimiter;
                            }
                        }
                        // Remove trailing column delimiter
                        str = str.trim().substring(0, str.length - 1);

                        // Apply line delimiter
                        str += o.lineDelimiter;
                    }

                    // Remove trailing line delimiter
                    str = str.trim().substring(0, str.length - 1);

                    if (o.download) {
                        str = "data:text/csv;charset=utf-8," + str;
                    }
                } else if (o.type === "sql") {
                    // Begin INSERT statement
                    str = "INSERT INTO `" + o.tableName + "` (";

                    // Convert table headings to column names
                    for (i = 0; i < headers.length; i++) {
                        // Check for column skip and column visibility
                        if (
                            o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                            this.columns(headers[i].originalCellIndex).visible()
                        ) {
                            str += "`" + headers[i].textContent + "`,";
                        }
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Begin VALUES
                    str += ") VALUES ";

                    // Iterate rows and convert cell data to column values
                    for (i = 0; i < rows.length; i++) {
                        str += "(";

                        for (x = 0; x < rows[i].cells.length; x++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[x].originalCellIndex) < 0 &&
                                this.columns(headers[x].originalCellIndex).visible()
                            ) {
                                str += '"' + rows[i].cells[x].textContent + '",';
                            }
                        }

                        // Remove trailing comma
                        str = str.trim().substring(0, str.length - 1);

                        // end VALUES
                        str += "),";
                    }

                    // Remove trailing comma
                    str = str.trim().substring(0, str.length - 1);

                    // Add trailing colon
                    str += ";";

                    if (o.download) {
                        str = "data:application/sql;charset=utf-8," + str;
                    }
                } else if (o.type === "json") {
                    // Iterate rows
                    for (x = 0; x < rows.length; x++) {
                        arr[x] = arr[x] || {};
                        // Iterate columns
                        for (i = 0; i < headers.length; i++) {
                            // Check for column skip and column visibility
                            if (
                                o.skipColumn.indexOf(headers[i].originalCellIndex) < 0 &&
                                this.columns(headers[i].originalCellIndex).visible()
                            ) {
                                arr[x][headers[i].textContent] = rows[x].cells[i].textContent;
                            }
                        }
                    }

                    // Convert the array of objects to JSON string
                    str = JSON.stringify(arr, o.replacer, o.space);

                    if (o.download) {
                        str = "data:application/json;charset=utf-8," + str;
                    }
                }

                // Download
                if (o.download) {
                    // Filename
                    o.filename = o.filename || "datatable_export";
                    o.filename += "." + o.type;

                    str = encodeURI(str);

                    // Create a link to trigger the download
                    link = document.createElement("a");
                    link.href = str;
                    link.download = o.filename;

                    // Append the link
                    body.appendChild(link);

                    // Trigger the download
                    link.click();

                    // Remove the link
                    body.removeChild(link);
                }

                return str;
            }
        }

        return false;
    };

    /**
     * Import data to the table
     * @param  {Object} options User options
     * @return {Boolean}
     */
    proto.import = function (options) {
        var obj = false;
        var defaults = {
            // csv
            lineDelimiter: "\n",
            columnDelimiter: ","
        };

        // Check for the options object
        if (!isObject(options)) {
            return false;
        }

        options = extend(defaults, options);

        if (options.data.length || isObject(options.data)) {
            // Import CSV
            if (options.type === "csv") {
                obj = {
                    data: []
                };

                // Split the string into rows
                var rows = options.data.split(options.lineDelimiter);

                if (rows.length) {

                    if (options.headings) {
                        obj.headings = rows[0].split(options.columnDelimiter);

                        rows.shift();
                    }

                    each(rows, function (row, i) {
                        obj.data[i] = [];

                        // Split the rows into values
                        var values = row.split(options.columnDelimiter);

                        if (values.length) {
                            each(values, function (value) {
                                obj.data[i].push(value);
                            });
                        }
                    });
                }
            } else if (options.type === "json") {
                var json = isJson(options.data);

                // Valid JSON string
                if (json) {
                    obj = {
                        headings: [],
                        data: []
                    };

                    each(json, function (data, i) {
                        obj.data[i] = [];
                        each(data, function (value, column) {
                            if (obj.headings.indexOf(column) < 0) {
                                obj.headings.push(column);
                            }

                            obj.data[i].push(value);
                        });
                    });
                } else {
                    console.warn("That's not valid JSON!");
                }
            }

            if (isObject(options.data)) {
                obj = options.data;
            }

            if (obj) {
                // Add the rows
                this.insert(obj);
            }
        }

        return false;
    };
    /**
     * Print the table
     * @return {void}
     */
    proto.print = function () {
        var headings = this.activeHeadings;
        var rows = this.activeRows;
        var table = createElement("table");
        var thead = createElement("thead");
        var tbody = createElement("tbody");

        var tr = createElement("tr");
        each(headings, function (th) {
            tr.appendChild(
                createElement("th", {
                    html: th.textContent
                })
            );
        });

        thead.appendChild(tr);

        each(rows, function (row) {
            var tr = createElement("tr");
            each(row.cells, function (cell) {
                tr.appendChild(
                    createElement("td", {
                        html: cell.textContent
                    })
                );
            });
            tbody.appendChild(tr);
        });

        table.appendChild(thead);
        table.appendChild(tbody);

        // Open new window
        var w = win.open();

        // Append the table to the body
        w.document.body.appendChild(table);

        // Print
        w.print();
    };

    /**
     * Show a message in the table
     * @param {string} message
     */
    proto.setMessage = function (message) {
        var colspan = 1;

        if (this.hasRows) {
            colspan = this.data[0].cells.length;
        }

        this.clear(
            createElement("tr", {
                html: '<td class="dataTables-empty" colspan="' +
                    colspan +
                    '">' +
                    message +
                    "</td>"
            })
        );
    };

    /**
     * Columns API access
     * @return {Object} new Columns instance
     */
    proto.columns = function (columns) {
        return new Columns(this, columns);
    };

    /**
     * Rows API access
     * @return {Object} new Rows instance
     */
    proto.rows = function (rows) {
        return new Rows(this, rows);
    };

    /**
     * Add custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.on = function (event, callback) {
        this.events = this.events || {};
        this.events[event] = this.events[event] || [];
        this.events[event].push(callback);
    };

    /**
     * Remove custom event listener
     * @param  {String} event
     * @param  {Function} callback
     * @return {Void}
     */
    proto.off = function (event, callback) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        this.events[event].splice(this.events[event].indexOf(callback), 1);
    };

    /**
     * Fire custom event
     * @param  {String} event
     * @return {Void}
     */
    proto.emit = function (event) {
        this.events = this.events || {};
        if (event in this.events === false) return;
        for (var i = 0; i < this.events[event].length; i++) {
            this.events[event][i].apply(this, Array.prototype.slice.call(arguments, 1));
        }
    };

    return DataTable;
});
});

function createTableDOM(data, opts, config) {
  var num = config.num,
      denum = config.denum,
      ratio = config.ratio,
      my_region = config.my_region;

  var options = opts || {};
  options.id = options.id || 'myTable';
  var doc = document;
  var nb_features = data.length;
  var column_names = Object.getOwnPropertyNames(data[0]);
  var nb_columns = column_names.length;
  var myTable = doc.createElement('table');
  var headers = doc.createElement('thead');
  var body = doc.createElement('tbody');
  var headers_row = doc.createElement('tr');
  for (var i = 0; i < nb_columns; i++) {
    var cell = doc.createElement('th');
    var col_name = column_names[i];
    if (num.indexOf(col_name) > -1) {
      cell.innerHTML = 'Num<br><span class="small">' + col_name;
    } else if (denum.indexOf(col_name) > -1) {
      cell.innerHTML = 'Denum<br><span class="small">' + col_name;
    } else if (ratio.indexOf(col_name) > -1) {
      cell.innerHTML = 'Ratio<br><span class="small">' + col_name;
    } else if (col_name === 'rang') {
      cell.innerHTML = 'Rang ';
    } else {
      cell.innerHTML = col_name;
    }
    headers_row.appendChild(cell);
  }
  headers.appendChild(headers_row);
  myTable.appendChild(headers);
  for (var _i = 0; _i < nb_features; _i++) {
    var row = doc.createElement('tr');
    row.id = 'row_' + data[_i].id;
    if (data[_i].id === my_region) {
      row.className = color_highlight;
    }
    for (var j = 0; j < nb_columns; j++) {
      var _cell = doc.createElement('td');
      var _col_name = column_names[j];
      if (_col_name === 'num' || _col_name === 'denum' || _col_name === 'ratio') {
        _cell.innerHTML = Math.round(data[_i][_col_name] * 100) / 10;
      } else {
        _cell.innerHTML = data[_i][_col_name];
      }
      row.appendChild(_cell);
    }
    body.appendChild(row);
  }
  myTable.appendChild(body);
  myTable.setAttribute('id', options.id);
  return myTable;
}

function makeTable(data_no_empty, config) {
  d3.select('.dataTable-wrapper').remove();
  var table = createTableDOM(data_no_empty, undefined, config);
  document.querySelector('#map_section').appendChild(table);
  var dataTable = new vanillaDataTables('#myTable');
  var t = document.querySelector('.dataTable-wrapper');
  t.style.marginTop = '20px';
  t.style.display = 'none';
  t.style.fontSize = '0.7em';
  t.querySelector('.dataTable-top').remove();
  Array.prototype.slice.call(t.querySelectorAll('span.small')).forEach(function (el) {
    el.onclick = function () {
      el.parentElement.click();
    }; // eslint-disable-line no-param-reassign
  });
}

function prepare_dataset(full_dataset, app$$1) {
  app$$1.full_dataset = full_dataset;
  // Create an Object feature_id ->  feature_name for easier lookup:
  app$$1.feature_names = {};
  full_dataset.forEach(function (elem) {
    app$$1.feature_names[elem.geo] = elem.Nom;
  });
}

/**
* Attach the full_dataset Array to the app Object and create a dictionnary
* allowing to obtain territorial units name from their Id.
*
* @param {Object} app - The variable containing the global parameters about
*   the current state of the application.
* @return {Array} - The filtered data, containing only the requested variables
*   for the feature of the current study zone,
*    without features containing empty ratios.
*
*/
function filter_no_empty(app$$1, filter_id) {
  // Fetch the name(s) of the ratio (and associated num and denum variable),
  // the name of the targeted region and the current level :
  var _app$current_config = app$$1.current_config,
      num = _app$current_config.num,
      denum = _app$current_config.denum,
      ratio = _app$current_config.ratio,
      current_level = _app$current_config.current_level,
      id_field = _app$current_config.id_field,
      filter = _app$current_config.filter,
      name_field = _app$current_config.name_field;


  var all_variables = ratio.concat(num).concat(denum);

  // Prepare the data:
  var temp = void 0;
  if (filter_id) {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && filter_id.indexOf(ft[id_field]) > -1;
    });
  } else if (filter) {
    var key = filter.key,
        value = filter.value;

    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level && ft[key] === value;
    });
  } else {
    temp = app$$1.full_dataset.filter(function (ft) {
      return +ft.level === current_level;
    });
  }
  temp = temp.map(function (ft) {
    var props_feature = {
      id: ft[id_field],
      name: ft[name_field]
    };
    for (var i = 0, len_i = all_variables.length; i < len_i; i++) {
      props_feature[all_variables[i]] = +ft[all_variables[i]];
    }
    return props_feature;
  });

  // Filter data for empty values :
  var filtered_data = temp.filter(function (ft) {
    return ratio.map(function (v) {
      return !!ft[v];
    }).every(function (v) {
      return v === true;
    });
  });

  //
  app$$1.current_data = filtered_data;
  // Store the ids and the ranks of the current features in two arrays for easier acces:
  app$$1.current_ids = filtered_data.map(function (d) {
    return d.id;
  });

  // Compute the ratio of available values ("complétude") within
  // the study zone selected by the user:
  app$$1.completude = math_round(filtered_data.length / temp.length * 1000) / 10;
  // return filtered_data;
}

/**
* Set and apply a new filter (ie. restrict the study zone) on the dataset to be used.
*
* @param {String} filter_type - The name of the filter to use.
* @return {void}
*
*/
function applyFilter(app$$1, filter_type) {
  if (filter_type === 'filter_FR') {
    app$$1.current_config.filter = { key: 'PAYS', value: 'FR' };
    filter_no_empty(app$$1);
  } else if (filter_type === 'no_filter') {
    app$$1.current_config.filter = null;
    filter_no_empty(app$$1);
  } else {
    app$$1.current_config.filter = { key: 'type_test', value: '3' };
    filter_no_empty(app$$1);
    var maybe_my_region = app$$1.current_data.filter(function (d) {
      return d.id === app$$1.current_config.my_region;
    })[0];
    if (maybe_my_region === undefined) {
      app$$1.current_data.push(app$$1.full_dataset.filter(function (d) {
        return d.geo === app$$1.current_config.my_region;
      })[0]);
      app$$1.current_ids = app$$1.current_data.map(function (d) {
        return d.id;
      });
    }
  }

  // if (!app.serie_inversed) {
  //   app.current_data.sort((a, b) => a.ratio - b.ratio);
  // } else {
  //   app.current_data.sort((a, b) => b.ratio - a.ratio);
  // }
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
}

// TODO : Doc
function changeRegion(app$$1, id_region) {
  app$$1.current_config.my_region = id_region;
  app$$1.current_config.my_region_pretty_name = app$$1.feature_names[app$$1.current_config.my_region];
  // Reset the color to use on the chart/map:
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  // app.current_data = filter_no_empty(app);
  // Change the reference ratio value:

  // app.current_config.ref_value = app.current_data
  //   .filter(d => d.id === app.current_config.my_region)
  //   .map(d => d.ratio)[0];
}

function addVariable(app$$1, code_ratio) {
  var variable_info = variables.filter(function (d) {
    return d.ratio === code_ratio;
  })[0];
  app$$1.colors = {};
  app$$1.colors[app$$1.current_config.my_region] = color_highlight;
  app$$1.current_config.num.push(variable_info.num);
  app$$1.current_config.denum.push(variable_info.denum);
  app$$1.current_config.ratio.push(variable_info.ratio);
  app$$1.current_config.ratio_pretty_name.push(variable_info.name);
  filter_no_empty(app$$1);
}

function removeVariable(app$$1, code_ratio) {
  var ix = app$$1.current_config.ratio.indexOf(code_ratio);
  app$$1.current_config.num.splice(ix, 1);
  app$$1.current_config.denum.splice(ix, 1);
  app$$1.current_config.ratio.splice(ix, 1);
  app$$1.current_config.ratio_pretty_name.splice(ix, 1);
  filter_no_empty(app$$1);
}

/* eslint-enable no-param-reassign */

var svg_map = d3.select('svg#svg_map');
var margin_map = { top: 0, right: 0, bottom: 0, left: 0 };
var width_map = +svg_map.attr('width') - margin_map.left - margin_map.right;
var height_map = +svg_map.attr('height') - margin_map.top - margin_map.bottom;

var styles = {
  template: { id: 'template', fill: 'rgb(247, 252, 254)', 'fill-opacity': 1 },
  countries: { id: 'countries', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes: { id: 'seaboxes', fill: '#e0faff', 'fill-opacity': 1, stroke: 'black', 'stroke-width': 0.2 },
  remote: { id: 'remote', fill: 'rgb(214, 214, 214)', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' },
  seaboxes2: { id: 'seaboxes2', fill: 'none', stroke: 'black', 'stroke-width': 0.8 },
  nuts1: { id: 'nuts1', 'fill-opacity': 1, 'stroke-width': 0.5, stroke: '#ffffff' }
};

var projection = void 0;
var path = void 0;

function get_bbox_layer_path(name) {
  var bbox_layer = [[Infinity, Infinity], [-Infinity, -Infinity]];
  svg_map.select('#' + name).selectAll('path').each(function (d) {
    var bbox_path = path.bounds(d.geometry);
    bbox_layer[0][0] = bbox_path[0][0] < bbox_layer[0][0] ? bbox_path[0][0] : bbox_layer[0][0];
    bbox_layer[0][1] = bbox_path[0][1] < bbox_layer[0][1] ? bbox_path[0][1] : bbox_layer[0][1];
    bbox_layer[1][0] = bbox_path[1][0] > bbox_layer[1][0] ? bbox_path[1][0] : bbox_layer[1][0];
    bbox_layer[1][1] = bbox_path[1][1] > bbox_layer[1][1] ? bbox_path[1][1] : bbox_layer[1][1];
  });
  return bbox_layer;
}

function fitLayer() {
  projection.scale(1).translate([0, 0]);
  var b = get_bbox_layer_path('template');
  var s = 1 / Math.max((b[1][0] - b[0][0]) / width_map, (b[1][1] - b[0][1]) / height_map);
  var t = [(width_map - s * (b[1][0] + b[0][0])) / 2, (height_map - s * (b[1][1] + b[0][1])) / 2];
  projection.scale(s).translate(t);
  svg_map.selectAll('path').attr('d', path);
}

function map_zoomed() {
  var transform = d3.event.transform;
  if (transform.k === 1) {
    transform.x = 0;
    transform.y = 0;
  }
  var layers = svg_map.select('#layers');
  var t = layers.selectAll('g').transition().duration(225);

  layers.selectAll('g').transition(t).style('stroke-width', function () {
    return styles[this.id]['stroke-width'] / transform.k + 'px';
  });

  layers.selectAll('g').transition(t).attr('transform', transform);

  svg_map.select('.brush_map').transition(t).attr('transform', transform);
}

var MapSelect = function () {
  function MapSelect(nuts1, countries, remote, template, seaboxes) {
    classCallCheck(this, MapSelect);

    projection = d3.geoIdentity().fitExtent([[0, 0], [width_map, height_map]], template).reflectY(true);

    path = d3.geoPath().projection(projection);
    var layers = svg_map.append('g').attr('id', 'layers');

    this.zoom_map = d3.zoom().scaleExtent([1, 5]).translateExtent([[0, 0], [width_map, height_map]]).on('zoom', map_zoomed);

    svg_map.call(this.zoom_map);

    layers.append('g').attrs(styles.template).selectAll('path').data(template.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.countries).attr('id', 'countries').selectAll('path').data(countries.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.remote).selectAll('path').data(remote.features).enter().append('path').attrs({ d: path });

    layers.append('g').attrs(styles.seaboxes2).selectAll('path').data(seaboxes.features).enter().append('path').attrs({ d: path });

    this.target_layer = layers.append('g').attrs(styles.nuts1);
    this.target_layer.selectAll('path').data(nuts1.features).enter().append('path').attr('fill', function (d) {
      return d.properties[app.current_config.id_field_geom] !== app.current_config.my_region ? color_countries : color_highlight;
    }).attr('d', path);
    app.type_path = getSvgPathType(this.target_layer.select('path').node().getAttribute('d'));
    fitLayer();
    prepareTooltip(svg_map);
    this.bindTooltip();
  }

  createClass(MapSelect, [{
    key: 'resetColors',
    value: function resetColors() {
      var id_field_geom = app.current_config.id_field_geom;
      this.target_layer.selectAll('path').attr('fill', function (d) {
        return app.current_ids.indexOf(d.properties[id_field_geom]) > -1 ? app.colors[d.properties[id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'bindTooltip',
    value: function bindTooltip() {
      this.target_layer.selectAll('path').on('mouseover', function () {
        svg_map.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_map.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_map.select('.tooltip');
        tooltip.select('text.id_feature').text('' + d.properties[app.current_config.id_field_geom]);
        var _ix = void 0,
            nb_val = void 0;
        for (_ix = 0, nb_val = Math.min(app.current_config.ratio.length, 5); _ix < nb_val; _ix++) {
          tooltip.select('text.value_feature' + (_ix + 1)).text(app.current_config.ratio_pretty_name[_ix] + ': ' + math_round(d.properties[app.current_config.ratio[_ix]] * 10) / 10);
        }
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45 - _ix * 12] + ')');
      });
    }
  }, {
    key: 'resetZoom',
    value: function resetZoom() {
      svg_map.transition().duration(250).call(this.zoom_map.transform, d3.zoomIdentity);
    }
  }, {
    key: 'updateLegend',
    value: function updateLegend() {
      d3.select('#svg_legend > g > .legend > text').text('Ma r\xE9gion : ' + app.current_config.my_region_pretty_name);
    }
  }, {
    key: 'removeRectBrush',
    value: function removeRectBrush() {
      svg_map.select('.brush_map').call(this.brush_map.move, null);
    }
  }, {
    key: 'bindBrush',
    value: function bindBrush(chart) {
      this.brush_map = d3.brush().extent([[0, 0], [width_map, height_map]]).on('start brush', function () {
        if (!d3.event || !d3.event.selection) return;
        chart.handle_brush_map(d3.event);
      });
      svg_map.append('g').attr('class', 'brush_map').call(this.brush_map);
    }
  }, {
    key: 'unbindBrush',
    value: function unbindBrush() {
      this.brush_map = null;
      svg_map.select('.brush_map').remove();
    }
  }]);
  return MapSelect;
}();

function makeSourceSection() {
  var text_zone = d3.select('#svg_legend').append('text').attrs({ y: 32.5, 'text-anchor': 'end' }).style('font-size', '11px').style('font-family', '\'Signika\', sans-serif');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Niveau régional : NUTS 1 (version 2016)');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Origine des données : Eurostat, 2016');
  text_zone.append('tspan').attrs({ x: 470, dy: 12 }).text('Limite administrative: UMS RIATE, CC-BY-SA');
}

function makeMapLegend() {
  var legend_elems = [{ color: color_highlight, text: 'Ma r\xE9gion : ' + app.current_config.my_region_pretty_name }, { color: color_countries, text: 'Autres régions du filtre de comparaison' }, { color: color_sup, text: 'Rang plus élevé que ma région' }, { color: color_inf, text: 'Rang moins élevé que ma région' }];

  var rect_size = 14;
  var spacing = 4;
  var lgd_height = rect_size + spacing;
  var offset = lgd_height * legend_elems.length / 2;

  var grp_lgd = d3.select('#svg_legend').append('g').attr('transform', 'translate(50, 40)').styles({ 'font-size': '11px', 'font-family': '\'Signika\', sans-serif' });

  var legends = grp_lgd.selectAll('.legend').data(legend_elems).enter().append('g').attr('class', 'legend').attr('transform', function (d, i) {
    var tx = -2 * rect_size;
    var ty = i * lgd_height - offset;
    return 'translate(' + [tx, ty] + ')';
  });

  legends.append('rect').attrs({ width: rect_size, height: rect_size }).styles(function (d) {
    return { fill: d.color, stroke: d.color };
  });

  legends.append('text').attrs({ x: rect_size + spacing, y: rect_size - spacing }).text(function (d) {
    return d.text;
  });
}

var svg_bar = d3.select('svg#svg_bar');
var margin = { top: 10, right: 20, bottom: 100, left: 40 };
var margin2 = { top: 430, right: 20, bottom: 15, left: 40 };
var width = +svg_bar.attr('width') - margin.left - margin.right;
var height = +svg_bar.attr('height') - margin.top - margin.bottom;
var height2 = +svg_bar.attr('height') - margin2.top - margin2.bottom;

var nbFt = void 0;
var current_range_brush = [0, 0];
var current_range = [0, 0];
var displayed = void 0;

function getMeanRank(mean_value, ratio_to_use) {
  var mean_rank = app.current_data.map(function (d, i) {
    return [d[ratio_to_use], math_abs(mean_value - d[ratio_to_use]), i];
  });
  mean_rank.sort(function (a, b) {
    return a[1] - b[1];
  });
  mean_rank = mean_rank[0];
  if (mean_rank[1] > mean_value) {
    mean_rank = mean_rank[2] - 1;
  } else {
    mean_rank = mean_rank[2];
  }
  return mean_rank;
}

var BarChart1 = function () {
  function BarChart1(ref_data) {
    var _this = this;

    classCallCheck(this, BarChart1);

    this.brushed = function () {
      if (d3.event.sourceEvent && d3.event.sourceEvent.type === 'zoom') return; // ignore brush-by-zoom
      if (!_this.x) {
        console.log('a');return;
      }
      var s = d3.event.selection || _this.x2.range();
      current_range = [math_round(s[0] / (width / nbFt)), math_round(s[1] / (width / nbFt))];
      _this.x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      svg_bar.select('.zoom').call(_this.zoom.transform, d3.zoomIdentity.scale(width / (current_range[1] - current_range[0])).translate(-current_range[0], 0));
      _this.update();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(_this.brush_top.move, null);
      _this.brushed_top();
    };

    this.brushed_top = function () {
      if (!_this._focus) {
        console.log('b');return;
      }
      if (!_this.map_elem) {
        console.log('c');return;
      }
      var d3_event = d3.event;
      var ratio_to_use = _this.ratio_to_use;
      var ref_value = _this.ref_value;
      if (d3_event && d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.target === document.querySelector('.brush_top > rect.overlay')) {
        _this.map_elem.removeRectBrush();
        var s = d3_event.selection;
        current_range_brush = [current_range[0] + math_round(s[0] / (width / displayed)) - 1, current_range[0] + math_round(s[1] / (width / displayed))];
        _this.x.domain(_this.data.slice(current_range_brush[0] + 1, current_range_brush[1]).map(function (ft) {
          return ft.id;
        }));
        app.colors = {};
        _this._focus.selectAll('.bar').style('fill', function (d, i) {
          if (d.id === app.current_config.my_region) {
            app.colors[d.id] = color_highlight;
            return color_highlight;
          } else if (i > current_range_brush[0] && i < current_range_brush[1]) {
            var color = comp(d[ratio_to_use], ref_value, _this.serie_inversed);
            app.colors[d.id] = color;
            return color;
          }
          return color_countries;
        });
        _this.updateMapRegio();
      } else {
        if (d3_event && !d3_event.selection && d3_event.sourceEvent && d3_event.sourceEvent.detail !== undefined) {
          _this.map_elem.removeRectBrush();
          app.colors = {};
          app.colors[app.current_config.my_region] = color_highlight;
          _this.updateMapRegio();
        }
        _this._focus.selectAll('.bar').style('fill', function (d) {
          return app.colors[d.id] || color_countries;
        });
      }
    };
    var x = d3.scaleBand().range([0, width]).padding(0.1),
        x2 = d3.scaleBand().range([0, width]).padding(0.1),
        y = d3.scaleLinear().range([height, 0]),
        y2 = d3.scaleLinear().range([height2, 0]);

    var xAxis = d3.axisBottom(x);
    var xAxis2 = d3.axisBottom(x2);
    var yAxis = d3.axisLeft(y);

    this.x = x;
    this.x2 = x2;
    this.y = y;
    this.y2 = y2;
    this.xAxis = xAxis;
    this.yAxis = yAxis;
    this.xAxis2 = xAxis2;
    var self = this;
    var available_ratios = app.current_config.ratio;
    var ratio_to_use = available_ratios[0];
    this.ratio_to_use = ratio_to_use;

    this.data = ref_data.slice();
    this.data.sort(function (a, b) {
      return a[ratio_to_use] - b[ratio_to_use];
    });
    // app.current_ids = data.map(d => d.id);
    this.current_ranks = this.data.map(function (d, i) {
      return i + 1;
    });
    nbFt = this.data.length;
    this.mean_value = d3.mean(this.data.map(function (d) {
      return d[ratio_to_use];
    }));
    this.ref_value = this.data.filter(function (ft) {
      return ft.id === app.current_config.my_region;
    })[0][ratio_to_use];
    svg_bar.append('defs').append('clipPath').attr('id', 'clip').append('rect').attrs({ width: width, height: height });

    var focus = svg_bar.append('g').attrs({
      class: 'focus',
      transform: 'translate(' + margin.left + ', ' + margin.top + ')'
    });

    var context = svg_bar.append('g').attrs({
      class: 'context',
      transform: 'translate(' + margin2.left + ', ' + margin2.top + ')'
    });

    this._focus = focus;
    this.context = context;

    x.domain(this.data.map(function (ft) {
      return ft.id;
    }));
    y.domain([d3.min(this.data, function (d) {
      return d[ratio_to_use];
    }) - 2, d3.max(this.data, function (d) {
      return d[ratio_to_use];
    })]);
    x2.domain(x.domain());
    y2.domain(y.domain());

    var brush_bottom = d3.brushX().extent([[0, 0], [width, height2]]).on('brush end', this.brushed);

    var brush_top = d3.brushX().extent([[0, 0], [width, height]]).on('brush end', this.brushed_top);

    var zoom = d3.zoom().scaleExtent([1, Infinity]).translateExtent([[0, 0], [width, height]]).extent([[0, 0], [width, height]]);
    // .on("zoom", zoomed);
    this.brush_top = brush_top;
    this.brush_bottom = brush_bottom;
    this.zoom = zoom;

    focus.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height + ')' }).call(xAxis);

    focus.select('.axis--x').selectAll('text').style('text-anchor', 'end').attrs({ dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' });

    focus.append('g').attr('class', 'axis axis--y').call(yAxis);

    this.g_bar = focus.append('g');

    var groupe_line_mean = focus.append('g').attr('class', 'mean');
    groupe_line_mean.append('text').attrs({ x: 60, y: y(this.mean_value) + 20 }).styles({
      display: 'none',
      fill: 'red',
      'fill-opacity': '0.8',
      'font-family': '\'Signika\', sans-serif'
    }).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);

    groupe_line_mean.append('line').attrs({
      x1: 0,
      x2: width,
      y1: y(this.mean_value),
      y2: y(this.mean_value),
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px',
      class: 'mean_line'
    }).style('stroke', 'red');

    groupe_line_mean.append('line').attrs({ x1: 0, x2: width, y1: y(this.mean_value), y2: y(this.mean_value), 'stroke-width': '14px', class: 'transp_mean_line' }).style('stroke', 'transparent').on('mouseover', function () {
      groupe_line_mean.select('text').style('display', 'initial');
    }).on('mouseout', function () {
      groupe_line_mean.select('text').style('display', 'none');
    });

    this.updateMiniBars();

    context.append('g').attr('class', 'brush_bottom').call(brush_bottom).call(brush_bottom.move, x.range());

    focus.append('g').attr('class', 'brush_top').call(brush_top).call(brush_top.move, null);

    this.completude = svg_bar.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + app.completude + '%');

    svg_bar.append('image').attrs({
      x: width + margin.left + 5,
      y: 385,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_blue.png',
      id: 'img_reverse'
    }).on('click', function () {
      // this.data = app.current_data.slice();
      if (!_this.serie_inversed) {
        _this.data.sort(function (a, b) {
          return b[_this.ratio_to_use] - a[_this.ratio_to_use];
        });
      } else {
        _this.data.sort(function (a, b) {
          return a[_this.ratio_to_use] - b[_this.ratio_to_use];
        });
      }
      _this.serie_inversed = !_this.serie_inversed;
      x.domain(_this.data.slice(current_range[0], current_range[1]).map(function (ft) {
        return ft.id;
      }));
      x2.domain(_this.data.map(function (ft) {
        return ft.id;
      }));
      // svg_bar.select(".zoom").call(zoom.transform, d3.zoomIdentity
      //     .scale(width / (current_range[1] - current_range[0]))
      //     .translate(-current_range[0], 0));
      _this.update();
      // this.updateMiniBars();
      _this.updateContext(current_range[0], current_range[1]);
      svg_bar.select('.brush_top').call(brush_top.move, null);
      _this.map_elem.removeRectBrush();
      svg_bar.select('.brush_bottom').call(brush_bottom.move, x.range());
    });

    // Prepare the tooltip displayed on mouseover:
    var tooltip = prepareTooltip(svg_bar);

    // Deactivate the brush rect selection on the map + on the chart
    // when he user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', 'none');
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_bar.select('.brush_top').selectAll('.selection, .overlay').style('display', null);
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Create the menu under the chart allowing to use some useful selections
    // (above or below the mean value and above or below my_region)
    var buttons_under_chart = d3.select('#bar_section').append('div').attr('id', 'buttons_under_chart').styles({ padding: '0 10px 10px 10px', 'text-align': 'center' });

    buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_above_mean' }).text('< à la moyenne').on('click', function () {
      return _this.selectBelowMean();
    });

    buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_below_mean' }).text('> à la moyenne').on('click', function () {
      return _this.selectAboveMean();
    });

    buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_above_my_region' }).text('< à ma région').on('click', function () {
      return _this.selectBelowMyRegion();
    });

    buttons_under_chart.append('button').attrs({ class: 'button_blue', id: 'btn_below_my_region' }).text('> à ma région').on('click', function () {
      return _this.selectAboveMyRegion();
    });
  }

  createClass(BarChart1, [{
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.text('Compl\xE9tude : ' + app.completude + '%');
    }
  }, {
    key: 'updateContext',
    value: function updateContext(min, max) {
      this.context.selectAll('.bar').style('fill-opacity', function (_, i) {
        return i >= min && i < max ? '1' : '0.3';
      });
    }
  }, {
    key: 'update',
    value: function update() {
      var _this2 = this;

      displayed = 0;
      var ratio_to_use = this.ratio_to_use;
      var self = this;
      var bar = this.g_bar.selectAll('.bar').data(this.data);

      bar.attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      }).style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      }).style('display', function (d) {
        var to_display = _this2.x(d.id) != null;
        if (to_display) {
          displayed += 1;
          return 'initial';
        }
        return 'none';
      }).on('mouseover', function () {
        svg_bar.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar.select('.tooltip');
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('' + math_round(d[self.ratio_to_use] * 10) / 10);
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });

      bar.enter().insert('rect', '.mean').attr('class', 'bar').attrs(function (d) {
        return {
          x: _this2.x(d.id),
          y: _this2.y(d[ratio_to_use]),
          width: _this2.x.bandwidth(),
          height: height - _this2.y(d[ratio_to_use])
        };
      });

      bar.exit().remove();

      this._focus.select('.axis--y').call(this.yAxis);

      var axis_x = this._focus.select('.axis--x').attr('font-size', function () {
        return displayed > 75 ? 6 : 10;
      }).call(this.xAxis);
      axis_x.selectAll('text').attrs(function () {
        if (displayed > 100) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else if (displayed > 20) {
          return { dx: '-0.8em', dy: '0.15em', transform: 'rotate(-65)' };
        } else {
          return { dx: '0', dy: '0.71em', transform: null };
        }
      }).style('text-anchor', function () {
        return displayed > 20 ? 'end' : 'middle';
      });

      this.updateMiniBars();
    }
  }, {
    key: 'updateMiniBars',
    value: function updateMiniBars() {
      var _this3 = this;

      var ratio_to_use = this.ratio_to_use;
      var mini_bars = this.context.selectAll('.bar').data(this.data);

      mini_bars.attr('x', function (d) {
        return _this3.x2(d.id);
      }).attr('width', this.x2.bandwidth()).attr('y', function (d) {
        return _this3.y2(d[ratio_to_use]);
      }).attr('height', function (d) {
        return height2 - _this3.y2(d[ratio_to_use]);
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });

      mini_bars.enter().insert('rect').attr('class', 'bar').attr('x', function (d) {
        return _this3.x2(d.id);
      }).attr('width', this.x2.bandwidth()).attr('y', function (d) {
        return _this3.y2(d[ratio_to_use]);
      }).attr('height', function (d) {
        return height2 - _this3.y2(d[ratio_to_use]);
      }).style('fill', function (d) {
        return d.id !== app.current_config.my_region ? color_countries : color_highlight;
      });
      mini_bars.exit().remove();
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return app.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'selectAboveMyRegion',
    value: function selectAboveMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      } else {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMyRegion',
    value: function selectBelowMyRegion() {
      var my_rank = this.data.map(function (d, i) {
        return [d.id, i];
      }).filter(function (d) {
        return d[0] === app.current_config.my_region;
      })[0][1];

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [0, my_rank];
        this.data.filter(function (d, i) {
          return i < my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_inf;
        });
      } else {
        current_range_brush = [my_rank, this.data.length];
        this.data.filter(function (d, i) {
          return i > my_rank;
        }).map(function (d) {
          return d.id;
        }).forEach(function (ft) {
          app.colors[ft] = color_sup;
        });
      }
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectAboveMean',
    value: function selectAboveMean() {
      var _this4 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;

      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      if (!this.serie_inversed) {
        current_range_brush = [mean_rank, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this4.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      } else {
        current_range_brush = [0, mean_rank + 1];
        this.data.filter(function (d) {
          return d[ratio_to_use] > _this4.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] > ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'selectBelowMean',
    value: function selectBelowMean() {
      var _this5 = this;

      var mean_rank = getMeanRank(this.mean_value, this.ratio_to_use);
      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      app.colors = {};
      if (!this.serie_inversed) {
        current_range_brush = [0, mean_rank];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_inf;else app.colors[ft.id] = color_sup;
        });
      } else {
        current_range_brush = [mean_rank + 1, this.data.length];
        this.data.filter(function (d) {
          return d[ratio_to_use] < _this5.mean_value;
        }).forEach(function (ft) {
          if (ft[ratio_to_use] < ref_value) app.colors[ft.id] = color_sup;else app.colors[ft.id] = color_inf;
        });
      }
      app.colors[app.current_config.my_region] = color_highlight;
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.update();
      // svg_bar.select('.brush_top').call(this.brush_top.move, current_range_brush.map(d => d * (width / nbFt)));
      this.updateMapRegio();
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var _this6 = this;

      var ratio_to_use = this.ratio_to_use;
      var ref_value = this.ref_value;
      var self = this;
      svg_bar.select('.brush_top').call(self.brush_top.move, null);

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];
      // const transform = svg_map.node().__zoom;
      // topleft[0] = (topleft[0] - transform.x) / transform.k;
      // topleft[1] = (topleft[1] - transform.y) / transform.k;
      // bottomright[0] = (bottomright[0] - transform.x) / transform.k;
      // bottomright[1] = (bottomright[1] - transform.y) / transform.k;


      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (app.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, ref_value, this.serie_inversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self._focus.selectAll('.bar').style('fill', function (d) {
        return app.colors[d.id] || color_countries;
      });
      var ids = Object.keys(app.colors);
      var ranks = ids.map(function (d) {
        return app.current_ids.indexOf(d.id) > -1;
      }).map(function (d) {
        return _this6.current_ranks[d];
      });
      if (ranks.length > 1) {
        var c1 = ranks[0] - 1;
        var c2 = ranks[ranks.length - 1];
        if (c1 < current_range[0] || c2 > current_range[1]) {
          current_range = [ranks[0] - 1, ranks[ranks.length - 1]];
          svg_bar.select('.brush_bottom').call(self.brush_bottom.move, [current_range[0] * (width / nbFt), current_range[1] * (width / nbFt)]);
        }
      } else {
        current_range = [0, this.data.length];
        svg_bar.select('.brush_bottom').call(self.brush_bottom.move, self.x.range());
      }
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (app.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        app.colors[id] = undefined;
        d3.select(parent).attr('fill', color_countries);
      } else {
        var color = comp(d.properties[this.ratio_to_use], this.ref_value, this.serie_inversed);
        app.colors[id] = color;
        d3.select(parent).attr('fill', color);
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.ref_value = this.data.filter(function (ft) {
        return ft.id === app.current_config.my_region;
      })[0][this.ratio_to_use];
      this.update();
      // this.updateMiniBars();
      this.updateContext(0, this.data.length);
      this.updateMapRegio();
      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x.range());
      this.map_elem.removeRectBrush();
      this.map_elem.updateLegend();
    }
  }, {
    key: 'updateMeanValue',
    value: function updateMeanValue() {
      var y = this.y;
      var ratio_to_use = this.ratio_to_use;
      var grp_mean = this._focus.select('.mean');
      this.mean_value = d3.mean(this.data.map(function (d) {
        return d[ratio_to_use];
      }));
      grp_mean.select('text').attr('y', y(this.mean_value) + 20).text('Valeur moyenne : ' + Math.round(this.mean_value * 10) / 10);
      grp_mean.select('.mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
      grp_mean.select('.transp_mean_line').attrs({ y1: y(this.mean_value), y2: y(this.mean_value) });
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var ratio_to_use = this.ratio_to_use;
      this.data = app.current_data.slice();
      if (this.serie_inversed) {
        this.data.sort(function (a, b) {
          return b[ratio_to_use] - a[ratio_to_use];
        });
      } else {
        this.data.sort(function (a, b) {
          return a[ratio_to_use] - b[ratio_to_use];
        });
      }
      nbFt = this.data.length;
      this.ref_value = this.data.filter(function (ft) {
        return ft.id === app.current_config.my_region;
      })[0][ratio_to_use];
      this.x.domain(this.data.map(function (ft) {
        return ft.id;
      }));
      var min_serie = d3.min(this.data, function (d) {
        return d[ratio_to_use];
      });
      var max_serie = d3.max(this.data, function (d) {
        return d[ratio_to_use];
      });
      var offset_y = (max_serie - min_serie) / 20;
      this.y.domain([min_serie - offset_y, max_serie]);
      this.x2.domain(this.x.domain());
      this.y2.domain(this.y.domain());
      this.updateMeanValue();
      this.update();
      this.updateContext(0, this.data.length);

      svg_bar.select('.brush_bottom').call(this.brush_bottom.move, this.x2.range());
      this.map_elem.removeRectBrush();
      app.colors = {};
      app.colors[app.current_config.my_region] = color_highlight;
      this.updateMapRegio();
    }
  }, {
    key: 'addVariable',
    value: function addVariable(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
    }
  }, {
    key: 'remove',
    value: function remove() {
      this._focus.remove();
      this.context.remove();
      this.selec_var.remove();
      this.map_elem.unbindBrush();
      this.map_elem = null;
      svg_bar.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
    }
  }]);
  return BarChart1;
}();

var svg_bar$1 = d3.select('#svg_bar');
var margin$1 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$1 = +svg_bar$1.attr('width') - margin$1.left - margin$1.right;
var height$1 = +svg_bar$1.attr('height') - margin$1.top - margin$1.bottom;

var BubbleChart1 = function () {
  function BubbleChart1(ref_data) {
    classCallCheck(this, BubbleChart1);

    var self = this;
    var available_ratios = app.current_config.ratio;
    var available_nums = app.current_config.num;
    var ratio_to_use = available_ratios[0];
    var stock_to_use = available_nums[0];
    this.ratio_to_use = ratio_to_use;
    this.stock_to_use = stock_to_use;

    this.data = ref_data.slice().sort(function (a, b) {
      return b[stock_to_use] - a[stock_to_use];
    });
    this.highlight_selection = [];
    var draw_group = svg_bar$1.append('g').attr('transform', 'translate(' + margin$1.left + ', ' + margin$1.top + ')');
    draw_group.append('g').attrs({ class: 'axis axis--x', transform: 'translate(0, ' + height$1 / 2 + ')' });
    this.draw_group = draw_group;

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$1);

    // Create the "completude" text:
    this.completude = svg_bar$1.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + app.completude + '%');

    // Create the section containing the input element allowing to chose
    // how many "close" regions we want to highlight.
    var selection_close = d3.select(svg_bar$1.node().parentElement).append('div').attr('id', 'menu_selection').styles({ top: '-100px', 'margin-left': '30px', position: 'relative' }).append('p');

    selection_close.append('span').property('value', 'close').attrs({ value: 'close', class: 'type_selection square checked' });
    selection_close.append('span').attrs({ class: 'label_chk' }).html('Les');
    selection_close.append('input').attrs({ class: 'nb_select', type: 'number' }).property('value', 5);
    selection_close.append('span').attrs({ class: 'label_chk' }).html('régions les plus proches');
    this.my_region_value = this.data.filter(function (d) {
      return d.id === app.current_config.my_region;
    }).map(function (d) {
      return d[ratio_to_use];
    })[0];
    this.bindMenu();
    this.applySelection(5, 'close');

    //
    var header_bar_section = d3.select('#header_chart');

    this.selec_var = header_bar_section.insert('select', '#img_table').attrs({ class: 'title_variable' }).styles({
      'font-family': '\'Signika\', sans-serif',
      'font-weight': '800',
      'font-size': '14px',
      'margin-top': '12px',
      'margin-left': '40px',
      float: 'left'
    });

    for (var i = 0, len_i = available_ratios.length; i < len_i; i++) {
      this.selec_var.append('option').attr('value', available_ratios[i]).text(app.current_config.ratio_pretty_name[i]);
    }

    this.selec_var.on('change', function () {
      var code_variable = this.value;
      self.changeVariable(code_variable);
      self.changeStudyZone();
      self.updateCompletude();
    });

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };
  }

  createClass(BubbleChart1, [{
    key: 'applySelection',
    value: function applySelection(nb) {
      var type_selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'close';

      app.colors = {};
      if (nb > 0) {
        var my_region_value = this.my_region_value;
        var ratio_to_use = this.ratio_to_use;

        this.highlight_selection = this.data.map(function (d) {
          return {
            dist: math_abs(d[ratio_to_use] - my_region_value),
            ratio: d[ratio_to_use],
            id: d.id };
        });
        if (type_selection === 'close') {
          this.highlight_selection.sort(function (a, b) {
            return a.dist - b.dist;
          });
          this.highlight_selection = this.highlight_selection.slice(1, nb + 1);
        } else if (type_selection === 'distant') {
          this.highlight_selection.sort(function (a, b) {
            return b.dist - a.dist;
          });
          this.highlight_selection = this.highlight_selection.slice(0, nb);
        }
        this.highlight_selection.forEach(function (elem) {
          app.colors[elem.id] = elem.ratio < my_region_value ? color_inf : color_sup;
        });
      } else {
        this.highlight_selection = [];
      }
      app.colors[app.current_config.my_region] = color_highlight;
      this.update();
      this.updateMapRegio();
    }
  }, {
    key: 'update',
    value: function update() {
      var self = this;
      var data = self.data;
      var highlight_selection = self.highlight_selection;
      var my_region_value = self.my_region_value;
      var ratio_to_use = self.ratio_to_use;
      var stock_to_use = self.stock_to_use;

      var _min = void 0;
      var _max = void 0;
      if (highlight_selection.length > 0) {
        var dist_min = my_region_value - d3.min(highlight_selection, function (d) {
          return d.ratio;
        });
        var dist_max = d3.max(highlight_selection, function (d) {
          return d.ratio;
        }) - my_region_value;
        var dist_axis = Math.max(dist_min, dist_max);
        var margin_min_max = math_round(dist_axis) / 8;
        _min = my_region_value - dist_axis - margin_min_max;
        _max = my_region_value + dist_axis + margin_min_max;
      } else {
        var _dist_min = my_region_value - d3.min(data, function (d) {
          return d[ratio_to_use];
        });
        var _dist_max = d3.max(data, function (d) {
          return d[ratio_to_use];
        }) - my_region_value;
        var _dist_axis = Math.max(_dist_min, _dist_max);
        var _margin_min_max = math_round(_dist_axis) / 8;
        _min = my_region_value - _dist_axis - _margin_min_max;
        _max = my_region_value + _dist_axis + _margin_min_max;
      }

      var prop_sizer = new PropSizer(d3.max(data, function (d) {
        return d[stock_to_use];
      }), 30);
      var xScale = d3.scaleLinear().domain([_min, _max]).range([0, width$1]);

      this.draw_group.select('g.axis--x').transition().duration(225).call(d3.axisBottom(xScale));

      var bubbles = this.draw_group.selectAll('.bubble').data(data, function (d) {
        return d.id;
      });

      bubbles.transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries
        };
      });

      bubbles.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || color_countries
        };
      }).transition().duration(225).attrs(function (d) {
        var x_value = xScale(d[ratio_to_use]);
        if (x_value > width$1) x_value = width$1 + 200;else if (x_value < 0) x_value = -200;
        return {
          class: 'bubble',
          cx: x_value,
          cy: height$1 / 2,
          r: prop_sizer.scale(d[stock_to_use])
        };
      });

      bubbles.exit().transition().duration(225).remove();

      this.draw_group.selectAll('.bubble').on('mouseover', function () {
        svg_bar$1.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar$1.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar$1.select('.tooltip');
        var _ratio_to_use = self.ratio_to_use;
        var _stock_to_use = self.stock_to_use;
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('Ratio: ' + Math.round(d[_ratio_to_use] * 10) / 10);
        tooltip.select('text.value_feature2').text('Stock: ' + Math.round(d[_stock_to_use] * 10) / 10);
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.text('Compl\xE9tude : ' + app.completude + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return app.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      var rect = new Rect(topleft, bottomright);
      var ratio_to_use = this.ratio_to_use;
      app.colors = {};
      self.highlight_selection = [];
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (app.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value = d.properties[ratio_to_use];
            var color = comp(value, self.my_region_value, this.serie_inversed);
            app.colors[id] = color;
            self.highlight_selection.push({
              id: id,
              ratio: value,
              dist: math_abs(value - self.my_region_value)
            });
            return color;
          }
        }
        return color_countries;
      });
      self.update();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (app.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:
        var id_to_remove = this.highlight_selection.map(function (ft, i) {
          return ft.id === id ? i : null;
        }).filter(function (ft) {
          return ft;
        });
        this.highlight_selection.splice(id_to_remove, 1);
        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value = d.properties[this.ratio_to_use];
        var color = comp(value, this.my_region_value, this.serie_inversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
        this.highlight_selection.push({
          id: id,
          ratio: value,
          dist: math_abs(value - this.my_region_value)
        });
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.map_elem.removeRectBrush();
      this.map_elem.updateLegend();
      this.my_region_value = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.ratio_to_use];
      this.applySelection(this.highlight_selection.length, 'close');
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this = this;

      this.map_elem.removeRectBrush();
      this.map_elem.updateLegend();
      this.data = app.current_data.slice().sort(function (a, b) {
        return b[_this.stock_to_use] - a[_this.stock_to_use];
      });
      this.my_region_value = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.ratio_to_use];
      var temp = this.highlight_selection.length;
      this.highlight_selection = [];
      this.applySelection(temp, 'close');
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.stock_to_use = variables.filter(function (d) {
        return d.ratio === code_variable;
      })[0].num;
    }
  }, {
    key: 'addVariable',
    value: function addVariable(code_variable, name_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.append('option').attr('value', code_variable).text(name_variable);

      // And use it immediatly:
      this.selec_var.node().value = code_variable;
      this.selec_var.dispatch('change');
    }
  }, {
    key: 'removeVariable',
    value: function removeVariable(code_variable) {
      // Add the variable to the input element allowing to choose variables:
      this.selec_var.select('option[value=' + code_variable + ']').remove();
      if (this.ratio_to_use === code_variable) {
        this.selec_var.node().value = this.selec_var.select('option').node().value;
        this.selec_var.dispatch('change');
      }
    }
  }, {
    key: 'bindMenu',
    value: function bindMenu() {
      var self = this;
      var menu = d3.select('#menu_selection');
      var applychange = function applychange() {
        self.map_elem.removeRectBrush();
        var type = this.parentElement.querySelector('.type_selection').value;
        var value = +this.value;
        if (!(value > -1)) {
          this.value = 5;
          value = 5;
        }
        self.applySelection(value, type);
      };
      menu.select('.nb_select').on('change', applychange);
      menu.select('.nb_select').on('wheel', applychange);
      menu.select('.nb_select').on('keyup', applychange);
    }
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrush();
      this.map_elem = null;
      this.selec_var.remove();
      d3.select('#menu_selection').remove();
      svg_bar$1.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
      d3.select('#menu_selection').select('.nb_select').dispatch('change');
    }
  }]);
  return BubbleChart1;
}();

var svg_bar$2 = d3.select('#svg_bar');
var margin$2 = { top: 20, right: 20, bottom: 40, left: 30 };

var width$2 = +svg_bar$2.attr('width') - margin$2.left - margin$2.right;
var height$2 = +svg_bar$2.attr('height') - margin$2.top - margin$2.bottom;

var ScatterPlot2 = function () {
  function ScatterPlot2(ref_data) {
    var _this = this;

    classCallCheck(this, ScatterPlot2);

    var self = this;
    this.variable1 = app.current_config.ratio[0];
    this.variable2 = app.current_config.ratio[1];
    this.rank_variable1 = 'pr_' + this.variable1;
    this.rank_variable2 = 'pr_' + this.variable2;
    this.pretty_name1 = app.current_config.ratio_pretty_name[0];
    this.pretty_name2 = app.current_config.ratio_pretty_name[1];
    this.data = ref_data.map(function (d) {
      var res = { id: d.id };
      res[_this.variable1] = d[_this.variable1];
      res[_this.variable2] = d[_this.variable2];
      return res;
    });
    this.nbFt = this.data.length;
    computePercentileRank(this.data, this.variable1, this.rank_variable1);
    computePercentileRank(this.data, this.variable2, this.rank_variable2);

    this.x = d3.scaleLinear().range([0, width$2]).nice();
    this.y = d3.scaleLinear().range([height$2, 0]);
    this.xAxis = d3.axisBottom(this.x).ticks(12);
    this.yAxis = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);
    this.xAxis2 = d3.axisBottom(this.x).ticks(12);
    this.yAxis2 = d3.axisLeft(this.y).ticks(12 * height$2 / width$2);

    this.xInversed = false;
    this.yInversed = false;
    this.ref_value1 = this.data.filter(function (d) {
      return d.id === app.current_config.my_region;
    })[0][this.variable1];
    this.ref_value2 = this.data.filter(function (d) {
      return d.id === app.current_config.my_region;
    })[0][this.variable2];
    // const zoom = d3.zoom()
    //   .scaleExtent([1, 5])
    //   .translateExtent([[0, 0], [width, height]])
    //   .on('zoom', () => { this.zoomed(d3.event.transform); });

    this.plot = svg_bar$2.append('g').attr('transform', 'translate(' + [margin$2.left, margin$2.top] + ')');

    this.plot.append('defs').append('svg:clipPath').attr('id', 'clip').append('svg:rect').attrs({
      width: width$2,
      height: height$2,
      x: 0,
      y: 0
    });

    this.scatter = this.plot.append('g').attr('id', 'scatterplot').attr('clip-path', 'url(#clip)');

    // const underlying_rect = this.scatter
    //      .append('rect')
    //      .attrs({ width, height, x: 0, y: 0 })
    //      .style('fill', 'transparent')
    //      .call(zoom);

    this.x.domain(d3.extent(this.data, function (d) {
      return d[_this.rank_variable1];
    })).nice();
    this.y.domain(d3.extent(this.data, function (d) {
      return d[_this.rank_variable2];
    })).nice();
    this.mean_variable1 = _getPR(d3.mean(this.data.map(function (d) {
      return d[_this.variable1];
    })), this.data.map(function (d) {
      return d[_this.variable1];
    }));
    this.mean_variable2 = _getPR(d3.mean(this.data.map(function (d) {
      return d[_this.variable2];
    })), this.data.map(function (d) {
      return d[_this.variable2];
    }));

    // underlying_rect.on('dblclick.zoom', () => {
    //   this.zoomed(d3.zoomTransform({ x: 0, y: 0, k: 1 }));
    // });

    this.makeGrid();

    var groupe_line_mean = this.plot.append('g').attr('clip-path', 'url(#clip)').attr('class', 'mean');
    groupe_line_mean.append('line').attr('clip-path', 'url(#clip)').attrs({
      x1: this.x(this.mean_variable1),
      x2: this.x(this.mean_variable1),
      y1: 0,
      y2: width$2,
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    }).style('stroke', 'red');
    groupe_line_mean.append('line').style('stroke', 'red').attrs({
      x1: 0,
      x2: width$2,
      y1: this.y(this.mean_variable2),
      y2: this.y(this.mean_variable2),
      'clip-path': 'url(#clip)',
      'stroke-dasharray': '10, 5',
      'stroke-width': '2px'
    });

    this.plot.append('g').attrs({
      class: 'x axis', id: 'axis--x', transform: 'translate(0, ' + height$2 + ')'
    }).call(this.xAxis);

    this.plot.append('g').attrs({ class: 'y axis', id: 'axis--y' }).call(this.yAxis);

    svg_bar$2.append('text').attrs({
      id: 'title-axis-x',
      x: margin$2.left + width$2 / 2,
      y: margin$2.top + height$2 + margin$2.bottom / 2 + 5
    }).styles({ 'font-family': 'sans-serif', 'font-size': '12px', 'text-anchor': 'middle' }).text(this.variable1);

    svg_bar$2.append('image').attrs({
      x: margin$2.left + width$2 / 2 - 20 - svg_bar$2.select('#title-axis-x').node().getBoundingClientRect().width / 2,
      y: margin$2.top + height$2 + margin$2.bottom / 2 - 7.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_blue.png',
      id: 'img_reverse_x'
    }).on('click', function () {
      _this.xInversed = !_this.xInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        self.data[i][self.rank_variable1] = 100 - self.data[i][self.rank_variable1];
      }
      _this.scatter.selectAll('circle').transition().attr('cx', function (d) {
        return self.x(d[self.rank_variable1]);
      });
    });
    svg_bar$2.append('text').attr('id', 'title-axis-y').attr('x', margin$2.left / 2).attr('y', margin$2.top + height$2 / 2).attr('transform', 'rotate(-90, ' + margin$2.left / 2 + ', ' + (margin$2.top + height$2 / 2) + ')').style('text-anchor', 'middle').styles({ 'font-family': 'sans-serif', 'font-size': '12px' }).text(this.variable2);

    svg_bar$2.append('image').attrs({
      x: margin$2.left / 2 - 15,
      y: margin$2.top + height$2 / 2 + svg_bar$2.select('#title-axis-y').node().getBoundingClientRect().height / 2 + 7.5,
      width: 15,
      height: 15,
      'xlink:href': 'img/reverse_blue.png',
      id: 'img_reverse_y'
    }).on('click', function () {
      _this.yInversed = !_this.yInversed;
      for (var i = 0; i < _this.nbFt; i++) {
        _this.data[i][_this.rank_variable2] = 100 - _this.data[i][_this.rank_variable2];
      }
      _this.update();
      // this.scatter.selectAll('circle')
      //   .transition()
      //   .attr('cy', d => this.y(d[this.rank_variable2]));
    });

    // Prepare the tooltip displayed on mouseover:
    prepareTooltip(svg_bar$2);

    // Create the "completude" text:
    this.completude = svg_bar$2.append('text').attrs({ id: 'chart_completude', x: 60, y: 40 }).styles({ 'font-family': '\'Signika\', sans-serif' }).text('Compl\xE9tude : ' + app.completude + '%');

    // Deactivate the rect brush selection on the map
    // while the user press the Ctrl key:
    document.onkeydown = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', 'none');
      }
    };
    // Reactivate the rect brush selection on the map
    // when the user doesn't press the Ctrl key anymore
    document.onkeyup = function (event) {
      if (event && event.key === 'Control') {
        svg_map.select('.brush_map').selectAll('.selection, .overlay').style('display', null);
      }
    };

    this.update();
  }

  createClass(ScatterPlot2, [{
    key: 'makeGrid',
    value: function makeGrid() {
      this.plot.insert('g', '#scatterplot').attrs({
        class: 'grid grid-x', transform: 'translate(0, ' + height$2 + ')'
      }).call(this.xAxis2.tickSize(-height$2).tickFormat(''));
      this.plot.insert('g', '#scatterplot').attr('class', 'grid grid-y').call(this.yAxis2.tickSize(-width$2).tickFormat(''));
      this.plot.selectAll('.grid').selectAll('line').attr('stroke', 'lightgray');
    }
  }, {
    key: 'update',
    value: function update() {
      var self = this;
      var data = self.data;
      var rank_variable1 = this.rank_variable1;
      var rank_variable2 = this.rank_variable2;
      var x = this.x;
      var y = this.y;
      var default_color = 'lightgray';
      var dots = this.scatter.selectAll('.dot').data(data, function (d) {
        return d.id;
      });

      dots.transition().duration(225).attrs(function (d) {
        return {
          r: 5,
          cx: x(d[rank_variable1]),
          cy: y(d[rank_variable2]),
          opacity: 0.6
        };
      }).styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      });

      dots.enter().insert('circle').styles(function (d) {
        return {
          fill: app.colors[d.id] || default_color
        };
      }).transition().duration(225).attrs(function (d) {
        return {
          r: 5,
          cx: x(d[rank_variable1]),
          cy: y(d[rank_variable2]),
          opacity: 0.6,
          class: 'dot'
        };
      });

      dots.exit().transition().duration(225).remove();

      this.scatter.selectAll('.dot').on('mouseover', function () {
        svg_bar$2.select('.tooltip').style('display', null);
      }).on('mouseout', function () {
        svg_bar$2.select('.tooltip').style('display', 'none');
      }).on('mousemove', function (d) {
        var tooltip = svg_bar$2.select('.tooltip');
        var _var1 = self.variable1;
        var _var2 = self.variable2;
        tooltip.select('text.id_feature').text('' + d.id);
        tooltip.select('text.value_feature1').text('Ratio: ' + Math.round(d[_var1] * 10) / 10);
        tooltip.select('text.value_feature2').text('Stock: ' + Math.round(d[_var2] * 10) / 10);
        tooltip.attr('transform', 'translate(' + [d3.mouse(this)[0] - 5, d3.mouse(this)[1] - 45] + ')');
      });
    }
  }, {
    key: 'updateCompletude',
    value: function updateCompletude() {
      this.completude.text('Compl\xE9tude : ' + app.completude + '%');
    }
  }, {
    key: 'updateMapRegio',
    value: function updateMapRegio() {
      if (!this.map_elem) return;
      this.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        return app.current_ids.indexOf(d.properties[app.current_config.id_field_geom]) > -1 ? app.colors[d.properties[app.current_config.id_field_geom]] || color_countries : color_disabled;
      });
    }
  }, {
    key: 'handle_brush_map',
    value: function handle_brush_map(event) {
      var self = this;

      var _event$selection = slicedToArray(event.selection, 2),
          topleft = _event$selection[0],
          bottomright = _event$selection[1];

      var rect = new Rect(topleft, bottomright);
      app.colors = {};
      self.map_elem.target_layer.selectAll('path').attr('fill', function (d) {
        var id = d.properties[app.current_config.id_field_geom];
        if (id === app.current_config.my_region) {
          app.colors[id] = color_highlight;
          return color_highlight;
        } else if (app.current_ids.indexOf(id) < 0) {
          return color_disabled;
        }
        if (!this._pts) {
          this._pts = svgPathToCoords(this.getAttribute('d'), app.type_path);
        }
        var pts = this._pts;
        for (var ix = 0, nb_pts = pts.length; ix < nb_pts; ix++) {
          if (rect.contains(pts[ix])) {
            var value1 = d.properties[self.variable1];
            var value2 = d.properties[self.variable2];
            var color = comp2(value1, value2, self.ref_value1, self.ref_value2, self.xInversed, self.yInversed);
            app.colors[id] = color;
            return color;
          }
        }
        return color_countries;
      });
      self.update();
    }
  }, {
    key: 'handleClickMap',
    value: function handleClickMap(d, parent) {
      var id = d.properties[app.current_config.id_field_geom];
      if (app.current_ids.indexOf(id) < 0 || id === app.current_config.my_region) return;
      if (app.colors[id] !== undefined) {
        // Remove the clicked feature from the colored selection on the chart:


        // Change its color in the global colors object:
        app.colors[id] = undefined;
        // Change the color on the map:
        d3.select(parent).attr('fill', color_countries);
      } else {
        var value = d.properties[this.ratio_to_use];
        var color = comp(value, this.my_region_value, this.serie_inversed);
        app.colors[id] = color;
        // Change the color on the map:
        d3.select(parent).attr('fill', color);
        // Add the clicked feature on the colored selection on the chart:
      }
      this.update();
    }
  }, {
    key: 'updateChangeRegion',
    value: function updateChangeRegion() {
      this.ref_value1 = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.variable1];
      this.ref_value2 = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.variable2];
      this.map_elem.removeRectBrush();
      this.map_elem.updateLegend();
      this.map_elem.resetColors();
      this.update();
    }
  }, {
    key: 'changeStudyZone',
    value: function changeStudyZone() {
      var _this2 = this;

      this.map_elem.removeRectBrush();
      this.map_elem.updateLegend();
      this.data = app.current_data.slice().sort(function (a, b) {
        return b[_this2.stock_to_use] - a[_this2.stock_to_use];
      });
      this.ref_value1 = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.variable1];
      this.ref_value2 = this.data.filter(function (d) {
        return d.id === app.current_config.my_region;
      })[0][this.variable2];
      this.update();
    }
  }, {
    key: 'changeVariable',
    value: function changeVariable(code_variable) {
      this.ratio_to_use = code_variable;
      this.stock_to_use = variables.filter(function (d) {
        return d.ratio === code_variable;
      })[0].num;
    }
  }, {
    key: 'addVariable',
    value: function addVariable(code_variable, name_variable) {}
  }, {
    key: 'removeVariable',
    value: function removeVariable(code_variable) {}
  }, {
    key: 'remove',
    value: function remove() {
      this.map_elem.unbindBrush();
      this.map_elem = null;
      svg_bar$2.html('');
    }
  }, {
    key: 'bindMap',
    value: function bindMap(map_elem) {
      this.map_elem = map_elem;
    }
  }]);
  return ScatterPlot2;
}();

browser$1('app:log');

var variables = [{ ratio: 'PC_CHOM_1524_2015', num: 'CHOM_1524_2015', denum: 'ACT_1524_2015', name: 'Taux de chomage des jeunes (2015)', group: 'Pauvreté / Exclusion sociale' }, { ratio: 'PC_CHOM_1574_2015', num: 'CHOM_1574_2015', denum: 'ACT_1574_2015', name: 'Taux de chomage (2015)', group: 'Pauvreté / Exclusion sociale' }, { ratio: 'PC_CHOM_LONG_2016', num: 'CHOM_LONG_2016', denum: 'ACT_LONG_2016', name: 'Taux de chômage de longue durée (2016)', group: 'Pauvreté / Exclusion sociale' }, { ratio: 'PC_REV_2014', num: 'REV_2014', denum: 'MEN_2014', name: 'Revenu des ménages (2014)', group: 'Pauvreté / Exclusion sociale' }, { ratio: 'PC_BREV_HAB_2011', num: 'BREV_2011', denum: 'POP_BREV_2011', name: 'Productions innovantes (2011)', group: 'Activité / Innovation' }, { ratio: 'PC_RD_EMP_2013', num: 'RD_EMP_2013', denum: 'POP_RD_EMP_2013', name: 'Part de l\'emploi en R&D (2013)', group: 'Activité / Innovation' }, { ratio: 'PC_PIB_HAB_2014', num: 'PC_PIB_HAB_2014', denum: 'POP_PIB_2014', name: 'PIB par habitant (euros)(2014)', group: 'Activité / Innovation' }, { ratio: 'PC_ARTIF_AREA_2015', num: 'ARTIF_AREA_2015', denum: 'LC_AREA_2015', name: 'Part des surfaces artificialisées (2015)', group: 'Environnement / Transition écologique' }];

var study_zones = [{ id: 'no_filter', name: 'UE28' }, { id: 'filter_FR', name: 'Filtre national (France)' }, { id: 'filter_param2', name: 'Espace de comparaison n°2' }];

var territorial_mesh = [{ id: 'NUTS1', name: 'NUTS1' }, { id: 'NUTS12stat', name: 'NUTS1/2 (statistique)' }];

var app = {
  colors: {},
  current_data: [],
  full_dataset: [],
  current_ids: []
};

function setDefaultConfig() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'PC_CHOM_1524_2015';
  // }, level = 'NUTS1') {
  app.current_config = {
    id_field: 'geo',
    name_field: 'Nom',
    id_field_geom: 'NUTS1_2016',
    num: ['CHOM_1524_2015'],
    denum: ['ACT_1524_2015'],
    ratio: [variable],
    ratio_pretty_name: ['Taux de chômage des jeunes (2015)'],
    current_level: 1,
    my_region: code,
    my_region_pretty_name: app.feature_names[code]
  };
  app.colors[app.current_config.my_region] = color_highlight;
}

function setDefaultConfigMenu() {
  var code = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'FRE';
  var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'PC_CHOM_1524_2015';
  var level = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'NUTS1';

  document.querySelector('.target_region.square[value="' + code + '"]').classList.add('checked');
  document.querySelector('.target_variable.small_square[value="' + variable + '"]').classList.add('checked');
  document.querySelector('.filter_v.square[filter-value="no_filter"]').classList.add('checked');
  document.querySelector('.territ_level.square[value="' + level + '"]').classList.add('checked');
}

function resetColors() {
  var ids = app.current_ids;
  var my_region = app.current_config.my_region;
  app.colors = {};
  for (var i = 0, len_i = ids.length; i < len_i; i++) {
    app.colors[ids[i]] = ids[i] === my_region ? color_highlight : color_countries;
  }
}

/**
* Create handlers for user event on the left menu and on the map for charts only
* allowing to use 1 variable.
*
* @param {Object} chart - The chart object.
* @param {Object} map_elem - The map object.
* @return {void}
*
*/
function bindUI_chart_1v(chart, map_elem) {
  d3.selectAll('span.filter_v').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.filter_v').attr('class', 'filter_v square');
      this.classList.add('checked');
      var filter_type = this.getAttribute('filter-value');
      applyFilter(app, filter_type);
      makeTable(app.current_data, app.current_config);
      chart.changeStudyZone();
      chart.updateCompletude();
    }
  });

  d3.selectAll('span.target_region').on('click', function () {
    if (!this.classList.contains('checked')) {
      d3.selectAll('span.target_region').attr('class', 'target_region square');
      this.classList.add('checked');
      var id_region = this.getAttribute('value');
      changeRegion(app, id_region);
      chart.updateChangeRegion();
    }
  });

  d3.selectAll('span.target_variable').on('click', function () {
    if (!this.classList.contains('checked')) {
      this.classList.add('checked');
      var code_variable = this.getAttribute('value');
      var name_variable = variables.filter(function (d) {
        return d.ratio === code_variable;
      })[0].name;
      addVariable(app, code_variable);
      makeTable(app.current_data, app.current_config);
      chart.addVariable(code_variable, name_variable);
    } else {
      var last_one = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
        return !!elem.classList.contains('checked');
      }).length === 1;
      if (last_one) {
        return;
      }
      this.classList.remove('checked');
      var _code_variable = this.getAttribute('value');
      removeVariable(app, _code_variable);
      makeTable(app.current_data, app.current_config);
      chart.removeVariable(_code_variable);
    }
    var nb_var = Array.prototype.slice.call(document.querySelectorAll('span.target_variable')).filter(function (elem) {
      return !!elem.classList.contains('checked');
    }).length;
    // Allow all kind of vizu with 1 variable:
    d3.selectAll('.chart_t1').attr('class', 'type_chart chart_t1');
    if (nb_var === 2) {
      // Allow all kind of vizu with 2 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3 disabled');
    }
    if (nb_var > 2) {
      // Allow all kind of vizu with 3 variables:
      d3.selectAll('.chart_t2').attr('class', 'type_chart chart_t2');
      d3.selectAll('.chart_t3').attr('class', 'type_chart chart_t3');
    }
  });

  d3.selectAll('span.label_chk').on('click', function () {
    this.previousSibling.click();
  });

  var header_map_section = d3.select('#map_section > #header_map');

  header_map_section.select('#img_rect_selec').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      // this.style.filter = '';
      // document.getElementById('img_map_zoom').style.filter = 'opacity(25%)';
      document.getElementById('img_map_zoom').classList.remove('active');
      // document.getElementById('img_map_select').style.filter = 'opacity(25%)';
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.on('.zoom', null);
      svg_map.select('.brush_map').style('display', null);
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_zoom').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      // this.style.filter = '';
      // document.getElementById('img_rect_selec').style.filter = 'opacity(25%)';
      document.getElementById('img_rect_selec').classList.remove('active');
      // document.getElementById('img_map_select').style.filter = 'opacity(25%)';
      document.getElementById('img_map_select').classList.remove('active');
      svg_map.call(map_elem.zoom_map);
      svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
      svg_map.select('.brush_map').style('display', 'none');
      map_elem.target_layer.selectAll('path').on('click', null);
    }
  });

  header_map_section.select('#img_map_select').on('click', function () {
    if (!this.classList.contains('active')) {
      this.classList.add('active');
      document.getElementById('img_rect_selec').classList.remove('active');
      document.getElementById('img_map_zoom').classList.remove('active');
      svg_map.on('.zoom', null);
      svg_map.select('.brush_map').call(map_elem.brush_map.move, null);
      svg_map.select('.brush_map').style('display', 'none');
      map_elem.target_layer.selectAll('path').on('click', function (d) {
        chart.handleClickMap(d, this);
      });
    }
  });

  var header_table_section = d3.select('#map_section').insert('p', 'svg').attr('id', 'header_table').styles({ display: 'none', margin: 'auto', 'text-align': 'right' });

  header_table_section.append('span').attr('class', 'button_blue').html('CSV').on('click', function () {
    var content = ['id,Numérateur,Dénominateur,Ratio,Rang\r\n', app.current_data.map(function (d) {
      return [d.id, d.num, d.denum, d.ratio, d.rang].join(',');
    }).join('\r\n')].join('');
    var elem = document.createElement('a');
    elem.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(content));
    elem.setAttribute('download', 'table.csv');
    elem.style.display = 'none';
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
  });
  bindTopButtons(chart, map_elem);
}

/**
* Function to handle click on the top menu, in order to choose
* the kind of availables representation
*
*
*
*/
function bindTopButtons(chart, map_elem) {
  d3.selectAll('.type_chart').on('click', function () {
    if (this.classList.contains('disabled')) return;
    chart.remove();
    chart = null; // eslint-disable-line no-param-reassign
    unbindUI();
    map_elem.resetZoom();
    app.colors = {};
    resetColors();
    map_elem.resetColors();
    var value = this.getAttribute('value');
    if (value === 'BarChart1') {
      console.log('BarChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BarChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart_1v(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    } else if (value === 'BubbleChart1') {
      console.log('BubbleChart1');
      makeTable(app.current_data, app.current_config);
      chart = new BubbleChart1(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart_1v(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    } else if (value === 'ScatterPlot2') {
      console.log('ScatterPlot2');
      makeTable(app.current_data, app.current_config);
      chart = new ScatterPlot2(app.current_data); // eslint-disable-line no-param-reassign
      bindUI_chart_1v(chart, map_elem);
      map_elem.bindBrush(chart);
      chart.bindMap(map_elem);
    }
  });
}

function loadData() {
  d3.queue(4).defer(d3.csv, 'data/REGIOVIZ_DATA_aggregated.csv').defer(d3.json, 'data/cget-nuts1-3035.geojson').defer(d3.json, 'data/countries3035.geojson').defer(d3.json, 'data/remote3035.geojson').defer(d3.json, 'data/template3035.geojson').defer(d3.json, 'data/sea_boxes.geojson').awaitAll(function (error, results) {
    if (error) throw error;

    var _results = slicedToArray(results, 6),
        full_dataset = _results[0],
        nuts1 = _results[1],
        countries = _results[2],
        remote = _results[3],
        template = _results[4],
        seaboxes = _results[5];

    prepare_dataset(full_dataset, app);
    setDefaultConfig('FRB', 'PC_CHOM_1524_2015', 'NUTS1');
    var features_menu = full_dataset.filter(function (ft) {
      return ft.geo.indexOf('FR') > -1 && +ft.level === app.current_config.current_level;
    });
    createMenu(features_menu, variables, study_zones, territorial_mesh);
    makeTopMenu();
    makeHeaderChart();
    setDefaultConfigMenu('FRB', 'PC_CHOM_1524_2015', 'NUTS1');
    filter_no_empty(app);
    var map_elem = new MapSelect(nuts1, countries, remote, template, seaboxes);
    var chart = new BarChart1(app.current_data);
    makeTable(app.current_data, app.current_config);
    makeHeaderMapSection();
    makeSourceSection();
    makeMapLegend();
    bindUI_chart_1v(chart, map_elem);
    chart.bindMap(map_elem);
    map_elem.bindBrush(chart);
  });
}

loadData();

exports.variables = variables;
exports.app = app;
exports.bindTopButtons = bindTopButtons;

}((this.App = this.App || {})));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
